/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:33:55 GMT 2018
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Member;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Edge;
import org.objectweb.asm.jip.Frame;
import org.objectweb.asm.jip.Item;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodVisitor;
import org.objectweb.asm.jip.MethodWriter;
import org.objectweb.asm.jip.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)47;
      // Undeclared exception!
      try { 
        MethodWriter.readInt(byteArray0, 2851);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2851
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort((byte[]) null, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[2];
      MethodWriter.getNewOffset(intArray0, intArray1, 59, (-1395));
      ClassWriter classWriter0 = new ClassWriter(2714);
      Frame frame0 = new Frame();
      int[] intArray2 = new int[4];
      intArray2[0] = 2714;
      intArray2[1] = (-1395);
      Label label0 = frame0.owner;
      // Undeclared exception!
      try { 
        MethodWriter.getNewOffset(intArray1, intArray2, (Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 581, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      MethodWriter methodWriter1 = null;
      try {
        methodWriter1 = new MethodWriter(classWriter0, 86, "<init>", "<init>", "Ax?9a)_", stringArray0, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 3410;
      ClassWriter classWriter0 = new ClassWriter(3410);
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "1*AV'o{", "1*AV'o{", (String[]) null, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 581, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      methodWriter0.visitIincInsn(24, 2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "A?9a)_", "A?9a)_", "A?9a)_", stringArray0, true, true);
      Integer integer0 = new Integer(2);
      methodWriter0.visitFieldInsn(1, "Exceptions", "A?9a)_", "Exceptions");
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      methodWriter0.visitTypeInsn(188, "Ax?9a)_");
      methodWriter0.visitVarInsn(188, 188);
      methodWriter0.visitCode();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      methodWriter0.visitInsn(2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      Attribute attribute0 = new Attribute("Ax?9a)_");
      methodWriter0.visitIincInsn((-417), (-417));
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitInsn(17);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      methodWriter0.visitIincInsn(12, (-3535));
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(2, "Ax?9a)_", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 8, "+w`1w-q)F*<iw<2u!W)", "L*^RJ8)Q/,y8he1", "L*^RJ8)Q/,y8he1", stringArray0, false, false);
      methodWriter0.visitFieldInsn(8, "PkPq0@%v", "L*^RJ8)Q/,y8he1", "PkPq0@%v");
      Integer integer0 = new Integer(1);
      methodWriter0.visitVarInsn((-2355), 2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)", "Ax?9a)", "Ax?9a)", stringArray0, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(2, "Ax?9a)", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 581, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      methodWriter0.visitIincInsn(581, 4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = ClassReader.WRITER;
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ax?9fa)_", "Ax?9fa)_", "Ax?9fa)_", stringArray0, true, true);
      Label label0 = new Label();
      label0.info = (Object) 1;
      methodWriter0.visitJumpInsn(24, label0);
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("O@1`s8mHu", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2021));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 148, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      methodWriter0.visitTypeInsn(1, "Ax?9a)_");
      methodWriter0.visitLdcInsn("Ax?9a)_");
      methodWriter0.getSize();
      methodWriter0.visitIincInsn(1, 1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      ByteVector byteVector0 = classWriter0.pool;
      methodWriter0.visitIincInsn(2, 1);
      // Undeclared exception!
      try { 
        methodWriter0.visitIntInsn(186, 186);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      Attribute attribute0 = new Attribute("Ax?9a)_");
      methodWriter0.visitIincInsn(1, 2136);
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitInsn(17);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 10, "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", stringArray0, false, false);
      methodWriter0.visitLdcInsn("+w`1w-q)F*<iw<2u!W)");
      methodWriter0.visitMultiANewArrayInsn("", 10);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-_H[IOM1S)&D`Wd";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "-_H[IOM1S)&D`Wd", "-_H[IOM1S)&D`Wd", "-_H[IOM1S)&D`Wd", stringArray0, true, false);
      methodWriter0.visitMethodInsn(1, "-_H[IOM1S)&D`Wd", "-_H[IOM1S)&D`Wd", "-_H[IOM1S)&D`Wd");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-_H[IOM1S)&D`Wd";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "-_H[IOM1S)&D`Wd", "-_H[IOM1S)&D`Wd", "-_H[IOM1S)&D`Wd", stringArray0, false, false);
      methodWriter0.visitMethodInsn(1, "-_H[IOM1S)&D`Wd", "-_H[IOM1S)&D`Wd", "LineNumberTable");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Ax?9a)_", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      methodWriter0.visitVarInsn(188, 188);
      methodWriter0.visitVarInsn(12, 1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      Attribute attribute0 = new Attribute("Ax?9a)_");
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitInsn(17);
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ax9fa);_";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-8), "Ax9fa);_", "Ax9fa);_", "Ax9fa);_", stringArray0, true, true);
      Label label0 = new Label();
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      methodWriter1.getSize();
      methodWriter1.visitJumpInsn(2, label0);
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-4), "+w`1w-q)F*<iw<2u!W)", "=a|7YN*) +)|(zU<Y", "InnerClasses", stringArray0, true, true);
      methodWriter0.getSize();
      methodWriter0.visitFrame(2, 2, stringArray0, 2363, stringArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      int[] intArray0 = new int[6];
      intArray0[0] = (-251);
      intArray0[5] = (-251);
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {(-251), 0, 0, 0, 0, (-251)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 10, "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", stringArray0, false, false);
      methodWriter0.visitVarInsn((-3695), 1143);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2021));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 148, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      methodWriter0.visitFieldInsn(186, "mow?*:(VZTn3fKs", "mow?*:(VZTn3fKs", "JZiGKzE");
      methodWriter0.visitFrame(186, 1, stringArray0, 349, stringArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      methodWriter0.visitVarInsn(188, 188);
      methodWriter0.visitFrame(1, 1, stringArray0, 64, stringArray0);
      Label label0 = new Label();
      methodWriter0.visitLineNumber(1, label0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        MethodWriter.writeShort(byteArray0, 16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ax?9fa)_", "Ax?9fa)_", "Ax?9fa)_", stringArray0, true, true);
      Label label0 = new Label();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      label0.info = (Object) 1;
      intArray0[3] = 24;
      intArray0[4] = 2;
      int int0 = Type.BOOLEAN;
      Label[] labelArray0 = new Label[6];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      // Undeclared exception!
      try { 
        methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 10, "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", stringArray0, false, false);
      methodWriter0.visitFrame(21, 1, stringArray0, 1, stringArray0);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(2, 21, stringArray0, 2, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      methodWriter0.visitMultiANewArrayInsn("Btvlm4", 2);
      Label label0 = new Label();
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(24, "Ax?9a)_", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      methodWriter0.visitMultiANewArrayInsn("AnnotationD@efault", 49);
      methodWriter0.visitVarInsn(49, 1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      Attribute attribute0 = new Attribute("Ax?9a)_");
      methodWriter0.visitInsn(1);
      methodWriter0.visitIntInsn(2206, 2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      Attribute attribute0 = new Attribute("Ax?9a)_");
      methodWriter0.visitAttribute(attribute0);
      methodWriter0.visitInsn(1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-8), "`)J\"RXeH", "`)J\"RXeH", (String) null, (String[]) null, true, false);
      methodWriter0.getSize();
      methodWriter0.visitFrame(586, 2, (Object[]) null, 3, (Object[]) null);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1191), 22, (Object[]) null, 615, (Object[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3410);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3410, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      methodWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(26);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ax?EP9a)_", "Ax?EP9a)_", "Ax?EP9a)_", stringArray0, false, true);
      methodWriter0.visitVarInsn(24, (-1337));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      Label label0 = new Label();
      methodWriter0.visitJumpInsn(1, label0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      Label label0 = new Label();
      methodWriter0.visitVarInsn(55, 2);
      methodWriter0.visitTypeInsn(2, "Ax?9a)_");
      methodWriter0.visitIntInsn(24, (-1335));
      methodWriter0.visitLabel(label0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitTableSwitchInsn(2, 1, label0, labelArray0);
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      // Undeclared exception!
      try { 
        methodWriter1.visitFrame(1, 12, labelArray0, (-197), stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = new ClassWriter((-8));
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      Integer integer0 = new Integer(2);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitTableSwitchInsn(99, (-176), label0, labelArray0);
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "Z}5$cN5L");
      methodWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-11));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1840700267), "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      Label label0 = new Label();
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitTableSwitchInsn((-1840700267), 1, label0, labelArray0);
      methodWriter0.visitVarInsn(1, 4096);
      methodWriter0.visitIntInsn(1, 2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      Integer integer0 = new Integer(2);
      methodWriter0.visitVarInsn(12, 1);
      int int0 = Member.DECLARED;
      methodWriter0.visitLdcInsn(1);
      methodWriter0.visitLdcInsn(integer0);
      Label label0 = new Label();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.visitIincInsn(2, 1);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      assertNotNull(methodWriter2);
      
      methodWriter2.visitFrame(2, (-1081), stringArray0, 22, stringArray0);
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotation("Ax?9a)_", true);
      assertSame(methodWriter1, methodWriter2);
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitMethodInsn(186, "Ax?9a)_", "]f)?0;#)V:-TLH#I", "Ax?9a)_");
      assertSame(methodWriter1, methodWriter2);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitLdcInsn("OU?7lP=u )SB2,&)B7");
      assertSame(methodWriter1, methodWriter2);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertSame(methodWriter0, methodWriter1);
      assertSame(methodWriter0, methodWriter2);
      assertEquals(56, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertNotNull(annotationVisitor1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = methodWriter0.getSize();
      assertFalse(int1 == int0);
      assertEquals(22, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitJumpInsn(64, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      methodWriter0.visitVarInsn(12, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(2, "Ax?9a)_", "-YOB+.2}|$T(q7t*", "Ax?9a)_");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Member.DECLARED;
      assertEquals(1, int0);
      
      methodWriter0.visitLdcInsn(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      methodWriter0.visitIntInsn(38, 188);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 10, "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "+w`1w-q)F*<iw<2u!W)");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(2, 1, stringArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(2, 2, stringArray0, 2, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3410);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3410, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitMethodInsn(Integer.MAX_VALUE, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_");
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 12, "short", "Ax?9a)_", "short", (String[]) null, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn((-763));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      intArray0[1] = 12;
      intArray0[2] = 12;
      intArray0[3] = (-763);
      intArray0[4] = 12;
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {12, 12, 12, (-763), 12}, intArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      methodWriter0.visitInsn(193);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(9);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      int int0 = Type.OBJECT;
      assertEquals(10, int0);
      
      classWriter0.version = 10;
      int int1 = classWriter0.newNameType("O@1`s8mHu", "yMr~cA.NcQN8FumHOyP");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-1748), "O@1`s8mHu", "yMr~cA.NcQN8FumHOyP", "Btv0m[", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putLong((-1748));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector2 = byteVector0.putUTF8("O@1`s8mHu");
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      methodWriter0.visitVarInsn(12, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLocalVariable("Ax?9a)_", "Deprecated", "", label0, label0, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(2, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newLong((-8));
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      methodWriter0.visitIntInsn(2, (-8));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(1701);
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-215014342));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4 EI";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "4 EI", "Ax?9a)_", ";>", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(180);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTypeInsn(12, ";>");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(2378, (-35));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "A?9a)_", "A?9a)_", "A?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitFieldInsn(1, "Exceptions", "A?9a)_", "Exceptions");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-8), (-8), stringArray0, 2, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByte(1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)F", "Ax?9a)F", "Ax?9a)F", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(16, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitTableSwitchInsn((-8), 1310, label1, labelArray0);
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitFrame(16711640, 1310, labelArray0, (-904), labelArray0);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = methodWriter1.getSize();
      assertSame(methodWriter1, methodWriter0);
      assertFalse(int1 == int0);
      assertEquals(58, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 8, "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", "+w`1w-q)F*<iw<2u!W)", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Frame.LONG;
      assertEquals(16777220, int0);
      
      methodWriter0.visitFrame(2, 12, stringArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      methodWriter0.visitLdcInsn(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(2, 2, stringArray0, 8, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3410);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3410, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(54, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(54, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      classWriter0.invalidFrames = false;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 55, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(12, 12);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTypeInsn(2, "Ax?9a)_");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(2, 172);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24117248);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "m;4V)`^:l,@j{L2";
      stringArray0[1] = "m;4V)`^:l,@j{L2";
      stringArray0[2] = "e8b[;><Z;A>>Zw";
      stringArray0[3] = "3`ef7 s!|~lofqbG<V";
      stringArray0[4] = "JYv(z}2~4'";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "e8b[;><Z;A>>Zw", "m;4V)`^:l,@j{L2", "xy", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn((-2), "O@1`s8mHu", "AgmymhuE0", "InnerClasses");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 24117248;
      methodWriter0.visitIincInsn(2121, 2121);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter0.visitFrame((-2304), 24117248, stringArray0, 1, stringArray0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("m;4V)`^:l,@j{L2", false);
      assertSame(methodWriter0, methodWriter1);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putInt(1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector0, byteVector1);
      assertNotNull(byteVector1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector2 = byteVector1.putInt(2343);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertNotNull(byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.put(byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(methodWriter1, methodWriter0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.put(byteVector0);
      assertSame(methodWriter1, methodWriter0);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Code", "Code", "Code", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) classWriter0;
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 2, objectArray0, 1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.BASE_KIND;
      assertEquals(267386880, int0);
      
      methodWriter0.visitFrame(1, (-1120), stringArray0, 3116, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) methodWriter0;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Ax?9a)_", false);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(28, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(22, (-3368));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      methodWriter0.visitLineNumber(1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      intArray0[1] = 2;
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      assertArrayEquals(new int[] {1, 2, 0, 0, 0, 0, 0}, intArray0);
      
      methodWriter0.visitLineNumber(32, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(196, "Ax?9a)_");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-247));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "A:29a)_", "A:29a)_", "A:29a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.position = 191;
      Label label1 = label0.getFirst();
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(24);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ax?9fa)_", "Ax?9fa)_", "Ax?9fa)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int[] intArray0 = new int[7];
      label0.info = (Object) 24;
      intArray0[3] = 24;
      intArray0[4] = 2;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 1, 2);
      assertArrayEquals(new int[] {0, 0, 0, 24, 2, 0, 0}, intArray0);
      assertEquals(3, int0);
      
      Label[] labelArray0 = new Label[6];
      labelArray0[0] = label0;
      int int1 = methodWriter0.getSize();
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      Label[] labelArray1 = new Label[0];
      assertFalse(labelArray1.equals((Object)labelArray0));
      
      methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray1);
      assertNotSame(labelArray1, labelArray0);
      assertFalse(labelArray1.equals((Object)labelArray0));
      assertArrayEquals(new int[] {0, 0, 0, 24, 2, 0, 0}, intArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      Label[] labelArray0 = new Label[1];
      labelArray0[0] = label0;
      methodWriter0.visitTableSwitchInsn(255, 3808, label0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter1 = new ClassWriter(3808);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMultiANewArrayInsn("boolean", 2);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = 2;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-247));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "A:29a)_", "A:29a)_", "A:29a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.position = 191;
      methodWriter0.visitLocalVariable("sz/95a .vmWD", "InnerClasses", "A:29a)_", label0, label0, 191);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      methodWriter0.visitIntInsn(12, 188);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "Z}5$cN5L");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(188, 167);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.visitIincInsn(2, 1);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter1.visitTryCatchBlock(label0, label1, label0, "Ax?9a)_");
      assertSame(methodWriter1, methodWriter0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.put(byteVector0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(16, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter((-8));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(1, 1);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByte((-5320));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector2 = byteVector1.putByte((-9));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3410);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3410, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitJumpInsn(180, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(1, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter(3810);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.version = 2;
      methodWriter0.visitJumpInsn(168, label0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(12, 2);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber(1, label0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(168, 1);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      ByteVector byteVector0 = new ByteVector(38);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putUTF8("Ax?9a)_");
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector1.put12(188, 188);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector2.putByte(12);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertNotNull(byteVector3);
      
      ByteVector byteVector4 = byteVector3.putShort(1);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector4);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector4);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector4);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector0);
      assertSame(byteVector4, byteVector1);
      assertNotNull(byteVector4);
      
      ByteVector byteVector5 = byteVector4.putUTF8("G4%Tly-v0]zuQCK7j");
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector4);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector5);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector5);
      assertSame(byteVector2, byteVector3);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector4);
      assertSame(byteVector3, byteVector1);
      assertSame(byteVector3, byteVector5);
      assertSame(byteVector3, byteVector4);
      assertSame(byteVector3, byteVector2);
      assertSame(byteVector3, byteVector0);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector5);
      assertSame(byteVector4, byteVector0);
      assertSame(byteVector4, byteVector1);
      assertSame(byteVector5, byteVector0);
      assertSame(byteVector5, byteVector1);
      assertSame(byteVector5, byteVector3);
      assertSame(byteVector5, byteVector4);
      assertSame(byteVector5, byteVector2);
      assertNotNull(byteVector5);
      
      ByteVector byteVector6 = byteVector0.putShort(188);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector6);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector6, byteVector1);
      assertSame(byteVector6, byteVector5);
      assertSame(byteVector6, byteVector3);
      assertSame(byteVector6, byteVector0);
      assertSame(byteVector6, byteVector4);
      assertSame(byteVector6, byteVector2);
      assertNotNull(byteVector6);
      
      ByteVector byteVector7 = byteVector0.put12(2, 682);
      assertSame(byteVector0, byteVector7);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector6);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector7, byteVector4);
      assertSame(byteVector7, byteVector1);
      assertSame(byteVector7, byteVector5);
      assertSame(byteVector7, byteVector2);
      assertSame(byteVector7, byteVector0);
      assertSame(byteVector7, byteVector6);
      assertSame(byteVector7, byteVector3);
      assertNotNull(byteVector7);
      
      ByteVector byteVector8 = byteVector1.putInt(2);
      assertSame(byteVector0, byteVector8);
      assertSame(byteVector0, byteVector7);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector6);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector7);
      assertSame(byteVector1, byteVector6);
      assertSame(byteVector1, byteVector8);
      assertSame(byteVector1, byteVector4);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector5);
      assertSame(byteVector8, byteVector7);
      assertSame(byteVector8, byteVector6);
      assertSame(byteVector8, byteVector3);
      assertSame(byteVector8, byteVector2);
      assertSame(byteVector8, byteVector5);
      assertSame(byteVector8, byteVector1);
      assertSame(byteVector8, byteVector0);
      assertSame(byteVector8, byteVector4);
      assertNotNull(byteVector8);
      
      ByteVector byteVector9 = byteVector1.put12(38, 1);
      assertSame(byteVector0, byteVector8);
      assertSame(byteVector0, byteVector7);
      assertSame(byteVector0, byteVector9);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector6);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector7);
      assertSame(byteVector1, byteVector6);
      assertSame(byteVector1, byteVector8);
      assertSame(byteVector1, byteVector4);
      assertSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector3);
      assertSame(byteVector1, byteVector9);
      assertSame(byteVector1, byteVector5);
      assertSame(byteVector9, byteVector4);
      assertSame(byteVector9, byteVector1);
      assertSame(byteVector9, byteVector5);
      assertSame(byteVector9, byteVector2);
      assertSame(byteVector9, byteVector0);
      assertSame(byteVector9, byteVector7);
      assertSame(byteVector9, byteVector6);
      assertSame(byteVector9, byteVector8);
      assertSame(byteVector9, byteVector3);
      assertNotNull(byteVector9);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 1893, "Ax?9a)_", "m;4V)`^:l,@j{L2", (String) null, stringArray0, false, false);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotNull(methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.put(byteVector6);
      assertSame(byteVector0, byteVector8);
      assertSame(byteVector0, byteVector7);
      assertSame(byteVector0, byteVector9);
      assertSame(byteVector0, byteVector3);
      assertSame(byteVector0, byteVector5);
      assertSame(byteVector0, byteVector6);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector4);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector6, byteVector1);
      assertSame(byteVector6, byteVector5);
      assertSame(byteVector6, byteVector3);
      assertSame(byteVector6, byteVector8);
      assertSame(byteVector6, byteVector0);
      assertSame(byteVector6, byteVector7);
      assertSame(byteVector6, byteVector9);
      assertSame(byteVector6, byteVector4);
      assertSame(byteVector6, byteVector2);
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "LocalVariableTable";
      stringArray0[1] = "org.objectweb.asm.jip.MethodWriter";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-17), "Ax?9a)_", "`m^Hnl", "LocalVariableTable", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(40, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(0, 2, stringArray0, (-108), stringArray0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLineNumber(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newUTF8("7#h5[Bq0}@=");
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1840700267);
      methodWriter0.visitIincInsn(2315, 2315);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter((-2516));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = classWriter1.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(classWriter1, classWriter0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("7#h5[Bq0}@=", true);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(4, (-214), stringArray0, (-8), stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      methodWriter0.visitVarInsn(12, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMethodInsn(187, "Ax?9a)_", "-YOB+.2}|$T(q7t*", "Ax?9a)_");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer1 = new Integer(24);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(24, (int)integer1);
      
      methodWriter0.visitLocalVariable("-YOB+.2}|$T(q7t*", "Ax?9a)_", "-YOB+.2}|$T(q7t*", label0, label0, 50);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(74, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer2 = new Integer((-148));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-148), (int)integer2);
      
      methodWriter0.visitFrame(285212682, 10, stringArray0, 1361, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(285212682, label0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 285212682
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLocalVariable("LocalVariableTypeTable", "org.objectweb.asm.jip.ClassWriter", (String) null, label0, label0, (-1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(2, "Ax?9a)_", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(17, "V+YT)`F)b(pOH/D");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn((-781), 1186);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(17, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.visitIincInsn(2, 1);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitMethodInsn(186, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_");
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(186, 186);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(875);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 875, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.next = methodWriter0;
      methodWriter0.visitMaxs(1, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.next.visitFrame(2, 875, stringArray0, 875, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(539, "u_ZyW_iY}8`UD, X", "Btv0[", "Ax?9a)_");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.next.visitFrame(3432, 539, stringArray0, 168, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putInt(539);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      methodWriter0.visitLocalVariable("Ax?9a)_", "double", "Btv0[", label1, label1, 2);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newField("u_ZyW_iY}8`UD, X", "u_ZyW_iY}8`UD, X", "TEV]Y^H*/I>,f8SGk;");
      assertEquals(10, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector2 = byteVector0.putByte(168);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertNotNull(byteVector2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.next.visitTypeInsn((-1934), "Ax?9a)_");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1), 2, stringArray0, (-1), stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 8;
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = false;
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Ax?9&a)_";
      stringArray1[1] = "Ax?9&a)_";
      stringArray1[2] = "Ax?9&a)_";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 8, "Ax?9&a)_", "Ax?9&a)_", "Ax?9&a)_", stringArray1, false, false);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1), (-1), stringArray0, 147, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(2, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(188, 179);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "LocalVariableTable");
      assertNotSame(label0, label1);
      assertFalse(label0.equals((Object)label1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-268435456), (-268435456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      classWriter0.visit((-2610), (-2610), "Ax?9&a)_", "Ax?9&a)_", "Ax?9&a)_", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2610), "Ax?9&a)_", "Ax?9&a)_", "Ax?9&a)_", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 8, "Ax?9&a)_", "d*|dAU!d<PfD{B&AA", "d*|dAU!d<PfD{B&AA", stringArray0, false, false);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotNull(methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(22, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitFrame(2, 8, stringArray0, (-2610), stringArray0);
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, (String) null);
      assertNotSame(label0, label1);
      assertFalse(label0.equals((Object)label1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(218, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "rGKTQjR ", "Ax?9a)_", " ", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = new Integer(12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      label0.inputStackTop = 1;
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      methodWriter0.classReaderOffset = 12;
      methodWriter0.visitTryCatchBlock(label0, label1, label0, "rGKTQjR ");
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(6, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3396, "=a|7YN*) +)|(zU<Y", "=a|7YN*) +)|(zU<Y", (String) null, stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(8, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(20, 12, stringArray0, 20, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-1445893931), 1, stringArray0, (-1004), (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(22, (-2));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3410);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3410, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(180);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "RuntimeVisibleAnnotations");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(1639, (-1822));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2582), "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int0 = classWriter0.newNameType("Ax?9a)_", ".e0\"{Q=8XyKp=");
      assertEquals(3, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(8, ".e0\"{Q=8XyKp=", ".e0\"{Q=8XyKp=", ".e0\"{Q=8XyKp=");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.version = 3;
      methodWriter0.visitFieldInsn(2, ".e0\"{Q=8XyKp=", "e9'\"<TK(W?", "e9'\"<TK(W?");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newDouble((-2582));
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      label0.status = 178;
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-2582), "Btv0m[", "=a|7YN*) +)|(zU<Y", "InnerClasses", stringArray0, true, true);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotNull(methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitMethodInsn(3, "f4ujoQ_9Q7Z", "InnerClasses", "=a|7YN*) +)|(zU<Y");
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(3, label0);
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitMethodInsn(2, "Synthetic", "Ax?9a)_", "P,6kG]~<0lh");
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(63, 2971);
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = methodWriter0.getSize();
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(int1 == int0);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(61, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitLdcInsn("e9'\"<TK(W?");
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = methodWriter0.getSize();
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(61, int2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLdcInsn("P,6kG]~<0lh");
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      int int0 = methodWriter0.getSize();
      assertEquals(16, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visit((-8), 16, "l[oBYVDG<K", (String) null, "org.objectweb.asm.jip.ClassWriter", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitFieldInsn(401, "Exceptions", "B?/cXb'^Nfl)F)ge/1q", "B?/cXb'^Nfl)F)ge/1q");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter1 = new ClassWriter(606);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(167, 655);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(0, 0, stringArray0, (-1798504051), stringArray0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int1 = methodWriter0.getSize();
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(int1 == int0);
      assertEquals(54, int1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(57);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<init>";
      stringArray0[1] = "Code";
      stringArray0[2] = " Rq}v8?n";
      stringArray0[3] = "R}";
      stringArray0[4] = "Code";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, "Code", "Code", "T%l$SNP-hn<Yq'S6O[", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(2, 1, stringArray0, 2, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitParameterAnnotation(57, "Ljava/lang/Synthetic;", false);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 9;
      ClassWriter classWriter0 = new ClassWriter(9);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-2582), "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int int1 = classWriter0.newNameType("Ax?9a)_", "O@1`s8mHu");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn(2, "O@1`s8mHu", "Ax?9a)_", "Ax?9a)_");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.classReaderOffset = 12;
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-2582), "Btv0m[", "O@1`s8mHu", "O@1`s8mHu", stringArray0, false, false);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotNull(methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.visitMethodInsn(3, "f4ujoQ_9Q7Z", "Btv0m[", "O@1`s8mHu");
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putByte((-2582));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector0.putByte((-2582));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertNotNull(byteVector2);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 12, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotNull(methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLocalVariable("LHcaVwriableTypeTable", "LHcaVwriableTypeTable", "Ax?9a)_", label0, label0, 2);
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      methodWriter0.visitLocalVariable("Ax?9a)_", "Ax?9a)_", "[qvHWssKj?.k`wY", label1, label1, 12);
      assertSame(label0, label1);
      assertNotSame(methodWriter0, methodWriter1);
      assertSame(label1, label0);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-17);
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      methodWriter0.visitIntInsn((-1319), (-1319));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(36, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(0, 191, stringArray0, (-2633), stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.signature = "Ax?9a)_";
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.visitIincInsn(2, 1);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter1.visitTryCatchBlock(label0, label1, label0, "o");
      assertSame(methodWriter1, methodWriter0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Edge.NORMAL;
      assertEquals(0, int0);
      
      Label label2 = label1.getFirst();
      assertSame(label1, label2);
      assertNotSame(label1, label0);
      assertSame(label2, label1);
      assertNotSame(label2, label0);
      assertFalse(label1.equals((Object)label0));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      
      methodWriter0.visitTryCatchBlock(label0, label2, label2, ".x:!;Zt=");
      assertSame(methodWriter0, methodWriter1);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertSame(label1, label2);
      assertNotSame(label1, label0);
      assertSame(label2, label1);
      assertNotSame(label2, label0);
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label2.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label1);
      assertSame(methodWriter0, methodWriter1);
      assertSame(label1, label2);
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs(1, (-625));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, false, true);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      ByteVector byteVector0 = classWriter0.pool;
      assertNotNull(byteVector0);
      
      methodWriter0.visitIincInsn(2, 1);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter1.visitTryCatchBlock(label0, label1, label0, "o");
      assertSame(methodWriter1, methodWriter0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertSame(methodWriter0, methodWriter1);
      assertEquals(45, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs(1, (-625));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 3, "Ax?9a)_", "Ax?9a)_", "RuntimeVisibleAnnotations", stringArray0, true, false);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertNotNull(methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter1.getSize();
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(16, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotNull(classWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(3, 2, stringArray0, 1, stringArray0);
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, true);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      methodWriter0.visitMethodInsn(185, "Ax?9a)_", "Ax?9a)_", "GF)L^h,4\"wx]");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = ClassReader.ANNOTATIONS;
      assertTrue(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter((-8));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMultiANewArrayInsn("AnnotationDefault", (-8));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn(218, "4:2/", " 01'Mi7X", " 01'Mi7X");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFrame(3576, (-8), stringArray0, 218, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ax?9&a)_";
      stringArray0[1] = "Ax?9&a)_";
      stringArray0[2] = "StackMap";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(12, "StackMap", "StackMap", "Ax?9&a)_", stringArray0);
      assertNotNull(methodVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)13, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray1, false, false);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.index = 267386880;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      methodWriter0.visitVarInsn(12, 1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(methodWriter0, methodVisitor0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn(1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(methodWriter0, methodVisitor0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn(integer0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(methodWriter0, methodVisitor0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(methodWriter0.equals((Object)methodVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitMethodInsn(185, "Ax?9a)_", "Ax?9a)_", "GF)L^h,4\"wx]");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[0];
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Ax?9a)_", "Ax?9a)_", "Ax?9a)_", stringArray0, true, false);
      assertNotNull(methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("Ax?9a)_");
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      assertNotNull(attribute0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter0.visitJumpInsn(186, label0);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector();
      assertNotNull(byteVector0);
      
      methodWriter0.visitIincInsn(2, 1);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      assertSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
      assertNotNull(methodWriter2);
      
      methodWriter2.visitFrame(3810, (-1081), stringArray0, 22, stringArray0);
      assertSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter1.visitAnnotation("Ax?9a)_", true);
      assertSame(methodWriter1, methodWriter2);
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.visitLabel(label0);
      assertSame(methodWriter1, methodWriter2);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitJumpInsn(186, label0);
      assertSame(methodWriter0, methodWriter1);
      assertSame(methodWriter0, methodWriter2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector1 = new ByteVector();
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector0.putUTF8("Ax?9a)_");
      assertSame(byteVector0, byteVector2);
      assertNotSame(byteVector0, byteVector1);
      assertSame(byteVector2, byteVector0);
      assertNotSame(byteVector2, byteVector1);
      assertFalse(byteVector0.equals((Object)byteVector1));
      assertFalse(byteVector2.equals((Object)byteVector1));
      assertNotNull(byteVector2);
      
      ByteVector byteVector3 = byteVector1.put12(2818, 67);
      assertNotSame(byteVector3, byteVector2);
      assertNotSame(byteVector3, byteVector0);
      assertSame(byteVector3, byteVector1);
      assertNotSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector3);
      assertNotSame(byteVector1, byteVector2);
      assertFalse(byteVector3.equals((Object)byteVector2));
      assertFalse(byteVector3.equals((Object)byteVector0));
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertFalse(byteVector1.equals((Object)byteVector2));
      assertNotNull(byteVector3);
      
      ByteVector byteVector4 = byteVector1.putByte((-551));
      assertNotSame(byteVector4, byteVector2);
      assertSame(byteVector4, byteVector3);
      assertSame(byteVector4, byteVector1);
      assertNotSame(byteVector4, byteVector0);
      assertNotSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector3);
      assertNotSame(byteVector1, byteVector2);
      assertSame(byteVector1, byteVector4);
      assertFalse(byteVector4.equals((Object)byteVector2));
      assertFalse(byteVector4.equals((Object)byteVector0));
      assertFalse(byteVector1.equals((Object)byteVector0));
      assertFalse(byteVector1.equals((Object)byteVector2));
      assertNotNull(byteVector4);
      
      methodWriter2.put(byteVector2);
      assertSame(byteVector0, byteVector2);
      assertNotSame(byteVector0, byteVector4);
      assertNotSame(byteVector0, byteVector3);
      assertNotSame(byteVector0, byteVector1);
      assertSame(methodWriter2, methodWriter0);
      assertSame(methodWriter2, methodWriter1);
      assertSame(byteVector2, byteVector0);
      assertNotSame(byteVector2, byteVector4);
      assertNotSame(byteVector2, byteVector3);
      assertNotSame(byteVector2, byteVector1);
      assertFalse(byteVector0.equals((Object)byteVector4));
      assertFalse(byteVector0.equals((Object)byteVector3));
      assertFalse(byteVector0.equals((Object)byteVector1));
      assertFalse(byteVector2.equals((Object)byteVector4));
      assertFalse(byteVector2.equals((Object)byteVector3));
      assertFalse(byteVector2.equals((Object)byteVector1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLocalVariable("Label offset position has not been resolved yet", "JSR/RET are not supported with computeFrames option", "Ljava/lang/Synthetic;", label0, label0, 2118);
      assertSame(methodWriter0, methodWriter1);
      assertSame(methodWriter0, methodWriter2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }
}
