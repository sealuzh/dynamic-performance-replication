/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:18:10 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.lang.reflect.Type;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TreeMap;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error");
      IdentityHashMap<MockSimpleDateFormat, BreakIterator> identityHashMap0 = new IdentityHashMap<MockSimpleDateFormat, BreakIterator>();
      defaultJSONParser0.checkMapResolve(identityHashMap0, "syntax error");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      defaultJSONParser0.getInput();
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      Class<JSONScanner> class0 = JSONScanner.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.StringCodec", parserConfig0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = JSON.parseObject("");
      assertNull(jSONObject0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", class ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "unclosed");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 8, json : unclosed
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(CL)Z");
      // Undeclared exception!
      try { 
        JSON.parseObject("(CL)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (CL)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7Lt}^ViJr{36e2Sm:");
      System.setCurrentTimeMillis(1);
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("a@-z{");
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yhF");
      defaultJSONParser0.setResolveStatus(72);
      assertEquals(72, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      Feature feature0 = Feature.AllowSingleQuotes;
      defaultJSONParser0.config(feature0, true);
      IdentityHashMap<MockSimpleDateFormat, BreakIterator> identityHashMap0 = new IdentityHashMap<MockSimpleDateFormat, BreakIterator>();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+W,?C.#<._uWUe");
      defaultJSONParser0.accept(2, 2);
      JSONScanner jSONScanner0 = new JSONScanner("+W,?C.#<._uWUe", 1);
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", class ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) ", class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ,, pos 0, fieldName , class 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(" ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(131072);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.getDateFomartPattern();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(116, 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<HHk3");
      Class<JobAttributes> class0 = JobAttributes.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : <HHk3
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";pumZIfw\".\"V|-t");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      Object object0 = defaultJSONParser0.getObject("{2[u`/2A5N9 %M:");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sH");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", <pos ");
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      ParserConfig parserConfig0 = ParserConfig.global;
      defaultJSONParser0.setConfig(parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {2[u`/2A5N9 %M:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<Qk");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ehl34GA");
      // Undeclared exception!
      try { 
        JSON.parseObject("Ehl34GA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Ehl34GA
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ogu;eYhKv?KL4|");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uOs");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : uOs
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      defaultJSONParser0.setDateFormat("(C)Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9P%M:");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 3, json : {2[u`/2A5N9P%M:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[2 aH-+rslMm=lVT");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : [2 aH-+rslMm=lVT
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual (, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Ljava/lang/Character;");
      ArrayDeque<MockThaiBuddhistDate> arrayDeque0 = new ArrayDeque<MockThaiBuddhistDate>();
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}~,qE7xi@WyshwzOd");
      defaultJSONParser0.resolveReference("}~,qE7xi@WyshwzOd");
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "}~,qE7xi@WyshwzOd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }~,qE7xi@WyshwzOd
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(CL)Z");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (CL)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      defaultJSONParser0.getExtraTypeProviders();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 2, json : {2[u`/2A5N9 %M:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but (, pos 1, json : (C)Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TreeMap<MockHijrahDate, MockDate> treeMap0 = new TreeMap<MockHijrahDate, MockDate>();
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 1);
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.setContext((Object) "fastjson.parser.autoTypeAccept", (Object) "");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Object object0 = new Object();
      Object object1 = defaultJSONParser0.getObject("fastjson.parser.deny");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+W,?C.#<._uWUe");
      // Undeclared exception!
      try { 
        JSON.parseObject("+W,?C.#<._uWUe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(")");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]aoUljAU*:pr=Qcq", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]aoUljAU*:pr=Qcq
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSON.setDefaultTypeKey("-");
      Class<RenderingHints> class0 = RenderingHints.class;
      JSONScanner jSONScanner0 = new JSONScanner(";");
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'j';
      charArray0[2] = '4';
      charArray0[3] = 'H';
      charArray0[4] = 'd';
      charArray0[5] = '^';
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 0);
      defaultJSONParser0.getInput();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(class0, jSONScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7LS}_ViJrL36e2Sm");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockHijrahDate0, (Object) mockHijrahDate0);
      parseContext0.toString();
      defaultJSONParser0.setContext(parseContext0, (Object) parseContext0, (Object) mockHijrahDate0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHV");
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MessageFormat messageFormat0 = new MessageFormat("scan true error", locale0);
      defaultJSONParser0.getDateFormat();
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("SHV");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : SHV
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("(C)Z", parserConfig0, 0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser1.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(renderingHints_Key0).toString();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, defaultJSONParser0);
      defaultJSONParser1.setContext((Object) renderingHints0, (Object) defaultJSONParser0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      RenderingHints renderingHints1 = (RenderingHints)defaultJSONParser1.getObject("$");
      assertFalse(renderingHints1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONScanner jSONScanner0 = new JSONScanner("RQFP<4o/m", 2258);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("exepct '[', but ");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      defaultJSONParser0.setContext((Object) "exepct '[', but ", (Object) mockHijrahDate0);
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParserConfig parserConfig0 = new ParserConfig();
      defaultJSONParser0.getResolveTaskList();
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 2, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("sytax errokAr");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "sytax errokAr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<HHk3");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("<HHk3", parserConfig0);
      defaultJSONParser1.getResolveTaskList();
      defaultJSONParser0.accept(1);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("+W,?C.#<._uWUe");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TreeMap<MockHijrahDate, MockDate> treeMap0 = new TreeMap<MockHijrahDate, MockDate>();
      // Undeclared exception!
      try { 
        JSON.parseObject(":[qI_#`oM<4hOnW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :[qI_#`oM<4hOnW
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SH&aV");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.resolveReference("4R");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}r", parserConfig0);
      JSONObject jSONObject0 = defaultJSONParser0.parseObject();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {2[u`/2A5N9 %M:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2,MONTH=-3416,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=211,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<HHk3");
      ClassLoader.getSystemClassLoader();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 2, 2, 2);
      defaultJSONParser0.getExtraProcessors();
      Feature feature0 = Feature.AllowSingleQuotes;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "{2[u`/2A5N9 %M:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 2pos 1, json : {2[u`/2A5N9 %M:
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      IdentityHashMap<MockSimpleDateFormat, BreakIterator> identityHashMap0 = new IdentityHashMap<MockSimpleDateFormat, BreakIterator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 2pos 1, json : {2[u`/2A5N9 %M:
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "{2[u`/'AN9 %\\M:";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/'AN9 %M:");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {2[u`/'AN9 %M:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONToken", (-138));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<JSONScanner> class0 = JSONScanner.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<{[.lk");
      defaultJSONParser0.getFieldTypeResolver();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Insets insets0 = new Insets(1, 0, 0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : <{[.lk
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.parse((Object) "{2[u`/2A5N9 %M:");
      ArrayList<Dimension> arrayList0 = new ArrayList<Dimension>();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 4, json : {2[u`/2A5N9 %M:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      ParseContext parseContext0 = defaultJSONParser0.context;
      Double double0 = new Double(1);
      defaultJSONParser0.setContext((ParseContext) null, (Object) "{2[u`/2A5N9 %M:", (Object) double0);
      Object object0 = defaultJSONParser0.resolveReference("hsG'M9");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Z");
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.setAutoTypeSupport(true);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask(parserConfig0);
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(C)Ljava/lang/Character;");
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) null);
      Insets insets0 = new Insets(3020, 0, (-2408), 8);
      defaultJSONParser0.setContext(parseContext0, (Object) insets0, (Object) null);
      Object object0 = defaultJSONParser0.resolveReference("$");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{2[u`/2A5N9 %M:");
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("]^m~fHS(;1&WSR01");
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      Byte byte0 = new Byte((byte)39);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mapDeserializer0, (Object) byte0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.$.org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=206,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=9,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
      defaultJSONParser1.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser1.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ", parserConfig0, 25);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class com.alibaba.fastjson.parser.ParserConfig, property null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{2[u`/2A5N9 %M:", 50);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse number key errorpos 2, json : {2[u`/2A5N9 %M:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SHV");
      JSONScanner jSONScanner0 = new JSONScanner("SHV");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      int int0 = defaultJSONParser1.getResolveStatus();
      assertEquals(0, int0);
      
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser("null");
      defaultJSONParser2.parseArray((Type[]) null);
      defaultJSONParser1.close();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONToken");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.token = 23;
      defaultJSONParser0.parseKey();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 2, json : com.alibaba.fastjson.parser.JSONToken
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "com.alibaba.fastjson.parser.JSONToken";
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONToken", (-138));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("com.alibaba.fastjson.parser.JSONToken");
      defaultJSONParser0.close();
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(";C)Ljava/lang/Enum;");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;C)Ljava/lang/Enum;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONToken", (-138));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.token = 0;
      Insets insets0 = new Insets(0, 2, 2952, 1);
      insets0.left = 0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : com.alibaba.fastjson.parser.JSONToken
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Hashtable<ThrowableDeserializer, ChoiceFormat> hashtable0 = new Hashtable<ThrowableDeserializer, ChoiceFormat>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", <pos ");
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(", <pos ", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONToken", (-163));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      jSONScanner0.token = 23;
      MockLocalDate.ofEpochDay(0);
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) pageAttributes1, (Object) jSONScanner0);
      Feature feature0 = Feature.DisableASM;
      defaultJSONParser0.setContext((Object) pageAttributes0, (Object) feature0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3851, 1, 23);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Long long0 = new Long(127L);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) bufferCapabilities0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Object object0 = defaultJSONParser1.resolveReference("com.alibaba.fastjson.parser.JSONToken");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Insets insets0 = new Insets(24, (-706), 6, 6);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1EIO<lL", parserConfig0, 6);
      JSONObject jSONObject0 = new JSONObject(1885, false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"1E\", pos 2, json : 1EIO<lL
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
