/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:13:04 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.util.Calendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")/");
      Class<Integer> class0 = Integer.TYPE;
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) locale0, (Object) ")/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("WZ-E");
      Class<Integer> class0 = Integer.TYPE;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      MockJapaneseDate.now();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("E5G}B1Q5EYJ1SZ7o*!'");
      Class<Integer> class0 = Integer.TYPE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "E5G}B1Q5EYJ1SZ7o*!'", 0, 0, 5, 0, 5, 1, 0, 1, 5, 0, 848);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) locale0, (Object) "E5G}B1Q5EYJ1SZ7o*!'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"E5G}B1Q5EYJ1SZ7o*!'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}6Z", parserConfig0, 0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Integer integer0 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) mockMinguoDate0, (Object) "0000-00-00T00:00:00");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9<7#z<");
      Class<Float> class0 = Float.TYPE;
      MockJapaneseDate mockJapaneseDate0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) null);
      assertNull(mockJapaneseDate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = jSONSerializer0.writeDirect;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Byte byte0 = new Byte((byte) (-6));
      boolean boolean1 = jSONSerializer0.out.disableCircularReferenceDetect;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      boolean boolean2 = jSONSerializer0.out.disableCircularReferenceDetect;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DateCodec dateCodec0 = new DateCodec();
      dateCodec0.write(jSONSerializer0, byte0, byte0, class0, (byte) (-6));
      assertEquals(21, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSON.DEFAULT_TYPE_KEY = "/Date(0";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("c");
      Class<Integer> class0 = Integer.TYPE;
      JSON.setDefaultTypeKey("c");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "/Date(0");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "c", (Object) "/Date(0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Integer> class0 = Integer.TYPE;
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 5, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte) (-51));
      Object object0 = new Object();
      dateCodec0.write(jSONSerializer0, byte0, object0, class0, (-780));
      int int0 = Long.BYTES;
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSON.setDefaultTypeKey("@0h");
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      int int0 = Calendar.AUGUST;
      dateCodec0.getFastMatchToken();
      StringWriter stringWriter0 = new StringWriter(7);
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      StringWriter stringWriter1 = new StringWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      serializerFeatureArray0[2] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(stringWriter0, 7, serializerFeatureArray0);
      ClassLoader.getSystemClassLoader();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte)0);
      dateCodec0.write(jSONSerializer0, byte0, (Object) null, class1, (-2147483647));
      assertEquals(13, serializeWriter0.size());
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(765, (-585), 487, 71, (-585), 765);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, serializerFeature0, class0, 71);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSON.setDefaultTypeKey(":00");
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      jSONSerializer0.setDateFormat(":00");
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      jSONSerializer0.config(serializerFeature0, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(35, 1502, 35);
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, mockGregorianCalendar0, (Type) null, 1502);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SupportNonPublicField");
      boolean boolean0 = jSONSerializer0.out.beanToArray;
      Locale locale0 = Locale.KOREAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      int int0 = Opcodes.FCMPL;
      int int1 = Opcodes.IF_ACMPEQ;
      jSONSerializer0.getLabelFilters();
      dateCodec0.write(jSONSerializer0, (Object) null, jSONSerializer0, (Type) null, 2944);
      Long long0 = new Long(149);
      String string0 = Long.toUnsignedString((long) 1502);
      assertEquals("1502", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Class<Integer> class0 = Integer.TYPE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 5, 0, 5, 1, 0, 1, 5, 0, 848);
      Locale locale0 = Locale.JAPANESE;
      Double double0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) locale0, (Object) "");
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9<7#QAz<)M?sU@|kI");
      dateCodec0.getFastMatchToken();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      MockDate mockDate0 = new MockDate((-9), 2, 0, 1, 1);
      jSONSerializer0.writeWithFieldName((Object) mockDate0, (Object) defaultJSONParser0, (Type) null, 267);
      dateCodec0.write(jSONSerializer0, (Object) null, jSONSerializer0, (Type) null, (-9));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 267);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2, 2, 2);
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00");
      Integer integer0 = new Integer(2);
      Class<Integer> class0 = Integer.TYPE;
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig.getGlobalInstance();
      LinkedHashSet<SerializerFeature> linkedHashSet0 = new LinkedHashSet<SerializerFeature>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      dateCodec0.instance.write(jSONSerializer0, integer0, "0000-00-00", class0, 0);
      Short short0 = new Short((short)20);
      System.setCurrentTimeMillis((-1L));
      Locale locale0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) short0, (Object) "0000-00-00");
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("s<]");
      Class<Integer> class0 = Integer.TYPE;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockJapaneseDate0, (Object) "/atefast{xon.p7sp.`sn9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/atefast{xon.p7sp.`sn9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("M+YR", parserConfig0, 0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      dateCodec0.getFastMatchToken();
      dateCodec0.getFastMatchToken();
      StringWriter stringWriter0 = new StringWriter(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(stringWriter0, 0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte)106);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockDate mockDate0 = new MockDate((byte)106, 1, (byte)106, 1, 0, 2);
      dateCodec0.write(jSONSerializer0, mockDate0, mockMinguoDate0, class0, 13);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01T00:00:00+08:00");
      Class<Integer> class0 = Integer.TYPE;
      MockJapaneseDate.now();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.mark(0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      System.setCurrentTimeMillis(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 30, 1575, 0, 199, 24);
      SerializeWriter serializeWriter0 = new SerializeWriter();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      System.setCurrentTimeMillis(1765L);
      System.setCurrentTimeMillis(1691L);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) mockMinguoDate0, (Object) "0001-01-01T00:00:00+08:00");
      assertEquals(2, dateCodec0.getFastMatchToken());
  }
}
