/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 15:13:59 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = Byte.valueOf((byte)90);
      jSONObject0.append("`4", byte0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("`4");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("k.@LJCDSD}m!}Uy }bh", 4511L);
      double double0 = jSONObject0.optDouble("k.@LJCDSD}m!}Uy }bh");
      assertEquals(4511.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = Byte.valueOf((byte)90);
      JSONObject jSONObject1 = jSONObject0.append("`4", byte0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = Byte.valueOf((byte)90);
      JSONObject jSONObject1 = jSONObject0.append("`4", byte0);
      String string0 = jSONObject1.getString("`4");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float((double) 10);
      String string0 = JSONObject.valueToString(float0, (-1253), 10);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.remove((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-2892.3169099));
      Integer integer0 = new Integer(8192);
      hashMap0.put(double0, integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (long) 1);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (-1088));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\f", (double) (byte)32);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("kAu<u-3", (-407.0));
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("LO#3F", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(644);
      assertEquals("{}", string0);
      
      double double0 = jSONObject0.optDouble(string0, (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble("c+5}?mfk>Vdl", (-1.0));
      assertEquals(3, jSONObject0.length());
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("islogicalXor", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getLong("ua;}HvXnBZ?],-9HJ*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ua;}HvXnBZ?],-9HJ*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("y}p/:|hddGAna<J+na");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of y}p/:|hddGAna<J+na
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 76, 93);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.quote("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-16));
      try { 
        jSONObject0.put((String) null, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("aJd=<JXJm&aC81", "false");
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("] not found.", (double) 227L);
      assertEquals(227.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.opt("Ydo");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("s.>e>I", (Object) jSONArray0);
      try { 
        jSONObject1.getInt("s.>e>I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s.>e>I\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("k.@LJCDSD}m!}Uy }bh", 4511L);
      int int0 = jSONObject1.getInt("k.@LJCDSD}m!}Uy }bh");
      assertEquals(4511, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = Byte.valueOf((byte)90);
      JSONObject jSONObject1 = jSONObject0.append("`4", byte0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("`4");
      JSONObject.testValidity(jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("i{Uxh[", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject1 = jSONObject0.put("va", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("3%kfnR'2EWAQ", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArray[", hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = JSONObject.valueToString(hashMap0, (short)61, (short)61);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getrotateLeft");
      jSONObject0.toString((-951));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 169, 75);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.offer((Boolean) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("3%kfnR'2EWAQ", linkedList0);
      String string0 = jSONObject1.toString(878, 878);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.accumulate("3%kfnR'2EWAQ", linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt(">o[NuM6x=E6|fE", hashMap0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("/QR|iKZ", jSONArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("Unterminated string", (Collection) linkedList0);
      jSONObject0.toString(101, 101);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(227);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getrotateLeft");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Double double0 = new Double(3056.93F);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getDouble("qjFNhbxpT3!{e</$$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qjFNhbxpT3!{e<\\/$$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optLong("D7/fO}ZD@bM-R", (-1L));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoUnsignedLong", 0L);
      JSONObject jSONObject2 = jSONObject1.put("Null pointer", 0.0);
      String string0 = jSONObject2.toString(644);
      int int0 = jSONObject0.optInt(string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Ydo", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("R.am", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Long long0 = new Long((-1787L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("JOhpPyI0% *'H%{", false);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Ou}hm.dJd7Asa'", true);
      String string0 = jSONObject0.optString("Ou}hm.dJd7Asa'");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("] is not a Boolean.");
      assertNotSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optJSONObject("false");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\f", (Collection) null);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("\f");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("=&z}+RTvNrq", (-2247L));
      double double0 = jSONObject1.optDouble("=&z}+RTvNrq", 1.0);
      assertEquals((-2247.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optInt("g(pm");
      Double double0 = new Double(0);
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) double0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put(",\n", (Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject0.optLong("wheel.json.JSONArray");
      Long long1 = new Long(0);
      jSONObject2.putOpt("g(pm", long1);
      assertEquals(3, jSONObject2.length());
      
      JSONObject.numberToString(long1);
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double(0L);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("Ydo", (long) 227);
      long long0 = jSONObject0.optLong("Ydo");
      assertEquals(2, jSONObject0.length());
      assertEquals(227L, long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      long long0 = jSONObject1.optLong("] is not a Boolean.");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("] is not a JSONObject.");
      assertNotSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{\"java.lang.String@0000000002\":{}}", (Collection) null);
      try { 
        jSONObject0.getJSONObject("{\"java.lang.String@0000000002\":{}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\":{}}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONArray.", double0);
      jSONObject1.getJSONArray("] is not a JSONArray.");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer(2417);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.putOpt("toJ", jSONObject0);
      try { 
        jSONObject0.getJSONArray("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("Ydo", (long) 227);
      int int0 = jSONObject1.optInt("Ydo");
      assertEquals(2, jSONObject0.length());
      assertEquals(227, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" of ", 644);
      double double0 = jSONObject0.getDouble(" of ");
      assertEquals(644.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(";45I%W,dK'&#{_)", true);
      boolean boolean0 = jSONObject0.getBoolean(";45I%W,dK'&#{_)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected a ':' after a key", "Expected a ':' after a key");
      boolean boolean0 = jSONObject1.optBoolean("Expected a ':' after a key");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("isvalueOf", (Object) float0);
      try { 
        jSONObject0.getBoolean("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isvalueOf\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.doubleToString(43);
      assertEquals("43", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-308.13602));
      assertEquals("-308.13602", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = Byte.valueOf((byte)90);
      JSONObject jSONObject1 = jSONObject0.append("`4", byte0);
      JSONObject jSONObject2 = jSONObject1.append("`4", byte0);
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("C4", double0);
      Integer integer0 = Integer.getInteger("Null key.", 9);
      try { 
        jSONObject0.append("C4", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[C4] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.put("C4", 3680);
      JSONObject jSONObject1 = jSONObject0.accumulate("C4", double0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("/QR|iKZ", jSONArray0);
      int int0 = jSONObject1.optInt("/QR|iKZ", 2319);
      assertEquals(2319, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = Boolean.valueOf("X^fBGIw\"P,O,SeW3M");
      jSONObject0.accumulate("X^fBGIw\"P,O,SeW3M", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("X^fBGIw\"P,O,SeW3M");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Iterator iterator0 = jSONObject0.keys();
      jSONObject0.put(": ", (Object) jSONArray0);
      jSONObject0.accumulate(": ", iterator0);
      assertEquals(1, jSONArray0.length());
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{zifKyv:}Uu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 8 of {zifKyv:}Uu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{&,koG~Zq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {&,koG~Zq
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      boolean boolean0 = jSONObject0.optBoolean("java.lang.Double@0000000001", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put(".S&OC!PvOo>N?", object0);
      boolean boolean0 = jSONObject0.isNull(".S&OC!PvOo>N?");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".S&OC!PvOo>N?", (Object) jSONObject0);
      boolean boolean0 = jSONObject0.isNull(".S&OC!PvOo>N?");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("JSONArray[", 1497L);
      assertEquals(1497L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      jSONObject1.toString(1254, (-400));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.has("istoString");
      assertEquals(1, jSONObject0.length());
  }
}
