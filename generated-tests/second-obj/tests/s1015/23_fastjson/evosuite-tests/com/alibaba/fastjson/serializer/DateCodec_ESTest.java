/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:03:27 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      MockDate mockDate0 = new MockDate();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      dateCodec0.write(jSONSerializer0, mockDate0, jSONSerializer0, (Type) null, 161);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Float> class0 = Float.TYPE;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = dateCodec0.cast((DefaultJSONParser) null, (Type) class0, (Object) null, (Object) null);
      assertNull(mockThaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
      
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Float> class0 = Float.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      dateCodec0.write(jSONSerializer0, (Object) null, (Object) null, (Type) null, 829);
      assertEquals(2, dateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Vo/J");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Class<String> class0 = String.class;
      parserConfig0.checkAutoType((String) null, class0);
      Short short0 = new Short((short)1747);
      Date date0 = dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) class0, (Object) short0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FieldInfo fieldInfo0 = new FieldInfo("/+ate(0000-00-00t00:00:00", class0, class0, class0, (Field) null, 0, 0, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getFieldType();
      ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 124);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 124, 0);
      // Undeclared exception!
      try { 
        dateCodec0.deserialze(defaultJSONParser0, (Type) fieldInfo0.declaringClass, (Object) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/+ate(0000-00-00t00:00:00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Double double0 = new Double(0.0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FieldInfo fieldInfo0 = new FieldInfo(",pM2DbE", class0, class0, class0, (Field) null, 3, 3, 3);
      JSON.DEFFAULT_DATE_FORMAT = "/Date(yyyyMMddHHmmssbSSG";
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 22);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, type0, (Object) double0, (Object) "/Date(yyyyMMddHHmmssbSSG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Double double0 = new Double((-9.155555344578033));
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FieldInfo fieldInfo0 = new FieldInfo("0000-00-00t00:00:00", class0, class0, class0, (Field) null, 0, 0, 0);
      JSON.DEFFAULT_DATE_FORMAT = "]?iW";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 124);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 124, 0);
      dateCodec0.deserialze(defaultJSONParser0, (Type) fieldInfo0.declaringClass, (Object) null);
      Float float0 = new Float((-9.155555344578033));
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Double double0 = Double.valueOf(0.0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FieldInfo fieldInfo0 = new FieldInfo("Eyf+uOg", class0, class0, class0, (Field) null, 0, 0, 0);
      JSON.DEFFAULT_DATE_FORMAT = "";
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 78);
      jSONReaderScanner0.isRef();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Double.isFinite(55232);
      dateCodec0.cast(defaultJSONParser0, type0, (Object) double0, (Object) "");
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Double double0 = new Double((-27.551647969529718));
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FieldInfo fieldInfo0 = new FieldInfo("/Date(0000-00-00t00:00:00", class0, class0, class0, (Field) null, 0, 0, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getFieldType();
      ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 124);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        dateCodec0.deserialze(defaultJSONParser0, (Type) fieldInfo0.declaringClass, (Object) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(0000-00-00t00:00:00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSON.setDefaultTypeKey("0000-00-00");
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Double double0 = new Double(0.0);
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FieldInfo fieldInfo0 = new FieldInfo("0000-00-00", class0, class0, class0, (Field) null, 0, 0, 0);
      JSON.DEFFAULT_DATE_FORMAT = "";
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Locale locale0 = Locale.ITALIAN;
      Type type0 = beanContext0.getFieldType();
      dateCodec0.write(jSONSerializer0, double0, double0, type0, 0);
      ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 124);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 124, 0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      dateCodec0.deserialze(defaultJSONParser0, (Type) fieldInfo0.declaringClass, (Object) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) fieldInfo0.fieldClass, object0, (Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Double double0 = new Double((-27.551647969529718));
      Class<SerializerFeature> class0 = SerializerFeature.class;
      FieldInfo fieldInfo0 = new FieldInfo("/Date(0000-0000t0:0000", class0, class0, class0, (Field) null, (-24), 0, (-24));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(fieldInfo0.name_chars, 79);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        dateCodec0.deserialze(defaultJSONParser0, (Type) fieldInfo0.fieldClass, (Object) jSONReaderScanner0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(0000-0000t0:0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      Class<SerializerFeature> class0 = SerializerFeature.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      serializeConfig0.setPropertyNamingStrategy(propertyNamingStrategy0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("]\"r>F");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockFileWriter0, (-2207), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      FieldInfo fieldInfo0 = new FieldInfo("]\"r>F", class0, class0, class0, (Field) null, 0, 0, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class1 = Annotation.class;
      beanContext0.getAnnation(class1);
      Float.max((-2207), 0);
      Object object0 = new Object();
      Double double0 = new Double(0);
      dateCodec0.write(jSONSerializer0, double0, (Object) null, class1, 0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(mockFileReader0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[3] = serializerFeature2;
      serializerFeatureArray0[4] = serializerFeature1;
      SerializerFeature serializerFeature3 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[5] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[6] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[7] = serializerFeature5;
      SerializeWriter serializeWriter0 = new SerializeWriter(charArrayWriter0, 1975, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Double double0 = new Double(1975);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer1 = new JSONSerializer(jSONSerializer0.out, serializeConfig0);
      jSONSerializer0.applyName(jSONSerializer1, serializerFeature3, (String) null);
      Class<Integer> class0 = Integer.TYPE;
      Long long0 = new Long((-1854L));
      Double double1 = new Double((-1854L));
      dateCodec0.write(jSONSerializer0, double1, serializerFeature5, class0, 1975);
      assertEquals(26, serializeWriter0.size());
  }
}
