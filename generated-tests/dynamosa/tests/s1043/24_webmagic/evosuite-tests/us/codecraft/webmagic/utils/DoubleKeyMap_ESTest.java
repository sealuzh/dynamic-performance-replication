/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 21:56:50 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Object, Object>, Integer>>();
      DoubleKeyMap<String, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, Integer>(hashMap0);
      HashMap<HashMap<Object, Object>, Integer> hashMap1 = new HashMap<HashMap<Object, Object>, Integer>();
      hashMap0.put("", hashMap1);
      Map<HashMap<Object, Object>, Integer> map0 = doubleKeyMap0.remove("");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, "", hashMap1);
      Map<String, HashMap<String, Object>> map0 = doubleKeyMap0.remove((Map<Integer, String>) hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-52));
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      String string0 = doubleKeyMap0.remove(integer0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove("", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0);
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<String, Integer>, Map<String, Map<Integer, String>>, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Integer>, Map<String, Map<Integer, String>>, Integer>();
      Integer integer0 = doubleKeyMap1.remove((HashMap<String, Integer>) null, map0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<HashMap<Object, Object>, Map<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<Object, Object>, Map<String, Object>>>();
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<String, String>>();
      Map<String, Map<Object, Map<Integer, String>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<Integer, String>>(map0, class0);
      Map<Object, Map<Integer, String>> map1 = doubleKeyMap1.remove((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<HashMap<Object, Object>, Map<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<Object, Object>, Map<String, Object>>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Map<Map<Integer, String>, Map<Integer, HashMap<String, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Integer, String>, Integer, HashMap<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, String>, Integer, HashMap<String, Integer>>(map0);
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap2 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>();
      Map<Integer, String> map1 = doubleKeyMap2.newMap();
      Integer integer0 = new Integer(0);
      HashMap<String, Integer> hashMap0 = doubleKeyMap1.put(map1, integer0, (HashMap<String, Integer>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Map<Map<Integer, String>, Integer>, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Map<Integer, String>, Integer>, Map<Object, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>();
      Object object0 = doubleKeyMap1.put("", (String) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1825);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Object object0 = new Object();
      Integer integer1 = doubleKeyMap0.put("", object0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap0.put((Object) null, (String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, "ddi~.k", "ddi~.k");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.get((String) null, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Object, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, Map<Integer, String>>();
      Map<Integer, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>(map0);
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>();
      Object object0 = new Object();
      String string0 = doubleKeyMap2.get(object0, (Object) doubleKeyMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(hashMap0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) class0, "wrong proto type map ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<HashMap<Object, Object>, Map<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<Object, Object>, Map<String, Object>>>();
      DoubleKeyMap<Integer, String, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, String, HashMap<String, Object>>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(map0);
      Map<String, String> map1 = doubleKeyMap2.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, "ddi~.k", hashMap1);
      HashMap<String, Object> hashMap2 = doubleKeyMap0.remove((Map<Integer, String>) hashMap0, "FUbQ");
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, "ddi~.k", hashMap1);
      HashMap<String, Object> hashMap2 = doubleKeyMap0.put((Map<Integer, String>) hashMap0, "ddi~.k", hashMap1);
      assertNotNull(hashMap2);
      assertSame(hashMap2, hashMap1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      DoubleKeyMap<HashMap<Object, String>, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, String, Map<Object, Object>>();
      Map<Object, Object> map0 = doubleKeyMap0.get(hashMap0, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, String>, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, HashMap<String, Object>>((Map<String, Map<HashMap<String, String>, HashMap<String, Object>>>) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap0, hashMap1);
      HashMap<String, Object> hashMap2 = doubleKeyMap0.get("us.codecraft.webmagic.utils.DoubleKeyMap", (HashMap<String, String>) null);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<Integer, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Integer, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Map<String, Map<HashMap<Object, Object>, Map<String, Object>>>> hashMap0 = new HashMap<Object, Map<String, Map<HashMap<Object, Object>, Map<String, Object>>>>();
      DoubleKeyMap<Object, String, Map<HashMap<Object, Object>, Map<String, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<HashMap<Object, Object>, Map<String, Object>>>(hashMap0);
      Map<HashMap<Object, Object>, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (String) null, map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, HashMap<String, Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put((Map<Integer, String>) hashMap0, "ddi~.k", hashMap1);
      HashMap<String, Object> hashMap2 = doubleKeyMap0.remove((Map<Integer, String>) hashMap0, "ddi~.k");
      assertSame(hashMap2, hashMap1);
      assertNotNull(hashMap2);
  }
}
