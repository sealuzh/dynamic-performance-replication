/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:25:26 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteArray0, 1, (-1189));
      assertEquals(1, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(28);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)49;
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      String string0 = null;
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      segmentedByteString0.write(outputStream0);
      buffer0.writeUtf8("");
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(2);
      buffer1.sha256();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      buffer0.sha512();
      ByteString byteString0 = ByteString.decodeHex("");
      segmentedByteString0.equals(byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        segmentedByteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Pipe pipe1 = new Pipe(1L);
      Pipe pipe2 = new Pipe(1L);
      Buffer buffer0 = pipe2.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      pipe2.sourceClosed = true;
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.clear();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = pipe0.buffer;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, (-674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Pipe pipe1 = new Pipe(1L);
      Pipe pipe2 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = 0;
      Buffer buffer1 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString((long) 0, charset0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals((Object) null);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      Charset.defaultCharset();
      buffer1.clear();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      segmentedByteString0.rangeEquals((-4458), byteArray0, 0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1161L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer1.readString((long) 0, charset0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(633);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 0);
      segmentedByteString1.write(buffer0);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString2.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.equals(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.size();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.sha1();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.string((Charset) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-593));
      buffer0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Object object0 = new Object();
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.equals(object0);
      segmentedByteString0.asByteBuffer();
      String string0 = segmentedByteString0.base64();
      assertEquals("/w==", string0);
      
      boolean boolean0 = segmentedByteString0.rangeEquals(571, (byte[]) null, 31, 36);
      assertEquals(1, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-593));
      buffer0.clone();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Object object0 = new Object();
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.rangeEquals((-75), byteString0, 1598, 3368);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeInt((-593));
      buffer0.clone();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.write(buffer0);
      segmentedByteString0.toAsciiLowercase();
      assertFalse(buffer0.exhausted());
      assertEquals(5L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-593));
      buffer0.clone();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Object object0 = new Object();
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteString0, (-2767), (-593));
      assertTrue(boolean0);
      
      segmentedByteString0.hashCode();
      segmentedByteString0.hmacSha1(byteString0);
      assertEquals(1, byteString0.size());
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-593));
      buffer0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Object object0 = new Object();
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.equals(object0);
      assertEquals(1, segmentedByteString0.size());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 1);
      Object object1 = new Object();
      segmentedByteString1.toAsciiUppercase();
      ByteString byteString0 = segmentedByteString1.sha256();
      byteString0.asByteBuffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      boolean boolean0 = segmentedByteString1.rangeEquals(1, byteArray0, 31, (-2423));
      assertTrue(segmentedByteString1.equals((Object)segmentedByteString0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString byteString0 = ByteString.encodeUtf8("okio.SegmentedByteString");
      segmentedByteString0.compareTo(byteString0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-593));
      buffer0.readShort();
      buffer0.clone();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Object object0 = new Object();
      segmentedByteString0.asByteBuffer();
      assertEquals(1, segmentedByteString0.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      assertEquals(2, segmentedByteString1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-593));
      buffer0.readShort();
      buffer0.clone();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Object object0 = new Object();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("{KHwcyoWT$/CU6e");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertFalse(boolean0);
      
      segmentedByteString0.toAsciiLowercase();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-593));
      buffer0.readShort();
      buffer0.clone();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Object object0 = new Object();
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      ByteString byteString0 = ByteString.of(byteBuffer0);
      segmentedByteString0.equals(byteString0);
      assertEquals(1, byteBuffer0.position());
      
      segmentedByteString0.toAsciiLowercase();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-593));
      buffer0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Object object0 = new Object();
      segmentedByteString0.toAsciiUppercase();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteArray0, (-30), (-1014));
      MockFile mockFile0 = new MockFile("zL\"*qz/%/2v4 [4*+", "zL\"*qz/%/2v4 [4*+");
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("zL\"*qz/%/2v4 [4*+", charset0);
      boolean boolean1 = segmentedByteString0.rangeEquals(805, byteString0, (-1136), (-30));
      assertTrue(boolean1 == boolean0);
      
      String string0 = segmentedByteString0.base64();
      assertEquals(1, segmentedByteString0.size());
      assertEquals("/w==", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-593));
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      Buffer buffer1 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, 1, 1);
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      Object object0 = new Object();
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      assertEquals(1, byteBuffer0.position());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      buffer1.skip(2);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 2);
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertEquals(2, segmentedByteString1.size());
      assertFalse(segmentedByteString0.equals((Object)segmentedByteString1));
      assertEquals(2, segmentedByteString0.size());
      assertFalse(boolean0);
  }
}
