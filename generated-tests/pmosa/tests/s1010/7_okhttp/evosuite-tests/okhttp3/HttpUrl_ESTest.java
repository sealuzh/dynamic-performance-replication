/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 18:17:05 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.List;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("5lWfl^&iq", "");
      httpUrl_Builder0.addQueryParameter("5lWfl^&iq", "5lWfl^&iq");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("5lWfl^&iq");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("5lWfl^&iq");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.host("5lWfl^&iq");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("u!");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("^");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: ^
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter(".%2e", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(" \"':;<=>@[]^`{}|/?#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host:  \"':;<=>@[]^`{}|/?#
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("/:");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "PWvZoe4uR];?W";
      boolean boolean0 = true;
      HttpUrl.canonicalize("PWvZoe4uR];?W", 4, 4, "PWvZoe4uR];?W", true, true, true, true);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "endIndex > string.length: ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("endIndex > string.length: ");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("PWvZoe4uR];?W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: PWvZoe4uR];?W
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("\r");
      try { 
        MockURL.URL("\r", "s.H0I5/d7':cy}4@>", "r");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: \r
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "C9!tt";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("C9!tt");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("C9!tt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: C9!tt
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        HttpUrl.getChecked("zG");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for zG
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "PQz<3EaK";
      try { 
        HttpUrl.getChecked("PQz<3EaK");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for PQz<3EaK
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        HttpUrl.getChecked("f:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for f:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "stWP9Bd";
      try { 
        HttpUrl.getChecked("stWP9Bd");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for stWP9Bd
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("0", 122, (-1779));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.percentEncoded("M.Qyn0,INul", (-2319), (-2319));
      String string0 = "au`R";
      try { 
        MockURL.URL("", "", "au`R");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "v,kF!vN)C)x9>Yg";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("v,kF!vN)C)x9>Yg", "v,kF!vN)C)x9>Yg");
      httpUrl_Builder0.encodedPassword = "Expected leading [0-9] or '-' character but was 0x";
      httpUrl_Builder1.setEncodedQueryParameter("YiPGoz", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("jaqRGoGy");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("jaqRGoGy");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("jaqRGoGy");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      httpUrl_Builder0.query("");
      httpUrl_Builder0.removeAllEncodedQueryParameters("");
      try { 
        MockURL.URL((URL) null, "(?qd^iuxqi");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: (?qd^iuxqi
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("okhttp3.HttpUrl", (String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "TX1";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("TX1");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("TX1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: TX1
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("U#5]p]&bUf0c");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(87);
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("uDX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: uDX
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1065);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("%2e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.setPathSegment(43, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      httpUrl_Builder0.removeAllEncodedQueryParameters("ffff0000");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("");
      httpUrl_Builder0.removeAllEncodedQueryParameters("");
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("", "");
      String string0 = "";
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("", (String) null);
      String string2 = "(?Qd^iuxqI";
      // Undeclared exception!
      try { 
        httpUrl_Builder4.scheme("(?Qd^iuxqI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: (?Qd^iuxqI
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, (String) null, 15, 15, true);
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "/,U";
      HttpUrl.defaultPort("/,U");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("");
      httpUrl_Builder1.addPathSegments("uGhUlUP");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder2.encodedUsername("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("/,U");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "6";
      httpUrl_Builder0.addPathSegments("6");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 6
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(127, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(65536, "-");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65536, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password("");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%o";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(468, "%o");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 468, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "encodedPathSegments == null";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("encodedPathSegments == null");
      int int0 = (-90);
      String string1 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment((-90), "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("/");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("INVALID_PORT");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("&`!*g0fa3@U!Fs&Wnb!");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("INVALID_PORT");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.setQueryParameter("", "&`!*g0fa3@U!Fs&Wnb!");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPath("/...");
      String string0 = "::4";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::4");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("FO8{3");
      httpUrl1.toString();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("n7");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("n7");
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("R'4PKTAuuet?$9t", (String) null);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("n7");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.port((-884));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -884
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:/\r:9\r");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:/\r:9\r
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.parse("https:/\r:9\r");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "\r", 18, "\r");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:%");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:%
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".:%";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(".:%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .:%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.port(35);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/r:9");
      httpUrl0.encodedPassword();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue((-2011));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("5lWfl^&iq", "");
      String string0 = null;
      httpUrl_Builder0.setEncodedQueryParameter("", (String) null);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.scheme("jaqRGoGy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: jaqRGoGy
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(",s^IU6+4pUlZ&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment(".");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username(".");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment("bw7/ORW]y4p}V~.");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("%5E$Xd+E%", "", false, false, false, false);
      assertEquals("%255E$Xd+E%25", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query(".%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(1414, "0.^J:%");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1414, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setPathSegment(0, "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("size == 0", "size == 0");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("");
      httpUrl_Builder5.username("size == 0");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.setEncodedQueryParameter("Expected leading [0-9a-fA-F] character but was %#x", "Expected leading [0-9a-fA-F] character but was %#x");
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.canonicalize("%2e", "%2e", false, false, false, false);
      HttpUrl.defaultPort("%2e");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("4+y96B:WW)DFuY;=g");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("ZP~'b%F[hSuGs0%k:]");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment((-4181));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment("+|/~t");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl((HttpUrl.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "*wjT*ge]+~<L-9";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("https", "*wjT*ge]+~<L-9");
      String string1 = "-*C%;]Y=&[ML@p";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("-*C%;]Y=&[ML@p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: -*C%;]Y=&[ML@p
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("nJEN[Z", 3, 415);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("W$X#)%6dAk\"EB!", "htts:ttp#http", true, true, true, true);
      assertEquals("W$X%23)%6dAk\"EB!", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "m{H1.duYh!Cz";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("m{H1.duYh!Cz");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("m{H1.duYh!Cz");
      httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("Izz64wJ:>:O{g[f/SZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: Izz64wJ:>:O{g[f/SZ
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedUsername("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.query("(5_!R=Pt`");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = HttpUrl.percentDecode("[5{vYEbD+L", true);
      assertEquals("[5{vYEbD L", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        HttpUrl.getChecked("file:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for file:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("%252e");
      List<String> list0 = httpUrl_Builder1.encodedQueryNamesAndValues;
      httpUrl_Builder1.encodedQueryNamesAndValues = null;
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("");
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment((String) null);
      String string2 = "]";
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("]");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.effectivePort();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%%043");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %%043
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.decodeHexDigit('h');
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(",s^IU6+4pUlZ&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment(".");
      httpUrl_Builder2.username(".");
      httpUrl_Builder1.removeAllEncodedQueryParameters(",s^IU6+4pUlZ&");
      httpUrl_Builder0.removeAllEncodedQueryParameters("out == null");
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/meucyq5f.dk>s8ss");
      HttpUrl httpUrl1 = httpUrl0.resolve("; charset=utf-8");
      assertEquals("http://meucyq5f.dk>s8ss/;%20charset=utf-8", httpUrl1.toString());
      
      String string0 = httpUrl0.password();
      assertEquals("", string0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://meucyq5f.dk>s8ss/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/!9");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("https:/!9");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://!9/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "://";
      HttpUrl.queryStringToNamesAndValues("://");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string1 = "\\r";
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      HttpUrl.percentDecode(buffer0, "\r", 65535, 105, false);
      httpUrl1.queryParameterValues("\r");
      httpUrl1.uri();
      httpUrl0.resolve("::");
      httpUrl0.encodedPassword();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/meucyq5f.dkJss");
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder();
      httpUrl0.query();
      assertEquals("http://meucyq5f.dkjss/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.parse("https:/\r:9\r");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/r:9");
      httpUrl0.queryParameter("https:/r:9");
      httpUrl0.encodedQuery();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://r:9/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("R:=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: R:=
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("/:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: /:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("", "s<HqH>jsJ]QwCO,_~");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("s<HqH>jsJ]QwCO,_~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: s<HqH>jsJ]QwCO,_~
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("W");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      String string0 = "^WI";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("^WI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ^WI
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("VL-M1le6gdv_z");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for VL-M1le6gdv_z
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      httpUrl_Builder0.addEncodedPathSegment("\u2026]");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      httpUrl_Builder0.encodedFragment("\u2026]");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("8%2e");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("'MM.?YW+g?IJ0]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 'MM.?YW+g?IJ0]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("TWzI gb8<9%C%a&n");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("TWzI gb8<9%C%a&n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: TWzI gb8<9%C%a&n
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("ib6vfh%?s/yBN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ib6vfh%?s/yBN
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery(".%2e");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(".%2e");
      httpUrl_Builder1.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.parse("");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("", "7TtDk0+}tN0~^=B");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(3255);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("lu");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.fragment((String) null);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword(",s^IU6+4pUlZ&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment(".");
      httpUrl_Builder2.username(".");
      httpUrl_Builder1.removeAllEncodedQueryParameters(",s^IU6+4pUlZ&");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.removeAllEncodedQueryParameters("out == null");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("MbSamZ54>");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("\\");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("UzWht`j~gP 3");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("\\", ",s^IU6+4pUlZ&");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removePathSegment(0);
      httpUrl_Builder5.setQueryParameter("U33 jkRU", "http:");
      String string0 = null;
      httpUrl_Builder1.addQueryParameter("http:", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder5.addQueryParameter((String) null, "::");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("/:");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("/:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegment("/:");
      httpUrl_Builder2.encodedPath("/:");
      httpUrl_Builder2.host("FDfCG>QvM6");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl0.encodedPath();
      httpUrl0.encodedUsername();
      httpUrl0.encodedUsername();
      httpUrl0.toString();
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("://");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.percentDecode(buffer0, "://", 39, 39, false);
      List<String> list0 = httpUrl_Builder0.encodedQueryNamesAndValues;
      httpUrl0.uri();
      HttpUrl httpUrl2 = httpUrl0.resolve("");
      HttpUrl httpUrl3 = httpUrl2.resolve("::");
      httpUrl3.encodedPassword();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("");
      httpUrl_Builder0.removeAllQueryParameters("");
      try { 
        HttpUrl.getChecked("https:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "0.W:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0.W:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0.W:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "f:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("f:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: f:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "/:";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string1 = "08.\\'@k?U :%i$$:9p";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("08.'@k?U :%i$$:9p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 08.'@k?U :%i$$:9p
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "4u:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("4u:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4u:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("size=%s offset=%s byteCount=%s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: size=%s offset=%s byteCount=%s
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      MockURL.getPath(uRL0);
      httpUrl0.isHttps();
      String string0 = httpUrl0.encodedUsername();
      assertEquals("", string0);
      
      List<String> list0 = httpUrl0.pathSegments();
      assertFalse(list0.isEmpty());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("m%_MmGIk0C='");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("m%_MmGIk0C='");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("m%_MmGIk0C='", "m%_MmGIk0C='");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("m%_MmGIk0C='", "T-~oBs:Q>~f}xnE6O%");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.encodedUsername("m%_MmGIk0C='");
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "~N", 107, 107, true);
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder1.encodedQuery("~N");
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URI uRI0 = MockURL.toURI(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      int int0 = httpUrl0.pathSize();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(1, int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("#5[EC+;Y");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("?#");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.port(1);
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("#5[EC+;Y");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.removeAllEncodedQueryParameters("uD(u?\"]RBnd@");
      int int1 = httpUrl_Builder5.effectivePort();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("c%25BF5vtX|I");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::=
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/r:9");
      httpUrl0.queryParameter("https:/r:9");
      httpUrl0.query();
      URL uRL0 = httpUrl0.url();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://r:9/", uRL0.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/r:9");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-4156));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "\r", 11, "\r");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("://");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      assertNotNull(httpUrl1);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.percentDecode(buffer0, "\r", 65535, 105, false);
      httpUrl1.queryParameterValues("\r");
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder0);
      HttpUrl.canonicalize(buffer0, "://", 65535, (-1804557946), ">", true, true, true, true);
      httpUrl2.equals(httpUrl_Builder0);
      assertEquals(80, httpUrl2.port());
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl2.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "://";
      HttpUrl.queryStringToNamesAndValues("://");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.percentDecode(buffer0, "\r", 65535, 105, false);
      List<String> list0 = httpUrl1.queryParameterValues("\r");
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder0);
      HttpUrl.canonicalize(buffer0, "://", 65535, (-1804557946), ">", true, true, false, true);
      httpUrl_Builder0.addEncodedPathSegments("sh;m");
      HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
      // Undeclared exception!
      try { 
        httpUrl2.queryParameterName((-2051));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword("byteCount < 0: ");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0.'@k?U :%i$$:9p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0.'@k?U :%i$$:9p
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = "\\r";
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      httpUrl1.newBuilder();
      httpUrl1.url();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      httpUrl0.redact();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockURL.getHttpExample();
      try { 
        HttpUrl.getChecked("https:/:9");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:/:9
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("https:/\r:18f:");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%2e");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/r:9");
      httpUrl0.queryParameterNames();
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("users", (-1948), 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(".%2e");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment(".%2e");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("\r");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(32);
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("Z2HgR7hV&THBagufb%60", "http:/meucyq5f.dk>s8ss");
      httpUrl_Builder5.addEncodedPathSegment(".%2e");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("://");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      httpUrl1.queryParameterValues("0o,w2");
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder0);
      httpUrl_Builder0.addEncodedPathSegments("/");
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:/\r:9\r");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:/\r:9\r
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      httpUrl0.toString();
      HttpUrl httpUrl1 = HttpUrl.getChecked("http://www.somefakebutwellformedurl.org/fooExample");
      httpUrl1.querySize();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(7, "87%9+&Kc%a{y) Gn");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockURL.getHttpExample();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("(o+8gDvp*C", "wpq5%3e1%7dn3%dh1s");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegments("https:");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("\ry|F$Hr(+U");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/meucyq5f.dk>s8ss");
      httpUrl0.query();
      httpUrl0.port();
      httpUrl0.queryParameterNames();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("https:/www.somefakebutwellformedurl.org/fooexample");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("UTF-32LE");
      String string0 = "\r";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("\r");
      httpUrl_Builder3.encodedFragment("SK88tvQg<s#:e:P");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("SK88tvQg<s#:e:P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: SK88tvQg<s#:e:P
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "..");
      MockURL.getHttpExample();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("..");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter("..", "..");
      String string0 = "unexpected scheme: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.port((-1311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1311
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      HttpUrl httpUrl2 = httpUrl0.resolve("mYGrr`)pA");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl2.newBuilder();
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      httpUrl0.queryParameterValues(" #YH_`5XqC7 ];");
      HttpUrl httpUrl3 = new HttpUrl(httpUrl_Builder0);
      httpUrl1.equals("azaGPr,(_pu NFRf");
      httpUrl2.username();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("\r");
      httpUrl1.encodedUsername();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      httpUrl1.equals(httpUrl0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName((-124));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("+");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      Buffer buffer0 = new Buffer();
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      httpUrl_Builder0.addEncodedQueryParameter("", (String) null);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("zA{Qh&-UgqLGv", "6ze$wVZHgfTPy");
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/meucyq5f.dk>s8ss");
      httpUrl0.query();
      httpUrl0.queryParameter((String) null);
      httpUrl0.hashCode();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("Expected leading [0-9] or '-' character but was 0x");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("m", "okio.segmentpool");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllEncodedQueryParameters("Expected leading [0-9] or '-' character but was 0x");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllQueryParameters("okio.segmentpool");
      httpUrl_Builder4.removeAllQueryParameters("YTN4iD");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/meucyq5f.dkJs8ss");
      httpUrl0.uri();
      httpUrl0.scheme();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("https:meucyq5f.dkjs8ss", "https:meucyq5f.dkjs8ss");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "M+Ylaf,,H%?Df.U";
      try { 
        HttpUrl.getChecked("M+Ylaf,,H%?Df.U");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for M+Ylaf,,H%?Df.U
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http::5ezc*q5fdk>s8;s");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http::5ezc*q5fdk>s8;s
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[::^J:%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [::^J:%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "http:/meucyq5f.dkJs8ss";
      String string1 = "https:meucyq5f.dkjs8ss";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[/:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [/:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.URL("http:/meucyq5c.d?Js8ss");
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("http:/meucyq5c.d?Js8ss");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName((-2076022277));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 142922742, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/meucyq5c.d?Js8ss");
      httpUrl0.queryParameterValues(";uCCj(&;T;O&");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/meucyq5c.d?Js8ss");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(1148);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2297, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      httpUrl_Builder1.removeAllEncodedQueryParameters("`m8");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("byteCount > Integer.MAX_VALUE: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: byteCount > Integer.MAX_VALUE: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("b");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("::");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username("::");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("%2e.");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.encodedQuery("%2e.");
      // Undeclared exception!
      try { 
        httpUrl_Builder5.host("%2e.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %2e.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "\r", 18, "\r");
      HttpUrl.get(uRL0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/meucyq5c.d?Js8ss");
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "3yr%2fua]1vj.*", (-1812), (-1812), false);
      httpUrl0.fragment();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpUrl.getChecked("http:/mecyq5f.dkJs8ss");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "Q0");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("(V3Z)(Z)lHi<D,N-iw<");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("(V3Z)(Z)lHi<D,N-iw<", " \"'<>#&=");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.fragment(" \"'<>#&=");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(2746, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "PN%23@", "Z63%");
      HttpUrl.get(uRI0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "0::@kU :%$9", "0::@kU :%$9");
      HttpUrl.get(uRL0);
      try { 
        HttpUrl.getChecked("http");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for http
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.queryStringToNamesAndValues("http:");
      URI uRI0 = MockURI.URI("http:", "http:", "oBt/hB_R|kxS");
      HttpUrl.get(uRI0);
      String string0 = null;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      URL uRL0 = MockURI.toURL(uRI1);
      HttpUrl.get(uRL0);
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("%20f63nv;=evw", (-920), 6, "/*r=3F6", true, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.query();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl0.queryParameter("3");
      httpUrl0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "http", "http");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.query();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      httpUrl0.queryParameter("3");
      httpUrl0.uri();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("0::@kU :%$9");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("\n");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(64, "INVALID_HOST");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "4:4";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("4:4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4:4
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "qf`\\}N+43/WeC[|";
      int int0 = 968;
      HttpUrl.percentEncoded("qf`}N+43/WeC[|", 4, 968);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("h%&5wL7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: h%&5wL7
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/mnt/gaiagpfs/users/homedirs/apanichella/evosuite_performance/dataset/gordon_scripts_adaptive/projects/7_okhttp/.%2e");
      httpUrl0.redact();
      Buffer buffer0 = new Buffer();
      String string0 = "INVALID_HOST";
      int int0 = 3107;
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(3107);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/meucyq5c.d?Js8ss");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("http:/meucyq5c.d?Js8ss", "0:J^J:%");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("encodedPassword == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("0:J^J:%");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addQueryParameter("unexpected encodedPath: ", "http:/meucyq5c.d?Js8ss");
      httpUrl_Builder3.reencodeForUri();
      httpUrl0.encodedQuery();
  }
}
