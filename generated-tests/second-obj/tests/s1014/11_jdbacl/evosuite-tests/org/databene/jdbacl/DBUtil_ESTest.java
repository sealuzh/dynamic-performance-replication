/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:58:42 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.FormatableHashtable;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.databene.commons.ErrorHandler;
import org.databene.commons.bean.UntypedPropertyMutator;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainerSupport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.jdbc.FBArray;
import org.h2.Driver;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.Database;
import org.h2.engine.Session;
import org.h2.engine.User;
import org.h2.expression.Function;
import org.h2.jdbc.JdbcConnection;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.h2.tools.SimpleRowSource;
import org.hsqldb.jdbcDriver;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.util.PSQLException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.query("F.Z(3I+g", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DBUtil.connect("43X9A.U", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '43X9A.U.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBUtil.getOpenResultSetCount();
      DBUtil.escape("w[$v");
      String string0 = null;
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.queryScalar((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBUtil.getOpenConnectionCount();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("No JDBC driver class name provided", 46);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "org.hsqldb.Library.user", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: org.hsqldb.Library.user
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      try { 
        DBUtil.runScript("", "", (Connection) null, false, (ErrorHandler) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      simpleResultSet0.close();
      DBUtil.available("--*_<;hI;$", "2|uI]kS`K[:M", "2|uI]kS`K[:M", "2|uI]kS`K[:M");
      DBUtil.closeResultSetAndStatement(simpleResultSet0);
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("Te", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Connection connection0 = null;
      try { 
        DBUtil.getMetaData((Connection) null, "--MF,{awJw<k}#Zl!G&", "--MF,{awJw<k}#Zl!G&", true, false, false, false, (String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("--B^)", "No JDBC driver class name provided", "No JDBC driver class name provided", "No JDBC driver class name provided");
      ErrorHandler.getDefault();
      DBSchema dBSchema0 = new DBSchema("MLmW8;iud72S");
      DBUtil.dependencyOrderedTables(dBSchema0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "7H5{M -{L8,ICg&>1";
      Class<DBNotNullConstraint> class0 = DBNotNullConstraint.class;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      try { 
        pGConnectionPoolDataSource0.getConnection();
        fail("Expecting exception: PSQLException");
      
      } catch(PSQLException e) {
         //
         // The connection attempt failed.
         //
         verifyException("org.postgresql.core.v3.ConnectionFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("Ub\"zK|Iv4", "--B^)", "Ub\"zK|Iv4", "Ub\"zK|Iv4");
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting --B^) failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Driver driver0 = Driver.load();
      InsertNode insertNode0 = new InsertNode();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("^\"0lDm", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("^\"0lDm", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = DatabaseParameterBuffer.DUMMY_PACKET_INTERVAL;
      DBUtil.close((Connection) null);
      FBArray fBArray0 = new FBArray();
      FormatableHashtable formatableHashtable0 = new FormatableHashtable();
      assertTrue(formatableHashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Driver driver0 = Driver.load();
      Properties properties0 = new Properties();
      driver0.connect("org.hsqldb.Librry.user", properties0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("org.hsqldb.Librry.user", (Connection) null, false, (ErrorHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recover recover0 = new Recover();
      Recover recover1 = new Recover();
      int int0 = Function.QUARTER;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "%IO");
      FormatableHashtable formatableHashtable0 = new FormatableHashtable();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Driver driver0 = new Driver();
      String string0 = "$b@ubfSuXJTp\\<[";
      FileMonitor fileMonitor0 = new FileMonitor();
      fileMonitor0.getApplicationProperties();
      driver0.connect("$b@ubfSuXJTp<[", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Connection connection0 = null;
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript("P=mq\"s7@", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.nextLine(simpleResultSet0);
      simpleResultSet0.close();
      DBUtil.parseAndSimplifyResultSet(simpleResultSet0);
      DBUtil.closeResultSetAndStatement(simpleResultSet0);
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("AcG$g", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "Y5}jOa/F@0qP%} jp+y", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Driver driver0 = new Driver();
      FileMonitor fileMonitor0 = new FileMonitor();
      fileMonitor0.getApplicationProperties();
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      int int0 = DBUtil.executeUpdate((String) null, (Connection) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.nextLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      int int0 = Function.QUARTER;
      recover0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, true);
      Recover.execute("There are resources which have not been unregistered:", "lH.Qs$^@8P");
      DBUtil.assertAllDbResourcesClosed(false);
      DBUtil.resetMonitors();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = true;
      Recover recover0 = new Recover();
      String string0 = "m?";
      recover0.openFile("m?", "m?", true);
      int int0 = Function.QUARTER;
      recover0.getLobConnection();
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      Recover.execute("m?", "m?");
      DBUtil.runScript("", (Connection) null, true, (ErrorHandler) null);
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 1 connection(s)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      Recover.execute((String) null, "");
      DBUtil.runScript("", (Connection) null, false, (ErrorHandler) null);
      int int0 = DBUtil.executeUpdate("", (Connection) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "--MF,{awJw<k}#Zl!G&", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("--http://");
      errorHandler0.setLoggingStackTrace(false);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--http://", (Connection) null, true, errorHandler0);
      DBUtil.assertAllDbResourcesClosed((boolean) dBExecutionResult0.changedStructure);
      DBUtil.resetMonitors();
      Class<DBNotNullConstraint> class0 = DBNotNullConstraint.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("--http://", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData((String) null, "--B^)", (String) null, "WX)bAMF");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Driver driver0 = Driver.load();
      InsertNode insertNode0 = new InsertNode();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      driver0.connect("^\"0lDm", (Properties) null);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, true);
      // Undeclared exception!
      try { 
        DBUtil.queryLong("^\"0lDm", (Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      errorMessages0.next();
      try { 
        DBUtil.parseResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBUtil.existsEnvironment("de");
      String string0 = "AP";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.setLoginTimeout((-22583480));
      // Undeclared exception!
      try { 
        jdbcConnectionPool0.getConnection();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid value  for parameter \"url\" [90008-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }
}
