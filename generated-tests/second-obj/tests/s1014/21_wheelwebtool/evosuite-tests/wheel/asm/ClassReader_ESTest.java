/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:10:26 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ByteVector;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1863));
      classWriter0.newMethod("eWlW0hWo|,WrX", "eWlW0hWo|,WrX", "SourceFile", false);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '\"';
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("2tT;Z|\"i5");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getAccess();
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[1] = 'h';
      charArray0[5] = 'j';
      // Undeclared exception!
      try { 
        classReader0.readConst(706, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "wheel.asm.MethodWriter";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter((-697));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      int int0 = 7;
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = ' ';
      charArray0[2] = 'e';
      // Undeclared exception!
      try { 
        classReader1.readConst(7, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newMethod("SourceFile", "", "9Q", false);
      classReader0.getSuperName();
      int int0 = 725;
      classReader0.getItem(1);
      Locale.getISOLanguages();
      ClassReader classReader1 = new ClassReader("wheel.asm.MethodWriter");
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      // Undeclared exception!
      try { 
        classReader1.readConst(1525, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1525
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      byte byte0 = (byte)58;
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64077
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.getAccess();
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = '$';
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1863));
      classReader0.getAccess();
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      char[] charArray0 = new char[6];
      int int0 = 910;
      classReader0.accept((ClassVisitor) classWriter0, 910);
      // Undeclared exception!
      try { 
        classReader0.readConst((-1515), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1515
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
          ClassWriter classWriter0 = new ClassWriter(classReader0, (-1863));
          classReader0.getAccess();
          classReader0.getInterfaces();
          classReader0.getInterfaces();
          char[] charArray0 = new char[6];
          charArray0[5] = ':';
          charArray0[1] = 'j';
          charArray0[2] = 'j';
          charArray0[3] = 'j';
          classReader0.accept((ClassVisitor) classWriter0, 32);
          // Undeclared exception!
          try { 
            classReader0.readConst((-1863), charArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // -1863
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      classWriter0.newMethod("eWlW0hWo|,WrX", "eWlW0hWo|,WrX", "SourceFile", false);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '\u001F';
      classReader0.getItem(725);
      classReader0.getInterfaces();
      int int0 = 708;
      // Undeclared exception!
      try { 
        classReader0.readConst(708, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1863));
      classReader0.getAccess();
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      int int0 = 706;
      char[] charArray0 = new char[6];
      charArray0[5] = ':';
      charArray0[1] = '_';
      charArray0[2] = '_';
      // Undeclared exception!
      try { 
        classReader0.readShort((-1863));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1863
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter((-697));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassReader classReader2 = new ClassReader(classReader1.b);
      classReader2.accept((ClassVisitor) classAdapter0, (int) (byte)58);
      Label label0 = new Label();
      Label label1 = new Label();
      label0.getFirst();
      int int0 = 1737;
      Label[] labelArray0 = new Label[0];
      classReader2.readLabel(int0, labelArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)58;
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassWriter classWriter0 = new ClassWriter((-697));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader1.getSuperName();
      classWriter0.visitInnerClass("i:5lwN0_8}`@-", "LocalVariableTypeTable", "put", 4);
      classReader1.accept((ClassVisitor) classAdapter0, 1094);
      int int0 = 153;
      char[] charArray0 = new char[1];
      char char0 = 'l';
      charArray0[0] = char0;
      classReader0.readConst(int0, charArray0);
      ClassWriter classWriter1 = new ClassWriter(byte0);
      int int1 = 1834;
      classReader0.accept((ClassVisitor) classWriter1, int1);
      classReader0.copyPool(classWriter1);
      char[] charArray1 = null;
      int int2 = (-2348);
      classReader0.readConst(int2, charArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      classWriter0.newMethod("eWlW0hWo|,WrX", "eWlW0hWo|,WrX", "eWlW0hWo|,WrX", false);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '\u001F';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.asm.MethodWriter";
      classReader0.getSuperName();
      classReader0.readLong(2);
      classReader0.accept((ClassVisitor) classWriter0, 600);
      classReader0.readUnsignedShort(706);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.MethodWriter");
      int int0 = classWriter0.newMethod("wheel.asm.MethodWriter", "wheel.asm.MethodWriter", "wheel.asm.MethodWriter", false);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      classReader0.copyPool(classWriter0);
      charArray0[1] = '\f';
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, 2);
      classReader1.readConst(int0, charArray0);
      ClassWriter classWriter1 = new ClassWriter(classReader1.SKIP_CODE);
      classReader1.copyPool(classWriter1);
      int int1 = 10;
      classReader1.readUnsignedShort(int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      classReader0.getAccess();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1863));
      classReader0.accept((ClassVisitor) classWriter0, 269);
      classWriter0.newMethod("SourceFile", "2/d=z]", "LocalVariableTypeTable", false);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, 4);
      char[] charArray0 = new char[1];
      char char0 = 'E';
      charArray0[0] = char0;
      classReader0.readConst(classWriter0.COMPUTE_FRAMES, charArray0);
      int int0 = (-129);
      ClassWriter classWriter1 = new ClassWriter(int0);
      classReader0.copyPool(classWriter0);
      int int1 = 64;
      classReader1.readUnsignedShort(int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1863));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "eWlW0hWo|,WrX";
      stringArray0[1] = "2tT;Z|\"i5";
      stringArray0[2] = "wheel.asm.MethodWriter";
      stringArray0[3] = "eWlW0hWo|,WrX";
      stringArray0[4] = "2tT;Z|\"i5";
      stringArray0[5] = "wheel.asm.MethodWriter";
      stringArray0[6] = "eWlW0hWo|,WrX";
      stringArray0[7] = "2tT;Z|\"i5";
      stringArray0[8] = "eWlW0hWo|,WrX";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "2tT;Z|\"i5", "wheel.asm.MethodWriter", "2tT;Z|\"i5", stringArray0, false, false);
      classWriter0.firstMethod = methodWriter0;
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.put11(1, (-303));
      methodWriter0.put(byteVector1);
      classWriter0.newMethod("eWlW0hWo|,WrX", "eWlW0hWo|,WrX", "SourceFile", false);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '-';
      classReader0.readByte(198);
      // Undeclared exception!
      try { 
        classReader0.readConst(44, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
