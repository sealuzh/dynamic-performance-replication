/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 04:02:35 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.value.ValueDecimal;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog("call");
      dBCatalog0.setDoc("execute");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("call", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.normalize(" = ", true);
      assertEquals("=", string0);
      
      DBSchema dBSchema0 = new DBSchema("=");
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema =", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("PO<");
      SQLUtil.ownerDotComponent(dBCatalog0);
      SQLUtil.mutatesStructure("CURRENT_VALUE BIGINT");
      SQLUtil.typeAndName(dBCatalog0);
      dBCatalog0.getTable("J~pBi", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "J~pBi";
      stringArray0[1] = "catalog PO<";
      stringArray0[2] = "PO<";
      stringArray0[3] = " table: ";
      stringArray0[4] = "in best sort avoidance access path";
      stringArray0[5] = "PO<";
      stringArray0[6] = "PO<";
      stringArray0[7] = "J~pBi";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "catalog PO<", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("P8aCcxIP&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("P8aCcxIP&");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "IsW=gCfO=>9m2#";
      stringArray0[1] = "renamef";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "renamef", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (IsW=gCfO=>9m2#, renamef)", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("renamef");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      SQLUtil.mutatesDataOrStructure("");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.removeComments("");
      boolean boolean0 = SQLUtil.isDML("truncate=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema((String) null);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("%h}");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#");
      DBSchema dBSchema0 = new DBSchema("IsW=gCfO=>9m2#");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("IsW=gCfO=>9m2#", dBSchema0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("renamedeleteqw:sj`4x*qw0ov");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ">L_GK");
      SQLUtil.addOptionalCondition(">L_GK", stringBuilder0);
      assertEquals(">L_GK or >L_GK", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      SQLUtil.substituteMarkers("", "", "");
      SQLUtil.removeComments("''");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "IsW=gCfO=>9m2#";
      stringArray0[0] = "IsW=gCfO=>9m2#";
      stringArray0[1] = "kZv\"I";
      stringArray0[2] = " Fy^+dOb`(eH;lI";
      stringArray0[3] = "R__v<q\"lcm~v<?eJ";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" Fy^+dOb`(eH;lI", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultDBTable0.equals(mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("b:", "create unique indexor", "b:");
      assertEquals("b:", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.join("create unique indexor", "ds", stringArray0, "b:", "create unique indexor", stringArray0);
      assertEquals("create unique indexor join b: as create unique indexor on ", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = " [c3@h*vnivsZ'RTN?";
      stringArray0[1] = " [c3@h*vnivsZ'RTN?";
      stringArray0[2] = " [c3@h*vnivsZ'RTN?";
      stringArray0[3] = " [c3@h*vnivsZ'RTN?";
      stringArray0[4] = " [c3@h*vnivsZ'RTN?";
      stringArray0[5] = " [c3@h*vnivsZ'RTN?";
      SQLUtil.innerJoin(" [c3@h*vnivsZ'RTN?", stringArray0, " [c3@h*vnivsZ'RTN?", " [c3@h*vnivsZ'RTN?", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.join(" [c3@h*vnivsZ'RTN?", "", stringArray0, " [c3@h*vnivsZ'RTN?", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.removeComments("P8`aCcC{xIP&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P8`aCcC{xIP&";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE P8`aCcC{xIP& = 'P8`aCcC{xIP&'", string0);
      
      String string1 = SQLUtil.innerJoin((String) null, stringArray0, "P8`aCcC{xIP&", "P8`aCcC{xIP&", stringArray0);
      assertEquals("P8`aCcC{xIP& as P8`aCcC{xIP& on null.P8`aCcC{xIP& = P8`aCcC{xIP&.P8`aCcC{xIP&", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<=[RiN~_sc*U4Y6f#";
      stringArray0[1] = "<=[RiN~_sc*U4Y6f#";
      stringArray0[2] = "";
      String string0 = SQLUtil.join("", "<=[RiN~_sc*U4Y6f#", stringArray0, "<=[RiN~_sc*U4Y6f#", ":_ JUGnEI~ d+1yqm^;", stringArray0);
      assertEquals("<=[RiN~_sc*U4Y6f# as :_ JUGnEI~ d+1yqm^; on <=[RiN~_sc*U4Y6f#.<=[RiN~_sc*U4Y6f# = :_ JUGnEI~ d+1yqm^;.<=[RiN~_sc*U4Y6f# and <=[RiN~_sc*U4Y6f#.<=[RiN~_sc*U4Y6f# = :_ JUGnEI~ d+1yqm^;.<=[RiN~_sc*U4Y6f# and <=[RiN~_sc*U4Y6f#. = :_ JUGnEI~ d+1yqm^;.", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.removeComments("P8`aCcC{xIP&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("!Mu", false, defaultDBTable0, "QtNXD");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK QtNXD", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.normalize("", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}y_gxo:t=.");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("3wB?]1l2%8");
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(4354);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "constraint ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 0, "");
      defaultDBColumn0.setSize((Integer) null);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      SQLUtil.typeAndName(compositeDBObject0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "null ";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "exec:%?.*6,\"aaq=";
      SQLUtil.leftJoin("", stringArray0, stringArray0[4], "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "IsW=gCfO=>9m2#";
      stringArray0[0] = "IsW=gCfO=>9m2#";
      DBCatalog dBCatalog0 = new DBCatalog("IsW=gCfO=>9m2#");
      DBSchema dBSchema0 = new DBSchema("IsW=gCfO=>9m2#", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kZv\"I", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("IsW=gCfO=>9m2#", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-2685));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2685
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "Unknown constraint type: ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Unknown constraint type: ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UPDATE", defaultDBTable0, 95, "Unknown constraint type: ");
      defaultDBColumn0.getNotNullConstraint();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.derby.iapi.store.replication.master.MasterFactory";
      stringArray0[1] = "Unknown constraint type: ";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string1 = RawStoreFactory.PRE_ALLOCATE_PAGE;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IsW=gCfO=>9m2#";
      stringArray0[1] = "kZv\"I";
      stringArray0[2] = " Fy^+dOb`(eH;lI";
      stringArray0[3] = "R__v<q\"lcm~v<?eJ";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" Fy^+dOb`(eH;lI", (DBSchema) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  Fy^+dOb`(eH;lI WHERE IsW=gCfO=>9m2# = 'IsW=gCfO=>9m2#' AND kZv\"I = 'kZv\"I' AND  Fy^+dOb`(eH;lI = ' Fy^+dOb`(eH;lI' AND R__v<q\"lcm~v<?eJ = 'R__v<q\"lcm~v<?eJ'", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = null;
      String string1 = "'";
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      TableContainer tableContainer0 = new TableContainer((String) null);
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
      
      SQLUtil.removeComments("''");
      String string1 = FBConnectionProperties.ENCODING_PROPERTY;
      String string2 = SQLUtil.normalize("~", false);
      assertEquals("~", string2);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("''");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("''");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "''", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string3 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY ()", string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "''";
      stringArray0[1] = "encoding";
      stringArray0[2] = "encoding";
      stringArray0[6] = "PRIMARY KEY ()";
      stringArray0[4] = "''";
      stringArray0[6] = "";
      String string4 = SQLUtil.renderColumnListWithTableName("t]wKR T(6(-TQ$km=", stringArray0);
      assertEquals("t]wKR T(6(-TQ$km=.'', t]wKR T(6(-TQ$km=.encoding, t]wKR T(6(-TQ$km=.encoding, t]wKR T(6(-TQ$km=.null, t]wKR T(6(-TQ$km=.'', t]wKR T(6(-TQ$km=.null, t]wKR T(6(-TQ$km=.", string4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertEquals("null ", string0);
      
      String string1 = SQLUtil.normalize("update,", false);
      assertEquals("update,", string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesDataOrStructure("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      DBCatalog dBCatalog0 = new DBCatalog((String) null, (Database) null);
      DBSchema dBSchema0 = new DBSchema("create table", dBCatalog0);
      dBSchema0.getTables(false);
      dBSchema0.getTable("truncatefield_type");
      SQLUtil.typeAndName(dBCatalog0);
      Boolean boolean0 = Boolean.valueOf("qP!cgbh");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "create table";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "truncatefield_type";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) boolean0;
      objectArray0[6] = (Object) dBSchema0;
      objectArray0[7] = (Object) "truncatefield_type";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.removeComments(":%?.*6,\"AAQ=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":%?.*6,\"AAQ=");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":%?.*6,\"AAQ=", defaultDBTable0, (-24), "USERNAME");
      defaultDBColumn0.setName("");
      defaultDBColumn0.setSize((Integer) null);
      StringBuilder stringBuilder0 = new StringBuilder(":%?.*6,\"AAQ=");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(":%?.*6,\"AAQ=USERNAME", stringBuilder0.toString());
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" USERNAME NULL", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.normalize("P8aCcxIP&", false);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "P8aCcxIP&";
      SQLUtil.normalize("P8aCcxIP&", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.removeComments("P8aCcxIP&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$)@Q.");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P8aCcxIP&";
      stringArray0[1] = "$)@Q.";
      stringArray0[2] = "P8aCcxIP&";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" +/- SELECT COUNT(*) FROM ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" +/- SELECT COUNT(*) FROM \" FOREIGN KEY (P8aCcxIP&, $)@Q., P8aCcxIP&) REFERENCES $)@Q.(P8aCcxIP&, $)@Q., P8aCcxIP&)", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.removeComments(":%?.*6,\"AAQ=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":%?.*6,\"AAQ=");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":%?.*6,\"AAQ=", defaultDBTable0, (-24), "USERNAME");
      defaultDBColumn0.setSize((Integer) null);
      StringBuilder stringBuilder0 = new StringBuilder(":%?.*6,\"AAQ=");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals(":%?.*6,\"AAQ=USERNAME", stringBuilder0.toString());
      
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize("P8aCcxIP&", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop indexconstraint isw=gcfo=>9m2#");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-24), "drop indexconstraint isw=gcfo=>9m2#");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setSize(integer0);
      StringBuilder stringBuilder0 = new StringBuilder("q+RcAly4");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("q+RcAly4DROP INDEXCONSTRAINT ISW=GCFO=>9M2#(3)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "IsW=gCfO=>9m2#";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("pbSslMqRgj(g8*");
      TableContainer tableContainer0 = new TableContainer("23lcw");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yD}'D$/hy", (DBSchema) null);
      String[] stringArray1 = new String[1];
      stringArray1[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.mutatesStructure("command");
      String[] stringArray2 = new String[9];
      stringArray2[0] = "update";
      stringArray2[1] = "23lcw";
      stringArray2[2] = "|hL(}";
      stringArray2[3] = "update";
      stringArray2[4] = "'";
      stringArray2[5] = "IsW=gCfO=>9m2#";
      stringArray2[6] = "23lcw";
      stringArray2[7] = "update";
      stringArray2[8] = "update";
      // Undeclared exception!
      try { 
        SQLUtil.join("update", "bc$HWcj^o]mB|RXla", stringArray2, " or ", "update", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("IsW=gCfO=>9m2#", defaultDBTable0, 286, "IsW=gCfO=>9m2#");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HMI9G9P&L)HJ%3EC)8");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("wu<4eVNt~", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.removeComments("6t'6W`uJUi^#pbWe@");
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("=tFO\"afS<$", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#", dBSchema0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultDBTable0.getPrimaryKeyConstraint();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDBTable0.equals((Object) null);
      SQLUtil.parseColumnTypeAndSize(", ");
      SQLUtil.isQuery("select");
      SQLUtil.renderValue(mockThaiBuddhistDate0);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("|B<a}pwC'", true);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("-=,Nh#kA!\u0007yIE-YLd`");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("!A$s@ThHzRo.15\"L^U6", defaultDBTable1, (-1970426672), "y5(VaS* Hu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: y5(VaS* Hu
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("IsW=gCfO=>9m2#", false);
      assertEquals("IsW = gCfO = > 9m2 #", string0);
      
      TableContainer tableContainer0 = new TableContainer("inner");
      tableContainer0.getSchema();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/11_jdbacl");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)1;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW = gCfO = > 9m2 #", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3*SU[\"a [0.1");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultDBTable0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      MockFile mockFile0 = new MockFile("01504", "cv@KTwuL$DER-!Nw");
      File file0 = MockFile.createTempFile("(muS6% LZEX~-x/", (String) null, (File) mockFile0);
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("m?CLj5%Sn{Og0]A]U", true);
      assertEquals("m ? CLj5 % Sn { Og0 ] A ] U", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.hsqldb.Session");
      String string1 = SQLUtil.normalize("org.hsqldb.Session", true);
      assertEquals("org.hsqldb.Session", string1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1182143763), "http[//");
      Integer integer0 = new Integer((-1182143763));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("http[//", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("http[// HTTP[//(-1182143763) NULL", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("http[//, http[//", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("IsW=gCfO=>9m2#", defaultDBTable0, 286, "IsW=gCfO=>9m2#");
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("IsW=gCfO=>9m2#, IsW=gCfO=>9m2#, IsW=gCfO=>9m2#, IsW=gCfO=>9m2#, IsW=gCfO=>9m2#, IsW=gCfO=>9m2#", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n72]tz");
      String string0 = SQLUtil.normalize("/>\n", false);
      assertEquals("/ >", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("deletebw:sj`4*qw0ov", true);
      assertEquals("deletebw : sj ` 4 * qw0ov", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N3qp");
      String string1 = SQLUtil.normalize("/9`8fqD), GhB(4 3", true);
      assertEquals("/ 9 ` 8fqD), GhB (4 3", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("IsW=gCfO=>9m2#", false);
      assertEquals("IsW = gCfO = > 9m2 #", string0);
      
      SQLUtil.parseColumnTypeAndSize("}3Sld-O2OEP/\"GZ");
      boolean boolean0 = SQLUtil.isQuery("IsW=gCfO=>9m2#");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.renderValue("IsW=gCfO=>9m2#");
      assertEquals("'IsW=gCfO=>9m2#'", string1);
      
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'IsW=gCfO=>9m2#'";
      stringArray0[1] = "IsW=gCfO=>9m2#";
      stringArray0[2] = "'IsW=gCfO=>9m2#'";
      stringArray0[3] = "}3Sld-O2OEP/\"GZ";
      stringArray0[4] = "IsW = gCfO = > 9m2 #";
      stringArray0[5] = "IsW = gCfO = > 9m2 #";
      stringArray0[6] = "}3Sld-O2OEP/\"GZ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "}3Sld-O2OEP/\"GZ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("IsW=gCfO=>9m2#", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("IsW=gCfO=>9m2#", dBTable0, (-566913157), "IsW = gCfO = > 9m2 #");
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string2 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("IsW=gCfO=>9m2#", string2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("IsW=gCfO=>9m2#", false);
      assertEquals("IsW = gCfO = > 9m2 #", string0);
      
      boolean boolean0 = SQLUtil.isQuery("IsW=gCfO=>9m2#");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.renderValue("IsW=gCfO=>9m2#");
      assertEquals("'IsW=gCfO=>9m2#'", string1);
      
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'IsW=gCfO=>9m2#'";
      stringArray0[1] = "IsW=gCfO=>9m2#";
      stringArray0[2] = "'IsW=gCfO=>9m2#'";
      stringArray0[3] = "}3Sld-O2OEP/\"GZ";
      stringArray0[4] = "IsW = gCfO = > 9m2 #";
      stringArray0[5] = "IsW = gCfO = > 9m2 #";
      stringArray0[6] = "}3Sld-O2OEP/\"GZ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "}3Sld-O2OEP/\"GZ", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("IsW=gCfO=>9m2#", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("IsW=gCfO=>9m2#", dBTable0, (-566913157), "IsW = gCfO = > 9m2 #");
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string2 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("IsW=gCfO=>9m2#", string2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.normalize("&)", false);
      TableContainer tableContainer0 = new TableContainer("7g2%q;iD/c^ErC");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*0GdLlm$E1< ", (DBSchema) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LpKbEcvYly @QD");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "7g2%q;iD/c^ErC";
      mockPrintWriter0.printf("drop table42z00.u", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("*0GdLlm$E1< ", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("80000000-00d1-15fc-60b9-000a0a0b1500");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S=4a/>U", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1454, "PRIMARY KEY ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("S=4a/>U", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFileWriter mockFileWriter0 = new MockFileWriter("^;qx7{jM[dd*!D9e.5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) defaultDBTable0;
      objectArray0[1] = (Object) defaultDBTable0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "S=4a/>U";
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      objectArray0[5] = (Object) valueDecimal0;
      objectArray0[6] = (Object) "S=4a/>U";
      objectArray0[7] = (Object) "PRIMARY KEY ";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "PRIMARY KEY ", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("CHECK ");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (-5369.168134);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 5369.168134", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.removeComments("isw=");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "isw=";
      stringArray0[1] = "isw=";
      stringArray0[2] = "insert/>";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(isw=, isw=, insert/>)", string0);
      
      String string1 = SQLUtil.normalize("--", false);
      assertEquals("--", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "deleteqw:sj`4X*qw0ov";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      SQLUtil.normalize("Execption occured in clone() method", false);
      String string1 = "-=,Nh#kA!\\7yIE-YLd`";
      String string2 = "@x9xP8uZ VDRm$[";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("@x9xP8uZ VDRm$[");
      String string3 = "!A$s@ThHzRo.15\"L^U6";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Execption occured in clone () method", defaultDBTable0, (-1970426672), "Execption occured in clone () method");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      String string0 = "Execption occured in clone() method";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Execption occured in clone() method", defaultDBTable0, 41, "Execption occured in clone() method");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JjKIYHj,&HwGo");
      String string0 = SQLUtil.normalize("isw=", true);
      assertEquals("isw =", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("JjKIYHj,&HwGo");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("call");
      String string1 = SQLUtil.normalize("-- [", false);
      assertEquals("-- [", string1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jXv ;^]:!AKUWi}[5");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CPYT9mvVoeU:Ih&u3", defaultDBTable0, 491, "jXv ;^]:!AKUWi}[5");
      String string0 = SQLUtil.normalize("8aZaUJ[zA\"yb|", true);
      assertEquals("8aZaUJ [ zA \"yb|\"", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execute^7_faj$i']d", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IsW=gCfO=>9m2#");
      DBSchema dBSchema0 = new DBSchema("IsW=gCfO=>9m2#");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("IsW=gCfO=>9m2#", dBSchema0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "IsW=gCfO=>9m2#", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("IsW=gCfO=>9m2#", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("IsW=gCfO=>9m2#CONSTRAINT IsW=gCfO=>9m2# ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("V-62[1Jn@|Mg**Nv`|", false);
      SQLUtil.removeComments("P8aCcxIP&");
      defaultDBTable0.getPrimaryKeyConstraint();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("P8aCcxIP&", stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("P8aCcxIP&", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLUtil.removeComments("org.h2value.ValueTiestamp");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2value.ValueTiestamp";
      stringArray0[1] = "org.h2value.ValueTiestamp";
      stringArray0[2] = "org.h2value.ValueTiestamp";
      stringArray0[3] = "org.h2value.ValueTiestamp";
      stringArray0[4] = "org.h2value.ValueTiestamp";
      stringArray0[5] = "org.h2value.ValueTiestamp";
      stringArray0[6] = "org.h2value.ValueTiestamp";
      stringArray0[7] = "org.h2value.ValueTiestamp";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(org.h2value.ValueTiestamp, org.h2value.ValueTiestamp, org.h2value.ValueTiestamp, org.h2value.ValueTiestamp, org.h2value.ValueTiestamp, org.h2value.ValueTiestamp, org.h2value.ValueTiestamp, org.h2value.ValueTiestamp)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.h2value.ValueTiestamp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-1475), "getRef");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("http[//", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("NJJ(/*7vbeRRA", defaultDBTable0, dBDataType0, integer1, integer1);
      defaultDBColumn1.isUnique();
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("GETREF(0,0)", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
      
      SQLUtil.removeComments("");
      String string1 = SQLUtil.normalize("NJJ(/*7vbeRRA", false);
      assertEquals("NJJ (/* 7vbeRRA", string1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLUtil.normalize("Execption ocured inone() meshd", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("renamesmallint", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x/ 2oN");
      StringBuilder stringBuilder0 = new StringBuilder("Execption ocured inone() meshd");
      DBDataType dBDataType0 = DBDataType.getInstance(800, "getNewRow()");
      Integer integer0 = RawTransaction.COMMIT;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop table'", false, defaultDBTable0, "renamesmallint");
      stringBuilder0.append((Object) dBCheckConstraint0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view(", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.removeComments("alter materialized view(");
      defaultDBColumn0.setNullable(false);
      SQLUtil.normalize("7?o5", false);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("Execption ocured inone() meshdCONSTRAINT drop table'CHECK renamesmallintGETNEWROW()(0)", stringBuilder0.toString());
      
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      SQLUtil.normalize("uH?", false);
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("alter materialized view( NOT NULL", string0);
  }
}
