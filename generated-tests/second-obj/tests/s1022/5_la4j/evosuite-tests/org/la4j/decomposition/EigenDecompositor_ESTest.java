/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:46:15 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2882, 668, 1.570092458683775E-14);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 8;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, (double)0, (double)0, (double)8, 230.0651462702).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(0, vectorFunction0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("ude^`_1eO");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 0.0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.applicableTo(rowMajorSparseMatrix0);
      Matrix matrix0 = rowMajorSparseMatrix0.copy();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.1102230246251565E-14, 1.1102230246251565E-14, 0.0, 1.1102230246251565E-14, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(0, vectorFunction0);
      eigenDecompositor0.applicableTo(matrix0);
      eigenDecompositor0.decompose();
      Random.setNextRandom(47);
      eigenDecompositor0.applicableTo(matrix0);
      Random.setNextRandom((-737));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1355.0;
      doubleArray1[1] = 1.403378804993593;
      doubleArray1[2] = (-1937.26);
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix1 = SparseMatrix.from2DArray(doubleArray0);
      eigenDecompositor0.matrix = (Matrix) sparseMatrix1;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 5106.264994;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      Random.setNextRandom((-3106));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      Random.setNextRandom((-3106));
      boolean boolean0 = eigenDecompositor0.applicableTo(matrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, (-1700.427276232));
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      rowMajorSparseMatrix0.copy();
      DenseVector.unit(8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.1102230246251565E-14, 1.1102230246251565E-14, (-1700.427276232), 1.1102230246251565E-14, (-1700.427276232)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(0, vectorFunction0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = rowMajorSparseMatrix0.transpose();
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(matrix0);
      Random.setNextRandom((-748));
      eigenDecompositor0.decompose();
      eigenDecompositor1.decompose();
      boolean boolean0 = eigenDecompositor0.applicableTo(rowMajorSparseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, 0.0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.applicableTo(rowMajorSparseMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, (double)8, 0.0, (double)8, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(4, vectorFunction0);
      eigenDecompositor0.decompose();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = 0.0;
      SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(4, 8, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, (-1.4033788049935811));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-7.976670342631465), (-7.976670342631465), (-1.4033788049935811), (-7.976670342631465), (-1.4033788049935811)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(0, vectorFunction0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct1.apply(sparseVector0, sparseVector0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.matrix = (Matrix) rowMajorSparseMatrix0;
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      ooPlaceOuterProduct1.ensureApplicableTo(sparseVector0, sparseVector0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.transpose();
      EigenDecompositor eigenDecompositor2 = new EigenDecompositor(cCSMatrix0);
      eigenDecompositor1.decompose();
      Random.setNextRandom(0);
      eigenDecompositor2.decompose();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(8, (-1.4033788049935811));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.1102230246251565E-14, 1.1102230246251565E-14, (-1.4033788049935811), 1.1102230246251565E-14, (-1.4033788049935811)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      rowMajorSparseMatrix0.updateRow(0, vectorFunction0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct1.apply(sparseVector0, sparseVector0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.matrix = (Matrix) rowMajorSparseMatrix0;
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.decompose();
      ooPlaceOuterProduct1.ensureApplicableTo(sparseVector0, sparseVector0);
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.transpose();
      EigenDecompositor eigenDecompositor2 = new EigenDecompositor(cCSMatrix0);
      eigenDecompositor1.decompose();
      Random.setNextRandom(0);
      eigenDecompositor2.decompose();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
