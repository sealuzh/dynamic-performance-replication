/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:49:01 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Method> class0 = Method.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      String string0 = "SimpleElementValue class does not know how to stringify type ";
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "SimpleElementValue class does not know how to stringify type ");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      syntheticRepository0.loadClass(class0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0005DwFQQC=/W";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      java.lang.ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      classLoader1.getParent();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader1);
      java.lang.ClassLoader.getSystemClassLoader();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      classLoaderRepository0.findClass("java.nio.ByteBuffer");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "\r");
      Class2HTML.referenceType("getConstantString called with illegal tag ");
      Class2HTML.referenceType("java.nio.ByteBuffer");
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[7];
      stringArray1[0] = "void";
      stringArray1[1] = "void";
      stringArray1[2] = "iF";
      stringArray1[3] = "void";
      stringArray1[4] = "-T=|A#RY)";
      stringArray1[5] = "monitorenter";
      stringArray1[6] = "<A HREF=\"java.nio.ByteBuffer.html\" TARGET=_top>java.nio.ByteBuffer</A>";
      try { 
        Class2HTML.main(stringArray1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class2HTML.toHTML("Wt2;8:)W#%n+!= Q");
      Class2HTML.toHTML("<HTML>\n<HEAD><TITLE>Documentation for ");
      Class2HTML.toHTML("&lt;HTML&gt;\n&lt;HEAD&gt;&lt;TITLE&gt;Documentation for ");
      Class2HTML.referenceType("?q1TVHQ%QGi|7M%I");
      // Undeclared exception!
      try { 
        Signature.translate("<HTML>\n<HEAD><TITLE>Documentation for ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: <HTML>
         // <HEAD><TITLE>Documentation for  read H
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class2HTML.toHTML("~x,jH<>aV?B=~.% J36");
      Class2HTML.toHTML("<HTML>\n<HEAD><TITLE>Documentation for ");
      Class2HTML.toHTML("&lt;HTML&gt;\n&lt;HEAD&gt;&lt;TITLE&gt;Documentation for ");
      Class2HTML.toHTML("~x,jH&lt;&gt;aV?B=~.% J36");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~x,jH<>aV?B=~.% J36";
      stringArray0[1] = "-zip";
      stringArray0[2] = "~x,jH<>aV?B=~.% J36";
      stringArray0[3] = "&lt;HTML&gt;\n&lt;HEAD&gt;&lt;TITLE&gt;Documentation for ";
      stringArray0[4] = "~x,jH<>aV?B=~.% J36";
      stringArray0[5] = "<HTML>\n<HEAD><TITLE>Documentation for ";
      stringArray0[6] = "&lt;HTML&gt;\n&lt;HEAD&gt;&lt;TITLE&gt;Documentation for ";
      stringArray0[7] = "<HTML>\n<HEAD><TITLE>Documentation for ";
      stringArray0[8] = "~x,jH&lt;&gt;aV?B=~.% J36";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // ~x,jH<>aV?B=~.% J36 (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassPath classPath0 = new ClassPath("");
      Class2HTML.toHTML("-d");
      Class2HTML.toHTML("-d");
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".kzJ7]YL>)>s";
      stringArray0[1] = "<HTML>\n<HEAD><TITLE>Documentation for ";
      stringArray0[2] = ".kzJ7]YL>)>s";
      stringArray0[3] = "-d";
      stringArray0[4] = "-d";
      stringArray0[5] = ".kzJ7]YL>)>s";
      stringArray0[6] = "-d";
      stringArray0[7] = "-d";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Pattern.quote("-d");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-d";
      stringArray0[1] = "Q-dE";
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "-d";
      stringArray0[0] = "-d";
      // Undeclared exception!
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.util.Class2HTML", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SyntheticRepository.getInstance();
      Class2HTML.toHTML("C TA!GET=ConNtantPoo8>");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "rD\"`p</S?EF>W";
      stringArray0[1] = "</A>(";
      stringArray0[2] = "-d";
      stringArray0[3] = "class/";
      stringArray0[4] = "</A>(";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<InputStream> class0 = InputStream.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      assertEquals("java.io.InputStream", javaClass0.getClassName());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/1_bcel/EQV ;K&mjava.io.InputStream_cp.html");
      FileSystemHandling.createFolder(evoSuiteFile0);
      javaClass0.setClassName("Unknown option ");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "EQV ;K&m");
      String string0 = Class2HTML.toHTML("java.io.PipedInputStream");
      assertEquals("java.io.PipedInputStream", string0);
  }
}
