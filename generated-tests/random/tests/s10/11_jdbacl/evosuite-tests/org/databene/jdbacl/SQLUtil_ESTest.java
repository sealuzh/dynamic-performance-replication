/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 18:22:26 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.List;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vO6EB{$jjA\"r)]");
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null", (DBSchema) null);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized viewpaajw+d:", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("jV");
      String string0 = SQLUtil.renderValue(jMXPrincipal0);
      assertEquals("JMXPrincipal:  jV", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted("jaNiiS=H=6j2", "alter indexalter tableupdate", " on ", false, "|%MP5!lh|1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextQuoted0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-11), "drop tabletruncategv");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|a\"=<qumv#g~)!+", (DBTable) null, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("DROP TABLETRUNCATEGV(3,3)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" server could not be started. Possible cause: another server is already running on ");
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create table.create table", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("create table");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("null", stringArray0, "null", "null", stringArray0);
      assertEquals("left join null as null on ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.leftJoin("e.08.LE'z>]", stringArray0, "call", "A.HJpQ7}%WiC6ZNOJ!A", stringArray0);
      assertEquals("left join call as A.HJpQ7}%WiC6ZNOJ!A on e.08.LE'z>].null = A.HJpQ7}%WiC6ZNOJ!A.null and e.08.LE'z>].null = A.HJpQ7}%WiC6ZNOJ!A.null and e.08.LE'z>].null = A.HJpQ7}%WiC6ZNOJ!A.null and e.08.LE'z>].null = A.HJpQ7}%WiC6ZNOJ!A.null and e.08.LE'z>].null = A.HJpQ7}%WiC6ZNOJ!A.null and e.08.LE'z>].null = A.HJpQ7}%WiC6ZNOJ!A.null and e.08.LE'z>].null = A.HJpQ7}%WiC6ZNOJ!A.null and e.08.LE'z>].null = A.HJpQ7}%WiC6ZNOJ!A.null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("alter materialized viewov7y", "create unique index", (String[]) null, "with UUID ", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "drop table", "drop index", stringArray0);
      assertEquals("drop table as drop index on null.null = drop index.null and null.null = drop index.null and null.null = drop index.null and null.null = drop index.null and null.null = drop index.null and null.null = drop index.null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("e>", stringArray0, ";Xc[2", ";Xc[2", stringArray0);
      assertEquals(";Xc[2 as ;Xc[2 on ", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("exec", "org.firebirdsql.gds.impl.wire.BlobParameterBufferImp", (String[]) null, "org.firebirdsql.gds.impl.wire.BlobParameterBufferImp", "org.firebirdsql.gds.impl.wire.BlobParameterBufferImp", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("J+f}_i3@2flQr<,]=i");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("J+f}_i3@2flQr<,]=i", false);
      assertEquals("J + f } _i3 @ 2flQr <, ] = i", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.isDDL("paaJW+d:");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" KEY(");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("drop index");
      assertTrue(boolean1);
      
      String string0 = SQLUtil.substituteMarkers("{t", "call2zz$rv", (Object) null);
      assertEquals("{t", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "p=]i&|bZ7Jf 0(?$R";
      SQLUtil.mutatesStructure("p=]i&|bZ7Jf 0(?$R");
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("callalter table");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("//");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "JMXPrincipal:  jV";
      SQLUtil.renderColumnNames(stringArray0);
      String string0 = "pltMNk<XR@sHN";
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[9];
      stringArray0[8] = "updategv";
      SQLUtil.renderColumnListWithTableName("updategv", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("callalter table");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(40, 0);
      SQLUtil.renderNumber(streamTokenizer0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("//");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize(":]zX{-'-", false);
      assertEquals(": ] zX { - '-'", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("--", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("po3|Sr -Ef^2TA-+", true);
      assertEquals("po3 | Sr - Ef ^ 2TA - +", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("`0#*ACr/]", false);
      assertEquals("` 0 # * ACr / ]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("nP&UvxfU.Sq", true);
      assertEquals("nP & Uv  xfU.Sq ", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize("9=aH^I[&pz>o(T5", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLUtil.normalize("()", true);
      String string0 = "V";
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.removeComments("conglomera as ( join ) on join. join  = ( join ). join ");
      String string0 = "conglomera";
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "()");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized viewov7y", false, (String[]) null);
      defaultDBTable0.setName("with UUID ");
      StringBuilder stringBuilder0 = new StringBuilder("alter materialized viewov7y");
      StringBuilder stringBuilder1 = stringBuilder0.append(0L);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.addRequiredCondition("()", stringBuilder1);
      assertEquals("alter materialized viewov7y0CONSTRAINT \"alter materialized viewov7y\"  and ()", stringBuilder1.toString());
      assertEquals("alter materialized viewov7y0CONSTRAINT \"alter materialized viewov7y\"  and ()", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("051!A]uDCU0v!");
      String[] stringArray0 = new String[4];
      stringArray0[3] = "051!A]uDCU0v!";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "051!A]uDCU0v!", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("N/p73Icz||McvQHsN", false, "Mg}5ykNbMK{AQ^f+", "null");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT N/p73Icz||McvQHsN ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vO6EB{$jjA\"r)]");
      String[] stringArray0 = new String[2];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES vO6EB{$jjA\"r)](, )", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" - ");
      String[] stringArray0 = new String[6];
      stringArray0[5] = "dYM{w=7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select intoz|g*", false, stringArray0);
      SQLUtil.isDML("+N]mm");
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      String string0 = "8pIK-05jOx>7>R|";
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-11), "drop tabletruncategv");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.max(969, 969);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|a\"=<qumv#g~)!+", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("|a\"=<qumv#g~)!+", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(40);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "paaJW+d:");
      char[] charArray0 = new char[5];
      StringBuilder stringBuilder2 = stringBuilder1.insert(2, charArray0);
      SQLUtil.addOptionalCondition("paaJW+d:", stringBuilder2);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(4);
      SQLUtil.addOptionalCondition("join", stringBuilder0);
      Database database0 = null;
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("3!m8\u0005!fE6=kq_");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("3!m8\u0005!fE6=kq_", true, "jLps_V*XzGg(#z>", "n");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec1);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("J&{z'9R9?Xn2hU: ", stringBuilder1);
      stringBuilder2.append(string0);
      assertEquals("CONSTRAINT 3!m8\u0005!fE6=kq_ CONSTRAINT 3!m8\u0005!fE6=kq_  and J&{z'9R9?Xn2hU: CONSTRAINT 3!m8\u0005!fE6=kq_ ", stringBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("derby.version.beta", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.replace((-24), 13, "derby.version.beta");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -24
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" - ");
      String[] stringArray0 = new String[6];
      stringArray0[5] = "dYM{w=7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select intoz|g*", false, stringArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+N]mm", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string0 = "8pIK-05jOx>7>R|";
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null", (DBSchema) null);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized viewpaajw+d:", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("null", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "exec";
      SQLUtil.mutatesStructure("exec");
      String[] stringArray0 = null;
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("truncategv");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncategv");
      assertEquals("truncategv", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selectj;ws;nf,;hde${>b6p");
      String string0 = "constraint";
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableupdate");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter sessionconstraint renamedefault");
      String string0 = "+N/";
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Character character0 = new Character('?');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'?'", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = SQLUtil.normalize("deletej\"_b!:+1_d(o8nb", true);
      assertEquals("deletej \"_b!:+1_d(o8nb\"", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[6] = "deletej \"_b!:+1_d(o8nb\"";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND deletej \"_b!:+1_d(o8nb\" = 'deletej \"_b!:+1_d(o8nb\"'", string1);
      
      String string2 = SQLUtil.leftJoin(stringArray0[5], stringArray0, stringArray0[0], stringArray0[1], stringArray0);
      assertEquals("left join null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.deletej \"_b!:+1_d(o8nb\" = null.deletej \"_b!:+1_d(o8nb\"", string2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.substituteMarkers("{t", "call2zz$rv", (Object) null);
      assertEquals("{t", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 231;
      DBDataType dBDataType0 = DBDataType.getInstance(231, "_.ww");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_.ww", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("_.WW(2)", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1722981064), "BLOB");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("0M8<a{s;rpvjXvB$/", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.toString();
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "pltMNk<XR@sHN";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "o";
      DBDataType dBDataType0 = DBDataType.getInstance((-1542878133), "org.apache.derby.impl.sql.compile.CreateRoleNode");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("pltMNk<XR@sHN", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer integer1 = new Integer(1043);
      defaultDBColumn0.setDefaultValue("alter materialized viewp=]i&|bz7jf 0(?$r");
      defaultDBColumn0.setSize(integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(string1);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lowrite", defaultDBTable0, 0, "pY");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("lowrite PY NULL", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SYSXPLAIN_SORT_PROPS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "SYSXPLAIN_SORT_PROPS");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-2));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer1);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("left join null as null on ", defaultDBTable0, (-3850), "null");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("null", defaultDBTable0, (-3850), "null");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DBDataType dBDataType0 = DBDataType.getInstance((-3850), "v");
      Integer integer0 = new Integer((-3850));
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("left join null as null on ", (DBTable) null, dBDataType0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("left join null as null on , null, null, left join null as null on , null", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(20, rowOutputBinary0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DBTable dBTable0 = null;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("setTime(String,Time,Calendar)", (DBTable) null, (-248707012), "setTime(String,Time,Calendar)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Xp9>Lc(0ssZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Xp9>Lc(0ssZ
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "LOG10(double)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("LOG10(double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("3!m8\u0005!fE6=kq_");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("3!m8\u0005!fE6=kq_", true, "jLps_V*XzGg(#z>", "n");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance("null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("isc_info_sql_field ", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("NULL", string1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "Could not load properties ";
      SQLUtil.innerJoin("Could not load properties ", stringArray0, "Could not load properties ", "org.apache.derby.impl.db.SlaveDatabase", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("jV");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SQLUtil.normalize("*/", false);
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.NEVER;
  }
}
