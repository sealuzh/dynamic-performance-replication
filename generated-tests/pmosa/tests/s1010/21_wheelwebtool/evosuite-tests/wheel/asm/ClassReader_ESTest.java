/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:24:26 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "java/lang/Object";
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader0.readConst(25, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.MethodWriter");
      classReader0.getInterfaces();
      ClassVisitor classVisitor0 = null;
      int int0 = (-2488);
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) null, (-2488));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'O';
      charArray0[2] = '$';
      classReader0.getSuperName();
      charArray0[3] = 'U';
      charArray0[4] = '?';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "toGenericString");
      charArray0[5] = '=';
      classReader0.getInterfaces();
      charArray0[6] = 'M';
      charArray0[7] = '`';
      // Undeclared exception!
      try { 
        classReader0.readClass(23, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'n';
      classReader0.getInterfaces();
      charArray0[2] = '.';
      charArray0[3] = ']';
      charArray0[4] = 'd';
      charArray0[5] = '-';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(19569, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, 13);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(927, classReader0.header);
      
      ClassWriter classWriter0 = new ClassWriter(927);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      int int0 = classReader0.readInt(2);
      assertEquals((-1161953280), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      classWriter0.lastField = null;
      classReader0.accept((ClassVisitor) classWriter0, 16816);
      String string0 = classReader0.getSuperName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(927);
      classReader0.accept((ClassVisitor) classWriter0, 731);
      assertEquals(33, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(9583);
      classReader0.accept((ClassVisitor) classWriter0, (-1770));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(4096);
      classReader0.accept((ClassVisitor) classWriter0, 61);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.copyPool(classWriter0);
      char[] charArray0 = new char[5];
      char char0 = 'Z';
      charArray0[0] = char0;
      classReader0.getInterfaces();
      char char1 = 'n';
      charArray0[1] = char1;
      char char2 = '.';
      charArray0[2] = char2;
      char char3 = ']';
      charArray0[3] = char3;
      char char4 = 'd';
      charArray0[4] = char4;
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      classReader0.getInterfaces();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39809
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      int int0 = 74;
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      // Undeclared exception!
      try { 
        classReader0.readClass(74, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      classReader0.getClassName();
      classReader0.getInterfaces();
      classReader0.readByte(429);
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'E';
      charArray0[2] = 'N';
      charArray0[3] = 'G';
      charArray0[4] = 'c';
      charArray0[5] = 'K';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(429, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11011
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[8];
      ClassReader classReader1 = new ClassReader(classReader0.b, 8, 1);
      // Undeclared exception!
      try { 
        classReader1.readClass((-886), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      // Undeclared exception!
      try { 
        classReader0.getItem((-2846));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2846
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassReader classReader1 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader1.accept((ClassVisitor) classWriter0, 1212);
      classReader0.getSuperName();
      char[] charArray0 = null;
      classReader1.readClass(classWriter0.COMPUTE_FRAMES, charArray0);
      int int0 = 1996;
      classReader1.readUnsignedShort(int0);
      classReader0.readUTF8(classReader1.SKIP_DEBUG, charArray0);
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'n';
      classReader0.getInterfaces();
      // Undeclared exception!
      try { 
        classReader0.readUTF8(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter((-296));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      Attribute[] attributeArray0 = new Attribute[2];
      Attribute attribute0 = new Attribute("SourceFile");
      Attribute attribute1 = attribute0.next;
      attributeArray0[0] = null;
      Attribute attribute2 = new Attribute("SourceFile");
      attributeArray0[1] = attribute2;
      classReader0.accept((ClassVisitor) classAdapter0, attributeArray0, 2);
      classReader0.getInterfaces();
      int int0 = 13369;
      char[] charArray0 = new char[6];
      char char0 = '@';
      charArray0[0] = char0;
      char char1 = '(';
      charArray0[1] = char1;
      char char2 = '';
      charArray0[2] = char2;
      char char3 = '(';
      charArray0[3] = char3;
      char char4 = 'F';
      charArray0[4] = char4;
      char char5 = 'i';
      charArray0[5] = char5;
      classReader0.readConst(int0, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      classReader0.readUTF8(178, charArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      char[] charArray0 = new char[1];
      ClassWriter classWriter0 = new ClassWriter(19569);
      classReader0.getSuperName();
      classReader0.accept((ClassVisitor) classWriter0, 64);
      int int0 = 49;
      classReader0.readUTF8(int0, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      classReader0.accept((ClassVisitor) classWriter0, 13388);
      assertEquals(927, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      classReader0.getInterfaces();
      ClassWriter classWriter0 = new ClassWriter(10165);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 10165);
      String string0 = classReader0.getClassName();
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(8070, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(19569);
      ClassReader classReader1 = new ClassReader("java/lang/Class");
      classReader1.getAccess();
      int int0 = classReader0.getAccess();
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassReader classReader1 = new ClassReader(classReader0.b, 8, 2);
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter(classReader1, 1215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41994
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(1);
      classReader0.accept((ClassVisitor) classWriter0, 8);
  }
}
