/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 00:06:00 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      classWriter0.visitOuterClass("wheel.asm.AnnotationWriter", "java/lang/Object", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      classWriter0.visitOuterClass("", "", "The list of suffixes must not be null");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(5, (String) null, "", "wheel.asm.Type", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(25);
      Short short0 = new Short((short)105);
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-1841), "", "", "", short0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3304));
      FieldVisitor fieldVisitor0 = classWriter0.visitField(46, "9B$uq<:", "jp!Jt<jpFr$dd", "", "P@8d%V|UGTW5nl[$S");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      int int0 = classWriter0.newUTF8("fI/:Oi+=V<aOK");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2600);
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      int int0 = classWriter0.newNameType("InnerClasses", "SourceDebugExtension");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2600);
      int int0 = classWriter0.newNameType("\"`NkR`?", "");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      Item item0 = classWriter0.newMethodItem("RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", false);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1476);
      Item item0 = classWriter0.newLong(177);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      Item item0 = classWriter0.newInteger(0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-574));
      Item item0 = classWriter0.newInteger(8);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      Item item0 = classWriter0.newInteger((-725));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      Item item0 = classWriter0.newFloat(0.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-574));
      Item item0 = classWriter0.newFloat(15);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2653));
      Item item0 = classWriter0.newFieldItem("1|ck", "", "*q");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(733);
      Item item0 = classWriter0.newFieldItem("", "R~E.eV)yaawtm", "");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      int int0 = classWriter0.newField("t", "", "SourceFile");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      int int0 = classWriter0.newField("", "TeX4/*Q", ")uin?gS%i>wS`R.L");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      Item item0 = classWriter0.newDouble((-1.0));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      Item item0 = classWriter0.newClassItem("T6x9f");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      Item item0 = classWriter0.newClassItem("");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, "D#UD'P%N19B$4u6LHur");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(733);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "R~E.eV)yaawtm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      // Undeclared exception!
      try { 
        classWriter0.visitOuterClass((String) null, "8):EN'>x7+w", "bDzS_gCEhX>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1477));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.io.filefilter.WildcardFileFilter";
      stringArray0[1] = "v";
      stringArray0[2] = "org.apache.commons.io.filefilter.WildcardFileFilter";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(15, "org.apache.commons.io.filefilter.WildcardFileFilter", "org.apache.commons.io.filefilter.WildcardFileFilter", "v", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6112));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.visitField((-6112), "7,.8r]XOH", "ZzH>'DP)<q^No.N", "ZzH>'DP)<q^No.N", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@6aabd518
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2653));
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      // Undeclared exception!
      try { 
        classWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-658));
      // Undeclared exception!
      try { 
        classWriter0.newMethod((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1252);
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, "L|", "L|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(64);
      // Undeclared exception!
      try { 
        classWriter0.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1191);
      classWriter0.addUninitializedType("", (-2298));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1191, 142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1191
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("8Erm6`h1v@", "}{&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '8Erm6`h1v@.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      // Undeclared exception!
      try { 
        classWriter0.addType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      classWriter0.newClass("P");
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        classWriter0.visit(2, (-227), "C*1:Mdgv:-X;Ksm&", "C*1:Mdgv:-X;Ksm&", "yCu5*wj]", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2600);
      int int0 = classWriter0.newClass("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      classWriter0.threshold = 2;
      int int0 = classWriter0.newMethod("", "Wjr\"blJ=\"dBBT&>", "yCu5*wj]", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5611);
      classWriter0.newLong((-1L));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5611, "", "", "`TG6&88", "`TG6&88");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1477));
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "org.apache.commons.io.filefilter.WildcardFileFilter");
      assertEquals("org.apache.commons.io.filefilter.WildcardFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(182);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1425, 182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(846);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.addUninitializedType("The list of names must not be null", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5611);
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addUninitializedType("", 115);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.newNameType("", "");
      Item item0 = classWriter0.newFieldItem("Icz<vYg", "", "");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1476);
      classWriter0.newConst("}BL");
      Item item0 = classWriter0.newConstItem("}BL");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1373));
      Double double0 = new Double(1);
      classWriter0.newConst(double0);
      Item item0 = classWriter0.newDouble(1.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6112));
      Item item0 = classWriter0.newFloat((-6112));
      Item item1 = classWriter0.newFloat((-6112));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newMethod("", "", "", true);
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-739));
      int int0 = classWriter0.newMethod("F+K]rar!J;Yk.5Q", "XMddR/kGwi+08usB", "", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(882);
      Type type0 = Type.getObjectType(":A#Y{K-]]hx&D*Jt");
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConst(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@2cf532d2
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      Type type0 = Type.INT_TYPE;
      int int0 = classWriter0.newConst(type0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1191);
      Long long0 = new Long(1);
      Item item0 = classWriter0.newConstItem(long0);
      assertNotNull(item0);
      
      int int0 = classWriter0.newConst(long0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      Float float0 = new Float((double) 1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 268435456, "InnerClasses", "&(mKwVnF~{q3>7", "jDHKp:^<T>WZ-", float0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      Boolean boolean0 = Boolean.valueOf("4dO!7/Y@ext");
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2600);
      Character character0 = new Character('3');
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      int int0 = classWriter0.newConst(classWriter0.COMPUTE_FRAMES);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1024);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      classWriter0.visitAnnotation("", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(67, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-739));
      classWriter0.visitInnerClass("RuntimeVisibleAnnotations", "wheel.asm.Handler", "Gv`$", (-739));
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(116, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "[]";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Signature";
      stringArray0[6] = "[]";
      stringArray0[7] = "[]";
      classWriter0.visit(65535, 65535, "[]", "", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(41);
      classWriter0.visitSource("='Gk9}#*qSB!}eq", "='Gk9}#*qSB!}eq");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(107, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2600);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      classWriter0.visitMethod(2600, "", "", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(87, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5611);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5611, "", "", "`TG6&88", "`TG6&88");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(110, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      classWriter0.visitInnerClass("", "", (String) null, (-1453));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1242));
      classWriter0.visitInnerClass("![Jj7u78Ty8q'`@", (String) null, "boolen", (-1242));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      classWriter0.visitInnerClass((String) null, "", "", 65535);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-227));
      classWriter0.visitInnerClass("C*1:Mdgv:-X;Ksm&", "C*1:Mdgv:-X;Ksm&", "C*1:Mdgv:-X;Ksm&", (-227));
      classWriter0.visitInnerClass("fI/:Oi+=V<aOK", "", "C*1:Mdgv:-X;Ksm&", 3546);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-739));
      classWriter0.visitAnnotation("System", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(75, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      classWriter0.visitOuterClass("The list of suffixes must not be null", "The list of suffixes must not be null", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-739));
      classWriter0.visitOuterClass("rmCB/", "h*", "wheel.asm.Handler");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(94, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.visitOuterClass("org.apache.commons.io.filefilter.WildcardFileFilter", (String) null, "org.apache.commons.io.filefilter.WildcardFileFilter");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      classWriter0.visitSource("V[;\"/P#4[Y7MeN(\"#_", (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-932));
      classWriter0.visitSource("", "Code");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1252);
      classWriter0.visitSource((String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-739));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Gv`$";
      stringArray0[1] = "wheel.asm.Handler";
      stringArray0[2] = "wheel.asm.Handler";
      stringArray0[3] = "DI";
      stringArray0[4] = "wheel.asm.Handler";
      stringArray0[5] = "DI";
      stringArray0[6] = "wheel.asm.Handler";
      stringArray0[7] = "Deprecated";
      classWriter0.visit(1, (byte) (-48), "wheel.asm.Handler", "Deprecated", "DI", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(141, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(733);
      String[] stringArray0 = new String[0];
      classWriter0.visit(7, 2223, " I6Y+66^/,O", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-932));
      classWriter0.visit(22, 32, "The array of suffixes must not be null", "Deprecated", "CvBW;qK8", (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(220);
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        classWriter0.visit(15, 41, "", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(358);
      int int0 = classWriter0.addType("RuntimeInvisibleAnnotations");
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("RuntimeInvisibleAnnotations");
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-739));
      Byte byte0 = new Byte((byte) (-48));
      classWriter0.newConst(byte0);
      Short short0 = new Short((byte) (-48));
      Item item0 = classWriter0.newConstItem(short0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-739));
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-3323));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(21);
      Boolean boolean0 = Boolean.valueOf(true);
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-2), "@Dfm4\"a(Ya=x", "K:5DDy7teeOKT", "@Dfm4\"a(Ya=x", boolean0);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(21);
      Attribute attribute0 = new Attribute((String) null);
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
