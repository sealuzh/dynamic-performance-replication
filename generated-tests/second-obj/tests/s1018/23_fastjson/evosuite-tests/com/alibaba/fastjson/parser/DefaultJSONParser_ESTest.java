/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:27:56 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import java.awt.BufferCapabilities;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.File;
import java.io.LineNumberReader;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#eP-`1#^;DN>2g,G");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.Z~{|]%p1:poMk?O6@{v.$.Z~{|]%p1:poMk?O6@{v");
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig.getGlobalInstance();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" NI3$ft{G");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      assertEquals('$', jSONScanner0.getCurrent());
      
      defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.deny", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("i7+,:?tUV;\"8`", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      parserConfig0.addDeny("");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      DateFormat dateFormat0 = DateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getDateFormat();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error : ", parserConfig0);
      defaultJSONParser0.setDateFormat("m!u");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ", parserConfig0);
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 445);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      ParserConfig.global = parserConfig0;
      defaultJSONParser0.isEnabled(feature0);
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      defaultJSONParser0.parseKey();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("oIe2y}!>'EZC");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : oIe2y}!>'EZC
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      IdentityHashMap<RenderingHints.Key, HttpCookie> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, HttpCookie>();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fieldName : ", parserConfig0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 1521);
      defaultJSONParser0.checkListResolve((Collection) null);
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.fastjson.parser.autoTypeSupport.", parserConfig0, (-75));
      defaultJSONParser0.getResolveStatus();
      Feature feature0 = Feature.NonStringKeyAsString;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : $.fastjson.parser.autoTypeSupport.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[]", parserConfig0, 11);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("A8lJj#6lsd3a-");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      defaultJSONParser0.handleResovleTask(parameterizedTypeImpl0);
      Class<Feature> class0 = Feature.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Stack<JavaBeanDeserializer> stack0 = new Stack<JavaBeanDeserializer>();
      Locale locale0 = JSON.defaultLocale;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName en
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<jtNy", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("3n8f^L");
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      defaultJSONParser0.config(feature0, true);
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[E(>`?rZ0", (-446));
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[E(>`?rZ0", jSONScanner0, parserConfig0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [E(>`?rZ0
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.setContext((ParseContext) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<JavaBeanDeserializer>[] classArray0 = (Class<JavaBeanDeserializer>[]) Array.newInstance(Class.class, 0);
      parserConfig0.initJavaBeanDeserializers(classArray0);
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "(";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(");
      HashMap<MockMinguoDate, BigInteger> hashMap0 = new HashMap<MockMinguoDate, BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual (, pos 1, json : (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{fTATm`YE?xSW@wM[* ", 5860);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual `
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 117, 117);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormatSymbols.getInstance();
      defaultJSONParser0.parse((Object) decimalFormatSymbols0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.setResolveStatus(119);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      try { 
        classLoader0.loadClass("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|< F?0@", parserConfig0, 1521);
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormatSymbols.getInstance();
      defaultJSONParser0.parse((Object) decimalFormatSymbols0);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.resolveReference("");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(");
      Boolean boolean0 = new Boolean(true);
      ClassLoader.getSystemClassLoader();
      Type[] typeArray0 = new Type[19];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("2DUd!KIj#!uZ~G4`o");
      ClassLoader.getSystemClassLoader();
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(fileSystemHandling0, jSONScanner0, parserConfig0);
      IdentityHashMap<JSONReaderScanner, Byte> identityHashMap0 = new IdentityHashMap<JSONReaderScanner, Byte>();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "2DUd!KIj#!uZ~G4`o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName 2DUd!KIj#!uZ~G4`o
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Collection<Feature> collection0 = null;
      JSONScanner jSONScanner0 = new JSONScanner("$.false.2DUd!KIj#!uZ~AG4`o", 1545);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setDefaultClassLoader(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName com.alibaba.fastjson.parser.ParserConfig@96
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("|< F?0@", parserConfig0, 1521);
      defaultJSONParser0.checkListResolve((Collection) null);
      ParseContext parseContext0 = defaultJSONParser0.getContext();
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '\u001A';
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, 3600);
      defaultJSONParser0.getObject("fastjson.parser.autoTypeAccept");
      Class<Feature>[] classArray0 = (Class<Feature>[]) Array.newInstance(Class.class, 6);
      Class<Feature> class0 = Feature.class;
      classArray0[0] = class0;
      Class<Feature> class1 = Feature.class;
      classArray0[3] = class1;
      Class<Feature> class2 = Feature.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parserConfig0.defaultClassLoader = classLoader0;
      classArray0[4] = class2;
      Class<Feature> class3 = Feature.class;
      classArray0[5] = class3;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      Class<MockGregorianCalendar> class4 = MockGregorianCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class4);
      defaultJSONParser0.getContext();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("unclosed jsonArray");
      Locale locale0 = Locale.CHINA;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) dateFormatSymbols0, (Object) jSONScanner0);
      assertNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("d");
      Boolean boolean0 = new Boolean(true);
      ClassLoader.getSystemClassLoader();
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class0 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000', '\u0000');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getConfig();
      defaultJSONParser0.getContext();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0", parserConfig0, 1521);
      defaultJSONParser0.checkListResolve((Collection) null);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      Object object0 = defaultJSONParser0.parse((Object) null);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.false", parserConfig0, 26);
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner0 = new JSONScanner("2DUd!KIj#!uZ~AG4`o", 111);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Locale locale0 = JSON.defaultLocale;
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig1);
      Feature feature0 = Feature.IgnoreAutoType;
      defaultJSONParser0.isEnabled(feature0);
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      defaultJSONParser0.parse();
      IdentityHashMap<Timestamp, MockHijrahDate> identityHashMap0 = new IdentityHashMap<Timestamp, MockHijrahDate>();
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      defaultJSONParser0.checkMapResolve(identityHashMap0, (Object) null);
      String string0 = defaultJSONParser0.getDateFomartPattern();
      assertEquals("yyyy-MM-dd HH:mm:ss", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = '\u001A';
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 4, parserConfig0, 3600);
      Class<Feature>[] classArray0 = (Class<Feature>[]) Array.newInstance(Class.class, 6);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : T\u001A\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5}-WMu7");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IdentityHashMap<JSONObject, Insets> identityHashMap0 = new IdentityHashMap<JSONObject, Insets>();
      JSONScanner jSONScanner0 = new JSONScanner("T", 32);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.checkMapResolve(identityHashMap0, "T");
      jSONScanner0.intValue();
      Object object0 = new Object();
      Object object1 = new Object();
      PageAttributes pageAttributes0 = new PageAttributes();
      defaultJSONParser0.setDateFormat("$.org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("authority");
      LinkedList<Date> linkedList0 = new LinkedList<Date>();
      defaultJSONParser0.checkListResolve(linkedList0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "authority");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      defaultJSONParser0.lastBeanContext = null;
      Collator collator0 = Collator.getInstance();
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) collator0, object0);
      defaultJSONParser0.setContext(parseContext0, (Object) collator0, (Object) null);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      decimalFormatSymbols0.setInfinity("");
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      LinkedList<NumberFormat> linkedList0 = new LinkedList<NumberFormat>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) list0, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName java.lang.Object@49f01b37
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONScanner jSONScanner0 = new JSONScanner("T", 12);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getDateFormat();
      Object object0 = new Object();
      jSONScanner0.scanFieldString(charArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      defaultJSONParser0.close();
      jSONScanner0.intValue();
      Object object1 = new Object();
      Object object2 = new Object();
      TreeSet<BufferCapabilities> treeSet0 = new TreeSet<BufferCapabilities>();
      IdentityHashMap<Timestamp, MockHijrahDate> identityHashMap0 = new IdentityHashMap<Timestamp, MockHijrahDate>();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultJSONParser0.checkMapResolve(identityHashMap0, treeSet0);
      defaultJSONParser0.getDateFomartPattern();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 1, json : T
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6zf7ixZT*UC/_8", parserConfig0, 3560);
      JSON.DEFFAULT_DATE_FORMAT = "fastjson.parser.autoTypeAccept";
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.2DUd!KIj#!uZ~AG4`o");
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.handleResovleTask((Object) null);
      ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeSet<BufferCapabilities> treeSet0 = new TreeSet<BufferCapabilities>();
      defaultJSONParser0.getResolveStatus();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      IdentityHashMap<RenderingHints.Key, HttpCookie> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, HttpCookie>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      assertEquals(0, renderingHints0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '[';
      charArray0[8] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.charAt(1);
      PropertyProcessable propertyProcessable0 = null;
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '[';
      charArray0[8] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      Properties properties0 = new Properties();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[2] = '\u0000';
      charArray0[3] = 'T';
      charArray0[4] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 'T');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      LinkedHashMap<String, SimpleTimeZone> linkedHashMap0 = new LinkedHashMap<String, SimpleTimeZone>('T', 2935.323F, false);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 4, parserConfig0, 4);
      Class<Feature>[] classArray0 = (Class<Feature>[]) Array.newInstance(Class.class, 6);
      ParserConfig parserConfig1 = new ParserConfig();
      defaultJSONParser0.resolveStatus = 4;
      String string0 = defaultJSONParser0.getInput();
      assertEquals("T\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(");
      Boolean boolean0 = new Boolean("(");
      ClassLoader.getSystemClassLoader();
      TreeSet<BufferCapabilities> treeSet0 = new TreeSet<BufferCapabilities>();
      Class<com.alibaba.fastjson.util.ParameterizedTypeImpl> class0 = com.alibaba.fastjson.util.ParameterizedTypeImpl.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CANADA_FRENCH;
      BigDecimal bigDecimal0 = new BigDecimal(1);
      defaultJSONParser0.setContext((ParseContext) null, (Object) bigDecimal0, (Object) class0);
      defaultJSONParser0.resolveReference("(");
      TreeSet<BufferCapabilities> treeSet1 = new TreeSet<BufferCapabilities>();
      defaultJSONParser0.getResolveStatus();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      IdentityHashMap<RenderingHints.Key, HttpCookie> identityHashMap0 = new IdentityHashMap<RenderingHints.Key, HttpCookie>();
      RenderingHints renderingHints0 = new RenderingHints(identityHashMap0);
      assertEquals(0, renderingHints0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader1, 35);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      Properties properties0 = new Properties();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("value ");
      ParserConfig parserConfig0 = new ParserConfig();
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("A8lJj#6lsd3a-");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : A8lJj#6lsd3a-
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.false");
      defaultJSONParser0.getInput();
      Object object0 = defaultJSONParser0.getObject("$.Z~{|]%p1:poMk?O6@{v");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 160);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      charArrayReader0.ready();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSONArray jSONArray0 = new JSONArray();
      Class<Insets> class0 = Insets.class;
      List<Insets> list0 = jSONArray0.toJavaList(class0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class1, (Collection) list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "{L";
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{L", parserConfig0, 2795);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 5867;
      JSONScanner jSONScanner0 = new JSONScanner("{fTATm`YE?xSW@wM[* ", 5867);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("T");
      ArrayList<DefaultJSONParser.ResolveTask> arrayList0 = new ArrayList<DefaultJSONParser.ResolveTask>();
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.handleResovleTask("T");
      defaultJSONParser0.getExtraProcessors();
      Class<MockCalendar> class0 = MockCalendar.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Method> class1 = Method.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, linkedHashMap0);
      javaBeanSerializer0.getType();
      HashSet<JobAttributes> hashSet0 = new HashSet<JobAttributes>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("TODO : ");
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray((Class<?>) class0, (Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ident, pos 4, json : TODO : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9g*@0)r3N%,%)c(q", parserConfig0);
      parserConfig0.setDefaultClassLoader(classLoader0);
      defaultJSONParser0.getFieldTypeResolver();
      JSONScanner jSONScanner0 = (JSONScanner)defaultJSONParser0.getLexer();
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("A8lJj#6lsd3a-");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      classLoader0.getParent();
      defaultJSONParser0.accept(1, 995);
      defaultJSONParser0.getObject("}`5qL:x)6K");
      defaultJSONParser0.accept(2);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 3, json : A8lJj#6lsd3a-
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = 111;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 111);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2DUd!KIj#!uZ~AG4`o");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2DUd!KIj#!uZ~AG4`o");
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = new ParseContext((ParseContext) null, "Z~{|]%p1:poMk?O6@{v", jSONScanner0);
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) false, (Object) "2DUd!KIj#!uZ~AG4`o");
      parseContext2.toString();
      Vector<DefaultJSONParser.ResolveTask> vector0 = new Vector<DefaultJSONParser.ResolveTask>();
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      Boolean.logicalAnd(true, false);
      parseContext2.toString();
      String string0 = File.pathSeparator;
      defaultJSONParser0.setContext(parseContext2);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.popContext();
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Double double0 = new Double(0);
      BitSet bitSet0 = new BitSet();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(bitSet0, jSONScanner0, parserConfig0);
      defaultJSONParser1.parse((Object) "2DUd!KIj#!uZ~AG4`o");
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.checkListResolve(list0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext2, "$.org.evosuite.runtime.mock.java.uqil.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule?null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser2.getDateFormat();
      assertEquals(1, jSONScanner0.token());
      assertEquals(3, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[6];
      charArray0[2] = '[';
      charArray0[1] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      int int0 = 91;
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[2] = '$';
      charArray0[3] = '_';
      charArray0[4] = ',';
      charArray0[5] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 6320);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      charArrayReader0.ready();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      IdentityHashMap<MockCalendar, Insets> identityHashMap0 = new IdentityHashMap<MockCalendar, Insets>();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      defaultJSONParser0.parse((Object) decimalFormatSymbols0);
      defaultJSONParser0.setContext((Object) "", (Object) "");
      defaultJSONParser0.getExtraTypeProviders();
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultJSONParser0.resolveReference(")2agP=Q1lDv\"");
      defaultJSONParser0.getInput();
      defaultJSONParser0.parse();
      Class<Short> class0 = Short.TYPE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[3] = '[';
      charArray0[4] = ',';
      charArray0[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 4);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      charArrayReader0.ready();
      Feature feature0 = Feature.AllowISO8601DateFormat;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[3] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, '[');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      int int0 = Calendar.DECEMBER;
      ParserConfig parserConfig0 = ParserConfig.global;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type[] typeArray0 = new Type[4];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 94);
      ClassLoader.getSystemClassLoader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "syntax error, expect [, actual ";
      linkedHashMap0.putIfAbsent("syntax error, expect [, actual ", "\"b]");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("&Hw{qESsuMe#y", biFunction0);
      linkedHashMap0.put("2zxDWr|", "null");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, hashtable0);
      javaBeanSerializer0.getFieldValues("null");
      defaultJSONParser0.getExtraProcessors();
      javaBeanSerializer0.getFieldValues("syntax error, expect [, actual ");
      jSONScanner0.tokenName();
      defaultJSONParser0.parseArrayWithType(class0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}9ECxz}*1S", parserConfig0, 93);
      defaultJSONParser0.parseObject();
      JSONArray jSONArray0 = new JSONArray(1);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but float, pos 3, json : }9ECxz}*1S
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '[';
      charArray0[2] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Collator.getInstance();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) null, (Object) null);
      TreeSet<MockGregorianCalendar> treeSet0 = new TreeSet<MockGregorianCalendar>();
      Float float0 = new Float((double) 123);
      charArrayReader0.close();
      parseContext0.toString();
      defaultJSONParser0.resolveReference("$");
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.2DUd!KIj#!uZ~AG4`o");
      defaultJSONParser0.getResolveTaskList();
      ParserConfig parserConfig0 = new ParserConfig(false);
      defaultJSONParser0.handleResovleTask(parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      ClassLoader.getSystemClassLoader();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      defaultJSONParser0.getResolveTaskList();
      char[] charArray0 = new char[0];
      ParserConfig parserConfig2 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(charArray0, 1, parserConfig2, 12);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 5860;
      JSONScanner jSONScanner0 = new JSONScanner("{fTATm`YE?xSW@wM[* ", 5860);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual `
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = ":";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[4] = '\u0000';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":v(oz8|$VlLUv}Rg~");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9>(nc&4w<ts", parserConfig0);
      Boolean boolean0 = new Boolean(false);
      Class<JSONScanner> class0 = JSONScanner.class;
      defaultJSONParser0.getResolveStatus();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 1, parserConfig0, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = Calendar.DECEMBER;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      HashMap<MockDateFormat, MockDate> hashMap0 = new HashMap<MockDateFormat, MockDate>();
      Float float0 = new Float(1.0);
      ArrayDeque<FieldInfo> arrayDeque0 = new ArrayDeque<FieldInfo>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ");
      ParserConfig.global = null;
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDate mockDate0 = new MockDate(3105L);
      hashMap0.put(mockDateFormat0, mockDate0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0, (Object) ")Yb7wpT*xk.8/Ah");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char char0 = '[';
      JSONScanner jSONScanner0 = new JSONScanner(", ", 2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      IdentityHashMap<JSONObject, Insets> identityHashMap0 = new IdentityHashMap<JSONObject, Insets>();
      Feature[] featureArray0 = new Feature[4];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.CustomMapDeserializer;
      featureArray0[1] = feature0;
      featureArray0[2] = feature1;
      featureArray0[3] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("{", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '[';
      charArray0[0] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader(", ");
      Boolean boolean0 = new Boolean("TT");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 35);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TT", '[');
      jSONReaderScanner0.nextToken((int) '(');
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.CustomMapDeserializer;
      JSON.DEFAULT_TYPE_KEY = ", ";
      featureArray0[0] = feature0;
      // Undeclared exception!
      try { 
        JSON.parse(";^'_;Dw", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;^'_;Dw
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[0] = '[';
      charArray0[1] = '[';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$.Z~{|]%p1:poMk?O6@{v.$.Z~{|]%p1:poMk?O6@{v.de_DE");
      charArray0[1] = '8';
      charArray0[7] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, '[');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getResolveStatus();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Locale locale0 = Locale.TAIWAN;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : $.org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2DUd!KIj#!uZ~AG4`o");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2DUd!KIj#!uZ~AG4`o");
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      ParseContext parseContext1 = new ParseContext((ParseContext) null, "Z~{|]%p1:poMk?O6@{v", jSONScanner0);
      parseContext1.toString();
      ParseContext parseContext2 = defaultJSONParser0.setContext(parseContext1, (Object) false, (Object) "2DUd!KIj#!uZ~AG4`o");
      parseContext2.toString();
      Vector<DefaultJSONParser.ResolveTask> vector0 = new Vector<DefaultJSONParser.ResolveTask>();
      Properties properties0 = new Properties();
      parserConfig0.configFromPropety(properties0);
      Boolean.logicalAnd(true, false);
      parseContext2.toString();
      String string0 = File.pathSeparator;
      Object object0 = new Object();
      defaultJSONParser0.setContext(parseContext2);
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.popContext();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.resolveReference("fastjson.parser.autoTypeAccept");
      Double double0 = new Double(0);
      BitSet bitSet0 = new BitSet();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.popContext();
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, '[');
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      lineNumberReader0.readLine();
      lineNumberReader0.markSupported();
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0, 3413);
      LineNumberReader lineNumberReader1 = new LineNumberReader(bufferedReader0, 46);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader1);
      charArrayReader1.reset();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      String string0 = "$.fastjson.parser.autoTypeSupport";
      Vector<Byte> vector0 = new Vector<Byte>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      defaultJSONParser0.setContext((Object) "", (Object) "");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getObject("NaN");
      defaultJSONParser0.resolveReference("");
      TreeSet<BufferCapabilities> treeSet0 = new TreeSet<BufferCapabilities>();
      defaultJSONParser0.getResolveStatus();
      TreeMap<Boolean, MockDate> treeMap0 = new TreeMap<Boolean, MockDate>();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("NaN");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) treeMap0, (Object) choiceFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[3] = '8';
      charArray0[7] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, '[');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      int int0 = TimeZone.SHORT;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      lineNumberReader0.read(charArray0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      defaultJSONParser0.checkListResolve(list0);
      byte[] byteArray1 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      TreeSet<BufferCapabilities> treeSet0 = new TreeSet<BufferCapabilities>();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) parameterizedTypeImpl0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
