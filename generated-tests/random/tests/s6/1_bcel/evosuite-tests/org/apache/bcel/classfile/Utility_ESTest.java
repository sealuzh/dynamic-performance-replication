/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:50:51 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("");
      Utility.fillup("", (-2534), false, '2');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "L;";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)97;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)13, (int) (byte)60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-10);
      byte byte1 = (byte) (-126);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R)gto{[ 1]s|h+");
      byteArray0[4] = (byte) (-126);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, (int) (byte) (-107));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "3eZps@O";
      try { 
        Utility.typeOfSignature("3eZps@O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3eZps@O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.setBit(15, 2426);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.compactClassName(")Qw|FxW\"hPWnP.+%");
      Utility.accessToString(16384, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-57));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantInteger0.copy();
      constantPool1.toString();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 199, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnclosingMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.replace("_\"`(AdLA h", "_\"`(AdLA h", "_\"`(AdLA h");
      Utility.isSet(95, 95);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)13;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(858);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, 62, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21875. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "f)elZR?wkL&q^zj";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f)elZR?wkL&q^zj";
      Utility.methodTypeToSignature("f)elZR?wkL&q^zj", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)110;
      byte byte0 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte byte1 = (byte) (-98);
      byteArray0[3] = (byte) (-98);
      byte byte2 = (byte)66;
      byteArray0[4] = (byte)66;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-98), (int) (byte) (-98), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2f
         // 1:    fdiv
         // 2:    impdep2
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)96;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("L$82$888$40W$C$H$60", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte) (-120));
      assertEquals("8:    iadd\n", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)56;
      objectArray0[2] = (Object) (byte) (-120);
      byteArray0[6] = (byte)96;
      objectArray0[4] = (Object) "8:    iadd\n";
      objectArray0[5] = (Object) (byte)87;
      objectArray0[6] = (Object) (byte)87;
      objectArray0[7] = (Object) (byte)87;
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{null, 56, -120, null, 8:    iadd\n, 87, 87, 87}", string2);
      
      String string3 = Utility.compactClassName("");
      assertEquals("", string3);
      
      short short0 = Utility.searchOpcode("d2f");
      assertEquals((short)144, short0);
      
      String string4 = Utility.accessToString((-5897), true);
      assertEquals("public private protected final volatile transient strictfp annotation enum", string4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("[IFl=l`Z}");
      Utility.accessToString((-1007));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-60));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readFloat();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.codeToString(byteArray0, constantPool1, (-3091), (int) (byte) (-22), false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    istore_0\n1:    iadd\n2:    <illegal opcode>\n3:    dload_0\n4:    fconst_2\n5:    wide\t(wide)\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    istore_0
         // 1:    iadd
         // 2:    <illegal opcode>
         // 3:    dload_0
         // 4:    fconst_2
         // 5:    wide\t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ")F9yV4@o7!";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")F9yV4@o7!");
      Utility.searchOpcode("+V(0|hOif6X$$+");
      try { 
        Utility.decode("+V(0|hOif6X$$+", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.format(81, 76, false, 'U');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)61;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\n     Method Arguments:");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(247, (byte)7);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 59, (int) (byte)61, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)118;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-110);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3957, (int) (byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.getSignature("invokedynamic");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, 1707);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "instanceof");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("ifnonnull\t\t#-10344", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)120;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2061), 2147, false);
      assertEquals("0:    dload_2\n1:    ishl\n", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      String string0 = "Y4C1/B^\\C";
      try { 
        Utility.typeOfSignature("Y4C1/B^C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y4C1/B^C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.accessToString((-2657));
      Utility.fillup("(L'?$;O&nsR1", (-2657), false, '#');
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)60;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)60);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)44);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 85, (int) (byte)118, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)16;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, (int) (byte)5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokeinterface");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.classOrInterface((byte)15);
      Utility.compactClassName("dconst_1", "newInvokeSpecial", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, (int) (byte)15, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)30;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 154, (-1651704192));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.accessToString(93, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "public protected static final volatile";
      objectArray0[1] = (Object) "public protected static final volatile";
      objectArray0[2] = (Object) "public protected static final volatile";
      objectArray0[3] = (Object) "public protected static final volatile";
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-1701));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)90;
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2821, (byte)88);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("{public protected static final volatile, public protected static final volatile, public protected static final volatile, public protected static final volatile}");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (-187));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)72;
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode("9c 1c bd a0 57 48", false);
      Utility.convertString("9c 1c bd a0 57 48");
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(6, (-1411));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("breakpoint");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)72, (int) (byte)28, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "+DO_w%PzWM";
      Utility.typeOfSignature("+DO_w%PzWM");
      Utility.classOrInterface((byte)7);
      String string1 = "short";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("+DO_w%PzWM", "short", "};:vrdM{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +DO_w%PzWM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.format(166, 89, true, 'C');
      assertEquals("166CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2246), (int) (byte)39);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    frem\n3:    dload_1\n4:    lload_2\n5:    i2s\n6:    nop\n7:    iconst_m1\n", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%8nnN6$?(:y8)wO[?MB");
      Utility.convertString("Aman.MbBe\"&mmyh+>");
      Utility.classOrInterface(46);
      try { 
        Utility.typeOfSignature("Aman.MbBe\"&mmyh+>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Aman.MbBe\"&mmyh+>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "org.apache.bcel.classfile.Utility$1";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$1");
      byteArray0[1] = (byte)77;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte)77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-56);
      byte byte0 = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (int) (byte)68, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_acmpne\t\t#-14268
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-14);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-14));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)117);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantPool0.dump(dataOutputStream0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)117, (int) (byte) (-78), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 30194. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte)29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)76;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.fillup("&h=`6=kjj,", 42, false, 'o');
      try { 
        Utility.typeOfSignature("&h=`6=kjj,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &h=`6=kjj,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("i-%S{cW]N*2l=.T([5)", false);
      Utility.toHexString(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 125, 125, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Y]u4n#wbKBI9E]?,0?";
      stringArray0[1] = "fmul";
      stringArray0[2] = "Y]u4n#wbKBI9E]?,0?";
      stringArray0[3] = "Y]u4n#wbKBI9E]?,0?";
      stringArray0[4] = "Y]u4n#wbKBI9E]?,0?";
      stringArray0[5] = "Y]u4n#wbKBI9E]?,0?";
      Utility.methodTypeToSignature("Y]u4n#wbKBI9E]?,0?", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)34, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = Utility.decode("lookupswitch", false);
      Utility.compactClassName("putstatic", true);
      String string0 = Utility.accessToString(3021);
      assertEquals("public protected static volatile transient native interface strictfp", string0);
      
      int int0 = Utility.setBit(3021, 253);
      assertEquals(536873933, int0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(12, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("idiv", string1);
      
      String string2 = Utility.format(187, 253, false, '5');
      assertEquals("5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555187", string2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.getSignature("org.apache.bcel.classfile.Utility");
      short short0 = Utility.searchOpcode("Lorg/apache/bcel/classfile/Utility;");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("Lorg/apache/bcel/classfile/Utility;", "if_icmpne", false);
      assertEquals("Lorg.apache.bcel.classfile.Utility;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('#');
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.bcel.classfile.Utility";
      stringArray0[1] = "\nException handler(s) = \n";
      stringArray0[2] = "org.apache.bcel.classfile.Utility";
      stringArray0[3] = "freturn";
      stringArray0[4] = "Lorg.apache.bcel.classfile.Utility;";
      stringArray0[5] = "Lorg/apache/bcel/classfile/Utility;";
      stringArray0[6] = "freturn";
      stringArray0[7] = "if_icmpne";
      stringArray0[8] = "Lorg/apache/bcel/classfile/Utility;";
      String string1 = Utility.methodTypeToSignature("freturn", stringArray0);
      assertEquals("(Lorg/apache/bcel/classfile/Utility;LException;Lorg/apache/bcel/classfile/Utility;Lfreturn;LLorg/apache/bcel/classfile/Utility;;LLorg/apache/bcel/classfile/Utility;;Lfreturn;Lif_icmpne;LLorg/apache/bcel/classfile/Utility;;)Lfreturn;", string1);
      
      String string2 = Utility.getSignature("\t");
      assertEquals("L;", string2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 245, (int) (byte)42, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)101;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, (int) (byte)101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.accessToString(178);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)94;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte) (-38);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 165, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48706. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Utility.format(255, 255, true, 'o');
      assertEquals("255oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-422), 1899);
      assertEquals("0:    ldiv\n1:    sastore\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    aastore\n5:    lastore\n6:    lastore\n7:    fconst_0\n", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte) (-29);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 606, (int) (byte)25, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-91);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Deprecated");
      byteArray0[3] = (byte)40;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte) (-33);
      objectArray0[2] = (Object) (byte)40;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "org.apache.bcel.classfile.Deprecated";
      Utility.printArray(objectArray0, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("return", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.decode("", false);
      String string0 = "public pri";
      Utility.compactClassName("", "public pri", false);
      int int0 = 165;
      Utility.isSet(165, 165);
      try { 
        Utility.typeOfSignature("X`K8d/S?Rp0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X`K8d/S?Rp0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = ";O7S{";
      Utility.searchOpcode(";O7S{");
      try { 
        Utility.typeOfSignature("W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)29;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(80, 980);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-3772), 49);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 85);
      assertEquals("0:    ishr\n1:    f2i\n2:    fastore\n3:    iastore\n4:    <illegal opcode>\n5:    nop\n6:    astore\t\t%29\n", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('_');
      Utility.compactClassName("{}", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup(":G6Im:=Q0tza1", 711, true, '_');
      try { 
        Utility.decode("Unreachable default case reached!", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.searchOpcode("Cs>%[y_+M3");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isSet(76, 123);
      Utility.convertString("short");
      byte[] byteArray0 = Utility.decode("short", false);
      Utility.searchOpcode("short");
      Utility.clearBit(123, 76);
      Object[] objectArray0 = new Object[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "Cs>%[y_+M3";
      objectArray0[3] = (Object) "short";
      objectArray0[4] = (Object) "short";
      objectArray0[5] = (Object) "short";
      Utility.printArray(objectArray0);
      Utility.classOrInterface((short) (-1));
      Utility.setBit(76, (short) (-1));
      Utility.isSet(123, 76);
      Utility.isJavaIdentifierPart('u');
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(721L);
      constantArray0[0] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 102, 699, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.isSet((-2764), (-2764));
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    aload_3
         // 2:    fload_3
         // 3:    freturn
         // 4:    fstore\t\t%56
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-196);
      int int1 = (-2289);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.format((-196), (-2289), false, 'J');
      String string0 = "Invalid type: ";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.fillup("Invalid type: ", (-196), true, 'J');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid type: ");
      Utility.isJavaIdentifierPart('2');
      try { 
        Utility.typeOfSignature("R=rtE_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R=rtE_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 238, (int) (byte)50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.convertString("G+N|9[0[m");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "G+N|9[0[m";
      stringArray0[1] = "G+N|9\\[0[m";
      stringArray0[2] = "G+N|9\\[0[m";
      stringArray0[3] = "G+N|9[0[m";
      stringArray0[4] = "G+N|9\\[0[m";
      stringArray0[5] = "G+N|9[0[m";
      stringArray0[6] = "G+N|9[0[m";
      stringArray0[7] = "G+N|9\\[0[m";
      stringArray0[8] = "G+N|9[0[m";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("G+N|9[0[m", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[0[m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString(" fields:\n");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("P$,K$etKp.vhF");
      Utility.methodSignatureReturnType("Invalid type: ");
      Utility.accessToString(66);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      byteSequence0.readByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.readUnsignedByte();
      Utility.printArray((Object[]) null, false);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "fZmVnUq}#ld~wPu";
      stringArray0[1] = "fZmVnUq}#ld~wPu";
      stringArray0[2] = "fZmVnUq}#ld~wPu";
      stringArray0[3] = "fZmVnUq}#ld~wPu";
      String string0 = Utility.methodTypeToSignature("fZmVnUq}#ld~wPu", stringArray0);
      assertEquals("(LfZmVnUq}#ld~wPu;LfZmVnUq}#ld~wPu;LfZmVnUq}#ld~wPu;LfZmVnUq}#ld~wPu;)LfZmVnUq}#ld~wPu;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)40;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("52 5a 40 27 03 28", string1);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("fZmVnUq}#ld~wPu");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)90);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteArray0, constantPool1, (int) (byte)3, (int) (byte)40);
      assertEquals("3:    dload_1\n4:    iconst_0\n5:    dload_2\n", string2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1328, (int) (byte)91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "KhN!zjU+.\"!m_4x";
      try { 
        Utility.typeOfSignature("KhN!zjU+.\"!m_4x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KhN!zjU+.\"!m_4x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 255, 238);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "%WkhO)x.ksOiG54";
      Utility.convertString("%WkhO)x.ksOiG54");
      Utility.isJavaIdentifierPart('$');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-39), 84, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_1
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = Utility.clearBit(80, (-3));
      assertEquals(80, int0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("TU+D'9**(jw8>RH");
      assertEquals((byte)14, byte0);
      
      short short0 = Utility.searchOpcode("new");
      assertEquals((short)187, short0);
      
      Utility.convertString("fT@8VP");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$O$O$O$O$O$O$O", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "'Ax";
      try { 
        Utility.typeOfSignature("'Ax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'Ax
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)40;
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(95);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass(35);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1532, (int) (byte)9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 80;
      Utility.setBit(80, 1515);
      String string0 = "#{l#;";
      try { 
        Utility.typeOfSignature("#{l#;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #{l#;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 241, 142);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = ";P%f@yKHTs{d";
      try { 
        Utility.typeOfSignature(";P%f@yKHTs{d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;P%f@yKHTs{d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-11);
      byteArray0[3] = (byte)97;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-13);
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(255, (byte) (-13));
      constantArray0[0] = (Constant) constantNameAndType0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-27), 4907, true);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    ladd\n4:    nop\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("*^\"}/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^\"}/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.typeOfSignature("Dm`dRa~]i38s");
      Utility.getSignature("Dm`dRa~]i38s");
      Utility.accessToString((int) (byte)7);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      // Undeclared exception!
      try { 
        MockURI.create("o]HYD[Oj#FTGD>&H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 1: o]HYD[Oj#FTGD>&H
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("iE", stringArray0);
      Utility.isJavaIdentifierPart('D');
      Utility.methodSignatureArgumentTypes("()LiE;");
      try { 
        Utility.typeOfSignature("()LiE;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()LiE;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.getSignature("W}W@0W&:?C`&~)Z");
      Utility.signatureToString("LW}W@0W&:?C`&~)Z;", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)14;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-114);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)70;
      objectArray0[1] = (Object) (byte)70;
      objectArray0[2] = (Object) (byte) (-114);
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0);
      Utility.classOrInterface(2993);
      Utility.isSet(2993, (byte) (-106));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (-16519105));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-527);
      Utility.setBit((-527), (-527));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)91;
      byteArray0[1] = (byte)91;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-527));
      try { 
        Utility.methodSignatureArgumentTypes("0:    nop\n1:    dup_x2\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    dup_x2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.accessToString(1310, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-45);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (byte) (-58), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "$AjwulU{|tl9";
      Utility.replace("$AjwulU{|tl9", ">YP}9$T\"", (String) null);
      String string1 = "Invalid signature: ";
      Utility.getSignature("Invalid signature: ");
      Utility.signatureToString("TxVx*L=5'Q;y8b=6&");
      String string2 = "p9=";
      File file0 = MockFile.createTempFile("p9=", "wide");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "$AjwulU{|tl9");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // $AjwulU{|tl9
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "Limpdep1;V";
      Utility.compactClassName("Limpdep1;V");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-95);
      byteArray0[0] = (byte) (-95);
      int int0 = 2;
      int int1 = (-1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName("class", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)105, (byte)105);
      constantArray0[0] = (Constant) constantMethodref0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22100. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-)8bE<";
      stringArray0[1] = "[";
      stringArray0[2] = "[";
      stringArray0[3] = "[";
      stringArray0[4] = "[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-55);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1780), (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dconst_0
         // 1:    fstore_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9I%5-`:";
      stringArray0[1] = "9I%5-`:";
      stringArray0[2] = "9I%5-`:";
      stringArray0[3] = "9I%5-`:";
      stringArray0[4] = "9I%5-`:";
      stringArray0[5] = "CGf.qqR3j@,^\"uC\u0000";
      stringArray0[6] = "9I%5-`:";
      Utility.methodTypeToSignature("9I%5-`:", stringArray0);
      Utility.compactClassName("9I%5-`:", ",2).5BAkmjEeFJzzFta", true);
      Utility.methodTypeToSignature("9I%5-`:", stringArray0);
      Utility.accessToString(77);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 26408. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature("U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "P;W!XGIvG)~CELM";
      try { 
        Utility.typeOfSignature("P;W!XGIvG)~CELM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P;W!XGIvG)~CELM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = ">-RCaUmY";
      try { 
        Utility.typeOfSignature(">-RCaUmY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >-RCaUmY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("new", false);
      String string0 = "4LI$";
      String string1 = ")@'%";
      String string2 = null;
      Utility.replace("4LI$", ")@'%", (String) null);
      Utility.printArray((Object[]) null);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "RQ{9`8VcnAxhU0C$wR";
      Utility.decode("RQ{9`8VcnAxhU0C$wR", false);
      String string1 = "W<AU+=;w#%>u #";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("double", "W<AU+=;w#%>u #", "org.apache.bcel.classfile.Utility", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, (int) (byte)84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byte byte0 = (byte)23;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)23;
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.compactClassName("", "lstore_1", true);
      File file0 = MockFile.createTempFile("lstore_1", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "lstore_1";
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "lstore_1";
      objectArray0[7] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.convertString("");
      Utility.compactClassName("", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, (int) (byte) (-52));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.setBit(234, 115);
      Utility.isSet(524522, 155);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(216, 244);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fP?");
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.codeToString(byteSequence0, constantPool1);
      try { 
        Utility.decode(";zT}+<G[oiH=C4", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "Q_Q^g(0Fk=])Ef";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Q_Q^g(0Fk=])Ef", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ef'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.compactClassName("BL]n_}k:");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      byteSequence0.read();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("O]#$t}Z{Et@^z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O]#$t}Z{Et@^z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.isSet((-2764), (-2764));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), 6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    aload_3
         // 2:    fload_3
         // 3:    freturn
         // 4:    fstore\t\t%107
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k$bG=_a|V");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "am?3Gzkg9q");
      // Undeclared exception!
      try { 
        Utility.decode("k$bG=_a|V", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)33;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)2, (int) (byte)78);
      assertEquals("2:    <illegal opcode>\n3:    iconst_m1\n4:    dup2_x1\n5:    astore_3\n6:    lload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "O";
      Utility.searchOpcode("O");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O";
      stringArray0[1] = "O";
      Utility.methodTypeToSignature("O", stringArray0);
      Utility.isSet((-8), 329);
      Utility.clearBit(329, 10);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString((byte) (-19));
      String[] stringArray0 = new String[8];
      stringArray0[3] = "char";
      try { 
        Utility.typeOfSignature("Qrq2NhOV5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qrq2NhOV5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)57, (int) (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)96;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("L$5d$888$40W$C$H$60", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte) (-120));
      assertEquals("8:    iadd\n", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)56;
      objectArray0[2] = (Object) (byte) (-120);
      byteArray0[6] = (byte)96;
      objectArray0[4] = (Object) "8:    iadd\n";
      objectArray0[5] = (Object) (byte)87;
      objectArray0[6] = (Object) (byte)87;
      objectArray0[7] = (Object) (byte)87;
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{null, 56, -120, null, 8:    iadd\n, 87, 87, 87}", string2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.accessToString((-2616), true);
      Utility.searchOpcode("static volatile transient native abstract synthetic annotation enum");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)1;
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-63), (-1947));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(2868.9392F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2918, (-729), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",*D'SKMQ!YOm}}");
      Utility.classOrInterface(125);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)93;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature(",*D'SKMQ!YOm}}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,*D'SKMQ!YOm}}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "7c7";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7c7");
      try { 
        Utility.typeOfSignature("7c7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7c7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (int) (byte) (-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "[G|[k3Q7Lu~w-%";
      String string1 = "org.apache.commons.io.filefilter.TrueFileFilter";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.TrueFileFilter");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[G|[k3Q7Lu~w-%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G|[k3Q7Lu~w-%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.replace(":", "ret", "impdep2");
      Utility.accessToString(4, false);
      Utility.methodTypeToSignature("ret", (String[]) null);
      Utility.replace("ret", "ret", "protected");
      Utility.accessToString((-3282), true);
      Utility.methodSignatureToString("()Lret;", "[]", "ret");
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-75);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), 4148, true);
      assertEquals("0:    lstore_3\n1:    dastore\n2:    athrow\n3:    ifne\t\t#12163\n6:    iload\t\t%181\n", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.decode("JU&LRN]?@uSTafWf", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("U", "byte", true);
      Utility.classOrInterface(87);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "byte";
      stringArray0[1] = "byte";
      stringArray0[2] = "U";
      stringArray0[3] = "U";
      stringArray0[4] = "void";
      stringArray0[5] = "byte";
      stringArray0[6] = "U";
      stringArray0[7] = "rsyt#<t- ";
      stringArray0[8] = "class";
      try { 
        Utility.methodTypeToSignature("java.lang.", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.typeOfSignature("V,B=ZyD00");
      try { 
        Utility.typeOfSignature("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_Utf8");
      Utility.getSignature("(q)+6H=@05*");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 2153);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5{x-tk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5{x-tk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte) (-50);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(255, (byte)101);
      constantArray0[0] = (Constant) constantNameAndType0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-27), 4907, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 62817. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "long";
      Utility.getSignature("long");
      Utility.typeOfSignature("J");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(7755);
      byteArrayOutputStream0.flush();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.writeTo((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "MYs7~O*Dak.-qodW!";
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      try { 
        Utility.typeOfSignature("MYs7~O*Dak.-qodW!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MYs7~O*Dak.-qodW!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "H5)UY";
      Utility.fillup("H5)UY", 61, true, ' ');
      try { 
        Utility.typeOfSignature("H5)UY                                                        ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H5)UY                                                        
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-94);
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-7);
      byte byte0 = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-55);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1487, 3691, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "dstore_3";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dstore_3");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("%6;n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %6;n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-109);
      byte byte0 = (byte)103;
      byteArray0[2] = (byte)103;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-109));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 345, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 37735. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1089), (-1089));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("daload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `daload'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "My[7";
      // Undeclared exception!
      try { 
        Utility.signatureToString("My[7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `My[7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"F&EMlD@ztEl5vi7y");
      try { 
        Utility.typeOfSignature("\"F&EMlD@ztEl5vi7y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"F&EMlD@ztEl5vi7y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Utility.getSignature("g)q'");
      assertEquals("Lg)q';", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("caload", string1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet(3729, 3584);
      Utility.typeOfSignature("L5[AItYHgohvHIh6/^Q");
      Utility.compactClassName("L5[AItYHgohvHIh6/^Q", "8S]P<&7$", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      MockFile mockFile0 = new MockFile("L5[AItYHgohvHIh6.^Q", "L5[AItYHgohvHIh6/^Q");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "L5[AItYHgohvHIh6.^Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"L5[AItYHgohvHIh6.^Q\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "S&cf";
      Utility.typeOfSignature("S&cf");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S&cf");
      Utility.replace("S&cf", "S&cf", "PkeX>6['rj|");
      String string1 = "(AH-<N`@Vc+CzMJPur]";
      try { 
        Utility.methodSignatureArgumentTypes("(AH-<N`@Vc+CzMJPur]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `AH-<N`@Vc+CzMJPur]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Utility.isSet(227, (-1597));
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("iflt");
      assertEquals("Liflt;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-83), 227);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[1] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(155, (byte)23);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("&=^NCBsqdHi+>!");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lreturn", string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)119;
      byteArray0[1] = (byte)56;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)94;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("68w$A$40W$C$H$5e", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)119);
      assertEquals("8:    dup2_x2\n", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)87;
      objectArray0[3] = (Object) (byte)94;
      objectArray0[4] = (Object) "8:    dup2_x2\n";
      objectArray0[5] = (Object) (byte)87;
      objectArray0[6] = (Object) (byte)87;
      objectArray0[7] = (Object) (byte)87;
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{null, 0, 87, 94, 8:    dup2_x2\n, 87, 87, 87}", string2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "6*";
      String string1 = "6_u`Pu@";
      Utility.replace("6*", "6*", "6_u`Pu@");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("6_u`Pu@", "invokevirtual", "invokevirtual");
      Utility.classOrInterface(956);
      try { 
        Utility.typeOfSignature("6_u`Pu@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6_u`Pu@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1136, 1136, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)117;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)117;
      objectArray0[1] = (Object) (byte)117;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)43;
      objectArray0[4] = (Object) (byte) (-34);
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "freturn";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 32;
      Utility.classOrInterface(32);
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-103);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3957, (int) (byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 147. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2340. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JG^8$izXA11U)P");
      try { 
        Utility.typeOfSignature("-;S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -;S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.methodTypeToSignature("x=g:pRbh\"vI", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XCl(BN,5[,sGS>q4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XCl(BN,5[,sGS>q4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)110;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.accessToString(85);
      try { 
        Utility.methodSignatureReturnType("RN[@jii%Y&?C3F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RN[@jii%Y&?C3F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.signatureToString("DSruA8uIYce/9T", false);
      try { 
        Utility.typeOfSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-55);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1780), (int) (byte)23);
      Utility.compactClassName("vYZoEvHH~Db%I7SEf", "0:    dconst_0\n1:    fload\t\t%201\n", true);
      Utility.compactClassName("7", "org.apache.bcel.classfile.Method$1", true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-979), (-3190));
      // Undeclared exception!
      try { 
        Utility.signatureToString("vYZoEvHH~Db%I7SEf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vYZoEvHH~Db%I7SEf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-38);
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)41;
      byteArray1[4] = (byte) (-45);
      Utility.equals(byteArray0, byteArray1);
      Utility.equals(byteArray0, byteArray1);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(54, (byte) (-38));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(16, 16);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("E[M@WaMq||y,zEq!2;v");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(63);
      constantArray0[3] = (Constant) constantClass0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[4] = (Constant) constantFloat1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)7, (byte)41);
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(109, (byte) (-45));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[6] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 39, (int) (byte) (-38), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byte byte0 = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byte byte1 = (byte)103;
      byteArray0[2] = (byte)103;
      byte byte2 = (byte)75;
      byteArray0[3] = (byte)75;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-2474);
      Utility.codeToString(byteArray0, constantPool0, (-2474), (-1210));
      String string0 = "arraylength";
      String string1 = "char";
      String string2 = "p";
      boolean boolean0 = false;
      int int1 = 66;
      int int2 = 54;
      int int3 = 537;
      CodeException[] codeExceptionArray0 = new CodeException[4];
      int int4 = 88;
      CodeException codeException0 = new CodeException(88, 18, 223, (-2474));
      codeExceptionArray0[0] = codeException0;
      CodeException codeException1 = new CodeException(66, 54, (byte)118, (byte) (-29));
      codeExceptionArray0[1] = codeException1;
      CodeException codeException2 = new CodeException(codeException0);
      codeExceptionArray0[2] = codeException2;
      CodeException codeException3 = new CodeException(codeException0);
      codeExceptionArray0[3] = codeException3;
      Attribute[] attributeArray0 = new Attribute[7];
      int int5 = 70;
      Synthetic synthetic0 = new Synthetic(70, 163, byteArray0, constantPool0);
      Attribute attribute0 = synthetic0.copy(constantPool0);
      attributeArray0[0] = attribute0;
      int int6 = 518;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "0:    fneg\n1:    <illegal opcode>\n2:    dsub\n3:    astore_0\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"0:    fneg
         // 1:    <illegal opcode>
         // 2:    dsub
         // 3:    astore_0
         // \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)24, (byte)24);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(42, 58);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.isSet(128, 128);
      String string0 = "F";
      Utility.compactClassName("F", "&N", false);
      Utility.compactClassName("\r", true);
      Utility.typeOfSignature("F:VlEw");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, 128, false);
      try { 
        Utility.typeOfMethodSignature("A.,j,LqHE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A.,j,LqHE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 32;
      Utility.accessToString(32);
      Utility.isSet((-2460), (-2460));
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "goto_w";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      try { 
        Utility.typeOfSignature(".akx#k2Hz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .akx#k2Hz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format(183, 183, false, 'W');
      try { 
        Utility.methodSignatureReturnType("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW183");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW183'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)12, 2173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.getSignature("dup_x1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)80;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 100, 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.searchOpcode("4\"8,vG");
      try { 
        Utility.typeOfSignature("4\"8,vG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4\"8,vG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.isJavaIdentifierPart('\'');
      String string0 = ":_ko$;.|\\1[=07vkp<p";
      try { 
        Utility.typeOfSignature(":_ko$;.|\u0001[=07vkp<p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :_ko$;.|\u0001[=07vkp<p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "^:^@FL2%~A2yx?*";
      Utility.compactClassName("^:^@FL2%~A2yx?*", "^:^@FL2%~A2yx?*", false);
      Utility.compactClassName("LineNumber(");
      Utility.clearBit(1161, 51);
      Utility.clearBit(81, 1161);
      Utility.typeOfSignature("[]");
      String string1 = "!2;h~`#=T";
      try { 
        Utility.typeOfSignature("!2;h~`#=T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2;h~`#=T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      Utility.setBit(3626, 3626);
      Utility.compactClassName("java.lang.Object@7beb5181, java.lang.Object@19907540, java.lang.Object@4af4d686, java.lang.Object@7863b6bb, java.lang.Object@59a5976f, java.lang.Object@4305d36e", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-37);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("nIro`_JiZ/yy\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nIro`_JiZ/yy\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      Utility.compactClassName("bipush", false);
      Utility.classOrInterface(86);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L{7/E,r,9F<qS7~AM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L{7/E,r,9F<qS7~AM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lt=9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lt=9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = ": ";
      Utility.convertString(": ");
      Utility.isSet(548, 548);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-117);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)109;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 548, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "(VzfQhs#\"1mt4R(-u";
      try { 
        Utility.typeOfSignature("(VzfQhs#\"1mt4R(-u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (VzfQhs#\"1mt4R(-u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "nU$KGInv`X}Mswv";
      Utility.decode("nU$KGInv`X}Mswv", false);
      Utility.accessToString((-1029), false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "public private static final synchronized volatile transient native interface strictfp synthetic annotation enum", (-545), (-545));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("/!Y>a<", (-1574), true, '0');
      try { 
        Utility.typeOfSignature("/!Y>a<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /!Y>a<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "\t";
      MockFile mockFile0 = new MockFile("\t", "\t");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append(',');
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool0.dump(dataOutputStream0);
      Utility.codeToString(byteArray0, constantPool0, (-662), (int) (byte)90, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, (-693), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.compactClassName("new", "new", false);
      Utility.convertString("new");
      Utility.getSignature("$57.ud6K8p7<[]Ld");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      boolean boolean0 = false;
      Utility.accessToString(1497, false);
      try { 
        Utility.typeOfMethodSignature("if_acmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "NbnDL&8w";
      Utility.searchOpcode("NbnDL&8w");
      try { 
        Utility.typeOfSignature("NbnDL&8w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NbnDL&8w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.replace("J#q?:>8)5-f&8+?rtFA", "J#q?:>8)5-f&8+?rtFA", "J#q?:>8)5-f&8+?rtFA");
      Utility.compactClassName("array");
      Utility.fillup("multianewarray", 1255, false, 'o');
      Utility.accessToString(91);
      Utility.classOrInterface(2507);
      Utility.replace("<EWe6iiFM#+Vlm1tM", "<", "array");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)94;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1024, (int) (byte) (-23));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Q~9*_JElJo?>7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q~9*_JElJo?>7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "35ZZp01xCK}B";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "35ZZp01xCK}B");
      try { 
        Utility.typeOfSignature("@^lE2?iUO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @^lE2?iUO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)40;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger(187);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 754, 80, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)27;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)15, (int) (byte)15, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(74, 199);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-72));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_0", string0);
      
      byte[] byteArray1 = Utility.decode("fload_0", false);
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)48}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.setBit(32, 801);
      String string0 = "PP%v;";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("PP%v;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PP%v;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.setBit(234, 115);
      Utility.isSet(524522, 155);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(216, 244);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fP?");
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.accessToString((int) (byte)34);
      try { 
        Utility.decode(";zT}+<G[oiH=C4", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.replace("U'h[|xkhy6c6nZ", "U'h[|xkhy6c6nZ", "B<.)t");
      int int0 = 554;
      Utility.setBit(554, 554);
      Utility.typeOfSignature("B<.)t");
      Utility.signatureToString("B<.)t");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("U'h[|xkhy6c6nZ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U'h[|xkhy6c6nZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = Utility.setBit(234, 115);
      assertEquals(524522, int0);
      
      boolean boolean0 = Utility.isSet(524522, 155);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(216, 244);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fP?");
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lcmp", string0);
      
      String string1 = Utility.accessToString((int) (byte)34);
      assertEquals("private synchronized", string1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-40);
      byteArray0[8] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 364, (int) (byte) (-122));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.isSet(69, 90);
      char char0 = 'M';
      Utility.format(90, 69, false, 'M');
      String string0 = "Gu+";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("Gu+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gu+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.convertString(")>{8' Dhi%");
      String string0 = "EU|vwU?2";
      Utility.decode("EU|vwU?2", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString((-976), true);
      Utility.searchOpcode(")>{8' Dhi%");
      Utility.clearBit((short) (-1), (-976));
      try { 
        Utility.methodSignatureArgumentTypes("Wt?'p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wt?'p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("? extends ", false);
      Utility.format(102, 74, false, '(');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)10;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((102", "? extends ", "AcevqQOB8:p.OI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((102'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.replace("U'h[|xkhy6c6nZ", "U'h[|xkhy6c6nZ", "B<.)t");
      assertEquals("B<.)t", string0);
      
      int int0 = Utility.setBit(554, 554);
      assertEquals(1578, int0);
      
      byte byte0 = Utility.typeOfSignature("B<.)t");
      assertEquals((byte)8, byte0);
      
      String string1 = Utility.signatureToString("B<.)t");
      assertEquals("byte", string1);
      
      Utility.signatureToString("V+)RX}h&8", false);
      String string2 = Utility.fillup("B<.)t", 1303, false, ')');
      assertFalse(string2.equals((Object)string0));
      
      short short0 = Utility.searchOpcode("B<.)t");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.accessToString(85);
      boolean boolean0 = false;
      Utility.signatureToString("CKGj8]AgGZk%%`.Hz\"", false);
      Utility.getSignature("CKGj8]AgGZk%%`.Hz\"");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "LCKGj8]AgGZk%%`/Hz\";";
      objectArray0[1] = (Object) "char";
      objectArray0[2] = (Object) "CKGj8]AgGZk%%`.Hz\"";
      objectArray0[3] = (Object) "CKGj8]AgGZk%%`.Hz\"";
      objectArray0[4] = (Object) "public protected final volatile";
      objectArray0[5] = (Object) "LCKGj8]AgGZk%%`/Hz\";";
      Utility.printArray(objectArray0, false);
      Utility.accessToString(512);
      Utility.replace("LCKGj8]AgGZk%%`/Hz\";", "LCKGj8]AgGZk%%`/Hz\";, char, CKGj8]AgGZk%%`.Hz\", CKGj8]AgGZk%%`.Hz\", public protected final volatile, LCKGj8]AgGZk%%`/Hz\";", "LCKGj8]AgGZk%%`/Hz\";, char, CKGj8]AgGZk%%`.Hz\", CKGj8]AgGZk%%`.Hz\", public protected final volatile, LCKGj8]AgGZk%%`/Hz\";");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LCKGj8]AgGZk%%`/Hz\";", "getfield", "public protected final volatile", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LCKGj8]AgGZk%%`/Hz\";
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\t\t#", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, 2997, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "HTfrXOuHCB#qX]/9nbp";
      Utility.replace("HTfrXOuHCB#qX]/9nbp", "By.sFH9x~^W(94gpe", "By.sFH9x~^W(94gpe");
      Utility.compactClassName("By.sFH9x~^W(94gpe");
      Utility.typeOfSignature("By.sFH9x~^W(94gpe");
      char char0 = '=';
      Utility.isJavaIdentifierPart('=');
      Utility.clearBit(4633, 4633);
      byte[] byteArray0 = new byte[0];
      String string1 = "Aa5_nl=8X&29QK";
      String string2 = "double";
      String string3 = "]Hq~v.Q2Tfr&3~fS";
      try { 
        MockURI.URI("]Hq~v.Q2Tfr&3~fS", "]Hq~v.Q2Tfr&3~fS", "Aa5_nl=8X&29QK", "9C\"\"=j!");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ]Hq~v.Q2Tfr&3~fS://]Hq~v.Q2Tfr&3~fSAa5_nl=8X&29QK#9%7FC%22%22=j!
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.signatureToString("[ZH\"u[N", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte)127;
      Utility.encode(byteArray0, true);
      Utility.accessToString((int) (byte)103, false);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(68);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-117), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1780), (int) (byte)3);
      Utility.compactClassName("vYZoEvHH~Db%I7SEf", "0:    dconst_0\n1:    iconst_0\n2:    iconst_0\n", true);
      String string0 = "7";
      Utility.compactClassName("7", "org.apache.bcel.classfile.Method$1", true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-979), (-3190));
      // Undeclared exception!
      try { 
        Utility.signatureToString("vYZoEvHH~Db%I7SEf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vYZoEvHH~Db%I7SEf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = ".x1%_oJ^|/jTwd7RG";
      Utility.getSignature(".x1%_oJ^|/jTwd7RG");
      int int0 = 2722;
      Utility.isSet(3508, 2722);
      Utility.getSignature("N}?vYl$m`");
      try { 
        Utility.methodSignatureReturnType("N}?vYl$m`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N}?vYl$m`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.compactClassName("compiler version\t", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)104;
      byteArray1[1] = (byte)104;
      byteArray1[2] = (byte)104;
      byteArray1[3] = (byte)104;
      byteArray1[4] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readByte();
      byteSequence0.readBoolean();
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.accessToString((-373903298), false);
      String string0 = "java.lang.";
      String string1 = "o6pxtlg!QB{mj?";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.", "o6pxtlg!QB{mj?", "private protected static final synchronized synthetic annotation", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$", false);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)45;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-14);
      byteArray1[1] = (byte) (-14);
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)123;
      byteArray1[6] = (byte)56;
      byteArray1[7] = (byte)123;
      byteArray1[8] = (byte) (-86);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rv");
      Utility.convertString("u/EDNUh/VptaU`]");
      int int0 = 10;
      char char0 = '(';
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.format(10, 10, false, '(');
      int int1 = 247;
      Utility.isSet(10, 247);
      try { 
        Utility.methodSignatureArgumentTypes("Invalid byte tag in constant pool: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid byte tag in constant pool: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'");
      String string0 = Utility.convertString("6\"~");
      assertEquals("6\\\"~", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)20;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Invalid signature: `";
      stringArray0[1] = "boolean";
      stringArray0[2] = "Invalid signature: `";
      stringArray0[3] = "E}:P^mrLH";
      stringArray0[4] = "Invalid signature: `";
      Utility.methodTypeToSignature("Invalid signature: `", stringArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)94;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("6$5d$888$40W$C$H$5e", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte) (-120));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)56;
      objectArray0[2] = (Object) (byte)87;
      objectArray0[3] = (Object) (byte)94;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) (byte)87;
      objectArray0[6] = (Object) (byte)87;
      objectArray0[7] = (Object) (byte)87;
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{null, 56, 87, 94, , 87, 87, 87}", string2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.getSignature("?'R");
      try { 
        Utility.typeOfSignature("?|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byte byte0 = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byte byte1 = (byte)4;
      byteArray0[2] = (byte)4;
      byte byte2 = (byte)65;
      byteArray0[3] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-75), 1573, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1089. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.searchOpcode("3_,xuM:qioz{i");
      byte[] byteArray0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.compactClassName("private", "new", true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("new", stringArray0);
      Utility.methodSignatureReturnType("()Lnew;");
      Utility.getSignature("java.lang.");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "private";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "private";
      objectArray0[3] = (Object) "new";
      Object object1 = new Object();
      objectArray0[4] = object1;
      Utility.printArray(objectArray0);
      try { 
        Utility.decode(" (", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "C3RJvg2j4nEGD";
      Utility.typeOfSignature("C3RJvg2j4nEGD");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string1 = "8\\H~<@@`";
      try { 
        Utility.typeOfSignature("8H~<@@`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8H~<@@`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.signatureToString("J2x##1BgKJWO", false);
      String string0 = Utility.printArray((Object[]) null, true, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "S#/|rJU";
      boolean boolean0 = false;
      Utility.compactClassName("S#/|rJU", false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S#.|rJU");
      Utility.typeOfSignature("S#/|rJU");
      Utility.compactClassName("S#.|rJU", "S#/|rJU", false);
      Utility.signatureToString("S#/|rJU");
      Utility.setBit((byte)9, 95);
      Utility.replace("S#/|rJU", "L<;V", "S#.|rJU");
      Utility.compactClassName("S#/|rJU", "S#.|rJU", false);
      String string1 = "~.e\\Xq'";
      try { 
        Utility.typeOfSignature("~.eXq'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~.eXq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\t<";
      stringArray0[1] = "\t<";
      stringArray0[2] = "\t<";
      Utility.methodTypeToSignature("\t<", stringArray0);
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "OQnK:4@2?ob0}L\"qUrb";
      Utility.searchOpcode("OQnK:4@2?ob0}L\"qUrb");
      try { 
        Utility.typeOfSignature("OQnK:4@2?ob0}L\"qUrb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OQnK:4@2?ob0}L\"qUrb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.signatureToString("FZenD6}K");
      Utility.accessToString(74, false);
      int int0 = 879;
      Utility.setBit(40, 879);
      try { 
        Utility.methodSignatureArgumentTypes("_d~13A>gp,", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _d~13A>gp,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.accessToString((-889275714), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "\t";
      MockFile mockFile0 = new MockFile("\t", "\t");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append(',');
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool0.dump(dataOutputStream0);
      boolean boolean0 = false;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-662), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      File file0 = MockFile.createTempFile("B,-iO_EK^-3vqWqLW", "B,-iO_EK^-3vqWqLW");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "B,-iO_EK^-3vqWqLW";
      objectArray0[1] = (Object) "B,-iO_EK^-3vqWqLW";
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.println();
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) mockPrintWriter0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = Utility.format((-1027), (-1027), false, 'T');
      assertEquals("-1027", string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface((-1282));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.clearBit(170, (-2));
      Utility.classOrInterface(312);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)72;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString((-362));
      Utility.convertString("private protected final transient interface abstract strictfp synthetic annotation enum");
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      String string0 = "I)9C";
      Utility.typeOfSignature("I)9C");
      boolean boolean0 = false;
      Utility.format((byte)10, 1341, false, '>');
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, false, false);
      String string1 = ":_Ko$;.|\\1[=07VKP<p";
      Utility.searchOpcode(":_Ko$;.|\u0001[=07VKP<p");
      Utility.compactClassName("putstatic");
      Utility.printArray((Object[]) null, false, false);
      try { 
        Utility.methodSignatureArgumentTypes(":_Ko$;.|\u0001[=07VKP<p", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :_Ko$;.|\u0001[=07VKP<p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "The size must be non-negative";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The size must be non-negative");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The size must be non-negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "F4^}";
      Utility.getSignature("F4^}");
      boolean boolean0 = true;
      Utility.format(1607, 1607, true, ' ');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-127);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("x-K2-x&7[YB7[bA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x-K2-x&7[YB7[bA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte) (-19));
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 60896. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-55);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1780), (int) (byte)3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dconst_0
         // 1:    iconst_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = ": ";
      Utility.convertString(": ");
      Utility.isSet(548, 548);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)114;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 548, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bwSvX;;,e{E-M<ao");
      String string0 = "=S3]\\5z";
      Utility.replace("bwSvX;;,e{E-M<ao", "bwSvX;;,e{E-M<ao", "=S3]\u0005z");
      try { 
        Utility.typeOfSignature("=S3]\u0005z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =S3]\u0005z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("org.apache.bcel.classfile.StackMapType");
      Utility.accessToString(697, false);
      Utility.replace("org.apache.bcel.classfile.StackMapType", "SAME_LOCALS_1_STACK_EXTENDED", "SAME_LOCALS_1_STACK_EXTENDED");
      Utility.replace("org.apache.bcel.classfile.StackMapType", "org.apache.bcel.classfile.StackMapType", "u!");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.decode("org.apache.bcel.classfile.StackMapType", false);
      String string0 = null;
      String string1 = "dconst_1";
      String string2 = "lcmp";
      Method method0 = new Method();
      // Undeclared exception!
      try { 
        method0.getCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.clearBit(2256, 2256);
      String string0 = "boolean";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("boolean", false);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(1362, false);
      Utility.fillup("boolean", 1925, false, 'Q');
      Utility.setBit(240, 1231);
      String string1 = ">";
      try { 
        Utility.methodSignatureReturnType(">", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-54);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = " i'%aB5%";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodTypeToSignature(" i'%aB5%", (String[]) null);
      boolean boolean0 = true;
      try { 
        Utility.decode("()Li'%aB5%;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.compactClassName("void", "void", false);
      assertEquals("void", string0);
      
      String string1 = Utility.accessToString(648, false);
      assertEquals("static transient interface", string1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "static transient interface";
      objectArray0[2] = (Object) "static transient interface";
      objectArray0[3] = (Object) "void";
      objectArray0[4] = (Object) "void";
      objectArray0[5] = (Object) "void";
      String string2 = Utility.printArray(objectArray0);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("l2f", string3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-115);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$e3$U$A$e9M$8d", string0);
      
      try { 
        Utility.typeOfSignature("$A$A$e3$U$A$e9M$8d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$A$e3$U$A$e9M$8d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-22);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("Linvokevirtual;V", "void", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("fload_1");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "fload_1");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "void";
      Utility.printArray(printStream0, objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(1054, 1054);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.setBit(0, 1861);
      try { 
        Utility.methodSignatureReturnType(")K=>P1qxh9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K=>P1qxh9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)66;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.isSet((byte) (-128), (byte)66);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("? super ", "Byte code error: ", "Byte code error: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = ", offset delta=";
      Utility.compactClassName(", offset delta=");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)46;
      Utility.equals(byteArray0, byteArray0);
      Utility.format(1249, 2685, true, 'k');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "ifgt", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = Utility.accessToString(978, true);
      String string1 = Utility.fillup("private final volatile transient native", (-1956), true, '%');
      assertEquals("private final volatile transient native", string1);
      
      String string2 = Utility.compactClassName("private final volatile transient native");
      assertTrue(string2.equals((Object)string0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)32;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("jsr", "jsr", true);
      int int0 = 77;
      Utility.clearBit((-1739), 77);
      // Undeclared exception!
      try { 
        Utility.signatureToString("m)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `m)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.isJavaIdentifierPart('r');
      String string0 = "invokevirtual";
      Utility.searchOpcode("invokevirtual");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "invokevirtual";
      stringArray0[1] = "invokevirtual";
      String string1 = "tjb_6P8`8gU/p4o";
      stringArray0[2] = "tjb_6P8`8gU/p4o";
      stringArray0[3] = "invokevirtual";
      Utility.methodTypeToSignature("Lx\"Yy0q]/7ag", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("invokevirtual");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokevirtual
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.compactClassName("H$7o");
      Utility.accessToString(93, false);
      try { 
        Utility.methodSignatureReturnType("H$7o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H$7o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "instanceof";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getstatic", "getstatic", "instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-125);
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-113);
      objectArray0[1] = (Object) (byte) (-125);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte) (-125);
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('m');
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-113));
      Utility.getSignature("8f 83");
      try { 
        Utility.methodSignatureArgumentTypes("8f 83");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8f 83
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.compactClassName("wba-G^_Uh.Cy++");
      Utility.convertString("wba-G^_Uh.Cy++");
      try { 
        Utility.typeOfMethodSignature("wba-G^_Uh.Cy++");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wba-G^_Uh.Cy++
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.compactClassName("IS+<6G?`|6):u'Q");
      Utility.compactClassName("org.apache.bcel.classfile.Utility$JavaWriter", "IS+<6G?`|6):u'Q", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Utility$JavaWriter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$JavaWriter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)90;
      Utility.equals(byteArray0, byteArray0);
      String string0 = Utility.getSignature("ret");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)32;
      objectArray0[3] = (Object) (byte)58;
      objectArray0[4] = (Object) (byte)90;
      objectArray0[5] = (Object) (byte)1;
      objectArray0[6] = (Object) (byte)32;
      Object object1 = new Object();
      objectArray0[7] = object1;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-115);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "b-_@^I*", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)97;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte) (-98), 687);
      Utility.isSet(243, (-460));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)97;
      objectArray0[1] = (Object) (byte) (-98);
      objectArray0[2] = (Object) (byte)1;
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature("{\"97\", \"-98\", \"1\"}");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.accessToString(211, false);
      Utility.setBit((-2996), 91);
      try { 
        Utility.methodSignatureArgumentTypes("public private final volatile transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private final volatile transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      Utility.clearBit(42, 658);
      try { 
        Utility.typeOfSignature("1I6curlW\\^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1I6curlW\\^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("[IFl=l`Z}");
      Utility.accessToString((-1007));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte) (-60));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readFloat();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      byteSequence0.skip((-1L));
      Utility.codeToString(byteArray0, constantPool1, (-3091), 95, false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    istore_0\n1:    iadd\n2:    <illegal opcode>\n3:    iaload\n4:    <illegal opcode>\n5:    wide\t(wide)\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    istore_0
         // 1:    iadd
         // 2:    <illegal opcode>
         // 3:    iaload
         // 4:    <illegal opcode>
         // 5:    wide\t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "]_s<S";
      stringArray0[1] = "]_s<S";
      stringArray0[2] = "]_s<S";
      stringArray0[3] = "]_s<S";
      stringArray0[4] = "]_s<S";
      stringArray0[5] = "]_s<S";
      stringArray0[6] = "]_s<S";
      String string0 = Utility.methodTypeToSignature("]_s<S", stringArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]_s<S";
      objectArray0[1] = (Object) "]_s<S";
      objectArray0[2] = (Object) "]_s<S";
      objectArray0[3] = (Object) "]_s<S";
      objectArray0[4] = (Object) "]_s<S";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "]_s<S";
      objectArray0[7] = (Object) "]_s<S";
      objectArray0[8] = (Object) "(L]_s<S;L]_s<S;L]_s<S;L]_s<S;L]_s<S;L]_s<S;L]_s<S;)L]_s<S;";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "org.apache.bcel.util.SyntheticRepository";
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.util.SyntheticRepository");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.util.SyntheticRepository'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      Utility.isJavaIdentifierPart('I');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)25;
      byte byte0 = (byte)62;
      byteArray0[4] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, 2098);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)98, true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*mq=d,,{Sl[{W6\"Nk";
      stringArray0[1] = "*mq=d,,{Sl[{W6\"Nk";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("*mq=d,,{Sl[{W6\"Nk", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[{W6\"Nk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)28;
      byte byte0 = (byte)42;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)55;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[9];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(38, (byte)75);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-3814), (byte) (-19));
      constantArray0[1] = (Constant) constantNameAndType0;
      DataInput dataInput0 = null;
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("5gOh}Ft7?r,/A^>4|R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5gOh}Ft7?r,/A^>4|R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.classOrInterface(32);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("N?^+t'UH%Sy<", true);
      assertEquals("N?^+t'UH%Sy<", string1);
      
      String string2 = Utility.getSignature("N?^+t'UH%Sy<");
      assertEquals("LN?^+t'UH%Sy<;", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte)59;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("20 0c f8 ed 3c a5 d0 9f 3b", string3);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "YiNB)e&z1Jw";
      int int0 = 11;
      Utility.fillup("YiNB)e&z1Jw", 11, false, 'J');
      // Undeclared exception!
      try { 
        Utility.signatureToString("YiNB)e&z1Jw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YiNB)e&z1Jw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
