/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:04:24 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.isIdentifierChar('\'');
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4l}9");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.setXPath("t{");
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-1111));
      assertEquals("t{", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" s");
      Token token0 = new Token(2220, " s", 2220, 2220);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",jn");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(",", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("j", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("n", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7?c`$qAt.E!ZTY#~=");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals("7", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.consume(0);
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("?", token3.getTokenText());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("`", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("$", token6.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer0.or();
      xPathLexer0.getXPath();
      xPathLexer0.and();
      xPathLexer0.endPosition();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("A", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.equals();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.consume(287);
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      char char0 = xPathLexer0.LA(287);
      assertEquals('\uFFFF', char0);
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.star();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.equals();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token6.getTokenType());
      
      char char0 = xPathLexer0.LA(1357);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(11, int0);
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.consume(2667);
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertNull(token10);
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      int int1 = xPathLexer0.endPosition();
      assertEquals(0, int1);
      
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xCs5`.");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.div();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.at();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("*", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.getXPath();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals("lNH", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7?c`$qAt.E!ZTY#~=");
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.number();
      assertEquals("", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("?", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("`", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("q", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("A", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      assertEquals("t.E", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals("!", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.literal();
      token1.toString();
      xPathLexer0.literal();
      token0.toString();
      Token token2 = xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.currentPosition();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X=2o");
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.isIdentifierStartChar('\\');
      xPathLexer1.relationalOperator();
      xPathLexer0.consume(0);
      xPathLexer0.setXPath(":qjg8!m$-xI");
      xPathLexer0.getPreviousToken();
      xPathLexer1.not();
      xPathLexer0.number();
      xPathLexer1.number();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xCs5`.");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.colon();
      assertEquals("s", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("5", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("`.", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i.U(FUobV.4)^eo");
      XPathLexer xPathLexer1 = new XPathLexer("|B\"V/y9+t(!QR");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("B", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("8", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.getXPath();
      Token token2 = xPathLexer1.getPreviousToken();
      assertEquals(17, token2.getTokenType());
      assertEquals("|", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Ju&mq'N73@#52>vN");
      xPathLexer0.or();
      xPathLexer1.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.consume(17);
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer1.leftParen();
      xPathLexer2.mod();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("u", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer3.operatorName();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("Ju&mq'N73@#52>vN");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.div();
      Token token6 = xPathLexer4.dollar();
      assertEquals("J", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("*)KCY$1!7QsJ");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("$", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      xPathLexer0.setXPath("gLPW,sY7]\u0001{&y");
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals("KCY", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals("g", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      assertEquals("*)", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i.U(FUobV.4)^eo");
      XPathLexer xPathLexer1 = new XPathLexer("8i.U(FUobV.4)^eo");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("i", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer0.getXPath();
      Token token2 = xPathLexer1.getPreviousToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i.U(FUobV.4)^eo");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("LL5*>hq");
      xPathLexer1.getPreviousToken();
      xPathLexer1.not();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eU}x)]/F5Qf6M12F2");
      xPathLexer0.dots();
      xPathLexer0.isIdentifierStartChar('!');
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.LA(170);
      xPathLexer0.identifier();
      xPathLexer0.isIdentifierChar('!');
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i.U(FUobV.4)^eo");
      XPathLexer xPathLexer1 = new XPathLexer("|B\"V/y9+t(!QR");
      Token token0 = xPathLexer1.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("B", token1.getTokenText());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("\"", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("8", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(".", token5.getTokenText());
      assertEquals(31, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-.:|");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(".", token1.getTokenText());
      assertEquals(31, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4l}9");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("MTavGbEY:lw9J}");
      xPathLexer1.nextToken();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer2.identifier();
      xPathLexer2.operatorName();
      xPathLexer2.getXPath();
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J8W( 9RD7%uK=e6~yE");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      XPathLexer xPathLexer1 = new XPathLexer("7$j+>`3;cm@[0+");
      xPathLexer1.setPreviousToken(token0);
      assertEquals("J8W", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("7", token2.getTokenText());
      
      xPathLexer0.getXPath();
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X=2o");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("X", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("=", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("G`?Z]");
      Token token2 = xPathLexer1.number();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(19, token0.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("&`6`{OB2g2");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("&`6`{OB2g2", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xCs5`.");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("C", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("s5", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i.U(FUobV.4)^eo");
      xPathLexer0.consume((-1));
      Token token0 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer1.setPreviousToken(token0);
      assertEquals(3, token0.getTokenType());
      
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('\'');
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("3|IPsk%g{}$.9(w`");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S.Q;)gjf*<:~J{");
      Token token0 = xPathLexer0.dots();
      assertEquals(14, token0.getTokenType());
      assertEquals("S.", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (5) (Q)", string0);
      
      xPathLexer0.consume(847);
      xPathLexer0.dots();
      int int0 = xPathLexer0.endPosition();
      assertEquals(14, int0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.isIdentifierChar('L');
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.dots();
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|B\"V/y9+t(!QR");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("|B", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|B\"V/y9+t(!QR");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.slashes();
      assertEquals("B", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('C');
      assertTrue(boolean0);
      
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals(17, token3.getTokenType());
      assertEquals("|", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("t6XKd");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("6", token1.getTokenText());
      
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.consume((-1));
      xPathLexer0.div();
      Token token3 = xPathLexer0.equals();
      assertEquals("d", token3.getTokenText());
      
      xPathLexer0.minus();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.isIdentifierChar('M');
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('M');
      assertTrue(boolean0);
      
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer0.mod();
      int int0 = xPathLexer0.endPosition();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ide");
      xPathLexer0.not();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2_");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("7$j+>`3;cm@[0+");
      xPathLexer1.setPreviousToken(token0);
      assertEquals(30, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer1.rightBracket();
      assertEquals("7", token1.getTokenText());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("$", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      xPathLexer0.nextToken();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("{_7-");
      xPathLexer3.rightParen();
      xPathLexer2.identifier();
      xPathLexer3.operatorName();
      xPathLexer3.getXPath();
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J*9o[9B=");
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("lNH", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertEquals("0f", token1.getTokenText());
      assertNotNull(token1);
      assertEquals(27, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("2", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token4);
      assertEquals("E", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("p-", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(2, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4l}9");
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("4", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("MTavGbEY:lw9J}");
      Token token1 = xPathLexer1.not();
      assertEquals("M", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer2.identifier();
      xPathLexer2.operatorName();
      xPathLexer2.getXPath();
      xPathLexer2.getPreviousToken();
      Token token5 = xPathLexer1.identifier();
      assertEquals("lw9J", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("l", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('D');
      xPathLexer0.relationalOperator();
      token1.toString();
      token1.toString();
      xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("&`6`{OB2g2");
      xPathLexer0.nextToken();
      xPathLexer1.rightParen();
      xPathLexer1.operatorName();
      xPathLexer1.consume();
      xPathLexer1.number();
      xPathLexer0.number();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|B\"V/y9+t(!QR");
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".-33]lqPw");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(13, token0.getTokenType());
      assertEquals(".", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xCs5`.");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("5", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("`", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(13, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token1);
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i.U(FUobV.4)^eo");
      Token token0 = xPathLexer0.colon();
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      xPathLexer0.leftParen();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("FU", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("8i.U(FUobV.4)^eo");
      xPathLexer1.operatorName();
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("8", token4.getTokenText());
      
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals("i.U", token5.getTokenText());
      assertNotNull(token5);
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.div();
      Token token6 = xPathLexer0.dollar();
      assertEquals("o", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xCs5`.");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Cs5", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fk{r;J$yO4UTP/W&");
      xPathLexer0.plus();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('D');
      xPathLexer0.relationalOperator();
      token0.toString();
      token0.toString();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getXPath();
      token0.toString();
      xPathLexer0.colon();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.literal();
      xPathLexer0.setXPath("[ (32) ({)");
      xPathLexer0.hasMoreChars();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("[ (32) ({)");
      assertEquals("[ (32) ({)", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      Token token0 = xPathLexer0.plus();
      assertEquals("F", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.consume(1);
      Token token1 = xPathLexer0.rightParen();
      assertEquals("{", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(";", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("J", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("$y", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      Token token7 = xPathLexer2.nextToken();
      assertEquals("Fw", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("O", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("");
      xPathLexer0.consume(0);
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.equals();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.setXPath("!X=tK_/\"K");
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("!", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.colon();
      assertEquals("=", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("t", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.endPosition();
      Token token5 = xPathLexer0.literal();
      assertEquals(27, token5.getTokenType());
      assertEquals("_/\"", token5.getTokenText());
      assertNotNull(token5);
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("!X=tK_/\"K");
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      Token token8 = xPathLexer0.rightParen();
      assertEquals("!", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals("X", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.and();
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      assertEquals("=", token10.getTokenText());
      
      Token token11 = xPathLexer0.identifier();
      assertEquals("tK_", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.setXPath("p7s J){/`lm^K0.a");
      Token token12 = xPathLexer0.at();
      assertEquals("p", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      assertEquals("7", token13.getTokenText());
      
      xPathLexer0.consume(9);
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('o');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xCs5`.");
      xPathLexer0.equals();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.rightParen();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.consume(100);
      assertEquals("lNH*0f*W2Ep-#ysk}`", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      Token token0 = xPathLexer0.plus();
      assertEquals("F", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("MTavGbEY:lw9J}");
      xPathLexer0.setPreviousToken(token1);
      assertEquals("w", token1.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G5bQ(CL|yTq>l");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer2.and();
      Token token0 = xPathLexer1.nextToken();
      assertEquals("G5bQ", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer1.consume(17);
      xPathLexer1.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer2.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer3.leftParen();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("Ju&mq'N73@#52>vN");
      Token token4 = xPathLexer5.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("Ju", token4.getTokenText());
      
      xPathLexer2.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token5 = xPathLexer6.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xCs5`.");
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("xCs5", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("G`?Z]");
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      Token token0 = xPathLexer0.plus();
      assertEquals("F", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.consume(1);
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("r", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(";J$yOCUTP/W&", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals(";J", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("Fw", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("$", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jfbhXN@_aB^:4g+");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("jfbhXN", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("@", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("_", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ac{mm:Neh\"'");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|B\"V/y9+t(!QR");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(11, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("B", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7?c`$qAt.E!ZTY#~=");
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.consume(925);
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer0.isIdentifierChar('M');
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("]~ Ux +5g\tB9n");
      xPathLexer1.comma();
      xPathLexer0.dollar();
      xPathLexer1.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer1.hasMoreChars();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@%m)nI8DuV#n.H3D$Fn");
      XPathLexer xPathLexer1 = new XPathLexer("7?c`$qAt.E!ZTY#~=");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("7", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("@", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("9-o7W/Cq/eznI@yt");
      Token token2 = xPathLexer1.dollar();
      assertEquals("?", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("l", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("NH", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("*", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("f*W2Ep-#ysk}`", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      Token token5 = xPathLexer1.leftParen();
      assertEquals("l", token5.getTokenText());
      
      Token token6 = xPathLexer1.number();
      assertEquals("", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('E');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("F", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("w", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("{r;J$yOCUTP/W&", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("{r;J$yOCUTP/W&", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I\"=rP");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("I\"=rP");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("I", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("\"", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("\"=", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|B\"V/y9+t(!QR");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      assertEquals("|B", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AW6\"rLHx\"Fs4dX0");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("AW6", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("\"", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("LHx\"Fs4dX0", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("fy");
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("t6XKd");
      xPathLexer0.pipe();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("t6XKd");
      XPathLexer xPathLexer2 = new XPathLexer("t6XKd");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J*9o[9B=");
      XPathLexer xPathLexer1 = new XPathLexer("z+;(T1EM");
      xPathLexer1.consume(1834);
      xPathLexer1.slashes();
      Token token0 = xPathLexer0.comma();
      assertEquals("J", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("J*9o[9B=");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(20, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer3.notEquals();
      assertEquals(22, token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("z+;(T1EM");
      XPathLexer xPathLexer5 = new XPathLexer("/Xy7prBz/eo");
      Token token3 = xPathLexer5.nextToken();
      assertEquals("/", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer3.rightBracket();
      assertEquals(4, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("&`6`{OB2g2");
      Token token0 = xPathLexer1.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('D');
      assertTrue(boolean0);
      
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("6", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Fw{r;J$yOCUTP/W&");
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("G`?Z]");
      xPathLexer2.mod();
      xPathLexer2.mod();
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|B\"V/y9+t(!QR");
      Token token0 = xPathLexer0.at();
      assertEquals("|", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.consume(6);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("+", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("t(", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      xPathLexer1.leftBracket();
      xPathLexer1.whitespace();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      String string0 = xPathLexer0.getXPath();
      assertEquals("lNH*0f*W2Ep-#ysk}`", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("MTavGbEY:lw9J}");
      Token token1 = xPathLexer1.star();
      assertEquals("M", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.not();
      assertEquals("T", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("avGbEY", token3.getTokenText());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(":", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer2.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("t6XKd");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("t", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("6", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("XK", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.consume((-1));
      Token token4 = xPathLexer0.leftParen();
      xPathLexer0.div();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer("\"BNLVje6[!");
      xPathLexer1.setPreviousToken(token4);
      assertEquals("d", token4.getTokenText());
      
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals("", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNotNull(token1);
      assertEquals("0f", token1.getTokenText());
      assertEquals(27, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("W", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("E", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("p-", token5.getTokenText());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("#ysk}`", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      assertEquals("[ (", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(":62q6i@@4CN");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(18, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.isIdentifierStartChar('c');
      xPathLexer1.relationalOperator();
      xPathLexer0.consume(0);
      xPathLexer0.setXPath(":qjg8!m$-xI");
      xPathLexer0.nextToken();
      xPathLexer1.not();
      xPathLexer0.number();
      xPathLexer1.number();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lNH*0f*W2Ep-#ysk}`");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("lNH", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertEquals(27, token1.getTokenType());
      assertNotNull(token1);
      assertEquals("0f", token1.getTokenText());
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("2", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("Ep-#ysk}`", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("PbOlwAn$6p/~?kI!4L");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('E');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d[$8L<$");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("VLI ?OUfjT4j");
      Token token0 = xPathLexer0.star();
      assertEquals("[", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("LI", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.rightParen();
      assertEquals("?", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifier();
      assertEquals("OUfjT4j", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      assertEquals("", token6.getTokenText());
      
      char char0 = xPathLexer2.LA(693);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d[$8L<$");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("VLI ?OUfjT4j");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("V", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(" ", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(26, token5.getTokenType());
      assertEquals("$", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" s");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("s", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("MTavGbEY:lw9J}");
      Token token1 = xPathLexer1.star();
      assertEquals("M", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.not();
      assertEquals("T", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer1.rightBracket();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("vGbEY", token3.getTokenText());
      
      xPathLexer0.div();
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(":", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer2.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d[$8L<$");
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("VLI ?OUfjT4j");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer1.not();
      assertEquals("V", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("LI", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals(" ", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Z>y[u<-Qh+");
      Token token4 = xPathLexer2.nextToken();
      assertEquals("Z", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("kulcI+`M6&My`HR5");
      Token token5 = xPathLexer1.dollar();
      assertEquals("?", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hcb");
      Token token0 = xPathLexer0.dollar();
      assertEquals("h", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("cb", token1.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("hcb");
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'|tv?EXHmk3}n");
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("VLI ?OUfjT4j");
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.not();
      assertEquals("V", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("LI", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.nextToken();
      int int0 = xPathLexer1.endPosition();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&`6`{OB2g2");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("`", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("6", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(26, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hcb");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("hcb", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.getXPath();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("e");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("e");
      xPathLexer2.dollar();
      xPathLexer2.consume();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|B\"V/y9+t(!QR");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("B", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.consume(10);
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("R", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("${aT!");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("$", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("{", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("a", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(23, token5.getTokenType());
      assertEquals("!", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i.U(rFUobV.4)^eo");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("i", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertEquals(27, token2.getTokenType());
      assertEquals("U(rFUobV", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(2, token4.getTokenType());
      assertEquals(")", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("^eo", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8iU(rFUobVM)^eo");
      Token token0 = xPathLexer0.colon();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("i", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("8", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("U", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8i.U(rFUobV.4)^eo");
      Token token0 = xPathLexer0.colon();
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("i", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(31, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.literal();
      assertEquals("(rF", token3.getTokenText());
      assertEquals(27, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("o", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("bV.4", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(2, token6.getTokenType());
      assertEquals(")", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(32, token0.getTokenType());
      assertEquals(",", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("02/`Pj+f[,");
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z,zt<G- ctT%");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(32, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("zt", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n>");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(9, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">ur^");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[yM2@y[. %D[y^=]");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("[", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("M2", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_C");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("_C", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hcb");
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" s");
      xPathLexer0.dollar();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("Fx]Tv=HuB2z");
      xPathLexer1.rightParen();
      xPathLexer1.rightBracket();
      xPathLexer1.nextToken();
      String string0 = xPathLexer1.getXPath();
      assertEquals("Fx]Tv=HuB2z", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X=2o");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sX1ja");
      Token token0 = xPathLexer0.colon();
      assertEquals("s", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.plus();
      assertEquals("X", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("1", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("t6XKd");
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-1));
      xPathLexer0.div();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("${aT!");
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("y)B_ q");
      xPathLexer1.notEquals();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mB\"V/y9+t(!QR");
      Token token0 = xPathLexer0.identifier();
      assertEquals("mB", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("\"", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("V/", token2.getTokenText());
      assertEquals(12, token2.getTokenType());
      
      xPathLexer0.consume(10);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("88Q#!khWb(");
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("88", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Q#!khWb(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.consume(109);
      XPathLexer xPathLexer1 = new XPathLexer("O@I/V,.n~:d#");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("O", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("${aT!");
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer(".1]-33]0lqPw");
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KmeV");
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("gV,)Fz.Bep");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("gV", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<1hc");
      Token token0 = xPathLexer0.relationalOperator();
      assertEquals(7, token0.getTokenType());
      assertNotNull(token0);
      assertEquals("<", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J*9o[9B=");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("J", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("9", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.setXPath("-O};c`pN<`~");
      Token token3 = xPathLexer0.nextToken();
      assertEquals("-", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.plus();
      assertEquals("O", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("[@e4jNJv%9Iogba");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("YsX@S;c{< /F.)&2");
      Token token1 = xPathLexer2.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("YsX", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R8lOv8_aN%9QJxc4r");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      assertEquals("R8lOv8_aN", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("%9QJxc4r", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]|W[~wO4v");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("]", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("W", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8Qkb(");
      xPathLexer0.or();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("8Q", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("kb", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CDrc\"7\"3g&SxrYe< Z=");
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Drc", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".1]-33]0lqPw");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M.>|");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("M", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals(".", token1.getTokenText());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(9, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<`bw<||");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer1.mod();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("`bw<||", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M.>|");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P5");
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.literal();
      token1.toString();
      xPathLexer0.literal();
      token0.toString();
      Token token2 = xPathLexer0.identifier();
      xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("mT?");
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("moY0rlY[[UY<zqrl#");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M.>S");
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ac'{~2km:N1ehf'");
      xPathLexer0.colon();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<G7:fGU<tP,-\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("G7", token1.getTokenText());
  }
}
