/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:30:23 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.RE2");
      String string0 = rE2_0.replaceAll("com.google.re2j.RE2", "com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 6800);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", 754);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2(";}b2|");
      assertNotNull(rE2_0);
      assertEquals(";}b2|", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll(";}b2|", ";}b2|");
      assertNotNull(string0);
      assertEquals(";}b2|", rE2_0.toString());
      assertEquals(";}b2||;}b2|", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("", "");
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("");
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("\"6xbz9jrm7eFEt");
      assertNotNull(rE2_0);
      assertEquals("\"6xbz9jrm7eFEt", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 625);
      assertNull(list0);
      assertEquals("\"6xbz9jrm7eFEt", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 116);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-892));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2("AAmM}HhM&9GjDl,d|");
      assertNotNull(rE2_0);
      assertEquals("AAmM}HhM&9GjDl,d|", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("AAmM}HhM&9GjDl,d|", (-1564));
      assertNotNull(list0);
      assertEquals("AAmM}HhM&9GjDl,d|", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("}q-/?pcvbVWNmQ7");
      assertNotNull(rE2_0);
      assertEquals("}q-/?pcvbVWNmQ7", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 4082);
      assertNull(list0);
      assertEquals("}q-/?pcvbVWNmQ7", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("UTFc-8");
      assertNotNull(rE2_0);
      assertEquals("UTFc-8", rE2_0.toString());
      
      String string0 = rE2_0.find("UTFc-8");
      assertNotNull(string0);
      assertEquals("UTFc-8", rE2_0.toString());
      assertEquals("UTFc-8", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("", rE2_0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("can't happen", "can't happen");
      assertNotNull(string0);
      assertEquals("can't happen", rE2_0.toString());
      assertEquals("can't happen", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(">H!A*3bR:_}#m");
      assertNotNull(rE2_0);
      assertEquals(">H!A*3bR:_}#m", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex(">H!A*3bR:_}#m");
      assertNull(intArray0);
      assertEquals(">H!A*3bR:_}#m", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2(";H0*EeCO685F} ");
      assertNotNull(rE2_0);
      assertEquals(";H0*EeCO685F} ", rE2_0.toString());
      
      String string0 = rE2_0.find(";H0*EeCO685F} ");
      assertNotNull(string0);
      assertEquals(";H0*EeCO685F} ", rE2_0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = RE2.match("t$~U`]", "t$~U`]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 116);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      RE2 rE2_0 = RE2.compile("S");
      assertNotNull(rE2_0);
      assertEquals("S", rE2_0.toString());
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-140));
      assertNull(list0);
      assertEquals("S", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("@t");
      assertNotNull(rE2_0);
      assertEquals("@t", rE2_0.toString());
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("@t", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("UTF-8");
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("UTF-8", 116);
      assertNotNull(list0);
      assertEquals("UTF-8", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("\"wse'1\"bTg9^mF\",");
      assertNotNull(rE2_0);
      assertEquals("\"wse'1\"bTg9^mF\",", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("\"wse'1\"bTg9^mF\",");
      assertNull(stringArray0);
      assertEquals("\"wse'1\"bTg9^mF\",", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Mongolian");
      assertNotNull(rE2_0);
      assertEquals("Mongolian", rE2_0.toString());
      
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("", (-208), (-208), (-208), (int[]) null, 845);
      assertEquals("", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compile("\"6xbz9jrm7eFEt");
      assertNotNull(rE2_0);
      assertEquals("\"6xbz9jrm7eFEt", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertEquals("\"6xbz9jrm7eFEt", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(">H!A*3bRN:_}#m");
      assertNotNull(rE2_0);
      assertEquals(">H!A*3bRN:_}#m", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex(">H!A*3bRN:_}#m");
      assertNull(intArray0);
      assertEquals(">H!A*3bRN:_}#m", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 907);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2(".UCVj]");
      assertNotNull(rE2_0);
      assertEquals(".UCVj]", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(".UCVj]", (-1628));
      assertNotNull(list0);
      assertEquals(".UCVj]", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RE2.quoteMeta("G|*oY");
      assertNotNull(string0);
      assertEquals("G\\|\\*oY", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("", (-538));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = new RE2("B+/p");
      assertNotNull(rE2_0);
      assertEquals("B+/p", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("B+/p", (-538));
      assertNull(list0);
      assertEquals("B+/p", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = rE2_0.match("", 0, 0, 0, intArray0, 0);
      assertTrue(boolean1 == boolean0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("@t");
      assertNotNull(rE2_0);
      assertEquals("@t", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("@t", (-1109), (-1244), (-1244), (int[]) null, (-1109));
      assertEquals("@t", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("AQ~!$Jj");
      assertNotNull(rE2_0);
      assertEquals("AQ~!$Jj", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("AQ~!$Jj", 116);
      assertNull(list0);
      assertEquals("AQ~!$Jj", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 65843);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("L");
      assertNotNull(rE2_0);
      assertEquals("L", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("L", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray2 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray2);
      assertEquals("L", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("FM*O");
      assertNotNull(rE2_0);
      assertEquals("FM*O", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("FM*O", 43444);
      assertNull(list0);
      assertEquals("FM*O", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", 0);
      assertNull(list0);
      assertEquals("", rE2_0.toString());
      
      List<int[]> list1 = rE2_0.findAllIndex("", 0);
      assertNull(list1);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = rE2_0.match("", 0, 0, 0, (int[]) null, 6);
      assertTrue(boolean1 == boolean0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean1);
      
      RE2 rE2_1 = RE2.compilePOSIX("");
      assertNotSame(rE2_1, rE2_0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotNull(rE2_1);
      assertEquals("", rE2_1.toString());
  }
}
