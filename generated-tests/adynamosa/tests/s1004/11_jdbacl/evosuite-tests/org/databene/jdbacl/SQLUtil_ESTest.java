/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 02:52:29 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.h2.expression.Parameter;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("wr+,[J{b", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName(" on ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" on \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 4", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/*");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("ALTER TABLE /* ADD \n\tFOREIGN KEY () REFERENCES /*()", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Parameter parameter0 = new Parameter(48);
      String string0 = SQLUtil.substituteMarkers("", "alter index(&wh<3)c3", parameter0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-304224265), "x");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("X", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBDataType dBDataType0 = DBDataType.getInstance((-1629013515), "mnfxeDAQ//H,BsU'8");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B5ZI(=\"v:j0j_", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("B5ZI(=\"v:j0j_, B5ZI(=\"v:j0j_, B5ZI(=\"v:j0j_, B5ZI(=\"v:j0j_, B5ZI(=\"v:j0j_, B5ZI(=\"v:j0j_", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-1465), "--");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left join t12Y[1mZ>~>9i7o15P as t12Y[1mZ>~>9i7o15P on SELECT * FROM .SELECT * FROM  = t12Y[1mZ>~>9i7o15P.SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "M1qEq8P3ZZ", true, stringArray0);
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT M1qEq8P3ZZ UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((String) null).when(compositeDBObject0).getObjectType();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertEquals("null null", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "CONSTRAINT 6WY=0_# _CHECK seect ");
      assertEquals("'CONSTRAINT 6WY=0_# _CHECK seect '", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "delete", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("wpjD\"wajW", (String) null, "wpjD\"wajW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{ %iir+!Z;3 TUj ");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
      assertEquals("SELECT * FROM { %iir+!Z;3 TUj  WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-", defaultDBTable0, 1432, ",routineUUID=");
      defaultDBColumn0.setNullable(false);
      StringBuilder stringBuilder0 = new StringBuilder(1432);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(",ROUTINEUUID=", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("65+,4(A8>Pm%6idUi", (DBTable) null, (DBDataType) null);
      defaultDBColumn0.setVersionColumn(true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray0);
      assertEquals("null.null", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">@@B(@#\"R||2JfdR", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("H7", defaultDBTable0, (-685), "create materialized view6]k4p}lsktqw8pc");
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("H7 CREATE MATERIALIZED VIEW6]K4P}LSKTQW8PC NULL", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^3");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^3", false, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "3s'[", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 3s'[ PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, stringArray0[0], stringArray0);
      assertEquals("left join null as null on null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, "create unique index", stringArray0);
      assertEquals("left join null as create unique index on null.null = create unique index.null", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("", stringArray0, "- 0", "", stringArray0);
      assertEquals("left join - 0 as  on ", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("org.apache.derby.impl.sql.compile.NonStaticMethodCallNode", "+b|C+E", (String[]) null, "3E^X!fpq CVd", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, "CE", "delete", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.innerJoin("- 0", stringArray0, "- 0", stringArray0[2], stringArray0);
      assertEquals("- 0 as null on - 0.null = null.null and - 0.null = null.null and - 0.null = null.null and - 0.null = null.null and - 0.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, (String) null, "3n/1(87%G", stringArray0);
      assertEquals("null as 3n/1(87%G on null.null = 3n/1(87%G.null and null.null = 3n/1(87%G.null and null.null = 3n/1(87%G.null and null.null = 3n/1(87%G.null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "", stringArray0);
      assertEquals(" as  on .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[10];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT _cGpCO8! ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"CONSTRAINT _cGpCO8! \" FOREIGN KEY (, , , , , , , , , ) REFERENCES null(, , , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("[Afh", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , ) REFERENCES null(, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ERROR_MESSAGES");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[8];
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("lete LETE(2,2) NULL");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      TableDescriptor tableDescriptor0 = dataDescriptorGenerator0.newTableDescriptor("[#`[\"5r^=ek", (SchemaDescriptor) null, (-356948165), '9');
      ConglomerateDescriptorList conglomerateDescriptorList0 = tableDescriptor0.getConglomerateDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) conglomerateDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("~i\"]2PA L6CxMp;;", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("", (String[]) null, "", "create materialized viewt5s?k~zt85", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[6];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(stringArray0[0], stringArray1, "$a>;(\"U2Bd", "alter session", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.isDDL(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Sd:]", (String[]) null, "Sd:]", "?l0oiQes&ZjryKW", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("- 0", stringArray1, "PKTABLE_NAME", "", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("$N?^]VuGYe#;", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" = ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{.dW8", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execute3s'[", true, defaultDBTable0, "updateNCharacterStream(int, Reader)");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SwLKV!zGIn,}");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(-//lYmfF;xM56n", (DBSchema) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ZoL.A&9vFa}", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(">5+!YdKC");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals(">5+!YdKC", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "#bNU;j&\r/WhG9C", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT #bNU;j&\r/WhG9C CONSTRAINT #bNU;j&\r/WhG9C ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join(",y:<D9G*!]A", "4nq#zQ", stringArray0, stringArray0[2], stringArray0[2], stringArray0);
      assertEquals(",y:<D9G*!]A join null as null on 4nq#zQ.null = null.null and 4nq#zQ.null = null.null and 4nq#zQ.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.join("mOzkUltDE'K,n8", "from", (String[]) null, "", "mOzkUltDE'K,n8", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("inner", "inner", stringArray0, "JPh9?NxKhJ7BtH%C", "execcreate materialized viewexpecting set", stringArray0);
      assertEquals("JPh9?NxKhJ7BtH%C as execcreate materialized viewexpecting set on ", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectinsertcreate  ater");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("truncate");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("deleted8f<as#x/ulsk:d,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized viewalter table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = SQLUtil.renderValue("Kphkv6rxEfp^x|=37");
      assertEquals("'Kphkv6rxEfp^x|=37'", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectinsertcreate  ater");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "- 0");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- 0");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, (Integer) streamTokenizer0.ttype, (Integer) (-4));
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("- 0- 0(-4,-4)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-1465), "--");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" -- NULL", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-2644.89133);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 2644.89133", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (double) 14;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("14", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("+7|4;0;wo(+aW[ ue')", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = streamTokenizer0.nval;
      streamTokenizer0.nval = 847.387706812;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("847.387706812", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = SQLUtil.normalize("H%wwc<A@y'pU6jUgVz", false);
      assertEquals("H % wwc < A @ y 'pU6jUgVz'", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = SQLUtil.normalize("h<OX]^TL8$3O\"o", false);
      assertEquals("h < OX ] ^ TL8 $ 3O \"o\"", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = SQLUtil.normalize("- 0", true);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = SQLUtil.normalize("renamecreate materialized view~s9dy!{t as renamecreate materialized view~s9dy!{t on DEFAULT_CHARACTER_SET_NAME.DEFAULT_CHARACTER_SET_NAME = renamecreate materialized view~s9dy!{t.DEFAULT_CHARACTER_SET_NAME and DEFAULT_CHARACTER_SET_NAME.renamecreate materialized view~s9dy!{t = renamecreate materialized view~s9dy!{t.renamecreate materialized view~s9dy!{t and DEFAULT_CHARACTER_SET_NAME.renamecreate materialized view~s9dy!{t = renamecreate materialized view~s9dy!{t.renamecreate materialized view~s9dy!{t and DEFAULT_CHARACTER_SET_NAME.renamecreate materialized view~s9dy!{t = renamecreate materialized view~s9dy!{t.renamecreate materialized view~s9dy!{t and DEFAULT_CHARACTER_SET_NAME.renamecreate materialized view~s9dy!{t = renamecreate materialized view~s9dy!{t.renamecreate materialized view~s9dy!{t", false);
      assertEquals("renamecreate materialized view ~ s9dy ! { t as renamecreate materialized view ~ s9dy ! { t on DEFAULT_CHARACTER_SET_NAME.DEFAULT_CHARACTER_SET_NAME = renamecreate materialized view ~ s9dy ! { t.DEFAULT_CHARACTER_SET_NAME and DEFAULT_CHARACTER_SET_NAME.renamecreate materialized view ~ s9dy ! { t = renamecreate materialized view ~ s9dy ! { t.renamecreate materialized view ~ s9dy ! { t and DEFAULT_CHARACTER_SET_NAME.renamecreate materialized view ~ s9dy ! { t = renamecreate materialized view ~ s9dy ! { t.renamecreate materialized view ~ s9dy ! { t and DEFAULT_CHARACTER_SET_NAME.renamecreate materialized view ~ s9dy ! { t = renamecreate materialized view ~ s9dy ! { t.renamecreate materialized view ~ s9dy ! { t and DEFAULT_CHARACTER_SET_NAME.renamecreate materialized view ~ s9dy ! { t = renamecreate materialized view ~ s9dy ! { t.renamecreate materialized view ~ s9dy ! { t", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = SQLUtil.normalize("create aterialized viewdeleted8f(asCx/ulsk:d,", true);
      assertEquals("create  aterialized viewdeleted8f (asCx / ulsk : d,", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.normalize("select into)=lxce5dg)bq7jfz", false);
      assertEquals("select into) = lxce5dg) bq7jfz", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = SQLUtil.normalize("SEL_ECT * FROM` ", false);
      assertEquals("SEL_ECT * FROM `", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.removeComments("ASW8v{s w7)#r*L");
      assertEquals("ASW8v{s w7)#r*L", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ASW8v{s w7)#r*L");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table ASW8v{s w7)#r*L", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pr&ep join selectinsertcreate  aer as X0X05.S on X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "deleteunknown constraint type:", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"deleteunknown constraint type:\" ", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("pr&ep join selectinsertcreate  aer as X0X05.S on X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null and X0X05.S.null = X0X05.S.null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "deleteunknown constraint type:", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "pr&ep");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("pr&epCONSTRAINT \"deleteunknown constraint type:\" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^EJCW1..||! \"");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "VHWa'r.l\"K<", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "inner", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT inner PRIMARY KEY (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SELECT * FROM  = 'SELECT * FROM '", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBUniqueConstraint0.setName((String) null);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "3s'[", false, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("null.3s'[", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((CompositeDBObject) null).when(compositeDBObject0).getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(219);
      stringBuilder0.append((long) 219);
      SQLUtil.addOptionalCondition(":cwa5(\bO@#LZ.Bh", stringBuilder0);
      assertEquals("219 or :cwa5(\bO@#LZ.Bh", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "#bNU;j&\r/WhG9C", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("[hi]wn,", stringBuilder0);
      assertEquals("CONSTRAINT #bNU;j&\r/WhG9C  and [hi]wn,", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^3");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^3", false, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES ^3()", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left join t12Y[1mZ>~>9i7o15P as t12Y[1mZ>~>9i7o15P on SELECT * FROM .SELECT * FROM  = t12Y[1mZ>~>9i7o15P.SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "M1qEq8P3ZZ", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT M1qEq8P3ZZ UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3BbcX=xN+h~LM");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.store.raw.data.ChainAllocPageOperation = 'org.apache.derby.impl.store.raw.data.ChainAllocPageOperation' AND NBXC'Q ;i$H[r65|0D = 'NBXC'Q ;i$H[r65|0D' AND B\" = 'B\"' AND * = '*' AND 3BbcX=xN+h~LM = '3BbcX=xN+h~LM'", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execgetmoreresults");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectinsertcreate  ater");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionkphkv6rxefp^x|=37");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Character character0 = new Character(',');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("','", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "lete";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("lete = 'lete' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1832, "6!NY");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6!NY", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "6!NY");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("6!NY6!NY(0)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYSSMHEMAS");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(38, "create unique index");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("SYSSMHEMAS");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop table CREATE UNIQUE INDEX(3,3) DEFAULT SYSSMHEMAS NULL", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(65279, "lete");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lete", defaultDBTable0, dBDataType0, integer0, integer0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("lete", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance((-2720), "3!]yXd>AK$Ph8rrw>");
      Integer integer0 = new Integer((-208618537));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left join t12Y[1mZ>~>9i7o15P as t12Y[1mZ>~>9i7o15P on SELECT * FROM .SELECT * FROM  = t12Y[1mZ>~>9i7o15P.SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SELECT * FROM ");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "M1qEq8P3ZZ", true, stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SELECT *o FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("throwExceptionIfFalse");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT *o FROM ", defaultDBTable0, 5, " on ");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("truncategetnormalizeresultset", defaultDBTable0, (-746), "");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("throwExceptionIfFalse", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYSSCHEMAS");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("SYSSCHEMAS", defaultDBTable0, (-2311), "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(-//lYmfF;xM56n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (-//lYmfF;xM56n
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("6WY=0_# _", true, ")m}~J([!QS]g>3l7;x", "seect ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"6WY=0_# _\" CHECK seect ", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "42ZA2", true, stringArray0);
      MockFile mockFile0 = new MockFile((File) null, "uzP'!-;c%Rb|jM!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("left", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("42ZA2", stringArray0, "left", "]VM,vgIv_E$jB", stringArray0);
      assertEquals("left as ]VM,vgIv_E$jB on ", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("", (String) null, pipedReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.leftJoin("inner", stringArray0, ":4`mr`<I92yC", "inner", stringArray0);
      assertEquals("left join :4`mr`<I92yC as inner on inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null and inner.null = inner.null", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
