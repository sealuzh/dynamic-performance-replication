/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:23:51 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(83);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(83, 83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-66));
      Item item0 = classWriter0.newDouble((-66));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(38);
      Item item0 = classWriter0.newInteger(8);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassWriter classWriter0 = new ClassWriter(13);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(13, "", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(645);
      String string0 = ">Z8|}5Fr4";
      String string1 = null;
      // Undeclared exception!
      try { 
        classWriter0.newMethod(">Z8|}5Fr4", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(91);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1157);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777219);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 11);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      Class<Integer> class0 = Integer.class;
      Type.getDescriptor(class0);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("", (String) null, "SourceFile", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      FieldWriter fieldWriter0 = classWriter0.lastField;
      classWriter0.visitSource("value ", "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`.]5&TN1Q");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = ClassWriter.TYPE;
      classWriter0.addType("");
      classWriter0.newFloat((-1004.76855F));
      classWriter0.addType("");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@23d495f8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit(0, 0, "", "'KWzh1h'xR/u\"*", "", stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.addType("");
      classWriter0.index = 248;
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("sOM}[1>' ", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      classWriter0.toByteArray();
      Type type0 = Type.CHAR_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      Item item1 = classWriter0.newLong(2);
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(167);
      Short short0 = new Short((short)47);
      classWriter0.newConstItem(short0);
      classWriter0.visitSource(",qR\r\u0007", ",qR\r\u0007");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-697));
      Attribute attribute0 = new Attribute("BIdt}C)ZN7Ekz");
      classWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "01;+";
      classWriter0.visit(17, 1, "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "01;+", "01;+", stringArray0);
      classWriter0.toByteArray();
      int int0 = Double.BYTES;
      classWriter0.addUninitializedType("01;+", 17);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = classWriter0.invalidFrames;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("LjeqRGz@TO9k4gPt6", "01;+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'LjeqRGz@TO9k4gPt6.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1166);
      classWriter0.visitInnerClass("f%", "f%", "f%", 1166);
      classWriter0.invalidFrames = false;
      classWriter0.toByteArray();
      classWriter0.newLong(1);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1166, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertNotNull(type0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(1, type0.getSize());
      assertEquals(1, type0.getSort());
      
      String string0 = "`4_O";
      Item[] itemArray0 = new Item[8];
      Item item0 = new Item();
      assertNotNull(item0);
      
      Item item1 = new Item(0);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      itemArray0[2] = item1;
      itemArray0[0] = itemArray0[0];
      classWriter0.typeTable = itemArray0;
      String string1 = "9#Mol";
      int int0 = classWriter0.addType("9#Mol");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item2 = classWriter0.newLong(3);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("XvA#CI>&JtJsn =1P");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      classWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      String string2 = "ZFh{L[W6FQGb3@<";
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(638);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.visitField(23, "", (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(592);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(592, "6>Gt $6ml\"zl3DZv", "6>Gt $6ml\"zl3DZv", "6>Gt $6ml\"zl3DZv", "6>Gt $6ml\"zl3DZv");
      assertNotNull(fieldVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = new Item();
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1616));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newDouble(0.75);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("RZ>beV:zBV` cgD", "");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(592);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = "\"X#";
      int int0 = 5;
      classWriter0.visit(5, 592, "\"X#", "\"X#", (String) null, (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newLong((-3335L));
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute((String) null);
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      classWriter0.visitAttribute(attribute0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      int int1 = Frame.VALUE;
      assertEquals(16777215, int1);
      assertFalse(int1 == int0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = ".";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int0);
      
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      assertNull(methodWriter0);
      
      classWriter0.lastMethod = null;
      Class<Double> class0 = Double.class;
      String string1 = Type.getDescriptor(class0);
      assertNotNull(string1);
      assertEquals("Ljava/lang/Double;", string1);
      assertFalse(string1.equals((Object)string0));
      
      Item[] itemArray0 = new Item[0];
      classWriter0.typeTable = itemArray0;
      // Undeclared exception!
      try { 
        classWriter0.addUninitializedType("", 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4152));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Long long0 = new Long((-1102L));
      assertNotNull(long0);
      assertEquals((-1102L), (long)long0);
      
      Item item0 = classWriter0.newConstItem(long0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(503);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.newUTF8("l+(9V O4{x~]]UVj");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("", "-Th#B@Dku}k/|r", "", 503);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("-Th#B@Dku}k/|r", "", "", 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.addType("");
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int2 = classWriter0.newUTF8("l+(9V O4{x~]]UVj");
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "0r!}#|@z>}qY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Frame.BASE;
      assertEquals(16777216, int0);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("#o", "#o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '#o.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      boolean boolean1 = new Boolean("EnclosingMethod");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      String string0 = "";
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      int int0 = (-2901);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, (-2901));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.thisName = "";
      String[] stringArray0 = new String[0];
      classWriter0.visit(8, 1890, "", (String) null, (String) null, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newFloat(8);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newFloat(8);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitOuterClass("", "]FF;Lb%,8[w`m}2", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = Frame.TOP;
      assertEquals(16777216, int0);
      
      int int1 = Frame.TOP;
      assertEquals(16777216, int1);
      assertTrue(int1 == int0);
      
      ClassWriter classWriter0 = new ClassWriter(16777216);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newDouble((-775.99365863));
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newDouble((-775.99365863));
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Double double0 = new Double(738.4);
      assertNotNull(double0);
      assertEquals(738.4, (double)double0, 0.01);
      
      double double1 = Double.min(1740.5617820926489, 738.4);
      assertEquals(738.4, double1, 0.01);
      
      Item item0 = classWriter0.newConstItem(double0);
      assertNotNull(item0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newLong((-260));
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int0);
      
      int int1 = Frame.UNINITIALIZED_THIS;
      assertEquals(16777222, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string0 = classWriter0.thisName;
      assertNull(string0);
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      int int0 = Frame.TOP;
      assertEquals(16777216, int0);
      
      classWriter0.visitOuterClass("", (String) null, "^xQFZ%XI.m|{&AXl#Zg");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem("z$cBjO-5{IWt6QSP", "a5H&wOdi5cD", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MOZC>=*K[5Pjwom";
      stringArray0[1] = "MOZC>=*K[5Pjwom";
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Item item0 = classWriter0.newConstItem(integer0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newLong(0L);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value [B@3946031c
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(31, "value ", "java/lang/Object", "value ", "value ");
      assertNotNull(fieldVisitor0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitSource("`.]5&TN1Q", "java/lang/Object");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Short short0 = new Short((short) (-207));
      assertNotNull(short0);
      assertEquals((short) (-207), (short)short0);
      
      Item item0 = classWriter0.newConstItem("value ");
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newUTF8("`.]5&TN1Q");
      assertEquals(4, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newClassItem("SourceDebugExtension");
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertNotNull(type0);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      
      Byte byte0 = new Byte((byte) (-42));
      assertNotNull(byte0);
      assertEquals((byte) (-42), (byte)byte0);
      
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newLong(4);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Byte byte1 = new Byte((byte)44);
      assertNotNull(byte1);
      assertEquals((byte)44, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MOZC>=*K05PjwoJ";
      stringArray0[1] = "g%4!o[,rl";
      stringArray0[2] = "MOZC>=*K05PjwoJ";
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Type type0 = Type.getType(class0);
      assertNotNull(type0);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, type0.getDimensions());
      assertEquals(1, type0.getSize());
      assertEquals(10, type0.getSort());
      
      stringArray0[3] = "MOZC>=*K05PjwoJ";
      stringArray0[4] = "7EV#v%Ea";
      Character character0 = Character.valueOf('d');
      assertNotNull(character0);
      assertEquals('d', (char)character0);
      
      Item item0 = classWriter0.newConstItem(character0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newLong((-1287L));
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Byte byte0 = new Byte((byte)100);
      assertNotNull(byte0);
      assertEquals((byte)100, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(83);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitOuterClass("The wildcard array must not be null", "The wildcard array must not be null", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Class not found");
      assertFalse(boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(20);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Boolean boolean1 = Boolean.valueOf("6>Gt $6ml\"zl3DZv");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Item item0 = classWriter0.newConstItem(boolean1);
      assertNotNull(item0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = Character.getName(592);
      assertNotNull(string0);
      assertEquals("LATIN SMALL LETTER TURNED A", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("OcS8)R_udA)aK/w[0D", false);
      assertNotNull(annotationVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Type type0 = Type.BYTE_TYPE;
      assertNotNull(type0);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, Type.CHAR);
      assertEquals(3, Type.BYTE);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, type0.getSort());
      assertEquals(1, type0.getSize());
      
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int0);
      
      Item item0 = classWriter0.newInteger(1);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      boolean boolean2 = ClassReader.FRAMES;
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      boolean boolean4 = ClassReader.SIGNATURES;
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      Type type1 = Type.DOUBLE_TYPE;
      assertNotNull(type1);
      assertFalse(type1.equals((Object)type0));
      assertNotSame(type1, type0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(10, Type.OBJECT);
      assertEquals(7, Type.LONG);
      assertEquals(8, type1.getSort());
      assertEquals(2, type1.getSize());
      
      int int1 = classWriter0.newConst(type1);
      assertEquals(3, int1);
      assertFalse(type1.equals((Object)type0));
      assertFalse(int1 == int0);
      assertNotSame(type1, type0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(8, Type.DOUBLE);
      assertEquals(0, Type.VOID);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(5, Type.INT);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(10, Type.OBJECT);
      assertEquals(7, Type.LONG);
      assertEquals(8, type1.getSort());
      assertEquals(2, type1.getSize());
      
      String string0 = "iE<;8%,";
      boolean boolean5 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      
      Item item1 = classWriter0.newInteger(1);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string1 = "";
      int int2 = classWriter0.newClass("");
      assertEquals(5, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(384);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      int int0 = classWriter0.newConst(float0);
      assertEquals(2, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1141);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = Boolean.getBoolean((String) null);
      assertFalse(boolean1);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(441, "h:l,Ao*o", "h:l,Ao*o", "h:l,Ao*o", boolean0);
      assertNotNull(fieldVisitor0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1166;
      ClassWriter classWriter0 = new ClassWriter(1166);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51966
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
      
      Type type0 = Type.DOUBLE_TYPE;
      assertNotNull(type0);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, type0.getSize());
      assertEquals(8, type0.getSort());
      
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, type0.getSize());
      assertEquals(8, type0.getSort());
      
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int0);
      
      Class<Double> class0 = Double.class;
      int int1 = classWriter0.newConst(type0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(5, Type.INT);
      assertEquals(2, Type.CHAR);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(2, type0.getSize());
      assertEquals(8, type0.getSort());
      
      String string0 = Type.getDescriptor(class0);
      assertNotNull(string0);
      assertEquals("Ljava/lang/Double;", string0);
      
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      int int2 = classWriter0.addUninitializedType("", 18);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = new Item();
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      Item item2 = classWriter0.newLong(9);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item1));
      assertFalse(item2.equals((Object)item0));
      assertNotSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("nb'TnvDof 7Ge5");
      assertNotNull(attribute0);
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute0.isUnknown());
      
      ClassWriter classWriter1 = new ClassWriter((byte)16);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        attribute0.write(classWriter0, byteArray0, 1, 2269, (-127));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.DOUBLE_TYPE;
      assertNotNull(type0);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(9, Type.ARRAY);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(4, Type.SHORT);
      assertEquals(0, Type.VOID);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(8, type0.getSort());
      assertEquals(2, type0.getSize());
      
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int0);
      
      int int1 = classWriter0.addUninitializedType("", 18);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      Item item0 = classWriter0.newFieldItem("value ", "FYfR", "");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item1 = classWriter0.newLong((-1873L));
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      attribute0.value = byteArray0;
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      classWriter0.visitAttribute(attribute0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      int int2 = Type.VOID;
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = Frame.UNINITIALIZED_THIS;
      assertEquals(16777222, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      System.setCurrentTimeMillis((-1873L));
      float float0 = Float.sum(2, 1);
      assertEquals(3.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        classWriter0.newConst(item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@d
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = new Item();
      assertNotNull(item0);
      
      Item item1 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newInteger(2);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      assertNotSame(item2, item0);
      assertNotSame(item2, item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitEnd();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item3 = classWriter0.newLong(1);
      assertNotNull(item3);
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item1));
      assertNotSame(item3, item0);
      assertNotSame(item3, item2);
      assertNotSame(item3, item1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = classWriter0.newField("9#Mol", "", "");
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.DOUBLE_TYPE;
      assertNotNull(type0);
      assertEquals(0, Type.VOID);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(2, type0.getSize());
      assertEquals(8, type0.getSort());
      
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int0);
      
      int int1 = classWriter0.addUninitializedType("", 10);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.version = 258;
      Character character0 = Character.valueOf(' ');
      assertNotNull(character0);
      assertEquals(' ', (char)character0);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      boolean boolean0 = ClassReader.SIGNATURES;
      assertTrue(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Item item1 = classWriter0.newFieldItem("", "", "");
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item2 = classWriter0.newFieldItem("", "", "");
      assertNotNull(item2);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(item2.equals((Object)item0));
      assertNotSame(classWriter0, classWriter1);
      assertSame(item2, item1);
      assertNotSame(item2, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter2 = new ClassWriter(3);
      assertNotNull(classWriter2);
      assertFalse(classWriter2.equals((Object)classWriter1));
      assertFalse(classWriter2.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean2 = ClassReader.RESIZE;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        classWriter1.newConst(item1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@b
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newClass("lWzS@V,i@)z%,wvi]r");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.newLong(0);
      assertNotNull(item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item1 = classWriter0.newLong(0);
      assertNotNull(item1);
      assertSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Type type0 = Type.BYTE_TYPE;
      assertNotNull(type0);
      assertEquals(0, Type.VOID);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(5, Type.INT);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      assertEquals(65536, int0);
      
      int int1 = classWriter0.addUninitializedType("", 8);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int2 = classWriter0.addUninitializedType("", 8);
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean1 = ClassReader.FRAMES;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean2 = ClassReader.SIGNATURES;
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Type type1 = Type.DOUBLE_TYPE;
      assertNotNull(type1);
      assertFalse(type1.equals((Object)type0));
      assertNotSame(type1, type0);
      assertEquals(9, Type.ARRAY);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, type1.getSort());
      assertEquals(2, type1.getSize());
      
      // Undeclared exception!
      try { 
        type1.getElementType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(34);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "wheel.asm.ClassReader");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "gEJ";
      stringArray0[1] = "gEJ";
      stringArray0[2] = "gEJ";
      stringArray0[3] = "gEJ";
      stringArray0[4] = "gEJ";
      stringArray0[5] = "gEJ";
      stringArray0[6] = "gEJ";
      stringArray0[7] = "gEJ";
      stringArray0[8] = "gEJ";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-260), "gEJ", "gEJ", "gEJ", stringArray0);
      assertNotNull(methodVisitor0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Item item0 = classWriter0.newConstItem("gEJ");
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitInnerClass("gEJ", "gEJ", "gEJ", (-260));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("gEJ", "gEJ");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = ClassReader.WRITER;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ClassWriter classWriter0 = new ClassWriter(34);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertNotNull(string0);
      assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Double double0 = new Double(34);
      assertNotNull(double0);
      assertEquals(34.0, (double)double0, 0.01);
      
      Type type0 = Type.BYTE_TYPE;
      assertNotNull(type0);
      assertEquals(8, Type.DOUBLE);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertEquals(5, Type.INT);
      assertEquals(0, Type.VOID);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(6, Type.FLOAT);
      assertEquals(3, Type.BYTE);
      assertEquals(1, type0.getSize());
      assertEquals(3, type0.getSort());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item0 = classWriter0.key3;
      assertNotNull(item0);
      
      Item item1 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item2 = classWriter0.newMethodItem("", "", "", false);
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertNotSame(item2, item0);
      assertSame(item2, item1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = ClassReader.FRAMES;
      assertTrue(boolean0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Item item3 = classWriter0.newDouble(3399.75503231);
      assertNotNull(item3);
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item0));
      assertFalse(item3.equals((Object)item1));
      assertNotSame(item3, item2);
      assertNotSame(item3, item0);
      assertNotSame(item3, item1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Item item4 = classWriter0.newConstItem(long0);
      assertNotNull(item4);
      assertFalse(item4.equals((Object)item1));
      assertFalse(item4.equals((Object)item0));
      assertFalse(item4.equals((Object)item3));
      assertFalse(item4.equals((Object)item2));
      assertNotSame(item4, item1);
      assertNotSame(item4, item0);
      assertNotSame(item4, item3);
      assertNotSame(item4, item2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-260));
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Type type0 = Type.BOOLEAN_TYPE;
      assertNotNull(type0);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(3, Type.BYTE);
      assertEquals(9, Type.ARRAY);
      assertEquals(6, Type.FLOAT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(0, Type.VOID);
      assertEquals(5, Type.INT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, type0.getSort());
      assertEquals(1, type0.getSize());
      
      String string0 = "";
      Item[] itemArray0 = new Item[4];
      Item item0 = new Item();
      assertNotNull(item0);
      
      Item item1 = classWriter0.key3;
      assertNotNull(item1);
      assertFalse(item1.equals((Object)item0));
      assertNotSame(item1, item0);
      
      itemArray0[1] = item1;
      itemArray0[2] = item0;
      Item item2 = new Item();
      assertNotNull(item2);
      assertFalse(item2.equals((Object)item0));
      assertFalse(item2.equals((Object)item1));
      
      itemArray0[3] = itemArray0[0];
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Type type1 = Type.getType(class0);
      assertNotNull(type1);
      assertFalse(type1.equals((Object)type0));
      assertNotSame(type1, type0);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type1.getSize());
      assertEquals(10, type1.getSort());
      assertEquals(1, type1.getDimensions());
      
      Item item3 = classWriter0.newConstItem(type1);
      assertNotNull(item3);
      assertFalse(type1.equals((Object)type0));
      assertFalse(item3.equals((Object)item2));
      assertFalse(item3.equals((Object)item1));
      assertFalse(item3.equals((Object)item0));
      assertNotSame(type1, type0);
      assertNotSame(item3, item2);
      assertNotSame(item3, item1);
      assertNotSame(item3, item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(6, Type.FLOAT);
      assertEquals(8, Type.DOUBLE);
      assertEquals(2, Type.CHAR);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(5, Type.INT);
      assertEquals(9, Type.ARRAY);
      assertEquals(4, Type.SHORT);
      assertEquals(1, type1.getSize());
      assertEquals(10, type1.getSort());
      assertEquals(1, type1.getDimensions());
      
      item1.hashCode = 0;
      String string1 = null;
      // Undeclared exception!
      try { 
        item0.set(8, (String) null, "0hRMpj=i", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]rC+s6;G";
      classWriter0.visit((-1453), (-1453), "]rC+s6;G", "]rC+s6;G", "]rC+s6;G", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classWriter0.newClass("]rC+s6;G");
      assertEquals(2, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("A?ov%AGwW;&/RH", "org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitSource("A?ov%AGwW;&/RH", "org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = Type.OBJECT;
      assertEquals(10, int0);
      
      Item item0 = classWriter0.key2;
      assertNotNull(item0);
      
      classWriter0.visitSource("A?ov%AGwW;&/RH", "A?ov%AGwW;&/RH");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassWriter classWriter1 = new ClassWriter(34);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter1.visitInnerClass("org.apache.commons.io.filefilter.EmptyFileFilter", "RuntimeInvisibleAnnotations", "A?ov%AGwW;&/RH", 1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotSame(classWriter1, classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classWriter1.getCommonSuperClass("org.apache.commons.io.filefilter.HiddenFileFilter", "wheel.asm.ClassReader");
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertNotSame(classWriter1, classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      assertNull(fieldWriter0);
      
      classWriter1.firstField = null;
      int int1 = classWriter1.newMethod("", "{+@n;\"tu%", "org.apache.commons.io.filefilter.EmptyFileFilter", false);
      assertEquals(10, int1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertTrue(int1 == int0);
      assertNotSame(classWriter1, classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      classWriter0.visitOuterClass("", "org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertNotSame(classWriter0, classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string1 = classWriter1.getCommonSuperClass("org.apache.commons.io.filefilter.EmptyFileFilter", "java/lang/Object");
      assertNotNull(string1);
      assertEquals("java/lang/Object", string1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(classWriter1, classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "01;+";
      classWriter0.visit(17, (-6), "EFFFFFFFFGGFFFGGFFFEEFGFGFEEEEEEEEEEEEEEEEEEEEDEDEDDDDDCDCDEEEEEEEEEEEEEEEEEEEEBABABBBBDCFFFGGGEDCDCDCDCDCDCDCDCDCDCEEEEDDDDDDDCDCDCEFEFDDEEFFDEDEEEBDDBBDDDDDDCCCCCCCCEFEDDDCDCDEEEEEEEEEEFEEEEEEDDEEDDEE", "01;+", "01;+", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = Double.BYTES;
      assertEquals(8, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = classWriter0.invalidFrames;
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("LjeqRGz@TO9k4gPt6", "01;+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'LjeqRGz@TO9k4gPt6.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
