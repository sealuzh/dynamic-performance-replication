/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:46:02 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mejpse-Sx811");
      Utility.isJavaIdentifierPart('%');
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.classOrInterface((-3962));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", (String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("=0Qh>WY{\"zT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =0Qh>WY{\"zT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("#6)R\",xwkTFw?K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #6)R\",xwkTFw?K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZN7cSp");
      Utility.signatureToString("ZN7cSp", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\n", "boolean", "Jd)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.signatureToString("X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.format(215, (-18), false, 'j');
      assertEquals("215", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W2@62WPY6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W2@62WPY6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)115;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)17;
      Utility.encode(byteArray0, false);
      Utility.convertString(">");
      // Undeclared exception!
      try { 
        Utility.getSignature("t/hd'Z~Yewk8[ppq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[ppq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.classOrInterface(192);
      assertEquals("class", string0);
      
      String string1 = Utility.accessToString(57, true);
      assertEquals("public static final", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{}", string2);
      
      String string3 = Utility.methodSignatureReturnType("J3Pk{rm,363Z-N'", true);
      assertEquals("long", string3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "?>...";
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-73);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-102), 117);
      try { 
        Utility.methodSignatureArgumentTypes("<iI}HjWj,\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <iI}HjWj,\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(59, 3865);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.replace("\tdefault = ", (String) null, "Warning: Padding byte != 0 in ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "?>...";
      boolean boolean0 = true;
      try { 
        Utility.decode("?>...", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("+Z.n1");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1L);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, (int) (byte)82, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.searchOpcode("Zb}");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        constantPool0.getConstantString(3573, (byte) (-21));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 3573. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short short0 = Utility.searchOpcode("castore");
      assertEquals((short)85, short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-89);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.close();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 4007;
      int int1 = (-2133);
      Utility.setBit(4007, (-2133));
      String string0 = "? extends ";
      String string1 = "v6xH~D*~V";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("? extends ", "v6xH~D*~V", "putstatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("impdep1");
      ConstantUtf8.clearStats();
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)28, (-613));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Utility.classOrInterface(188);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("\"");
      assertEquals("L\";", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte)79;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte) (-122);
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte)79;
      byteArray1[7] = (byte) (-36);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string2 = Utility.accessToString(40, false);
      assertEquals("static synchronized", string2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "[3mf3";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[3mf3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3mf3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      try { 
        Utility.typeOfSignature("6y04#0!ID|]-p^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6y04#0!ID|]-p^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFully(byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = (byte)46;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)46, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(36, 216);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.clearBit(189, 189);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H7l5`L-\"fK;\"2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H7l5`L-\"fK;\"2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = Utility.clearBit(47, 47);
      assertEquals(47, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("InnerClasses", stringArray0);
      assertEquals("()LInnerClasses;", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 49, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QXwUxkGvGt{H", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QXwUxkGvGt{H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-71);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "dB'3g/2";
      String string1 = " (";
      Utility.replace("dB'3g/2", "dB'3g/2", " (");
      PipedInputStream pipedInputStream0 = new PipedInputStream(18);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(objectOutputStream0, false, "B?1oIXcxqX4qo@{Ve?S");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // B?1oIXcxqX4qo@{Ve?S
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-487), 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpgt\t\t#-23645
         // 3:    dmul
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Utility.accessToString((int) 'a', true);
      assertEquals("public volatile", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-68);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)104, 216);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.format((-133), 1319, false, 'b');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.printArray((Object[]) null, true, true);
      String string0 = Utility.compactClassName("Nf", "", true);
      assertEquals("Nf", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Utility.compactClassName("double");
      assertEquals("double", string0);
      
      String string1 = Utility.getSignature("double");
      assertEquals("D", string1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = Utility.typeOfSignature("Z} - `a#h&&A)Ad!");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$EBRZ0{Xi9iqd/yA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $EBRZ0{Xi9iqd/yA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.compactClassName("Invalid signature: `");
      assertEquals("Invalid signature: `", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 2311, (-802), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-68);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)104, 216);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("P*l8a_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P*l8a_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.replace("TfnAnnull", "TfnAnnull", "jsr");
      Utility.searchOpcode("jsr");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("TfnAnnull");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)79, 255);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("TfnAnnull");
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-25), (byte)79);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[4] = (Constant) constantNameAndType1;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(65, (byte)2);
      constantArray0[5] = (Constant) constantFieldref1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[6] = (Constant) constantClass1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)79);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[7] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iconst_m1", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.clearBit(193, 193);
      Utility.classOrInterface(193);
      String string0 = "";
      String string1 = "CHcSQbYHy%Qk";
      boolean boolean0 = false;
      int int0 = 82;
      int int1 = 0;
      int int2 = (-2003);
      byte[] byteArray0 = null;
      CodeException[] codeExceptionArray0 = new CodeException[0];
      Attribute[] attributeArray0 = new Attribute[0];
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("bipush\t\t0", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.convertString("");
      Utility.setBit((-974), (-974));
      try { 
        Utility.decode(")\t", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = Utility.accessToString(800);
      assertEquals("synchronized native interface", string0);
      
      String string1 = Utility.compactClassName("Invalid signature: ", true);
      assertEquals("Invalid signature: ", string1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OD>9,1C/z}dp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OD>9,1C/z}dp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I");
      assertEquals("int", string0);
      
      String string1 = Utility.getSignature(")N*V!!Cc?[ui]");
      assertEquals("[L)N*V!!Cc?;", string1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byte byte0 = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)11;
      byte byte1 = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("static");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 1035. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, 215);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.clearBit((byte)0, 1294);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-72);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b8$84$b8$b8", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iinc\t\t%184\t-72", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(27, (-1707));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pop");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.replace("Cga[1P", "pop", ")");
      assertEquals("Cga[1P", string0);
      
      String string1 = Utility.compactClassName(")");
      assertEquals(")", string1);
      
      String string2 = Utility.methodSignatureReturnType("Cga[1P", true);
      assertEquals("char", string2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "/m";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 5:    dastore
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.replace("f2l", "f2l", "@,p1r\"u7^0#'@9$v7m)");
      assertEquals("@,p1r\"u7^0#'@9$v7m)", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E?u(-O|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E?u(-O|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-99);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifgt\t\t#93", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifgt\t\t#93");
      byte[] byteArray1 = Utility.decode("ifgt\t\t#93", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)103, (byte)116, (byte)9, (byte)9, (byte)35, (byte)57, (byte)51}, byteArray1);
      
      String string1 = Utility.getSignature("ifgt\t\t#93");
      assertEquals("Lifgt;", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)4;
      Utility.compactClassName("(", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("%,RF4+Y");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lshr", "lshr", "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[0] = (byte)110;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-88);
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<illegal opcode>");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)36;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)36, 927);
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantUtf8_1;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1388, (-1789743872));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("L;V");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-2);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3, (byte) (-2));
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 24574. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = ")Zk\\MT2PifeBwB";
      try { 
        Utility.typeOfSignature(")ZkMT2PifeBwB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )ZkMT2PifeBwB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, 2283);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)65;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("d$w$A$7b$8a$b7A");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble2 = new ConstantDouble(0.0);
      Constant constant0 = constantDouble2.copy();
      constantArray0[2] = constant0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)0, (byte) (-118));
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "qwt2s8<t1~F+S1F;,s", "invokestatic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-91);
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(27, (-1707));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), (-1707));
      try { 
        Utility.typeOfSignature("0:    land\n1:    nop\n2:    nop\n3:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    land
         // 1:    nop
         // 2:    nop
         // 3:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)46;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, 244, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("CONSTANT_Integer", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
      
      byte byte0 = Utility.typeOfSignature("CONSTANT_Integer");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.convertString("char");
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.InnerClas", "org.apache.bcel.classfile.InnerClas", "org.apache.bcel.classfile.InnerClas");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte) (-58);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-39));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ljava/lang\"Objefct");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = ".~|]Gi7_6<";
      try { 
        Utility.typeOfSignature(".~|]Gi7_6<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .~|]Gi7_6<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Utility.replace(")pSf_>\";13uCgFS[)<$", ")pSf_>\";13uCgFS[)<$", ")pSf_>\";13uCgFS[)<$");
      assertEquals(")pSf_>\";13uCgFS[)<$", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("boolean", false);
      assertArrayEquals(new byte[] {(byte)98, (byte)111, (byte)111, (byte)108, (byte)101, (byte)97, (byte)110}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      ConstantLong constantLong0 = new ConstantLong((byte)18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(196);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 196. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("U", (String[]) null);
      assertEquals("()LU;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.replace("fstore_0", "\"<46LO8CP~_", (String) null);
      assertNotNull(string0);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifle\t\t#-24930", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-68);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)104, 216);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 216, (int) (byte) (-68), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = (byte)40;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.replace("int", "int", "-2G");
      assertEquals("-2G", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-91);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-54), 674);
      assertEquals("0:    aaload\n1:    aastore\n2:    if_acmpeq\t\t#19297\n5:    monitorexit\n6:    areturn\n7:    breakpoint\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      try { 
        Utility.typeOfSignature("4PuU2U8B2@0M<7{Lg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4PuU2U8B2@0M<7{Lg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "N.Ro,/HbR";
      try { 
        Utility.typeOfSignature("N.Ro,/HbR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N.Ro,/HbR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QT9;1(y=aa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QT9;1(y=aa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 59, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.replace("55$~F=PAx[Y", "ifge", "55$~F=PAx[Y");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)123;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-60);
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte) (-60);
      byteArray1[3] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.accessToString((-3456));
      try { 
        Utility.typeOfSignature("transient interface synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: transient interface synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.signatureToString("Sm[.r?~~-SH>C*Y0", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("InnerClasses");
      assertEquals("int", string0);
      
      try { 
        Utility.typeOfSignature("*YLe]#.2L=>;W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YLe]#.2L=>;W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("P>$aWgZ 1m:SA4-N,8@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P>$aWgZ 1m:SA4-N,8@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-88);
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)82;
      byteArray0[8] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 158);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)22, (byte) (-101));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantString constantString0 = new ConstantString((byte)22);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref1);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      constantInterfaceMethodref2.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "B{-nS}pcA_`#](*IQiN", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(0, 174);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.getSignature("'\"p;j~?");
      assertEquals("L'\"p;j~?;", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)5);
      assertEquals("0:    iaload\n1:    iaload\n2:    nop\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-522));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      int int0 = Utility.clearBit(1294, 2391);
      assertEquals(1294, int0);
      
      byte byte0 = Utility.typeOfSignature("+Z.n1");
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)46;
      Utility.methodSignatureReturnType("Illegal type for StackMapType: ");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S9e%.");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.replace("55$~F2rnPAx[Y", "ifge", "55$~F2rnPAx[Y");
      try { 
        Utility.decode("55$~F2rnPAx[Y", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("DSQE[oG$F}Eud\\4-J");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(90, 180);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      int int0 = 122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2191, 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40023. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -26
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool2, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N6.+h!)*M_");
      Utility.isJavaIdentifierPart('@');
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-96);
      Utility.compactClassName("nfir~L1e6S|Q%Hk", "nfir~L1e6S|Q%Hk", false);
      Utility.toHexString(byteArray0);
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "0MX85{_I?HKA#oX", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(18L, mockFile0.length());
      
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.methodSignatureReturnType("D>9,1C/z}dp");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureToString("long", "long", "D>9,1C/z}dp", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("L;V");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-83);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-2), (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 24574. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 1359;
      boolean boolean0 = false;
      Utility.fillup("[ Z)uF", 1359, false, 'D');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode(")9'fR?eBj/'mo.UX\"A", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(ZNW,H(6w$2~", "_D@9", ")9'fR?eBj/'mo.UX\"A", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NW,H(6w$2~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K tR29]1XZEn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K tR29]1XZEn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      byteSequence1.read();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1003), (-860));
      assertEquals("0:    faload\n1:    i2l\n2:    i2l\n3:    nop\n4:    nop\n5:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)39;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("41 5b 0e 2a 0d 27", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte) (-65);
      byteArray1[2] = (byte) (-65);
      byteArray1[3] = (byte) (-65);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('b');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.printArray((Object[]) null);
      try { 
        Utility.methodSignatureReturnType("java.lang.Boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 43;
      Utility.classOrInterface(43);
      String string0 = "3WamY/2FToXs4*l";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "3WamY/2FToXs4*l", "3WamY/2FToXs4*l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = false;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(178, 178);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(178, 178);
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 1129, 4369);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[-ZNN,:o3hPv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [-ZNN,:o3hPv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Utility.fillup("Dgt3U{&i2+&+I~1e4+", (-399), false, 'q');
      assertEquals("Dgt3U{&i2+&+I~1e4+", string0);
      
      String string1 = Utility.accessToString(11, true);
      assertEquals("public private static", string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType(")ZkMT2PifeBwB");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.typeOfSignature("Invalid signature: ");
      try { 
        Utility.methodSignatureToString("Invalid signature: ", "5owrz-I", "->^F jLhrxj#hlw", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-68);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)104, 216);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("newarray\t\t<<illegal type>>", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "Wl[[STKtQum-GyS";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = Utility.clearBit((-1), (-1));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = Utility.replace("jWT<", "jWT<", "jWT<");
      assertEquals("jWT<", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('2');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte)36;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(36, 216);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-72);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.fillup("fstore_1", 201, true, '.');
      assertEquals("fstore_1.................................................................................................................................................................................................", string1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-68);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)104, 216);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0, 297);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "swap";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) bufferedOutputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = Utility.convertString("org.apache.bcel.classfile.Utility$1");
      assertEquals("org.apache.bcel.classfile.Utility$1", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "L9xjG|=dpns<U&@=!Hh";
      try { 
        Utility.methodSignatureReturnType("L9xjG|=dpns<U&@=!Hh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L9xjG|=dpns<U&@=!Hh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "&(T)|EHM-;=Y]|Ds";
      try { 
        Utility.typeOfSignature("&(T)|EHM-;=Y]|Ds");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &(T)|EHM-;=Y]|Ds
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.compactClassName("]8G:L<le{");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)18;
      byte byte0 = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.signatureToString("Visiting non-standard PMGClass object", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[3mf3", "[3mf3", "Visiting non-standard PMGClass object", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [3mf3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.replace("55$~F=PAx[Y", "1dge", "55$~F=PAx[Y");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.fillup("[ Z)uF", 1359, false, 'D');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-91);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = Utility.clearBit((-2588), (byte) (-70));
      assertEquals((-67111452), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-116);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte)46;
      byteArray1[4] = (byte) (-126);
      byteArray1[5] = (byte)33;
      byteArray1[6] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.replace("\"<46LO8CP~_", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)75;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)98, 216);
      try { 
        Utility.typeOfSignature("'4S=V3qq?xb.F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '4S=V3qq?xb.F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.compactClassName("\r");
      assertEquals("\r", string0);
      
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1080), (-755), true);
      String string1 = Utility.format(31, (-755), true, 'k');
      assertEquals("31", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("@<^Y>Rly>rn-70Ga");
      Object[] objectArray0 = new Object[6];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-124);
      mockPrintStream0.write(byteArray0, (int) (byte) (-124), 0);
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "@<^Y>Rly>rn-70Ga";
      objectArray0[3] = (Object) "@<^Y>Rly>rn-70Ga";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "@<^Y>Rly>rn-70Ga";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7mzLT$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7mzLT$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "saload");
      char char0 = '}';
      Utility.isJavaIdentifierPart('}');
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.compactClassName("invokestatic", "saload", false);
      try { 
        Utility.typeOfSignature("saload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: saload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      constantPool0.setConstantPool(constantArray0);
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)36;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2768, 154, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$j}4VE>fx|D>@7wD{^");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(173, (byte) (-17));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence1);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(173);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-17), 4);
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodref0.setNameAndTypeIndex(173);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Lclass;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.signatureToString("Lclass;V", false);
      String string1 = Utility.compactClassName("class", "class", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.typeOfSignature("Invalidcmethod si5nature:?");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Invalidcmethod si5nature:?";
      objectArray0[1] = (Object) "Invalidcmethod si5nature:?";
      objectArray0[2] = (Object) "Invalidcmethod si5nature:?";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)65;
      byteArray1[4] = (byte)69;
      byteArray1[5] = (byte)69;
      byteArray1[6] = (byte)65;
      byteArray1[7] = (byte)69;
      byteArray1[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.accessToString(192);
      boolean boolean0 = true;
      try { 
        Utility.decode("NXfkTzt.-'f2?$'!", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = Utility.replace("gS$Q}Rm", "gS$Q}Rm", ")pSf_>\";13uCgFS[)<$");
      assertEquals(")pSf_>\";13uCgFS[)<$", string0);
      
      byte[] byteArray0 = Utility.decode(")pSf_>\";13uCgFS[)<$", false);
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1L);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = constantPool0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-13);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.accessToString(387, false);
      int int0 = 0;
      Utility.fillup("c[JH/5XdO5p=S", 0, false, 'h');
      Utility.getSignature("ic]ef=X#=U)a'.Z(");
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private transient native", "public private transient native", "public private transient native", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private transient native
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SvC");
      assertEquals((byte)9, byte0);
      
      Utility.signatureToString("SvC", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      boolean boolean0 = Utility.isSet(243, (-776));
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("java.lang.java.la}g.4u");
      assertEquals("java.lang.java.la}g.4u", string0);
      
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RS-2x!yUcQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RS-2x!yUcQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, 1830, false);
      assertEquals("0:    nop\n1:    nop\n", string0);
      
      int int0 = Utility.clearBit(1830, (byte)0);
      assertEquals(1830, int0);
      
      int int1 = Utility.setBit(74, (byte)0);
      assertEquals(75, int1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(27, (-1707));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 227, (int) (byte) (-46));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (-4000));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("if_icmple", "D>9,1C/z}dp", "if_icmple", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)4;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)123, 2336);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.format((byte) (-126), (byte)123, true, 'b');
      assertEquals("-126bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(27, (-1707));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), (-1707));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0:    land\n1:    nop\n2:    nop\n3:    nop\n";
      stringArray0[1] = "0:    land\n1:    nop\n2:    nop\n3:    nop\n";
      stringArray0[2] = "0:    land\n1:    nop\n2:    nop\n3:    nop\n";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.replace("0:    land\n1:    nop\n2:    nop\n3:    nop\n", "0:    land\n1:    nop\n2:    nop\n3:    nop\n", "0:    land\n1:    nop\n2:    nop\n3:    nop\n");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.getSignature("0:/ /+6.(?^w");
      assertEquals("L0:/;", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "Xii`";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xii`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)73;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte) (-66);
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte) (-29);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, (int) (byte)89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TfnAnnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TfnAnnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)82;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)60;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), 428);
      assertEquals("0:    f2l\n1:    if_acmpeq\t\t#20993\n4:    dastore\n5:    lstore_1\n6:    istore_1\n7:    nop\n8:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iflt\t\t#5725", string0);
      
      String string1 = Utility.replace("?>...", ";db@MvF", "iconst_4");
      assertEquals("?>...", string1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) pipedOutputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      int int0 = new Integer(2186);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, 1586, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kG#byfrgZ<v8!");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("ifeq\t\t#21074", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1L));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("Nn^EpDtva", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nn^EpDtva
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Utility.format(3, 3, false, 'W');
      assertEquals("WW3", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(387, false);
      String string0 = "Y?aBcdgBC7ar8H?~cG";
      try { 
        Utility.typeOfMethodSignature("Y?aBcdgBC7ar8H?~cG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y?aBcdgBC7ar8H?~cG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "@O5";
      try { 
        Utility.typeOfSignature("@O5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @O5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.format((byte)102, 180, false, 'b');
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb102", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SvC");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.signatureToString("CONSTANT_Integer", true);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte) (-109);
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte)9;
      byteArray1[7] = (byte)9;
      byteArray1[8] = (byte)9;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A", string0);
      
      String string1 = Utility.classOrInterface(0);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-30), (byte) (-30));
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3532));
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("q%[d>+w");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.isJavaIdentifierPart('@');
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, 809);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.replace("?>...", ";db@MvF", "iconst_4");
      assertEquals("?>...", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VJa%0,");
      Utility.clearBit((-21), (-21));
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      Utility.getSignature("aIn5bC1mHcL!c");
      Utility.fillup("`uw(M`Q/Dc1", 143, true, 'N');
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "`uw(M`Q/Dc1NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
      objectArray0[2] = (Object) "`uw(M`Q/Dc1NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN";
      objectArray0[3] = (Object) "LaIn5bC1mHcL!c;";
      Utility.printArray(objectArray0, true);
      Utility.replace("H-_R1sI$}", "`uw(M`Q/Dc1", "`uw(M`Q/Dc1");
      try { 
        Utility.methodSignatureArgumentTypes("r^`Qu48$E85", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r^`Qu48$E85
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte)17;
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte) (-3);
      byteArray1[5] = (byte)3;
      byteArray1[6] = (byte)17;
      byteArray1[7] = (byte)17;
      byteArray1[8] = (byte)17;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1395), 1269, true);
      assertEquals("0:    sipush\t\t0\n3:    nop\n4:    nop\n5:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.compactClassName("{", "", true);
      assertEquals("{", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "{";
      objectArray0[1] = (Object) "{";
      objectArray0[2] = (Object) "{";
      objectArray0[3] = (Object) "{";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "{";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{{, {, {, {, , {}", "AkV;1q0", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      byte byte0 = (byte)11;
      byteArray0[3] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.decode("|6G~sPC]w$8{", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.searchOpcode("]jE6//HLWR2-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "]jE6//HLWR2-";
      objectArray0[1] = (Object) "]jE6//HLWR2-";
      objectArray0[2] = (Object) "]jE6//HLWR2-";
      objectArray0[3] = (Object) "]jE6//HLWR2-";
      objectArray0[4] = (Object) "]jE6//HLWR2-";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-109);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-7);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 194);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 1423;
      int int1 = 72;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1144));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$m$a5$A$a5$A$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.clearBit(10, 10);
      Utility.accessToString(10);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(!<C8<FZa7Xa", "boolean", "boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!<C8<FZa7Xa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      try { 
        Utility.typeOfSignature("->c}22,ADYK-zE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ->c}22,ADYK-zE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "GmBc_gDv[";
      // Undeclared exception!
      try { 
        Utility.signatureToString("GmBc_gDv[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GmBc_gDv['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.clearBit((-3064), (-3064));
      int int0 = (-449);
      Utility.isSet((-3064), (-449));
      String string0 = "Hvmfu[mCbL4<wo";
      Utility.compactClassName("Hvmfu[mCbL4<wo", "Hvmfu[mCbL4<wo", true);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.replace("float", "short", "short");
      assertEquals("float", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "short";
      stringArray0[1] = "\t\t%";
      stringArray0[2] = "short";
      stringArray0[3] = "float";
      stringArray0[4] = "\t\t%";
      String string1 = Utility.methodTypeToSignature("\t\t%", stringArray0);
      assertEquals("(SL%;SFL%;)L%;", string1);
      
      String string2 = Utility.classOrInterface((-1479));
      assertEquals("interface", string2);
      
      String string3 = Utility.getSignature("\t\t%");
      assertEquals("L%;", string3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.setBit(297, 386);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(297, 4740, (LocalVariable[]) null, constantPool0);
      try { 
        Utility.methodSignatureToString("O'", "?c[`:WgpMP}-,pVX", "?c[`:WgpMP}-,pVX", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.methodSignatureReturnType("D3N+*lipUZQ MZ03<", false);
      String string0 = "kma";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("kma", "D3N+*lipUZQ MZ03<", "D3N+*lipUZQ MZ03<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kma
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.compactClassName("checkcast", true);
      assertEquals("checkcast", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!kZ\")QZY!fUs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: kZ\")QZY!fUs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "?>...";
      Utility.fillup("?>...", 880, true, 'w');
      Utility.setBit(880, 880);
      // Undeclared exception!
      try { 
        Utility.signatureToString("?>...wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?>...wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UmHGc&x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UmHGc&x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.isJavaIdentifierPart('\'');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-98);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 43, 768);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xii`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*");
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("*");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-88);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_1;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpgt\t\t#-25958", string0);
      
      short short0 = Utility.searchOpcode("if_icmpgt\t\t#-25958");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.printArray((Object[]) constantArray0);
      assertNotNull(string1);
      assertEquals("{CONSTANT_Utf8[1](\"*\"), CONSTANT_Utf8[1](\"*\"), CONSTANT_Utf8[1](\"*\"), CONSTANT_Utf8[1](\"*\"), CONSTANT_Utf8[1](\"*\"), CONSTANT_Utf8[1](\"*\")}", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      String string0 = "int";
      String string1 = "aload_3";
      int int0 = 2467;
      int int1 = 77;
      LocalVariable[] localVariableArray0 = new LocalVariable[7];
      int int2 = 718;
      int int3 = 962;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(">\t", "aload_3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"aload_3\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.convertString("");
      Utility.setBit(2258, 2258);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.clearBit((-2980), (-2980));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.checkcast", "java.lang.checkcast", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.typeOfSignature("Invalidcmethod si5nature:?");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Invalidcmethod si5nature:?";
      objectArray0[1] = (Object) "Invalidcmethod si5nature:?";
      objectArray0[2] = (Object) "Invalidcmethod si5nature:?";
      Utility.signatureToString("Invalidcmethod si5nature:?", true);
      byte byte0 = (byte) (-1);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Utility.convertString("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Utility.getSignature("ic]ef=X#=U)a'.Z(");
      assertEquals("Lic]ef=X#=U)a'/Z(;", string0);
      
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0);
      String string1 = Utility.accessToString(0, false);
      assertEquals("", string1);
      
      int int0 = Utility.setBit((byte)0, 42);
      assertEquals(1024, int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)34;
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (-1426));
      String string1 = Utility.fillup("", (-1426), false, ')');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Lclass;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)14;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmpge\t\t#0", string0);
      
      String string1 = Utility.getSignature("if_icmpge\t\t#0");
      assertEquals("Lif_icmpge;", string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-27);
      byte[] byteArray1 = Utility.decode("org.apache", false);
      Utility.equals(byteArray1, byteArray0);
      try { 
        Utility.typeOfSignature("org.apache");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Utility.compactClassName("{", "{", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)5);
      assertEquals("0:    iaload\n1:    iaload\n2:    nop\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      int int0 = Utility.clearBit(1294, 2391);
      assertEquals(1294, int0);
      
      byte byte0 = Utility.typeOfSignature("+Z.n1");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      boolean boolean1 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2913), 1928);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)99;
      ConstantLong constantLong0 = new ConstantLong((byte)99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("Invalid signature: `");
      assertEquals("Invalid signature: `", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.compactClassName("lshl", false);
      try { 
        Utility.typeOfMethodSignature("lshl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lshl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.accessToString((-451271011), true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("if_acmpne", "public protected static final transient abstract annotation", "if_acmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpne
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("UmHGc&x", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UmHGc&x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(178, 178);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(178, 178);
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-126);
      constantInvokeDynamic0.setNameAndTypeIndex((byte) (-126));
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)99;
      Utility.codeToString(byteArray0, constantPool0, (-1042), (int) (byte) (-126));
      // Undeclared exception!
      try { 
        Utility.signatureToString("impdep1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `impdep1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{\"java.lang.Object@1355c82c\", \"java.lang.Object@20ede1e9\", \"java.lang.Object@47e172fa\", \"java.lang.Object@110a2a92\", \"java.lang.Object@2c239437\", \"java.lang.Object@638edaf3\", \"java.lang.Object@2f3402da\"}");
      int int0 = Utility.clearBit(2831, 2831);
      assertEquals(2831, int0);
      
      int int1 = Utility.clearBit((-190), 87);
      assertEquals((-8388798), int1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-68);
      byteArray0[3] = (byte)41;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)104, 216);
      constantInvokeDynamic0.clone();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(67, byteArrayOutputStream0.size());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)30);
      short short0 = Utility.searchOpcode("^i^Z3%$@_");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)62;
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte) (-82);
      byteArray1[7] = (byte)62;
      byteArray1[4] = (byte) (-82);
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte)14;
      byteArray1[7] = (byte) (-125);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 544, (-1718986813), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TfnAnnull");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "Asu0qI/D&s";
      try { 
        Utility.typeOfSignature("Asu0qI/D&s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Asu0qI/D&s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("+3vvDHAlBI#g86P", "aastore", "aastore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +3vvDHAlBI#g86P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "#6)Ry\",xwkTFw?K";
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      Utility.fillup("#6)Ry\",xwkTFw?K", 95, false, 'T');
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1024, (int) (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("HV+o=`");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_1;
      constantArray0[7] = (Constant) constantUtf8_0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-86);
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      String string1 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ConstantUtf8.getInstance("a83a");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "V`t2O7%,QA2E", "!%T/eFGgkD@*@[@*r", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("InnerClasses");
      assertEquals("int", string0);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      short short0 = Utility.searchOpcode("From\tTo\tHandler\tType\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-10);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-62), 9);
      constantArray0[0] = (Constant) constantFieldref0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$l$8b$I$A$A$A$A$A$A$A");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore\t\t%194", string1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.compactClassName("Lclass;V");
      boolean boolean0 = true;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Utility.accessToString((-4067), true);
      Utility.compactClassName("oI9C", "public protected static final synthetic annotation enum", true);
      try { 
        Utility.methodSignatureReturnType(")", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-54);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)41, 102);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(178, 178);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(178, 178);
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-126);
      constantInvokeDynamic0.setNameAndTypeIndex((byte) (-126));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte)99;
      byteArray1[5] = (byte)99;
      byteArray1[6] = (byte) (-126);
      byteArray1[7] = (byte) (-27);
      byteArray1[8] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-126), 226);
      Utility.compactClassName("0:    ixor\n1:    nop\n2:    fmul\n3:    ixor\n4:    nop\n5:    ixor\n6:    nop\n7:    nop\n", "g9m", false);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.4|");
      assertEquals("4|", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2'r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2'r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = Utility.convertString("!kZ\")QZY!fUs");
      assertEquals("!kZ\\\")QZY!fUs", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("?YiRr#Xb.sAMy8}wK", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?YiRr#Xb.sAMy8}wK");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_0", string0);
      assertEquals(17, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Utility.clearBit((-11), (-11));
      try { 
        Utility.typeOfSignature("%?hz4vVhffaP)?ieo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %?hz4vVhffaP)?ieo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("?QX|C!?;a`y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?QX|C!?;a`y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Utility.compactClassName("0:/ /+6.(?^w");
      try { 
        Utility.typeOfSignature(":+NL09g^/h6v6FS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :+NL09g^/h6v6FS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("$5b$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Utility.format((-2619), 83, true, 'A');
      try { 
        Utility.methodSignatureReturnType(")N*V!!Cc?[ui]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N*V!!Cc?[ui]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("?vZVBah5)HE0L$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HE0L$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("long");
      Utility.classOrInterface((-125));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "long";
      stringArray0[1] = "long";
      stringArray0[2] = "long";
      stringArray0[3] = "long";
      Utility.methodTypeToSignature("interface", stringArray0);
      Utility.accessToString(245, false);
      Utility.toHexString(byteArray0);
      Utility.fillup("monitorenter", (byte)78, false, 'S');
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M:0]n!R@T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M:0]n!R@T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-10);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("55 e6 f6", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SvC");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.signatureToString("CONSTANT_Integer", true);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      boolean boolean0 = Utility.isSet(243, (-776));
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("java.lang.java.la}g.4u");
      assertEquals("java.lang.java.la}g.4u", string1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)52;
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)57;
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.compactClassName("baload", "|p>Q+{WPN?7", false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xii`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 146);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpgt\t\t#-25958
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-106);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("jsr\t\t#28328", string1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)62;
      byteArray0[0] = (byte) (-82);
      byteArray0[3] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-655), (int) (byte) (-82));
      assertEquals("0:    freturn\n1:    istore_3\n2:    nop\n3:    fload\t\t%0\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("ae 3e 00 17 00", string1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Utility.fillup("arraylength", 75, false, 'z');
      try { 
        Utility.methodSignatureReturnType("OcANa!z0H[ma", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OcANa!z0H[ma'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$5c$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("$5c$A$A$A$A$A$A");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)66;
      String string1 = Utility.codeToString(byteArray1, constantPool0, (-3297), (-3297));
      assertEquals("0:    aload_3\n1:    lstore_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(27, (-1707));
      Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)48;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-123);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y`f}b$Zu", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y`f}b$Zu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte)78;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)27;
      byteArray2[1] = (byte) (-77);
      byteArray2[2] = (byte) (-77);
      byteArray2[3] = (byte) (-77);
      byteArray2[4] = (byte) (-77);
      byteArray2[5] = (byte) (-77);
      byteArray2[6] = (byte) (-77);
      byteArray2[7] = (byte)78;
      byteArray2[8] = (byte)78;
      String string0 = Utility.encode(byteArray2, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[0] = (byte) (-106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-88);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#-LNA)GA0>mf0Hs]O0`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #-LNA)GA0>mf0Hs]O0`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.accessToString(0);
      String string0 = "V6VT2";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V6VT2", "", "V6VT2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V6VT2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("`:2.IZTZlAgVd", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``:2.IZTZlAgVd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("I");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)19;
      byteArray1[1] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      int int0 = 620;
      boolean boolean0 = false;
      char char0 = 'x';
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 620, false, 'x');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "O3h\"WcCskX";
      stringArray0[1] = "O3h\"WcCskX";
      stringArray0[2] = "O3h\"WcCskX";
      stringArray0[3] = "QEaKZn_6;{h";
      stringArray0[4] = "O3h\"WcCskX";
      stringArray0[5] = "O3h\"WcCskX";
      stringArray0[6] = "O3h\"WcCskX";
      Utility.methodTypeToSignature("O3h\"WcCskX", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("O3h\"WcCskX", "O3h\"WcCskX", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O3h\"WcCskX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ox|'2fvU(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ox|'2fvU('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("V76oW[Hb2!AX=kc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V76oW[Hb2!AX=kc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, (int) (byte)48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F6TQ{R|3],d@g}M");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.replace("?>...", ";db@MvF", "iGonst_'");
      // Undeclared exception!
      try { 
        Utility.getSignature("[GteZlv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [GteZlv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.replace("ior", "tvSq", "(reference_kind = ");
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("#6)R\",xwkTFw?K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R\",xwkTFw?K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";a:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;a:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.replace(")pSf_>\";13uCgFS[)<$", ")pSf_>\";13uCgFS[)<$", ")pSf_>\";13uCgFS[)<$");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, 696, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.compactClassName("]8G:L<le{");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)65;
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-319), 75, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.clearBit(6, (-782));
      assertEquals(6, int0);
      
      String string0 = Utility.compactClassName("", "kR", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("UmHGc&x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UmHGc&x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = (-2594);
      Utility.fillup("T|NII-]QrC8o", (-2594), false, '\"');
      // Undeclared exception!
      try { 
        Utility.signatureToString("T|NII-]QrC8o", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T|NII-]QrC8o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Wl[[STKtQum-GyS", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wl[[STKtQum-GyS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "!D(@G1l09='";
      Utility.convertString("!D(@G1l09='");
      byte[] byteArray0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 130, 130, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1), (byte) (-123));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      ConstantClass constantClass0 = new ConstantClass((-1));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantDouble constantDouble0 = new ConstantDouble(2995.9266477521896);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(";3jF/.&6");
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{java.lang.Object@f40e3bf, java.lang.Object@4d8353e1, java.lang.Object@5f8e387a, null, java.lang.Object@55515dec, java.lang.Object@5d8411e2, java.lang.Object@a4f4de8}");
      int int0 = Utility.clearBit(2831, 2831);
      int int1 = new Integer(87);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Utility.methodSignatureReturnType("InnerClasses");
      Utility.format((-176), (-176), true, '-');
      // Undeclared exception!
      try { 
        Utility.signatureToString("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray1 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte) (-110));
      constantArray1[0] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-110));
      constantArray1[1] = (Constant) constantInteger0;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.getSignature("OSzqzK<N'7kvKT%8+pq");
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("OSzqzK<N'7kvKT%8+pq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OSzqzK<N'7kvKT%8+pq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-68);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)104, 216);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 216, (int) (byte) (-68), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2913), 1928);
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)99;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.replace("dadd", "dadd", "dadd");
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-55L));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I");
      assertEquals("int", string0);
      
      String string1 = Utility.format(1, 1, false, 'x');
      assertEquals("1", string1);
      
      int int0 = Utility.clearBit(1, (-1201));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";7+");
      boolean boolean0 = false;
      Utility.fillup("$J5X", 1, false, '|');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$J5X");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "$J5X";
      objectArray0[1] = (Object) ";7+";
      objectArray0[2] = (Object) ";7+";
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("InnerClasses", "org.apache.bcel.classfile.InnerClass", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "InnerClasses", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = "0:/ /+6.(?^w";
      String string1 = "(";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:/ /+6.(?^w", "(", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("org.apache.bcel.classfile.ClassElementValue", "SLP(\">$B0$+^t#+@|HD");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print((Object) file0);
      mockPrintStream0.close();
      Object[] objectArray0 = null;
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)94;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)120;
      byte byte0 = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte)53;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("ea 5e 78 55 13 b4 3e 96 35");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ea 5e 78 55 13 b4 3e 96 35
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YR@[:C}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YR@[:C}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byte byte1 = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      byte byte2 = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byte byte3 = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byte byte4 = (byte) (-58);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-40);
      byte byte0 = (byte)0;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-46), 366);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = Utility.accessToString((-610));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D>9,1bC/z}dp");
      assertEquals((byte)7, byte0);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      String string0 = "B{-nS}pcA_`#](*IQiN";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("B{-nS}pcA_`#](*IQiN", "B{-nS}pcA_`#](*IQiN", "B{-nS}pcA_`#](*IQiN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B{-nS}pcA_`#](*IQiN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte byte0 = (byte)111;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-124);
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("swap", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: swap
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Vif");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("", "P*l8a_", "impdep1", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = null;
      try {
        byteSequence1 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-rS`#$3i,Hj)");
      Utility.clearBit((-1107), (-1107));
      // Undeclared exception!
      try { 
        Utility.signatureToString("L[T(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L[T(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QpuJ73_$Oc6R2O?vZVBah5)HE0L$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QpuJ73_$Oc6R2O?vZVBah5)HE0L$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-124);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      int int0 = (-1323);
      LocalVariable[] localVariableArray0 = new LocalVariable[7];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((String) null, "M0L&X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"M0L&X\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)73;
      byte byte0 = (byte)35;
      byteArray0[3] = (byte)35;
      byte byte1 = (byte)14;
      byteArray0[4] = (byte)14;
      byte byte2 = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)9;
      byte byte3 = (byte)104;
      byteArray0[8] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip(0L);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "jsr_w";
      stringArray0[2] = "";
      stringArray0[3] = "f2d";
      stringArray0[4] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;Ljsr_w;L;Lf2d;L;)L;", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3mf3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3mf3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)95;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#19297", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.format((byte)50, 161, false, 'M');
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM50", string1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&D,]C", (String) null, "invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &D,]C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Utility.searchOpcode("(H@@_!4:%6oE:I Sviq");
      Utility.isSet((short) (-1), (-1565));
      try { 
        Utility.methodSignatureReturnType("(H@@_!4:%6oE:I Sviq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `(H@@_!4:%6oE:I Sviq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2913), 1928);
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      ConstantLong constantLong0 = new ConstantLong((byte)99);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.replace("tvSq", "dneg", "tvSq");
      assertEquals("tvSq", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Utility.compactClassName("swap", "Xj5z", false);
      String string0 = "char";
      try { 
        Utility.methodSignatureReturnType("char", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `char'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-80);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit(57, 57);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = Utility.signatureToString("InnerClasses");
      assertEquals("int", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "InnerClasses";
      objectArray0[1] = (Object) "InnerClasses";
      objectArray0[2] = (Object) "int";
      objectArray0[3] = (Object) "InnerClasses";
      objectArray0[4] = (Object) "int";
      objectArray0[5] = (Object) "InnerClasses";
      objectArray0[6] = (Object) "InnerClasses";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertEquals("InnerClasses, InnerClasses, int, InnerClasses, int, InnerClasses, InnerClasses", string1);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(69);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(69, 69);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[0] = (byte)80;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)83;
      constantPool0.toString();
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-70);
      byteArray0[6] = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[8] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#21158", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:/ /+6.(?^w", "0:/ /+6.(?^w", "0:/ /+6.(?^w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:/ /+6.(?^w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Kq>#>%)l{K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kq>#>%)l{K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = "|6f}/}=|QP";
      Utility.convertString("|6f}/}=|QP");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)108;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = Utility.clearBit(15, 15);
      assertEquals(15, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-116);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$E$B$Fv$G$i$C$8c", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Utility.replace("DSQE[oG$F}Eud\\4-J", "DSQE[oG$F}Eud\\4-J", "DSQE[oG$F}Eud\\4-J");
      ConstantClass constantClass0 = new ConstantClass((byte) (-58));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-39);
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('9');
      try { 
        Utility.methodSignatureArgumentTypes("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2913), 1928);
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2028, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.replace("dup2", "'", "'");
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int int0 = Utility.clearBit(5, 5);
      assertEquals(5, int0);
      
      String string0 = Utility.signatureToString("BootstrapMethods(", true);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalidcmethod si5nature:?");
      assertEquals((byte)10, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Invalidcmethod si5nature:?";
      objectArray0[1] = (Object) "Invalidcmethod si5nature:?";
      objectArray0[2] = (Object) "Invalidcmethod si5nature:?";
      objectArray0[3] = (Object) "Invalidcmethod si5nature:?";
      objectArray0[4] = (Object) "Invalidcmethod si5nature:?";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "Invalidcmethod si5nature:?";
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      int int0 = Utility.setBit((byte)10, (byte)10);
      assertEquals(1034, int0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2913), 1928);
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)99;
      ConstantLong constantLong0 = new ConstantLong((byte)99);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.replace("tvSq", "dadd", "tvSq");
      assertEquals("tvSq", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int int0 = Utility.clearBit(46, 46);
      assertEquals(46, int0);
      
      String string0 = Utility.compactClassName("baload", "W'fewaF5_bs8o5/", false);
      assertEquals("baload", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-118);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$O$b8$bdZ$3b$V$8a", string1);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Utility.compactClassName("Dont call getValueShort() on a non SHORT ElementValue");
      Utility.isSet(2382, 149);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I");
      assertEquals("int", string0);
      
      byte[] byteArray0 = Utility.decode("%v `Wf}[I4+h^J;FPF8", false);
      assertEquals(19, byteArray0.length);
      
      String string1 = Utility.format(529, 529, false, 'z');
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz529", string1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(&(T)|EHM-;w=Y]|Ds");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: |EHM-;w=Y]|Ds
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-89);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte)0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = "|6f}/}=|QP";
      Utility.convertString("|6f}/}=|QP");
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)108;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-202), (int) (byte)46);
      String string1 = Utility.compactClassName("0:    iaload\n1:    lstore_1\n2:    iaload\n3:    lstore_1\n4:    iaload\n5:    lstore_1\n6:    lstore_1\n7:    lstore_1\n8:    lstore_1\n", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[5] = (byte)105;
      Utility.convertString(")\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      try { 
        Utility.typeOfSignature("YR@[:C}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YR@[:C}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (-1165));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Utility.methodSignatureReturnType("FKFPmL;emA2Zs");
      Utility.replace("", "~uESsz}O0M", "float");
      int int0 = 79;
      Utility.isSet(79, 79);
      Utility.searchOpcode("3I-#xQX(aTfr*");
      // Undeclared exception!
      try { 
        Utility.signatureToString("xu,H<YF!BJ'*kaQih", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xu,H<YF!BJ'*kaQih'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)95, (byte) (-57));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence1);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantClass constantClass0 = new ConstantClass((-4113));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[4] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.isJavaIdentifierPart('%');
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("arraylength");
      constantArray0[0] = (Constant) constantUtf8_0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 157, (int) (byte)4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(27, (-1707));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.isJavaIdentifierPart('%');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), (-1707));
      try { 
        Utility.typeOfMethodSignature("0:    land\n1:    nop\n2:    nop\n3:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    land
         // 1:    nop
         // 2:    nop
         // 3:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.typeOfSignature("Lclass;V");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, 67, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte) (-113);
      byteArray1[2] = (byte) (-113);
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)36;
      byteArray1[5] = (byte)36;
      byteArray1[6] = (byte)36;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)75;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)98, 216);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string0 = Utility.replace("fadd", "$v|", "jsr");
      assertEquals("fadd", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "$v|";
      objectArray0[1] = (Object) "jsr";
      objectArray0[2] = (Object) "fadd";
      objectArray0[3] = (Object) "fadd";
      objectArray0[4] = (Object) constantInvokeDynamic0;
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{$v|, jsr, fadd, fadd, CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = 98, name_and_type_index = 216)}", string1);
      assertNotNull(string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("62 4b 00 29", string2);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2913), 1928);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      Utility.fillup("Wkpe/rK[b fLO%_,8{", (-1551), true, ']');
      // Undeclared exception!
      try { 
        Utility.signatureToString("RN>I/3IrL4rzhat4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RN>I/3IrL4rzhat4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xii`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Utility.getSignature(")N*V!!Cc?[ui]");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-74);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)86, 162);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      Utility.encode(byteArray0, false);
      Utility.decode("0$A$A$A$A$A", false);
      try { 
        Utility.methodSignatureArgumentTypes("(!<C8<FZa7Xa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!<C8<FZa7Xa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-84);
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-84), (byte)62);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType1);
      constantArray0[2] = (Constant) constantNameAndType2;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2031, 2713);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantClass constantClass0 = new ConstantClass((byte)16);
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2559, 12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("I");
      String string1 = Utility.fillup("int", (-610), true, '3');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      int int0 = 93;
      boolean boolean0 = false;
      Utility.accessToString(93, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "public protected static final volatile";
      objectArray0[1] = (Object) "public protected static final volatile";
      objectArray0[2] = (Object) "public protected static final volatile";
      objectArray0[3] = (Object) "public protected static final volatile";
      objectArray0[4] = (Object) "public protected static final volatile";
      Utility.printArray(objectArray0);
      String string0 = null;
      LocalVariable[] localVariableArray0 = new LocalVariable[6];
      String string1 = "T{rjA:s";
      try { 
        MockURI.URI("T{rjA:s", (String) null, (String) null, "gyS:amC9xe>r", "public protected static final volatile");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 1: T{rjA:s:?gyS:%7FamC9xe%3Er#public%20protected%20static%20final%20volatile
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = "{|o=jz";
      String string1 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("DoXo.YnW]wN93pk~W", "{|o=jz", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: DoXo.YnW]wN93pk~W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      byteArray0[6] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.replace("fneg", "tvSq", "fneg");
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool(byteSequence1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -126
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString((-4067), true);
      // Undeclared exception!
      Utility.replace(", name_and_type_index = ", "", ", name_and_type_index = ");
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-655), (int) (byte)14);
      assertEquals("0:    dconst_0\n1:    castore\n2:    freturn\n3:    fload\t\t%164\n", string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)36;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("impdep1");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-20), 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.convertString("a3@{m.7wG$");
      int int0 = 0;
      Utility.format(3479, 0, true, 'L');
      // Undeclared exception!
      try { 
        Utility.signatureToString("sXZL2&3*&2foaZ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sXZL2&3*&2foaZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)95;
      byte byte0 = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)77;
      int int0 = (-447);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-19), (-447), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte) (-101);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0$A$9b$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("0$A$9b$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte) (-101), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)62;
      byteSequence0.readFully(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-655), (int) (byte)14);
      assertEquals("0:    dconst_0\n1:    istore_3\n2:    freturn\n3:    fload\t\t%0\n", string0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(27, (-1707));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('%');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-124), (-1707));
      assertEquals("0:    land\n1:    nop\n2:    nop\n3:    nop\n", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0:    land\n1:    nop\n2:    nop\n3:    nop\n";
      stringArray0[1] = "0:    land\n1:    nop\n2:    nop\n3:    nop\n";
      stringArray0[2] = "0:    land\n1:    nop\n2:    nop\n3:    nop\n";
      stringArray0[3] = "0:    land\n1:    nop\n2:    nop\n3:    nop\n";
      String string1 = Utility.getSignature("0:    land\n1:    nop\n2:    nop\n3:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)95;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[2] = (byte) (-123);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0$A$85$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("0$A$85$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte) (-123), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(51, 36);
      constantInvokeDynamic0.setNameAndTypeIndex(2640);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (-3359));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore\t\t%57
         // 2:    dstore\t\t%57
         // 4:    nop
         // 5:    i2d
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(59, 3865);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Integer integer0 = new Integer((-2152));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[6] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), (int) (byte) (-104), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      byte[] byteArray0 = Utility.decode("4|", false);
      assertArrayEquals(new byte[] {(byte)52, (byte)124}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D>9,1C/z}dp");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1L);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = constantPool0.toString();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.replace("Sm[.r?~~-SH>C*Y0", "nop", "xo");
      assertEquals("Sm[.r?~~-SH>C*Y0", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("<illegal opcode>");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-72));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(167, (byte) (-72));
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-72), 167);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(188, 378);
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString((byte) (-72));
      constantArray0[5] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), (int) (byte) (-72), true);
      assertEquals("0:    invokestatic\t<illegal opcode> (0)\n3:    nop\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = Utility.replace("55$~F=PAx[Y", "ifge", "55$~F=PAx[Y");
      assertEquals("55$~F=PAx[Y", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)123;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-60), (int) (byte) (-60));
      assertEquals("0:    wide\t(wide)\n1:    lshr\n", string1);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = 216;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(36, 216);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte) (-128);
      byteArray1[3] = (byte) (-58);
      byteArray1[4] = (byte) (-58);
      byteArray1[5] = (byte) (-128);
      byteArray1[6] = (byte)80;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("ifnull\t\t#-14720", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lastore", string1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("+Z.n1", false);
      assertArrayEquals(new byte[] {(byte)43, (byte)90, (byte)46, (byte)110, (byte)49}, byteArray0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(32, false);
      assertEquals("synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)47;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte) (-126);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-76);
      byteArray1[6] = (byte) (-33);
      byteArray1[7] = (byte) (-76);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface(68);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("return", "return", "return");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byte byte1 = (byte)3;
      byteArray0[1] = (byte)3;
      byte byte2 = (byte)65;
      byteArray0[2] = (byte)65;
      byte byte3 = (byte)115;
      byteArray0[3] = (byte)115;
      byte byte4 = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-97);
      byte byte5 = (byte)22;
      byteArray0[6] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)3, (-2685));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    drem
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)69;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      syntheticRepository0.findClass("org.apache.bcel.classfile.ExceptionTable");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, (-2909));
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.ExceptionTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.ExceptionTable'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = Utility.classOrInterface(256);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P*l8a_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P*l8a_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Utility.typeOfSignature("Bogus");
      try { 
        Utility.methodSignatureArgumentTypes("Bogus", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Bogus
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = Utility.replace("InnerClasses", "InnerClasses", "JA0L,[7j#sNS6vUH$0");
      assertEquals("JA0L,[7j#sNS6vUH$0", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-1);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.classOrInterface(2687);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "HV+o=`";
      stringArray0[1] = "HV+o=`";
      stringArray0[2] = "HV+o=`";
      stringArray0[3] = "java.lang.]8G:L<le{";
      stringArray0[4] = "HV+o=`";
      Utility.methodTypeToSignature("HV+o=`", stringArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("HV+o=`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HV+o=`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = (Object) "V";
      objectArray0[2] = (Object) "V";
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("V, V, V", string0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
      
      short short0 = Utility.searchOpcode("dup2_x1");
      assertEquals((short)93, short0);
      
      String string1 = Utility.accessToString((-91), false);
      assertEquals("public protected synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (-614), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("+Z.n1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+Z.n1");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals(1, byteSequence1.getIndex());
      
      Utility.replace("Cga[1P", ")", "checkcast");
      String string0 = Utility.compactClassName("if_icmplt");
      assertEquals("if_icmplt", string0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\"\"R{", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"\"R{");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_0", string0);
      assertArrayEquals(new byte[] {(byte)34, (byte)34, (byte)82, (byte)123}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9NnJ7Gs@H0uiM=i[{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9NnJ7Gs@H0uiM=i[{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.methodSignatureReturnType("FKFPmL;emA2Zs");
      Utility.replace("", "~uESsz}O0M", "float");
      Utility.isSet(0, (-1337));
      Utility.format(0, (-1337), false, 'G');
      Utility.compactClassName("2x5S%A@}Q@");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)121;
      Constant[] constantArray0 = new Constant[4];
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = "5M";
      try { 
        Utility.typeOfSignature("5M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(227, 36);
      constantInvokeDynamic0.clone();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-3), (int) (byte)53, false);
      assertEquals("0:    dup_x2\n1:    istore\t\t%53\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.classOrInterface(118);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = Utility.format((-243), 0, false, 'g');
      assertEquals("-243", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)106;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$j}4VE>fx|D>@7wD{^");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(48, (-1707));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-1707), 1021, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.replace("java.lang.Invalid signature: `", "java.lang.Invalid signature: `", (String) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[0] = (byte)110;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte) (-106);
      byteArray1[5] = (byte)110;
      byteArray1[6] = (byte) (-106);
      byteArray1[7] = (byte) (-106);
      byteArray1[8] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[3] = (byte) (-101);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_3", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)62;
      objectArray0[2] = (Object) "nop";
      objectArray0[3] = (Object) byteSequence0;
      objectArray0[4] = (Object) (byte)22;
      String string1 = Utility.printArray(objectArray0, true, false);
      assertNotNull(string1);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_2", string0);
      
      short short0 = Utility.searchOpcode("From\tTo\tHandler\tType\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte)33;
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-116);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Utility.replace("55$~F=PAx[Y", "ifge", "55$~F=PAx[Y");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(3, byteSequence0.getIndex());
      
      String string0 = Utility.compactClassName("Invalid signature: `");
      assertEquals("Invalid signature: `", string0);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "invokespecial";
      stringArray0[3] = "short";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(&()|EHM-;w=Yn|Ds");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (&()|EHM-;w=Yn|Ds
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("M:0]n!R@T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M:0]n!R@T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)122;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("z>Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `z>Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Xii`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-2913), 1928);
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)99;
      ConstantLong constantLong0 = new ConstantLong((byte)99);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantLong0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dadd", string0);
      
      String string1 = Utility.replace("tvSq", "dadd", "tvSq");
      assertEquals("tvSq", string1);
      
      int int0 = Utility.setBit((-1441), (byte)52);
      assertEquals((-1441), int0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$A$ff$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)59, 189);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-76), 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 11776. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("_dJ{vivfr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_dJ{vivfr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GmBc_gDv[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GmBc_gDv[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:/ /+6.(?^w", "", "double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:/ /+6.(?^w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.close();
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = "PXVjvLi_";
      try { 
        Utility.typeOfSignature("PXVjvLi_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PXVjvLi_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("#6)R\",xwkTFw?K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #6)R\",xwkTFw?K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.replace("\"<46LO8CP~_", (String) null, ":8N4g]RljuTa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.isSet(41, 0);
      String string0 = "?wgh[?UcQSA|";
      Utility.searchOpcode("?wgh[?UcQSA|");
      // Undeclared exception!
      try { 
        Utility.signatureToString("?wgh[?UcQSA|", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?wgh[?UcQSA|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "HV+o=`";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)69;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$60$ff4$C$adi$c5cE", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iadd", string1);
      
      String string2 = Utility.classOrInterface((byte) (-83));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Utility.format(32, 32, true, '5');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("32555555555555555555555555555555", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `32555555555555555555555555555555'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Utility.typeOfSignature("Invalidcmethod si5nature:?");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Invalidcmethod si5nature:?";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)69;
      byteArray0[7] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("f", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fsub", string1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }
}
