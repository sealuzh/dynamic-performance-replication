/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:25:32 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(171);
      String string0 = rationalNumber0.toString();
      assertEquals("171", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(171, int0);
      assertEquals(171.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(889, 889);
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1672021));
      String string0 = rationalNumber0.toString();
      assertEquals((-1672021.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals("-1,672,021", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-342L), (-342L));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836352977388E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,635", string0);
      assertEquals(2.147483635E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(2147483635, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2072.4);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("2,072.4", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3047.5);
      assertEquals(6095, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(153.2);
      assertEquals(766, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(766, (-429L));
      assertEquals(429, rationalNumber1.divisor);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(6.228079030279332E-7);
      assertEquals(6.228077E-7F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(6.228077168367346E-7, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1), 1914);
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-1/1914 (-0.001)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(171, 171);
      RationalNumber rationalNumber1 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2147483647), rationalNumber1.intValue());
      assertEquals(1, rationalNumber1.divisor);
      
      String string0 = rationalNumber0.toString();
      assertEquals("1", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(7.571103787995526E-5);
      assertEquals(13208, rationalNumber0.divisor);
      assertEquals(7.571168988491823E-5, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(Double.NaN, rationalNumber1.doubleValue(), 0.01);
      
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (0/0)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1590.006837736);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      int int0 = rationalNumber1.intValue();
      assertEquals((-1590.009900990099), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-1590), int0);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1,590.01", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483677L), (-2147483677L));
      rationalNumber0.toString();
      rationalNumber0.toString();
      rationalNumber0.toString();
      rationalNumber0.toString();
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483692L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483692, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483666L));
      rationalNumber0.toDisplayString();
      rationalNumber0.toString();
      RationalNumber.factoryMethod(2560L, 2147483692L);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483692L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483692, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }
}
