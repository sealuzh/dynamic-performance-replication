/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 17:25:30 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2011;
      CompressedVector compressedVector0 = new CompressedVector(2011);
      compressedVector0.eachNonZero((VectorProcedure) null);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      CompressedVector.zero(2011);
      int int1 = 0;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(2060L);
      CompressedVector.random(0, 0.0, (Random) mockRandom0);
      double double1 = 0.0;
      Vector.constant(2011, 0.0);
      String string0 = "Can not decode CompressedVector from the given byte array.";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("Can not decode CompressedVector from the given byte array.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1740L));
      mockRandom0.doubles();
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      compressedVector0.iterator();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, 46);
      // Undeclared exception!
      try { 
        CompressedVector.random(46, (-608.2731939971643), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        CompressedVector.random(524, (double) 524, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(48);
      assertEquals(48, compressedVector0.length());
      
      compressedVector0.slice(78, 78);
      DecimalFormat decimalFormat0 = new DecimalFormat("NBXY");
      decimalFormat0.setGroupingSize(1295);
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0, NBXY0", string0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      CompressedVector.zero(48, 48);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1669));
      linkedList0.add(integer0);
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toDenseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2474), vectorFunction0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1089.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = (-1326.9900359);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(1376);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2575);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(522, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-399), 2575);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-399' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(19, 19);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(22, 22);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      byte byte0 = (byte) (-68);
      Byte byte1 = new Byte((byte) (-68));
      linkedList0.add(byte1);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      linkedList0.add(byte1);
      compressedVector0.copyOfLength(394);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-866));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -866
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 12;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1700);
      mockRandom0.doubles(0L);
      CompressedVector compressedVector0 = CompressedVector.random(1700, 0.0, (Random) mockRandom0);
      compressedVector0.nonZeroIterator();
      mockRandom0.nextFloat();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(0);
      byte[] byteArray0 = compressedVector1.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll(2104.33137926278);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1615), (-1615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1615
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 4;
      CompressedVector compressedVector0 = CompressedVector.zero(4, 0);
      compressedVector0.iterator();
      compressedVector0.min();
      compressedVector0.slice(0, 0);
      compressedVector0.toColumnMatrix();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.is(vectorPredicate0);
      compressedVector0.min();
      VectorOperation<Byte> vectorOperation0 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      compressedVector0.apply(vectorOperation0);
      compressedVector0.setAll((-268.26083));
      compressedVector0.toDenseVector();
      VectorOperation<Byte> vectorOperation1 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vectorOperation1).apply(any(org.la4j.vector.SparseVector.class));
      compressedVector0.apply(vectorOperation1);
      Vector.zero(499);
      compressedVector0.nonZeroIterator();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat(";w", decimalFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \";w\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 43;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      Vector.fromArray(doubleArray0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-18);
      doubleArray0[1] = (double) (-18);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      compressedVector0.copyOfLength(0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 12;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(0, 0);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)30).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-4143), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-68));
      linkedList0.add(byte0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      linkedList0.add(byte0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(394);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-68);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt((byte) (-68), vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0.0025380710659898475, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1853));
      Integer integer1 = new Integer((-1853));
      hashMap0.put(integer0, integer1);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(48);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.slice(78, 78);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector2 = CompressedVector.zero(48, 48);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector1.iterator();
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(19);
      assertFalse(boolean0);
      assertTrue(compressedVector0.equals((Object)compressedVector2));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-610);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements((-610), (-610));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector0.is(vectorPredicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.eachNonZero(vectorProcedure0);
      String string0 = "oz=LzK7qKAa:d)$";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2662.2474691);
      doubleArray0[1] = (-1502.0);
      doubleArray0[2] = 1517.733687467;
      doubleArray0[3] = 2123.7;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector1.subtract((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      compressedVector0.is(vectorPredicate0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      compressedVector0.eachNonZero(vectorProcedure0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2662.2474691);
      doubleArray0[1] = (-1502.0);
      doubleArray0[2] = 1517.733687467;
      doubleArray0[3] = 2123.7;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2662.2474691), 2123.7, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1846, vectorFunction1);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(22, 22);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 22;
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = 2123.7;
      doubleArray0[3] = 1517.733687467;
      doubleArray0[4] = (double) 22;
      doubleArray0[5] = 2123.7;
      doubleArray0[6] = (double) 22;
      doubleArray0[7] = (double) 22;
      doubleArray0[8] = (double) 22;
      CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[8];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll((-1770.70246317));
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(4180, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 43;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.spliterator();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 43;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-498), 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(25);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2575);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(17);
      assertFalse(boolean0);
      assertEquals(3.883495145631068E-4, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-737.10474);
      doubleArray0[1] = 2123.7;
      doubleArray0[2] = (double) (-18);
      doubleArray0[3] = 2123.7;
      doubleArray0[4] = 3088.52;
      doubleArray0[5] = 1517.733687467;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3088.52, (-1252.911589935115), 1517.733687467, 1.0, (-139.932414)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      boolean boolean0 = compressedVector0.nonZeroAt((-18));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 2;
      CompressedVector compressedVector0 = new CompressedVector(2, 2);
      int int1 = (-47);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-47)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-47), vectorFunction0);
      compressedVector0.toString();
      compressedVector0.nonZeroIterator();
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-47));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -47
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer(16);
      hashMap0.put(integer0, integer1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2575);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(3.883495145631068E-4, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(2088.4);
      double double0 = compressedVector0.getOrElse(0, 1291.607271250272);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2088.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer(16);
      hashMap0.put(integer0, integer1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2575);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      compressedVector0.sliceRight(5);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 3480);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(4277L);
      CompressedVector compressedVector0 = CompressedVector.random(60, 1.0, (Random) mockRandom0);
      mockRandom0.doubles(1.0, (double) 60);
      compressedVector0.nonZeroIterator();
      mockRandom0.nextFloat();
      compressedVector0.sliceRight(2);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("Column '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer(16);
      Integer.getInteger("+^A~&tQBFCVM#cLW");
      hashMap0.put(integer0, integer1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2575);
      assertEquals(3.883495145631068E-4, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.iterator();
      assertEquals(2575, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      MockRandom mockRandom0 = new MockRandom(4277L);
      mockRandom0.doubles(4277L);
      CompressedVector compressedVector0 = CompressedVector.random(60, 1.0, (Random) mockRandom0);
      compressedVector0.nonZeroIterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      float float0 = new Long(4277L);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector1).when(vectorFactory0).apply(anyInt());
      compressedVector1.to(vectorFactory0);
      assertEquals(0.9, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer(16);
      hashMap0.put(integer0, integer1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2575);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2575;
      doubleArray0[1] = (double) 2575;
      doubleArray0[2] = (double) 2575;
      doubleArray0[3] = (-1776.7424130448776);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.to(vectorFactory0);
      assertEquals(5, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(980, 16);
      compressedVector0.swapElements(980, 16);
      assertEquals(980, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)14;
      doubleArray0[1] = (double) (byte)14;
      doubleArray0[2] = (double) (byte)14;
      doubleArray0[3] = (double) (byte)14;
      doubleArray0[4] = (double) (byte)14;
      doubleArray0[5] = (double) (byte)14;
      doubleArray0[6] = 1314.06225980794;
      doubleArray0[7] = (double) (byte)14;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      double double0 = compressedVector0.sum();
      assertEquals(1412.06225980794, double0, 0.01);
      
      compressedVector0.swapElements(79, (-2215));
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, (byte)14);
      assertEquals(14, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-610);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-610), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (double) 39;
      doubleArray0[2] = (double) 39;
      doubleArray0[3] = (double) 39;
      doubleArray0[4] = (double) 39;
      doubleArray0[5] = (double) 39;
      doubleArray0[6] = (double) 39;
      doubleArray0[7] = (double) 39;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-647), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 43;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(43, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-609);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      compressedVector0.swapElements((-609), 0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2441;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.spliterator();
      compressedVector0.swapElements(2441, 0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1089.0;
      doubleArray0[0] = 1089.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.iterator();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      compressedVector0.shuffle();
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, 1532);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1532.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.nextFloat();
      CompressedVector compressedVector0 = new CompressedVector(3);
      compressedVector0.shuffle();
      CompressedVector compressedVector1 = new CompressedVector();
      compressedVector1.nonZeroAt(3);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)121;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (double) 39;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(39);
      double double0 = compressedVector0.max();
      assertEquals(39.0, double0, 0.01);
      
      compressedVector0.swapElements(2409, 0);
      compressedVector0.set(0, 0);
      compressedVector1.swapElements(0, (-2108));
      assertEquals(0.05128205128205128, compressedVector1.density(), 0.01);
      assertEquals(0.25, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-610);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-610));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-3);
      doubleArray0[1] = (double) (-3);
      doubleArray0[2] = (double) (-3);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = (double) (-3);
      doubleArray0[5] = (double) (-3);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-3), 1);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)16;
      CompressedVector compressedVector0 = CompressedVector.fromBinary(byteArray0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 404;
      doubleArray0[1] = (double) 404;
      doubleArray0[2] = (double) 404;
      int[] intArray0 = new int[8];
      intArray0[0] = 404;
      intArray0[1] = 404;
      intArray0[2] = 404;
      intArray0[3] = 404;
      intArray0[4] = 404;
      intArray0[5] = 404;
      int int0 = (-1978);
      intArray0[6] = (-1978);
      intArray0[7] = 404;
      CompressedVector compressedVector0 = new CompressedVector(404, 404, doubleArray0, intArray0);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      // Undeclared exception!
      try { 
        ooPlaceVectorsAddition0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '404' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (double) 39;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      double double0 = compressedVector0.innerProduct(vector0);
      assertEquals(118638.0, double0, 0.01);
      
      compressedVector0.swapElements(9, (-647));
      compressedVector0.nonZeroIterator();
      assertEquals(2, compressedVector0.cardinality());
  }
}
