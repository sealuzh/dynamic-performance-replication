/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 11:21:24 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(2001);
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0, class0);
      doubleKeyMap1.put((String) null, integer0, (String) null);
      Map<Integer, String> map1 = doubleKeyMap1.remove((String) null);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put((String) null, (Object) map0, "");
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      String string0 = doubleKeyMap0.put((String) null, (Object) hashMap0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put((String) null, (Object) map0, "");
      Map<Object, String> map1 = doubleKeyMap0.get((String) null);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>(class0);
      Integer integer0 = new Integer(2001);
      Object object0 = new Object();
      Integer integer1 = doubleKeyMap0.remove(integer0, object0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0, class0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(class0);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, HashMap<String, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, Integer>(map0, class1);
      Map<HashMap<String, String>, Integer> map1 = doubleKeyMap1.remove((Object) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(class0);
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>();
      Map<String, HashMap<Object, Object>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0);
      Map<String, Map<HashMap<Object, String>, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, HashMap<Object, String>, String> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Object, String>, String>(map0, class0);
      Map<HashMap<String, Integer>, Map<HashMap<Object, Object>, HashMap<String, String>>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<String, Integer>, HashMap<Object, Object>, HashMap<String, String>> doubleKeyMap2 = new DoubleKeyMap<HashMap<String, Integer>, HashMap<Object, Object>, HashMap<String, String>>(map1, class0);
      HashMap<Object, Map<Object, Object>> hashMap1 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>(hashMap1, class0);
      Object object0 = doubleKeyMap3.put((Object) null, (Object) doubleKeyMap2, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(class0);
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Object, Object> hashMap1 = doubleKeyMap1.put((Object) doubleKeyMap0, "us.codecraft.webmagic.utils.DoubleKeyMap", hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = doubleKeyMap0.get((Object) null, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, Object>(class0);
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer(339);
      Integer integer1 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Integer, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<String, HashMap<Object, Object>>> hashMap0 = new HashMap<Object, Map<String, HashMap<Object, Object>>>();
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, "", hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>((Map<String, Map<String, Object>>) null);
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("", object0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, String>, String, HashMap<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, String, HashMap<Object, String>>((Map<HashMap<String, String>, Map<String, HashMap<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put((String) null, (Object) map0, "");
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap0.remove((String) null, (Object) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put((String) null, (Object) map0, "");
      String string0 = doubleKeyMap0.put((String) null, (Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<HashMap<Integer, Integer>, Map<HashMap<Object, Integer>, Object>> hashMap0 = new HashMap<HashMap<Integer, Integer>, Map<HashMap<Object, Integer>, Object>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<HashMap<Object, Integer>, Object> hashMap2 = new HashMap<HashMap<Object, Integer>, Object>();
      BiFunction<Object, Object, Map<HashMap<Object, Integer>, Object>> biFunction0 = (BiFunction<Object, Object, Map<HashMap<Object, Integer>, Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(hashMap1, hashMap2, biFunction0);
      DoubleKeyMap<HashMap<Integer, Integer>, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, HashMap<Object, Integer>, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.get(hashMap1, (HashMap<Object, Integer>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<HashMap<String, String>, Integer>> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put((String) null, (Object) map0, "");
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      String string0 = doubleKeyMap0.remove((String) null, (Object) hashMap0);
      assertEquals("", string0);
  }
}
