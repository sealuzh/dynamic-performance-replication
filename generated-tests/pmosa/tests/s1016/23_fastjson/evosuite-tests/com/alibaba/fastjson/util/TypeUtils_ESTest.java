/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:05:46 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getGenericParamType(type0);
      Random.setNextRandom(254);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.loadClass(")NVD{##p_IZ}gO|=.J");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(")NVD{##p_IZ}gO|=.J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.getRawClass(type0);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Class<SQLNonTransientException> class3 = SQLNonTransientException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = "jh6:e";
      hashtable0.put("jh6:e", "jh6:e");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("~uj|6[pbr`l]m^", classLoader0);
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) null, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("getTimeZone", "getTimeZone");
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<Byte> class0 = Byte.TYPE;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, "java.awt.Point");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.isPath(class0);
      TypeUtils.unwrapOptional(class0);
      boolean boolean0 = TypeUtils.isNumber("org.evosuite.runtime.mock.java.util.MockDate@0000000001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<Exception> class0 = Exception.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      long long0 = TypeUtils.fnv1a_64("Ljava.lang.AutoCloseable");
      assertEquals(1583300896935897196L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.decapitalize((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("A");
      TypeUtils.loadClass((String) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) treeMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.GridBagConstraints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.loadClass(")NVD{##p_IZ}gO|=.J");
      TypeUtils.decapitalize(")NVD{##p_IZ}gO|=.J");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass(")NVD{##p_IZ}gO|=.J", (ClassLoader) aSMClassLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockThread mockThread0 = new MockThread("9W6gcI6 vp");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-79);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      TypeUtils.castToSqlTime((Object) null);
      String string0 = TypeUtils.castToString(linkedHashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashSet<Short> hashSet0 = new HashSet<Short>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 23;
      int int1 = (-1321);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Ljava.util.concurrent.ConcurrentSkipListMap", "r&F", (-1321), linkedHashMap0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("Ljava.util.concurrent.ConcurrentSkipListMap", sQLClientInfoException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(mockIllegalArgumentException0);
      DataTruncation dataTruncation0 = new DataTruncation(23, false, true, 23, (-1321), sQLNonTransientException0);
      TypeUtils.isHibernateInitialized(dataTruncation0);
      TypeUtils.decapitalize((String) null);
      Class<Float> class0 = Float.class;
      TypeUtils.getSerializeFeatures(class0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      MockDateFormat.getDateTimeInstance();
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockDateFormat0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Object> class0 = Object.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ljava.awt.Color");
      TypeUtils.castToSqlTime((Object) null);
      Class<Point> class0 = Point.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(stackTraceElementDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class1);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(2, list0.size());
      
      TypeUtils.getGenericParamType(class0);
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
      
      Locale locale0 = TypeUtils.toLocale("yyyy-MM-dd'T'HH:mm:ss");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.awt.Rectangle");
      TypeUtils.toLocale("WRITE_MAP_NULL_FEATURES");
      Class<Byte> class0 = Byte.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Locale locale0 = TypeUtils.toLocale("L");
      assertEquals("l", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.castToBigDecimal((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getGenericParamType(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(identityHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.isNumber("");
      TypeUtils.loadClass("");
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.isPath(class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", weakHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(" not found");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value :  not found
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.Object@46ec133
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      java.util.IdentityHashMap<ImageCapabilities, Jdk8DateCodec> identityHashMap0 = new java.util.IdentityHashMap<ImageCapabilities, Jdk8DateCodec>();
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.JSONPath$Operator");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.castToBigDecimal((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.loadClass("?|uv]G0Rv\"Cc:7jWZO/");
      TypeUtils.getCollectionItemClass((Type) null);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getCollectionItemType(class1);
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      TypeUtils.isHibernateInitialized(linkedHashSet0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.keySet();
      TypeUtils.computeGetters(class1, (Map<String, String>) linkedHashMap0);
      TypeUtils.getCollectionItemClass(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(timeDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.clearClassMapping();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      String string0 = null;
      Field[] fieldArray0 = new Field[2];
      Class<VerifyError> class1 = VerifyError.class;
      String string1 = "Ljava.awt.Point";
      Class<JSONObject> class2 = JSONObject.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.toString();
      Map<String, Field> map0 = null;
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues(4125L, biFunction0);
      concurrentHashMap0.put("f[Tu!R7[MPm4", "getConstructors");
      boolean boolean0 = true;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      Class<?> class1 = TypeUtils.loadClass(" &t|<0Qr_j'4fHLy?", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.lang.AutoCloseable");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.lang.AutoCloseable\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.isNumber("x DX~O(vQ~@D.");
      TypeUtils.decapitalize("L");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "vlu5ErB)Z1C-#'V";
      TypeUtils.loadClass("vlu5ErB)Z1C-#'V");
      TypeUtils.toLocale("vlu5ErB)Z1C-#'V");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.util.BitSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = TypeUtils.castToInt("0");
      assertNotNull(integer0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":true,\"deserializers\":{},\"fieldBased\":true,\"symbolTable\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      javaBeanSerializer0.applyName(jSONSerializer0, (Object) null, "[I");
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.getCollectionItemType(class1);
      Class<SQLDataException> class2 = SQLDataException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) concurrentHashMap0, true);
      TypeUtils.castToBigDecimal((Object) null);
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("p4PB$7{i");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(illegalMonitorStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.IllegalMonitorStateException: p4PB$7{i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "4qO";
      TypeUtils.isNumber("4qO");
      String string1 = "'hOIH0R_k,v)'";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'hOIH0R_k,v)'", "4qO", (-3994));
      SQLWarning sQLWarning0 = new SQLWarning("'hOIH0R_k,v)'", "'hOIH0R_k,v)'", sQLTransactionRollbackException0);
      sQLWarning0.spliterator();
      // Undeclared exception!
      try { 
        sQLTransactionRollbackException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.util.BitSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isNumber("1zz9d*R");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DecimalFormat decimalFormat0 = new DecimalFormat("j");
      mockSimpleDateFormat0.setNumberFormat(decimalFormat0);
      mockSimpleDateFormat0.getTimeZone();
      String string0 = TypeUtils.castToString(mockSimpleDateFormat0);
      assertNotNull(string0);
      
      Class<Short> class0 = Short.TYPE;
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Float> class0 = Float.TYPE;
      TypeUtils.isGenericParamType(class0);
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException("pZ~");
      numberFormatException0.getStackTrace();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("pZ~");
      numberFormatException0.addSuppressed(outOfMemoryError0);
      numberFormatException0.printStackTrace();
      numberFormatException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.NumberFormatException: pZ~
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.fnv1a_64("0");
      Date date0 = TypeUtils.castToDate("0");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.fnv1a_64("eb43h");
      Class<UUID> class0 = UUID.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put(":true", "org.springframework.security.core.context.SecurityContextImpl");
      Function<Object, PropertyProcessableDeserializer> function0 = (Function<Object, PropertyProcessableDeserializer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEachValue((-1038L), (Function<? super String, ? extends PropertyProcessableDeserializer>) function0, (Consumer<? super PropertyProcessableDeserializer>) consumer0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "a";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(treeMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValues(1171L, biFunction0);
      concurrentHashMap0.put("J|T$v-USW+GCC?", "Ljava.awt.Color");
      Class<SQLException> class0 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType1, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy1);
      Class<Timestamp> class1 = Timestamp.class;
      TypeUtils.isProxy(class1);
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockThaiBuddhistDate0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.awt.Font");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Class<?>) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("eb43h");
      assertEquals((-556104002755779947L), long0);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<BitSet> class0 = BitSet.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      classLoader0.setClassAssertionStatus("_n|)1", true);
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      ClassLoader classLoader2 = classLoader1.getParent();
      classLoader2.clearAssertionStatus();
      Class<?> class1 = TypeUtils.loadClass("java.util.BitSet", (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNotNull(class1);
      
      long long1 = TypeUtils.fnv1a_64_lower("5U ");
      assertEquals(2570773737628743597L, long1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "Ljava.awt.Color";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Ljava.awt.Color");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Color
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.castToBigDecimal((Object) null);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils.loadClass("?|uv]G0Rv\"Cc:7jWZO/");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("?|uv]G0Rv\"Cc:7jWZO/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ?|uv]G0Rv\"Cc:7jWZO/
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "Ljava.awt.Font";
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("Ljava.awt.Font");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Ljava.awt.Font
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.isPath(class0);
      TypeUtils.loadClass((String) null);
      Class<Boolean> class1 = Boolean.TYPE;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Long long0 = TypeUtils.cast((Object) null, (Type) class2, parserConfig0);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      StackOverflowError stackOverflowError0 = new StackOverflowError((String) null);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      Class<ChoiceFormat> class2 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      Class<DataTruncation> class0 = DataTruncation.class;
      DataTruncation dataTruncation0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.castToLong((Object) null);
      TypeUtils.fnv1a_64_lower("We=EzC(A");
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(808);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError((String) null);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("class java.text.ChoiceFormat", class1.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{x");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.Object@2e3f7e4a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeMap0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      TypeUtils.getClassFromMapping("isfillInStackTrace");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mapDeserializer0, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TypeUtils.loadClass("Ljava.awt.Color");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("Ljava.awt.Color");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      ParserConfig parserConfig0 = new ParserConfig();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, (ParserConfig) null);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Random.setNextRandom(95);
      Collator.getInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<BitSet> class0 = BitSet.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<AtomicLong> class0 = AtomicLong.class;
      TypeUtils.isPath(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Exception> class1 = Exception.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.getClass((Type) class0);
      Class<DataTruncation> class1 = DataTruncation.class;
      TypeUtils.isPath(class1);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(110);
      Boolean boolean0 = TypeUtils.castToBoolean(atomicInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("0{lAE4c<0(lS=;y", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("0{lAE4c<0(lS=;y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 0{lAE4c<0(lS=;y
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      TypeUtils.isHibernateInitialized(linkedHashMap0);
      TypeUtils.decapitalize("java.awt.Rectangle");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("java.awt.Rectangle");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      StackOverflowError stackOverflowError0 = new StackOverflowError("\"S`MnR");
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("getgetNextException");
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "\"S`MnR", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap1 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      DecimalFormatSymbols decimalFormatSymbols0 = TypeUtils.cast((Object) linkedHashMap0, class0, parserConfig0);
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) linkedHashMap0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      TypeUtils.loadClass((String) null);
      TypeUtils.castToBigInteger((Object) null);
      TreeSet<NumberFormatException> treeSet0 = new TreeSet<NumberFormatException>();
      LinkedHashSet<NumberFormatException> linkedHashSet0 = new LinkedHashSet<NumberFormatException>(treeSet0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      AtomicLong atomicLong0 = new AtomicLong((-1129L));
      TypeUtils.castToDate(atomicLong0);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "; b,6ih28TiMO6~IVt";
      stringArray0[1] = "St!\"DRc.6NGXL`'WMh";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      typeArray0[2] = (Type) class1;
      typeArray0[3] = type0;
      typeArray0[4] = (Type) genericArrayType0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fileSystemHandling0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@8574b147
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("currencySymbol", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("currencySymbol", class1, class2, class2, (Field) null, (-1635), (-402), (-402));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class3 = beanContext0.getFieldClass();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class3).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(" not found");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.unwrapOptional(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(" not found");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      Class<SQLWarning> class1 = SQLWarning.class;
      MockThread mockThread0 = new MockThread((Runnable) null);
      MockThread mockThread1 = new MockThread(mockThread0, "");
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Float float0 = new Float((-2319.289F));
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class1;
      TypeUtils.getClassFromMapping("fastjson.parser.autoTypeAccept");
      typeArray0[1] = (Type) null;
      Class<Character> class2 = Character.TYPE;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[2]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) float0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {\"infinite\":{},\"NaN\":{}}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.clear();
      Class<Float> class0 = Float.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedHashMap<MockMinguoDate, NoSuchFieldException> linkedHashMap0 = new LinkedHashMap<MockMinguoDate, NoSuchFieldException>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("=U{IqK");
      linkedHashMap0.put(mockMinguoDate0, noSuchFieldException0);
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      linkedHashMap0.put(mockMinguoDate1, (NoSuchFieldException) null);
      linkedHashMap0.put(mockMinguoDate1, (NoSuchFieldException) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@10b2c3f1=java.lang.NoSuchFieldException: =U{IqK, org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@19839d68=null}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(" not found");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value :  not found
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<Object> class0 = Object.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.createCollection(class0);
      Class<AtomicLong> class1 = AtomicLong.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) " not found", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Class<SQLException> class1 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) " not found", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      TypeUtils.fnv1a_64_lower("J3");
      ThreadGroup threadGroup0 = new ThreadGroup("g&g");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "g&g", (-1L));
      MockThread.reset();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("qv<}o^", classLoader0, true);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Collator.getInstance();
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.isNumber("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("java.lang.StackOverflowError@ 000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.StackOverflowError@ 000000001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "not( foun";
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("not( foun");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"not( foun\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("EMPTY_THROWABLE_ARRAY");
      assertEquals("empty_THROWABLE_ARRAY", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class [S
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      mockIllegalAccessException0.getCause();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.awt.GridBagConstraints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<IllegalAccessException> class0 = IllegalAccessException.class;
      TypeUtils.unwrapOptional(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`V]|=rCt");
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientException0);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException(" GF", sQLWarning0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(typeNotPresentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.TypeNotPresentException: Type  GF not present
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Double double0 = new Double(426.97953584080096);
      java.sql.Date date0 = TypeUtils.castToSqlDate(double0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Float float0 = new Float(3.0);
      TypeUtils.castToDate(float0);
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<SQLException> class1 = SQLException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SQLException sQLException0 = TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class1, parserConfig0);
      assertEquals(0, sQLException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockThread mockThread0 = new MockThread("9W6gcI6 vp");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " not found");
      ThreadGroup threadGroup0 = new ThreadGroup("hashCode");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "utf8 decode error, ");
      threadGroup1.checkAccess();
      mockThread0.setUncaughtExceptionHandler(threadGroup1);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass(" not found", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "9W6gcI6 vp", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockThread mockThread0 = new MockThread("9Wbgc36 vn");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " not found");
      ThreadGroup threadGroup0 = new ThreadGroup("hashCode");
      threadGroup0.checkAccess();
      mockThread0.setUncaughtExceptionHandler(threadGroup0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass(" not found", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "9Wbgc36 vn", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("A");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "fillInStackTrace");
      threadGroup0.checkAccess();
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null, "java.util.Optional");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      classLoader0.getParent();
      threadGroup0.getParent();
      TypeUtils.loadClass("java.util.Optional", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockThread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Thread[java.util.Optional,5,fillInStackTrace]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      Time time0 = new Time((-1L));
      int[] intArray0 = new int[9];
      intArray0[0] = 62;
      intArray0[1] = (-2936);
      intArray0[2] = (-1933784964);
      intArray0[3] = 21;
      intArray0[4] = (-1896);
      intArray0[5] = (-545);
      intArray0[6] = 5;
      intArray0[7] = (-297);
      intArray0[8] = 91;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      Class<Boolean> class0 = Boolean.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) intArray0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [I@16b3c9ac
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToSqlTime("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      List<FieldInfo> list0 = new Vector<FieldInfo>();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig(false);
      int[] intArray0 = new int[5];
      intArray0[1] = 49;
      intArray0[2] = 49;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      Class<Point> class0 = Point.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      Class<?> class1 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertEquals("interface java.util.List", class2.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.loadClass(">,NvmZy");
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.global;
      int[] intArray0 = new int[9];
      intArray0[0] = 2188;
      intArray0[1] = 1788;
      intArray0[2] = 1788;
      intArray0[3] = 1788;
      intArray0[4] = (-1823);
      intArray0[5] = 1788;
      intArray0[6] = 1788;
      intArray0[7] = 1788;
      intArray0[8] = 1788;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      mockNullPointerException0.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockNullPointerException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass("l$JX", classLoader0, true);
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.clearAssertionStatus();
      byte[] byteArray0 = new byte[3];
      classLoader0.setDefaultAssertionStatus(true);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-84);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("l$JX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"l$JX\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockThread mockThread0 = new MockThread("9W6gcI6 vp");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " not found");
      ThreadGroup threadGroup0 = new ThreadGroup("hashCode");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "utf8 decode error, ");
      threadGroup1.checkAccess();
      mockThread0.setUncaughtExceptionHandler(threadGroup1);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass(" not found", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(" not found");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" not found\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&1Hl", "&1Hl", 2926);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&1Hl", "getDateTimeInstance", 2926, sQLTransactionRollbackException0);
      linkedHashMap0.put(sQLTransactionRollbackException0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.util.TypeUtils", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.util.TypeUtils -> java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      String string0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      TypeUtils.isHibernateInitialized(sQLTransactionRollbackException0);
      Class<Calendar> class0 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLTransactionRollbackException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      String string0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      TypeUtils.isHibernateInitialized(sQLTransactionRollbackException0);
      Class<Calendar> class1 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLTransactionRollbackException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.global;
      int[] intArray0 = new int[6];
      intArray0[0] = 1770;
      intArray0[2] = (-1823);
      intArray0[3] = (-1823);
      intArray0[4] = (-1823);
      intArray0[5] = (-1823);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ArrayList<SQLDataException> arrayList0 = new ArrayList<SQLDataException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(weakHashMap0);
      weakHashMap0.put("@type", "?e");
      java.util.IdentityHashMap<InternalError, SQLWarning> identityHashMap0 = new java.util.IdentityHashMap<InternalError, SQLWarning>();
      jSONObject0.fluentRemove(identityHashMap0);
      Double double0 = new Double(3089);
      jSONObject0.fluentRemove(double0);
      TypeUtils.castToSqlTime(double0);
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("c[szzP[A}X$");
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, SQLInvalidAuthorizationSpecException>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig.getGlobalInstance();
      Class<Dimension> class2 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class2, (Type) class2, propertyNamingStrategy1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      LinkedHashMap<IllegalStateException, ClassLoader> linkedHashMap0 = new LinkedHashMap<IllegalStateException, ClassLoader>(41);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
