/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:35:14 GMT 2018
 */

package weka.classifiers.functions.supportVector;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import java.util.Enumeration;
import java.util.Random;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.functions.supportVector.PolyKernel;
import weka.classifiers.functions.supportVector.RegSMO;
import weka.classifiers.functions.supportVector.SMOset;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.Vote;
import weka.classifiers.rules.DecisionTable;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.TechnicalInformation;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegSMO_ESTest extends RegSMO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String string0 = regSMO0.getRevision();
      assertEquals("8034", string0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.buildClassifier((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SVM not initialized in optimizer. Use RegOptimizer.setSVMReg()
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      String[] stringArray0 = new String[0];
      regSMO0.setOptions(stringArray0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(991, 129.80631752652866, 129.80631752652866, 129.80631752652866, 991, 129.80631752652866, 129.80631752652866, 991, 129.80631752652866, 991, 129.80631752652866);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-600), (-600), (-600), (-600), (-2654), (-2654), (-613.68), (-2654), (-2654), 1.0E-8, (-2654));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      Enumeration enumeration0 = new NGramTokenizer();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(989, 989, (-7.0), 989, 989, 131.2, Double.POSITIVE_INFINITY, 989, 2.0, 1.0000000000000001E-20, 2.147483647E9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      Enumeration enumeration0 = new NGramTokenizer();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(991, 2.0, 991, Double.POSITIVE_INFINITY, 991, 991, 2.0, 991, 2.0, 991, (-3098.641713));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.wrapUp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      RegSMO regSMO0 = new RegSMO();
      try { 
        regSMO0.takeStep(909, 1152, 0L, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      int int0 = regSMO0.takeStep(10000, 10000, 10000, 10000, 10000);
      assertEquals(0, int0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(906, 1.0000000000000001E-20, 1.0000000000000001E-20, 0.0, 906, 906, 906, 906, 1.0000000000000001E-20, 906, 1.0000000000000001E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      boolean boolean0 = regSMO0.findOptimalPointOnLine((-2146805888), (-2146805888), 0.0, (-2146805888), (-2146805888), 0.0, 717.80212, 0.0, (-2146805888), (-2146805888), 387.5634661353145);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      regSMO0.listOptions();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1011, (-618.66582430967), 1.0000000000000001E-20, Double.POSITIVE_INFINITY, 1011, 1011, (-618.66582430967), 1011, (-618.66582430967), 1011, 1.0000000000000001E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextDouble();
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 1, 59, 59, 59, 59, 1, 59, 1, 59, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      int int0 = DecisionTable.EVAL_DEFAULT;
      regSMO0.m_nInstances = 1;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-219), 6150, (-219), 6150, 1, 1, 2600.334375118818, 1.0, 1.0, 1.0, (-219));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(2, 877.6111993133832, 2, 2, 2, 1.0, 3.526E-7, 3.526E-7, 1.0, 3.526E-7, 1201.74697029302);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      assertEquals(0.01, double0, 0.01);
      
      regSMO0.m_random = (Random) mockRandom0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 1, 59, 4565.00671, 59, 59, 1, 59, 1, 59, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 1, 59, 1, 59, (-2648.388800686617), 1, 59, 1, 59, (-2648.388800686617));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      int int0 = (-1331);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      regSMO0.m_random = (Random) mockRandom0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 1, (-1331), 4565.00671, (-1331), (-2648.3888006866173), 1, 2510.0, 1, 2510.0, (-2648.3888006866173));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(51, (-907.388079506319), 51, 51, 51, 0.0, (-907.388079506319), (-907.388079506319), 0.0, 51, 14.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      regSMO0.m_epsilon = (double) 59;
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(59.0, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      double double0 = regSMO0.m_alpha1Star;
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 1, 59, 4565.00671, 59, (-2648.388800686617), 1, 59, 1, 59, (-2648.388800686617));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(457, 1.0E75, 457, 2.0, 457, 1.0E75, 457, 1.0E75, 457, 1.0E75, 457);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(991, 2.142811289785719E9, (-1052.69962), (-3100.90060436186), 991, (-3100.90060436186), (-138.927336), (-3100.90060436186), (-138.927336), 1.0E-5, 2.3713014772152246);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      assertNotNull(wordTokenizer0);
      assertEquals(" \r\n\t.,;:'\"()?!", wordTokenizer0.getDelimiters());
      assertEquals("A simple tokenizer that is using the java.util.StringTokenizer class to tokenize the strings.", wordTokenizer0.globalInfo());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", wordTokenizer0.delimitersTipText());
      
      regSMO0.m_b = (double) 906;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(906, (-139.2098131568747), 1.0000000000000001E-20, 906.0, 906, 906, 906, 906, (-139.2098131568747), 906, 1.0000000000000001E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(991, (-138.927336), 1.0000000000000001E-20, Double.POSITIVE_INFINITY, 991, 991, 2.0, 991, (-138.927336), 991, (-3098.641713));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      assertNotNull(wordTokenizer0);
      assertEquals(" \r\n\t.,;:'\"()?!", wordTokenizer0.getDelimiters());
      assertEquals("A simple tokenizer that is using the java.util.StringTokenizer class to tokenize the strings.", wordTokenizer0.globalInfo());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", wordTokenizer0.delimitersTipText());
      
      regSMO0.m_b = (double) 906;
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(906, (-139.2098131568747), 1.0000000000000001E-20, Double.POSITIVE_INFINITY, 906, 906, 906, 906, (-139.2098131568747), 906, 1.0000000000000001E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      TechnicalInformation technicalInformation0 = regSMO0.getTechnicalInformation();
      assertNotNull(technicalInformation0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(technicalInformation0.hasAdditional());
      assertEquals(TechnicalInformation.Type.MISC, technicalInformation0.getType());
      
      // Undeclared exception!
      try { 
        regSMO0.secondChoiceHeuristic(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double double0 = regSMO0.getScore();
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(2146673395, 1173.0, 1.0E-10, 2312.692464, 884, 0.0, (-2.0), 2312.692464, 0.0, 2146673395, 884);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(991, (-138.927336), 2.0, Double.POSITIVE_INFINITY, 991, 991, 2.0, 991, (-138.927336), 991, (-3098.641713));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double double0 = regSMO0.getScore();
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine((-1667), (-1325.7), 0.0, 1.0, (-1667), (-125.19999999999999), 2146673395, (-3001.32118913), 324.3, 989.4748482728791, 1173.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      SMOreg sMOreg0 = regSMO0.m_SVM;
      assertNull(sMOreg0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(3, 0.1, 1, 0.1, 1, 0, 0, 0, 2, 1.5, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      double[] doubleArray0 = new double[1];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      doubleArray0[0] = (double) 1;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      regSMO0.setEpsilon(1);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0, regSMO0.getEpsilon(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      
      int int1 = regSMO0.secondChoiceHeuristic(1);
      assertFalse(int1 == int0);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0, regSMO0.getEpsilon(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), int1);
      
      try { 
        regSMO0.examineExample((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      Enumeration enumeration0 = new AlphabeticTokenizer();
      assertNotNull(enumeration0);
      
      SMOreg sMOreg0 = regSMO0.m_SVM;
      assertNull(sMOreg0);
      
      double double0 = 9.223372036854776E18;
      int int0 = 1801;
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1801, 2, 1282.400308365284, 1282.400308365284, 4476, 11.9198563, 0, 9.223372036854776E18, 596.371145633, 2, 1.0E-12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      assertNotNull(alphabeticTokenizer0);
      assertEquals("Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.", alphabeticTokenizer0.globalInfo());
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.setOptions(stringArray0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_nInstances = 36;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      
      int int0 = 30;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      assertNotNull(wordTokenizer0);
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", wordTokenizer0.delimitersTipText());
      assertEquals("A simple tokenizer that is using the java.util.StringTokenizer class to tokenize the strings.", wordTokenizer0.globalInfo());
      assertEquals(" \r\n\t.,;:'\"()?!", wordTokenizer0.getDelimiters());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(30, (-139.2098131568747), 1.0000000000000001E-20, Double.POSITIVE_INFINITY, 30, 30, 30, 30, (-139.2098131568747), 30, 1.0000000000000001E-20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      double double0 = 4565.00671;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      double double1 = regSMO0.m_alpha1Star;
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(3526, (-829.1391), 3526, 3526, 30, 59, 2600.72, 3526, (-2648.388800686617), 1, (-3.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[3];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      assertNotNull(alphabeticTokenizer0);
      assertEquals("Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.", alphabeticTokenizer0.globalInfo());
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      doubleArray0[0] = (double) 1;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      
      int int1 = LWL.TRICUBE;
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 1.0, 2, 1.0, 2, 2, 1.0, 1.0, 2, 2, (-2567L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[6];
      int int0 = SMOreg.FILTER_STANDARDIZE;
      assertEquals(1, int0);
      
      regSMO0.setSeed(1);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      assertNotNull(nGramTokenizer0);
      assertEquals("Splits a string into an n-gram with min and max grams.", nGramTokenizer0.globalInfo());
      assertEquals(1, nGramTokenizer0.getNGramMinSize());
      assertFalse(nGramTokenizer0.hasMoreElements());
      assertEquals("The min N of the NGram.", nGramTokenizer0.NGramMinSizeTipText());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", nGramTokenizer0.delimitersTipText());
      assertEquals(" \r\n\t.,;:'\"()?!", nGramTokenizer0.getDelimiters());
      assertEquals(3, nGramTokenizer0.getNGramMaxSize());
      assertEquals("The max N of the NGram.", nGramTokenizer0.NGramMaxSizeTipText());
      
      doubleArray0[1] = (double) 1;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((-2612L), (long) 1);
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 1, 1, 1, 1, 1, 0.0, 0.0, 1, 1, (-2612L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      
      double[] doubleArray0 = new double[6];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      doubleArray0[0] = (double) 1;
      double double0 = (-446.37);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling2);
      
      regSMO0.m_alpha1 = (-446.37);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      
      long long0 = (-2546L);
      MockRandom mockRandom0 = new MockRandom((-2546L));
      assertNotNull(mockRandom0);
      
      double double1 = (-3719.88);
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, (-2546L), 1, (-3719.88), 1, 0.01, 1.0, 1.0, 1, 0.01, (-2546L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      double[] doubleArray0 = new double[3];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      assertNotNull(alphabeticTokenizer0);
      assertEquals("Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.", alphabeticTokenizer0.globalInfo());
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      regSMO0.m_weights = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      
      int int1 = LWL.TRICUBE;
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 0.0, 2, 0.0, 2, 2, 0.0, 0.0, 2, 2, (-2567L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      double[] doubleArray0 = new double[6];
      int int0 = MultiClassClassifier.METHOD_ERROR_RANDOM;
      assertEquals(1, int0);
      
      regSMO0.setSeed(1);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      doubleArray0[1] = (double) 1;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, (-692.0735921), (-139.2098131568747), 592.2913654301527, 80, (-2.0), (-2.0), (-1492.2428), 592.2913654301527, 0.3, (-1631.86426));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 80
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[5];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1, regSMO0.getSeed());
      
      SMOreg sMOreg0 = new SMOreg();
      assertNotNull(sMOreg0);
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertFalse(sMOreg0.getDebug());
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      
      SelectedTag selectedTag0 = sMOreg0.getFilterType();
      assertNotNull(selectedTag0);
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertFalse(sMOreg0.getDebug());
      assertEquals("0", selectedTag0.toString());
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      
      Enumeration enumeration0 = sMOreg0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertFalse(sMOreg0.getDebug());
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(2, (-706.208038084662), 22.0, 3513.462547801608, 1, 1201.1747016, 1, 0, 1201.1747016, 990.4166465199519, 5.9E-9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[3];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      assertNotNull(nGramTokenizer0);
      assertEquals("The max N of the NGram.", nGramTokenizer0.NGramMaxSizeTipText());
      assertEquals(3, nGramTokenizer0.getNGramMaxSize());
      assertEquals(" \r\n\t.,;:'\"()?!", nGramTokenizer0.getDelimiters());
      assertEquals("Splits a string into an n-gram with min and max grams.", nGramTokenizer0.globalInfo());
      assertEquals(1, nGramTokenizer0.getNGramMinSize());
      assertEquals("The min N of the NGram.", nGramTokenizer0.NGramMinSizeTipText());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", nGramTokenizer0.delimitersTipText());
      assertFalse(nGramTokenizer0.hasMoreElements());
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertNotNull(fileSystemHandling2);
      
      doubleArray0[1] = (double) 1;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      int int1 = SGD.HINGE;
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      boolean boolean0 = regSMO0.findOptimalPointOnLine(1, (-18.75216147937331), 0, (-18.75216147937331), 0, (-18.75216147937331), 0.0, 0.0, 0, (-18.75216147937331), (-2613L));
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(boolean0);
      
      String string0 = regSMO0.epsilonTipText();
      assertNotNull(string0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray0 = new double[3];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      doubleArray0[0] = (double) 1;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.setEpsilon(853.4600220820575);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(853.4600220820575, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      boolean boolean0 = regSMO0.findOptimalPointOnLine(1, 1.0, 1, 1.0, 1, 853.4600220820575, 1.0, 1.0, 1, 853.4600220820575, (-2567L));
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(853.4600220820575, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertFalse(boolean0);
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double[] doubleArray0 = new double[5];
      int int0 = WrapperSubsetEval.EVAL_RMSE;
      assertEquals(3, int0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      doubleArray0[0] = (double) 3;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling2);
      
      doubleArray0[4] = (-446.37);
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      int int1 = SGD.HINGE;
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      regSMO0.setEpsilon(825.0189371374981);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertFalse(regSMO0.modelBuilt());
      assertEquals(825.0189371374981, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 3400.662033683934, (-1447.473478506716), (-3879.9280377027208), 919, (-2889.6216917375), (-3879.9280377027208), (-446.37), 919, 3400.662033683934, (-1082.982849));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 919
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      double[] doubleArray0 = new double[3];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      Enumeration enumeration0 = regSMO0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      doubleArray0[0] = (double) 1;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      double double0 = 6.283185307179586;
      int int1 = (-626);
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(1, 5.55555, 6.283185307179586, 853.4600220820575, (-626), 31.021379871876928, 1.0E-10, 2201.9999997798, (-2373.00704162), 787.27520142, 31.021379871876928);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -626
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray0 = new double[1];
      int int0 = KStarConstants.OFF;
      assertEquals(0, int0);
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      SMOset sMOset0 = new SMOset(0);
      assertNotNull(sMOset0);
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_supportVectors = sMOset0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, sMOset0.numElements());
      assertEquals(0, regSMO0.m_supportVectors.numElements());
      
      sMOset0.printElements();
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      SMOreg sMOreg0 = new SMOreg();
      assertNotNull(sMOreg0);
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      
      regSMO0.m_SVM = null;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      SelectedTag selectedTag0 = sMOreg0.getFilterType();
      assertNotNull(selectedTag0);
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals("0", selectedTag0.toString());
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      
      regSMO0.m_target = doubleArray0;
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(1, regSMO0.getSeed());
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      Enumeration enumeration0 = sMOreg0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(0, 0, 0, 3215.9689, 0, (-1558), 2, 0, 9.999999998999999E-7, 2, 1.0E-10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.functions.supportVector.SMOset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.1;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      doubleArray0[3] = 135.17525169225982;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      doubleArray0[4] = 0.3;
      doubleArray0[5] = 0.1;
      doubleArray0[3] = 135.17525169225982;
      regSMO0.m_alpha = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      doubleArray0[2] = (-1077.173);
      regSMO0.m_target = doubleArray1;
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      
      // Undeclared exception!
      try { 
        regSMO0.findOptimalPointOnLine(3, 1.0001, 3, (-1898.747), 3, 0.1, 0.3, 498.13, (-1898.747), 0.1, (-526.797694));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.1;
      doubleArray0[4] = 135.18201756372721;
      doubleArray0[0] = 0.1;
      doubleArray0[5] = 135.18201756372721;
      doubleArray0[3] = 0.0;
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[0] = 0.1;
      doubleArray0[6] = 135.18201756372721;
      regSMO0.m_target = doubleArray1;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      double[] doubleArray0 = new double[8];
      String string0 = regSMO0.globalInfo();
      assertNotNull(string0);
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      
      regSMO0.m_nEvals = 2;
      assertEquals(2, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertEquals(2, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      doubleArray0[0] = 0.1;
      doubleArray0[4] = 0.1;
      doubleArray0[0] = 0.1;
      doubleArray0[5] = 0.1;
      doubleArray0[3] = 0.0;
      regSMO0.m_alpha = doubleArray0;
      assertEquals(2, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      int int0 = regSMO0.secondChoiceHeuristic(860);
      assertEquals(2, regSMO0.getKernelEvaluations());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, int0);
      
      Instances instances0 = null;
      try { 
        regSMO0.init((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SVM not initialized in optimizer. Use RegOptimizer.setSVMReg()
         //
         verifyException("weka.classifiers.functions.supportVector.RegOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      double[] doubleArray0 = new double[1];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      regSMO0.m_alphaStar = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      SMOset sMOset0 = new SMOset(1);
      assertNotNull(sMOset0);
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_supportVectors = sMOset0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(0, sMOset0.numElements());
      assertEquals(0, regSMO0.m_supportVectors.numElements());
      
      sMOset0.printElements();
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_alpha = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      SMOreg sMOreg0 = new SMOreg();
      assertNotNull(sMOreg0);
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertFalse(sMOreg0.getDebug());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      
      regSMO0.m_SVM = null;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      SelectedTag selectedTag0 = sMOreg0.getFilterType();
      assertNotNull(selectedTag0);
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertFalse(sMOreg0.getDebug());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals("0", selectedTag0.toString());
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      
      regSMO0.m_target = doubleArray0;
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      
      Enumeration enumeration0 = sMOreg0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertFalse(sMOreg0.getDebug());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      
      boolean boolean0 = regSMO0.findOptimalPointOnLine(0, 0, 1, 3215.9689, 0, 1, 2, 1, 9.999999998999999E-7, 2, 1.0E-10);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertTrue(boolean0);
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      double[] doubleArray0 = new double[6];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      SMOset sMOset0 = new SMOset(1);
      assertNotNull(sMOset0);
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_supportVectors = sMOset0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, sMOset0.numElements());
      assertEquals(0, regSMO0.m_supportVectors.numElements());
      
      sMOset0.printElements();
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      SMOreg sMOreg0 = new SMOreg();
      assertNotNull(sMOreg0);
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      
      SelectedTag selectedTag0 = sMOreg0.getFilterType();
      assertNotNull(selectedTag0);
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("0", selectedTag0.toString());
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      
      Enumeration enumeration0 = sMOreg0.listOptions();
      assertNotNull(enumeration0);
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      boolean boolean0 = regSMO0.findOptimalPointOnLine(0, (-1.0), (-260.068225055), 1.0E-12, 0, 362.822096, 0, (-260.068225055), 645.0, 1, 1072.0762);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertTrue(boolean0);
      
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      double[] doubleArray0 = new double[20];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      SMOset sMOset0 = new SMOset(1);
      assertNotNull(sMOset0);
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_supportVectors = sMOset0;
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(0, sMOset0.numElements());
      assertEquals(0, regSMO0.m_supportVectors.numElements());
      
      regSMO0.m_bModelBuilt = false;
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      
      int int1 = regSMO0.secondChoiceHeuristic((-1558));
      assertFalse(int1 == int0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals((-1), int1);
      
      SMOreg sMOreg0 = new SMOreg();
      assertNotNull(sMOreg0);
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      
      PolyKernel polyKernel0 = new PolyKernel();
      assertNotNull(polyKernel0);
      assertFalse(polyKernel0.getUseLowerOrder());
      assertEquals("Turns on the output of debugging information.", polyKernel0.debugTipText());
      assertEquals(250007, polyKernel0.getCacheSize());
      assertEquals(0, polyKernel0.numEvals());
      assertFalse(polyKernel0.getDebug());
      assertEquals("The exponent value.", polyKernel0.exponentTipText());
      assertEquals(1.0, polyKernel0.getExponent(), 0.01);
      assertEquals("The size of the cache (a prime number), 0 for full cache and -1 to turn it off.", polyKernel0.cacheSizeTipText());
      assertEquals("Whether to use lower-order terms.", polyKernel0.useLowerOrderTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", polyKernel0.checksTurnedOffTipText());
      assertFalse(polyKernel0.getChecksTurnedOff());
      assertEquals("The polynomial kernel : K(x, y) = <x, y>^p or K(x, y) = (<x, y>+1)^p", polyKernel0.globalInfo());
      assertEquals(0, polyKernel0.numCacheHits());
      
      Vote vote0 = new Vote();
      assertNotNull(vote0);
      assertEquals("The random number seed to be used.", vote0.seedTipText());
      assertEquals(1, vote0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", vote0.debugTipText());
      assertEquals("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.", vote0.preBuiltClassifiersTipText());
      assertEquals("The combination rule used.", vote0.combinationRuleTipText());
      assertEquals("The base classifiers to be used.", vote0.classifiersTipText());
      assertFalse(vote0.getDebug());
      assertEquals(2, Vote.PRODUCT_RULE);
      assertEquals(1, Vote.AVERAGE_RULE);
      assertEquals(4, Vote.MIN_RULE);
      assertEquals(3, Vote.MAJORITY_VOTING_RULE);
      assertEquals(6, Vote.MEDIAN_RULE);
      assertEquals(5, Vote.MAX_RULE);
      
      SelectedTag selectedTag0 = vote0.getCombinationRule();
      assertNotNull(selectedTag0);
      assertEquals("The random number seed to be used.", vote0.seedTipText());
      assertEquals(1, vote0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", vote0.debugTipText());
      assertEquals("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.", vote0.preBuiltClassifiersTipText());
      assertEquals("The combination rule used.", vote0.combinationRuleTipText());
      assertEquals("The base classifiers to be used.", vote0.classifiersTipText());
      assertFalse(vote0.getDebug());
      assertEquals("AVG", selectedTag0.toString());
      assertEquals(2, Vote.PRODUCT_RULE);
      assertEquals(1, Vote.AVERAGE_RULE);
      assertEquals(4, Vote.MIN_RULE);
      assertEquals(3, Vote.MAJORITY_VOTING_RULE);
      assertEquals(6, Vote.MEDIAN_RULE);
      assertEquals(5, Vote.MAX_RULE);
      
      sMOreg0.setFilterType(selectedTag0);
      assertEquals("The kernel to use.", sMOreg0.kernelTipText());
      assertEquals("The complexity parameter C.", sMOreg0.cTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg0.debugTipText());
      assertEquals("Determines how/if the data will be transformed.", sMOreg0.filterTypeTipText());
      assertEquals(1.0, sMOreg0.getC(), 0.01);
      assertEquals("The learning algorithm.", sMOreg0.regOptimizerTipText());
      assertFalse(sMOreg0.getDebug());
      assertEquals("The random number seed to be used.", vote0.seedTipText());
      assertEquals(1, vote0.getSeed());
      assertEquals("If set to true, classifier may output additional info to the console.", vote0.debugTipText());
      assertEquals("The pre-built serialized classifiers to include. Multiple serialized classifiers can be included alongside those that are built from scratch when this classifier runs. Note that it does not make sense to include pre-built classifiers in a cross-validation since they are static and their models do not change from fold to fold.", vote0.preBuiltClassifiersTipText());
      assertEquals("The combination rule used.", vote0.combinationRuleTipText());
      assertEquals("The base classifiers to be used.", vote0.classifiersTipText());
      assertFalse(vote0.getDebug());
      assertEquals("AVG", selectedTag0.toString());
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, Vote.PRODUCT_RULE);
      assertEquals(1, Vote.AVERAGE_RULE);
      assertEquals(4, Vote.MIN_RULE);
      assertEquals(3, Vote.MAJORITY_VOTING_RULE);
      assertEquals(6, Vote.MEDIAN_RULE);
      assertEquals(5, Vote.MAX_RULE);
      
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      assertNotNull(nGramTokenizer0);
      assertEquals(" \r\n\t.,;:'\"()?!", nGramTokenizer0.getDelimiters());
      assertEquals("The max N of the NGram.", nGramTokenizer0.NGramMaxSizeTipText());
      assertFalse(nGramTokenizer0.hasMoreElements());
      assertEquals("Splits a string into an n-gram with min and max grams.", nGramTokenizer0.globalInfo());
      assertEquals(1, nGramTokenizer0.getNGramMinSize());
      assertEquals("The min N of the NGram.", nGramTokenizer0.NGramMinSizeTipText());
      assertEquals(3, nGramTokenizer0.getNGramMaxSize());
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", nGramTokenizer0.delimitersTipText());
      
      boolean boolean0 = regSMO0.findOptimalPointOnLine(0, 0, 1, 1, 0, (-1558), 1, (-1558), (-1558), 2, 0);
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertTrue(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(1);
      try { 
        regSMO0.optimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.supportVector.RegSMO", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      double[] doubleArray0 = new double[1];
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      doubleArray0[0] = (double) 1;
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      regSMO0.m_alpha = regSMO0.m_alphaStar;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      SMOset sMOset0 = new SMOset(1);
      assertNotNull(sMOset0);
      assertEquals(0, sMOset0.numElements());
      
      regSMO0.m_supportVectors = sMOset0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, sMOset0.numElements());
      assertEquals(0, regSMO0.m_supportVectors.numElements());
      
      regSMO0.setEpsilon(1.0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      sMOset0.printElements();
      assertEquals(0, sMOset0.numElements());
      
      int int1 = SMO.FILTER_NORMALIZE;
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      SMOreg sMOreg0 = regSMO0.m_SVM;
      assertNull(sMOreg0);
      
      regSMO0.setSMOReg((SMOreg) null);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      MockRandom mockRandom0 = new MockRandom((-1558));
      assertNotNull(mockRandom0);
      
      SMOreg sMOreg1 = new SMOreg();
      assertNotNull(sMOreg1);
      assertEquals("Determines how/if the data will be transformed.", sMOreg1.filterTypeTipText());
      assertEquals("The learning algorithm.", sMOreg1.regOptimizerTipText());
      assertEquals(1.0, sMOreg1.getC(), 0.01);
      assertEquals("The kernel to use.", sMOreg1.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg1.debugTipText());
      assertEquals("The complexity parameter C.", sMOreg1.cTipText());
      assertFalse(sMOreg1.getDebug());
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      assertNotNull(normalizedPolyKernel0);
      assertEquals(0, normalizedPolyKernel0.numEvals());
      assertFalse(normalizedPolyKernel0.getUseLowerOrder());
      assertEquals(2.0, normalizedPolyKernel0.getExponent(), 0.01);
      assertEquals("Whether to use lower-order terms.", normalizedPolyKernel0.useLowerOrderTipText());
      assertEquals(0, normalizedPolyKernel0.numCacheHits());
      assertFalse(normalizedPolyKernel0.getChecksTurnedOff());
      assertEquals("Turns on the output of debugging information.", normalizedPolyKernel0.debugTipText());
      assertEquals("Turns time-consuming checks off - use with caution.", normalizedPolyKernel0.checksTurnedOffTipText());
      assertEquals(250007, normalizedPolyKernel0.getCacheSize());
      assertFalse(normalizedPolyKernel0.getDebug());
      assertEquals("The size of the cache (a prime number), 0 for full cache and -1 to turn it off.", normalizedPolyKernel0.cacheSizeTipText());
      assertEquals("The normalized polynomial kernel.\nK(x,y) = <x,y>/sqrt(<x,x><y,y>) where <x,y> = PolyKernel(x,y)", normalizedPolyKernel0.globalInfo());
      assertEquals("The exponent value.", normalizedPolyKernel0.exponentTipText());
      
      sMOreg1.setRegOptimizer(regSMO0);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals("Determines how/if the data will be transformed.", sMOreg1.filterTypeTipText());
      assertEquals("The learning algorithm.", sMOreg1.regOptimizerTipText());
      assertEquals(1.0, sMOreg1.getC(), 0.01);
      assertEquals("The kernel to use.", sMOreg1.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg1.debugTipText());
      assertEquals("The complexity parameter C.", sMOreg1.cTipText());
      assertFalse(sMOreg1.getDebug());
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int2 = SGDText.HINGE;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      sMOreg1.setC((-2.0));
      assertEquals("Determines how/if the data will be transformed.", sMOreg1.filterTypeTipText());
      assertEquals("The learning algorithm.", sMOreg1.regOptimizerTipText());
      assertEquals((-2.0), sMOreg1.getC(), 0.01);
      assertEquals("The kernel to use.", sMOreg1.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg1.debugTipText());
      assertEquals("The complexity parameter C.", sMOreg1.cTipText());
      assertFalse(sMOreg1.getDebug());
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      
      regSMO0.m_target = doubleArray0;
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      
      boolean boolean0 = regSMO0.findOptimalPointOnLine(0, 0, 1, 3215.9689, 0, (-1558), 0, 1, 9.999999998999999E-7, 2, 1.0E-10);
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals(1, regSMO0.getSeed());
      assertEquals(1.0, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertTrue(boolean0);
      
      String string0 = sMOset0.getRevision();
      assertNotNull(string0);
      assertEquals(0, sMOset0.numElements());
      assertEquals("8034", string0);
      
      TechnicalInformation technicalInformation0 = sMOreg1.getTechnicalInformation();
      assertNotNull(technicalInformation0);
      assertEquals(TechnicalInformation.Type.INPROCEEDINGS, technicalInformation0.getType());
      assertTrue(technicalInformation0.hasAdditional());
      assertEquals("Determines how/if the data will be transformed.", sMOreg1.filterTypeTipText());
      assertEquals("The learning algorithm.", sMOreg1.regOptimizerTipText());
      assertEquals((-2.0), sMOreg1.getC(), 0.01);
      assertEquals("The kernel to use.", sMOreg1.kernelTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", sMOreg1.debugTipText());
      assertEquals("The complexity parameter C.", sMOreg1.cTipText());
      assertFalse(sMOreg1.getDebug());
      assertEquals(1, SMOreg.FILTER_STANDARDIZE);
      assertEquals(2, SMOreg.FILTER_NONE);
      assertEquals(0, SMOreg.FILTER_NORMALIZE);
      
      regSMO0.optimize();
      regSMO0.getOptions();
      regSMO0.epsilonTipText();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RegSMO regSMO0 = new RegSMO();
      assertNotNull(regSMO0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      double[] doubleArray0 = new double[6];
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.m_alpha = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      regSMO0.m_alphaStar = doubleArray0;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      int int0 = WrapperSubsetEval.EVAL_FMEASURE;
      assertEquals(5, int0);
      
      regSMO0.m_target = regSMO0.m_alphaStar;
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      regSMO0.optimize();
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      String string0 = regSMO0.globalInfo();
      assertNotNull(string0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      assertEquals("Implementation of SMO for support vector regression as described in :\n\nA.J. Smola, B. Schoelkopf (1998). A tutorial on support vector regression.", string0);
      
      String[] stringArray0 = regSMO0.getOptions();
      assertNotNull(stringArray0);
      assertEquals("The epsilon for round-off error (shouldn't be changed).", regSMO0.epsilonTipText());
      assertEquals(1.0E-12, regSMO0.getEpsilon(), 0.01);
      assertEquals("The epsilon parameter of the epsilon insensitive loss function.(default 0.001).", regSMO0.epsilonParameterTipText());
      assertEquals((-1), regSMO0.getCacheHits());
      assertEquals(0, regSMO0.getKernelEvaluations());
      assertEquals(0.001, regSMO0.getEpsilonParameter(), 0.01);
      assertFalse(regSMO0.modelBuilt());
      assertEquals("Seed for random number generator.", regSMO0.seedTipText());
      assertEquals(1, regSMO0.getSeed());
      
      Instances instances0 = regSMO0.m_data;
      assertNull(instances0);
      
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("A.J. Smola and B. Schoelkopf", "@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
