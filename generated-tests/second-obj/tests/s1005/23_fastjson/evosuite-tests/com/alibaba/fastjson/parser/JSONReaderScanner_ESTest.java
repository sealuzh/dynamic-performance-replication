/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:23:01 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1531);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~(hddsp~*V*6^>;8?2");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-2922), 1267);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P");
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      assertEquals('P', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = jSONReaderScanner0.indexOf('}', 0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TN?^a\"{&N=A/ql3h%/");
      jSONReaderScanner0.subString(0, 0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(70, charArray0, (-686), 99999999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cov.alibaba.fastjson.parser.JSONReaderScanner");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.compatibleWithJavaBean");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.isEOF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65279, 65279);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.bytesValue();
      int int0 = Calendar.ALL_STYLES;
      boolean boolean1 = jSONReaderScanner0.isEOF();
      assertFalse(boolean1 == boolean0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.bytesValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65292, (-1346));
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 3);
      char char0 = jSONReaderScanner0.next();
      assertEquals('\u001A', char0);
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      jSONReaderScanner0.copyTo(0, 0, charArray0);
      boolean boolean1 = jSONReaderScanner0.isBlankInput();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", fieldName ");
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean0);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2", 1553);
      char char0 = File.pathSeparatorChar;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(0, (-2661));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2661
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-4970), (-1490));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1490
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 85, (-9));
      char char0 = JSONLexer.EOI;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.indexOf('\u001A', 85);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(85, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone.getTimeZone("1.2.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.next();
      jSONReaderScanner0.sp = (int) '.';
      jSONReaderScanner0.isEOF();
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u[F");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!", 3);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.sub_chars(0, 0);
      jSONReaderScanner0.stringVal();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iT0");
      jSONReaderScanner0.indexOf('\u0086', 0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '~');
      jSONReaderScanner0.matchField(charArray0);
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      jSONReaderScanner0.bytesValue();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2192));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone.getTimeZone("P");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.next();
      jSONReaderScanner0.sp = 28;
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3789);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = jSONReaderScanner0.locale;
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.hasSpecial = true;
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.subString(3789, 3789);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone.getTimeZone("1.2.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.sp = 28;
      char char0 = JSONLexer.EOI;
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.numberString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|");
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 26);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      Locale locale0 = Locale.CANADA;
      jSONReaderScanner0.close();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'A|\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      Locale locale0 = Locale.ENGLISH;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.JAPANESE;
      locale1.getDisplayCountry(locale0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)32;
      charArray0[4] = '|';
      charArray0[2] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '^', '|');
      jSONReaderScanner0.matchStat = (int) (byte)32;
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.bp = 76;
      jSONReaderScanner0.bp = 16384;
      Locale locale0 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.spliterator();
      linkedList0.toArray();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      jSONReaderScanner0.setLocale(locale0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e", (-711));
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'A|\"");
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      ZoneInfo zoneInfo0 = (ZoneInfo)jSONReaderScanner0.timeZone;
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0, locale0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer('\u00A7');
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanLong('M');
      charArray0[0] = '\u00A7';
      jSONReaderScanner0.putChar('X');
      jSONReaderScanner0.stringVal();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      jSONReaderScanner0.putChar('4');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanString();
      SymbolTable symbolTable0 = new SymbolTable(968);
      jSONReaderScanner0.addSymbol(56, 618, 56, symbolTable0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO : ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TODO : ");
      TimeZone.getTimeZone("S1$lE*x");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("S1$lE*x");
      jSONReaderScanner1.stringVal();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("?x#wC");
      jSONReaderScanner1.isRef();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^\"d`:'U*_LRqMB");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jSONReaderScanner1.putChar(']');
      jSONReaderScanner2.isEOF();
      jSONReaderScanner2.isBlankInput();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      jSONReaderScanner2.nextIdent();
      jSONReaderScanner1.numberString();
      jSONReaderScanner0.stringVal();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TOD : ", (-4209));
      jSONReaderScanner0.nextToken(65);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fieldName");
      boolean boolean0 = jSONReaderScanner1.hasSpecial;
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U].h]JKy tVq!k?^id{");
      TimeZone.getTimeZone("U].h]JKy tVq!k?^id{");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U].h]JKy tVq!k?^id{");
      int int0 = 12;
      jSONReaderScanner0.matchStat = 12;
      jSONReaderScanner0.bp = 12;
      jSONReaderScanner0.stringDefaultValue = "U].h]JKy tVq!k?^id{";
      jSONReaderScanner0.np = (-1342);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" R</gKsl>2");
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2079);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a009k)9)KQN|([1");
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 19);
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("RB/s/\"<oa]Q@JtBPzE", (-1279));
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArray0, 19);
      jSONReaderScanner3.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner3.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OD : ");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.setToken(98);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("]t^t0Ft^");
      byte byte0 = (byte)83;
      byte byte1 = (byte)12;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
