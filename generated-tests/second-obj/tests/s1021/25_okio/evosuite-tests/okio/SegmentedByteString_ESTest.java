/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:29:33 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(segmentedByteString0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.outputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals("US-ASCII");
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      boolean boolean0 = segmentedByteString0.rangeEquals((-2760), (byte[]) null, 52, (-2760));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.utf8 = "";
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteString0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      ByteString byteString0 = ByteString.EMPTY;
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      segmentedByteString0.rangeEquals((-2153), byteString0, (-102), 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.writeUtf8CodePoint(0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 0);
      segmentedByteString0.hashCode();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0.buffer);
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShortLe(281);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.sha256();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint(0);
      realBufferedSink0.toString();
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      buffer1.writeLong((-1102L));
      segmentedByteString0.write(buffer1);
      segmentedByteString0.hashCode();
      segmentedByteString0.sha1();
      boolean boolean0 = realBufferedSink1.closed;
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      buffer0.writeLong((-1102L));
      segmentedByteString0.write(realBufferedSink0.buffer);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      boolean boolean0 = realBufferedSink1.closed;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = buffer1.writeUtf8CodePoint(0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      buffer3.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.getByte(0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString((long) (byte)0);
      boolean boolean0 = segmentedByteString0.startsWith(byteString0);
      assertTrue(boolean0);
      
      segmentedByteString0.hex();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.toString();
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(0);
      realBufferedSink0.writeLong(625L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      buffer0.writeLong((-1102L));
      segmentedByteString0.write(realBufferedSink0.buffer);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      boolean boolean0 = realBufferedSink1.closed;
      ByteString.decodeBase64("buffer([size=0])");
      segmentedByteString0.rangeEquals(1, (ByteString) null, (-793), 20);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(1, (-1835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeShortLe(281);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = 1;
      ByteString.of(byteArray0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.rangeEquals(2770, byteArray0, (-54), 2770);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s.limit == s.pos");
      segmentedByteString0.write(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=105 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = new Buffer();
      buffer0.toString();
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(0);
      byte byte0 = ObjectStreamConstants.TC_RESET;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      Buffer buffer3 = realBufferedSource0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.getByte(0);
      BufferedSink bufferedSink1 = bufferedSink0.emitCompleteSegments();
      Buffer buffer4 = realBufferedSink0.buffer();
      segmentedByteString0.write(buffer2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer4.readUtf8CodePoint();
      try { 
        ((RealBufferedSink) bufferedSink1).buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      ByteString byteString0 = realBufferedSink0.buffer.md5();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      segmentedByteString0.toByteArray();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[size=0]");
      boolean boolean0 = segmentedByteString0.rangeEquals(31, byteString0, (-79), (-3155));
      assertEquals(1, segmentedByteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint((-2049));
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byte[] byteArray0 = segmentedByteString0.toByteArray();
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      segmentedByteString0.hex();
      ByteString byteString1 = byteString0.hmacSha512(segmentedByteString0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      HashingSink.md5(buffer0);
      segmentedByteString0.equals(byteString1);
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((long) (-2049));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=-2049
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.emitCompleteSegments();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(0);
      byte byte0 = ObjectStreamConstants.TC_RESET;
      byte byte1 = ObjectStreamConstants.TC_RESET;
      buffer2.indexOf((byte) (-28), 1232L, 2147483639L);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)121);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      assertEquals(1, segmentedByteString0.size());
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      segmentedByteString0.getByte(0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      realBufferedSink0.buffer();
      boolean boolean0 = segmentedByteString0.rangeEquals(0, (byte[]) null, (-1546), (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(10);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.md5();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      buffer_UnsafeCursor0.next();
      segmentedByteString0.rangeEquals(0, buffer_UnsafeCursor0.data, 1, 1);
      segmentedByteString0.hex();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals("\n", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.md5();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      segmentedByteString0.toByteArray();
      buffer_UnsafeCursor0.next();
      segmentedByteString0.rangeEquals(0, buffer_UnsafeCursor0.data, 1, 1);
      segmentedByteString0.hex();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = segmentedByteString0.internalArray();
      segmentedByteString0.toByteArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertTrue(boolean0);
      
      segmentedByteString0.getByte(0);
      boolean boolean1 = segmentedByteString0.equals(charset0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(0);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      byte byte1 = ObjectStreamConstants.TC_BLOCKDATA;
      ByteString byteString0 = ByteString.EMPTY;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byteString0.indexOf((ByteString) segmentedByteString0, (-82));
      byte[] byteArray0 = segmentedByteString0.data;
      segmentedByteString0.rangeEquals(0, byteString0, (int) (byte)119, 1);
      // Undeclared exception!
      try { 
        segmentedByteString0.endsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeUtf8CodePoint(0);
      byte byte0 = ObjectStreamConstants.TC_BASE;
      boolean boolean0 = realBufferedSink0.closed;
      byte byte1 = ObjectStreamConstants.TC_EXCEPTION;
      ByteString byteString0 = ByteString.EMPTY;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.getByte(0);
      byte[] byteArray0 = segmentedByteString0.data;
      byteString0.startsWith((ByteString) segmentedByteString0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      buffer1.toString();
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      Segment segment0 = new Segment();
      ByteString byteString0 = buffer1.sha1();
      buffer1.head = segment0;
      segment0.owner = false;
      byteString0.hex();
      SegmentedByteString segmentedByteString0 = null;
      try {
        segmentedByteString0 = new SegmentedByteString(buffer0, 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(20);
      buffer1.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      segmentedByteString0.toByteArray();
      segmentedByteString0.hex();
      ByteString byteString0 = ByteString.decodeBase64("14");
      segmentedByteString0.equals(byteString0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=0 byteCount=20
         //
         verifyException("okio.Util", e);
      }
  }
}
