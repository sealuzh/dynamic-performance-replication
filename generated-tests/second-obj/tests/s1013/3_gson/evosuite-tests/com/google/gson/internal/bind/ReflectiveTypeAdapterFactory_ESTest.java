/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:18:49 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.ExclusionStrategy;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.Gson;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.UPPER_CAMEL_CASE;
      Class<ReflectiveTypeAdapterFactory.BoundField> class0 = ReflectiveTypeAdapterFactory.BoundField.class;
      TypeToken.get(class0);
      Excluder excluder0 = Excluder.DEFAULT;
      excluder0.withVersion(0.0);
      Class<ReflectiveTypeAdapterFactory.BoundField> class1 = ReflectiveTypeAdapterFactory.BoundField.class;
      TypeToken.get(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Gson gson0 = new Gson();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson");
      gson0.fromJson("", (Type) class0);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.append((CharSequence) "");
      gson0.toJson((Object) evoSuiteFile0, (Appendable) pipedWriter0);
      Class<Type> class2 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class2);
      assertNotNull(typeToken0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Gson gson0 = new Gson();
      Excluder excluder0 = Excluder.DEFAULT;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 1911;
      intArray0[2] = (-1);
      intArray0[4] = 16;
      excluder0.withModifiers(intArray0);
      ExclusionStrategy exclusionStrategy0 = mock(ExclusionStrategy.class, new ViolatedAssumptionAnswer());
      Excluder excluder1 = excluder0.excludeFieldsWithoutExposeAnnotation();
      Class<Type> class0 = Type.class;
      TypeToken<Type> typeToken0 = TypeToken.get(class0);
      gson0.getDelegateAdapter((TypeAdapterFactory) excluder1, typeToken0);
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ReflectiveTypeAdapterFactory.Adapter<String> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<String>((ObjectConstructor<String>) null, hashMap0);
      Gson gson0 = new Gson();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      JsonWriter jsonWriter0 = gson0.newJsonWriter(bufferedWriter0);
      charArrayWriter0.writeTo(bufferedWriter0);
      BiFunction<String, ReflectiveTypeAdapterFactory.BoundField, ReflectiveTypeAdapterFactory.BoundField> biFunction0 = (BiFunction<String, ReflectiveTypeAdapterFactory.BoundField, ReflectiveTypeAdapterFactory.BoundField>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      reflectiveTypeAdapterFactory_Adapter0.write(jsonWriter0, "JSON forbids NaN and infinities: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.write(jsonWriter0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      BiFunction<Object, ReflectiveTypeAdapterFactory.BoundField, ReflectiveTypeAdapterFactory.BoundField> biFunction0 = (BiFunction<Object, ReflectiveTypeAdapterFactory.BoundField, ReflectiveTypeAdapterFactory.BoundField>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ReflectiveTypeAdapterFactory.Adapter<Integer> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Integer>((ObjectConstructor<Integer>) null, hashMap0);
      StringReader stringReader0 = new StringReader("[V|rRO/c");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.read(jsonReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }
}
