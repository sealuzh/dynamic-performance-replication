/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 05:13:42 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.model.HttpRequestBody;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider0.setScheduler(queueScheduler0);
      spider1.getUUID();
      Page.fail();
      Request request0 = new Request();
      Page page0 = Page.fail();
      page0.setRequest(request0);
      String string0 = spider1.getUUID();
      assertNull(string0);
      
      Request request1 = new Request();
      int int0 = spider1.getThreadAlive();
      assertEquals(0, int0);
      
      Request request2 = new Request();
      request0.getExtras();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "AE`}j");
      spider2.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider0.thread(41);
      CollectorPipeline collectorPipeline0 = spider3.getCollectorPipeline();
      spider0.pipeline(collectorPipeline0);
      spider3.test(stringArray0);
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider4.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener1 = spiderMonitor0.new MonitorSpiderListener();
      linkedList0.add((SpiderListener) spiderMonitor_MonitorSpiderListener1);
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "00i=JJc!f~");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(121);
      spider0.getPageCount();
      spider0.getStartTime();
      Request request0 = new Request("|.Qs");
      Request request1 = request0.setCharset("_cycle_tried_times");
      request0.setUrl("|.Qs");
      HttpRequestBody httpRequestBody0 = new HttpRequestBody();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request2 = request1.setExtras(hashMap0);
      request2.setPriority((-1L));
      Request request3 = request2.setCharset("00i=JJc!f~");
      Request request4 = request3.setBinaryContent(false);
      request4.setUrl("_cycle_tried_times");
      request4.setCharset("");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.Spider");
      Spider spider1 = spider0.thread(121);
      spider1.setSpawnUrl(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onSuccess(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "00i=JJc!f~");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(121);
      spider0.getPageCount();
      spider0.getStartTime();
      Request request0 = new Request("|.Qs");
      request0.setPriority(0L);
      Request request1 = request0.setUrl("|.Qs");
      request1.setCharset("|.Qs");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Site site0 = Site.me();
      Site site1 = site0.setTimeOut(1186);
      Site site2 = site1.setTimeOut(1186);
      spider1.site = site2;
      Spider spider2 = spider0.setSpawnUrl(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Json json0 = new Json(linkedList0);
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      spider2.startRequest((List<Request>) null);
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "00i=JJc!f~");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(114);
      spider0.getPageCount();
      spider0.getStartTime();
      Page page0 = Page.fail();
      Request request0 = new Request();
      page0.setRequest(request0);
      spider0.getUUID();
      Request request1 = new Request();
      spider0.getThreadAlive();
      Request request2 = new Request();
      request1.getExtras();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("CNs4e", "?LaHvx.SAu\"oDjv");
      spider0.setDownloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_cycle_tried_times";
      spider0.pipeline(collectorPipeline0);
      stringArray0[1] = "_cycle_tried_times";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider0.setScheduler(queueScheduler0);
      spider2.getScheduler();
      Page page0 = Page.fail();
      spider1.getUUID();
      Request request0 = new Request();
      spider0.getThreadAlive();
      Request request1 = new Request();
      request1.getExtras();
      spider2.getCollectorPipeline();
      Request request2 = request1.setMethod((String) null);
      ResultItems resultItems0 = new ResultItems();
      Request request3 = request2.addHeader("_cycle_tried_times", "Spider {} closed! {} pages downloaded.");
      request0.setBinaryContent(true);
      spider1.extractAndAddRequests(page0, false);
      request2.setBinaryContent(false);
      request3.setPriority(1840L);
      request0.addCookie((String) null, (String) null);
      // Undeclared exception!
      try { 
        spider0.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider0.getSpiderListeners();
      spider0.uuid = "file.separator";
      Page page0 = new Page();
      page0.setSkip(true);
      Page page1 = new Page();
      page0.setCharset("file.separator");
      spider1.getScheduler();
      spider1.isSpawnUrl();
      spider0.isExitWhenComplete();
      Spider spider2 = spider0.thread(5000);
      spider1.getThreadAlive();
      Logger logger0 = (Logger)spider0.logger;
      spider1.logger = (org.slf4j.Logger) logger0;
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider2.pipeline(collectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      Spider.Status.fromValue(1190);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1190, threadPoolExecutor_AbortPolicy0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Page page2 = page0.setRawText("&aou.");
      spider0.sleep(0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider3.extractAndAddRequests(page2, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "AE`}j";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      spider1.getScheduler();
      Page.fail();
      spider0.getUUID();
      Request request0 = new Request();
      spider0.getThreadAlive();
      Request request1 = new Request();
      request1.setPriority((-1643L));
      request1.getExtras();
      spider1.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`}j");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("fe^zYDJsj");
      spider0.getUUID();
      Page page0 = new Page();
      page0.setRawText("fe^zYDJsj");
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(true);
      request1.getExtras();
      // Undeclared exception!
      try { 
        spider1.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.getSpiderListeners();
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider1.getUUID();
      ForkJoinPool.commonPool();
      spider1.setExitWhenComplete(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(",MKy0|x+j");
      Spider spider3 = spider2.setSpawnUrl(false);
      spider3.setSpiderListeners((List<SpiderListener>) null);
      spider1.getUUID();
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("F_+|qF7;~f");
      Request request1 = request0.setCharset((String) null);
      requestArray0[0] = request1;
      Request request2 = request1.addHeader("&aou.", "_cycle_tried_times");
      requestArray0[1] = request2;
      Request request3 = request0.setPriority(0L);
      requestArray0[2] = request3;
      // Undeclared exception!
      try { 
        spider3.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isExitWhenComplete());
      
      String[] stringArray0 = new String[0];
      spider0.exitWhenComplete = false;
      spider0.addUrl(stringArray0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Scheduler scheduler0 = spider1.getScheduler();
      assertSame(queueScheduler0, scheduler0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      spider1.getScheduler();
      Page.fail();
      spider0.getUUID();
      Request request0 = new Request();
      Request request1 = new Request();
      request0.getExtras();
      spider2.getCollectorPipeline();
      Request request2 = request0.setExtras((Map<String, Object>) null);
      request2.setPriority((-414L));
      Request request3 = request0.addCookie("_cycle_tried_times", "_cycle_tried_times");
      request1.setBinaryContent(true);
      request3.addCookie("_cycle_tried_times", (String) null);
      // Undeclared exception!
      try { 
        spider1.onError(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider0.getSpiderListeners();
      spider0.uuid = "file.separator";
      spider1.getScheduler();
      spider1.isSpawnUrl();
      spider0.isExitWhenComplete();
      Spider spider2 = spider0.thread(5000);
      spider1.getThreadAlive();
      Logger logger0 = (Logger)spider0.logger;
      spider1.logger = (org.slf4j.Logger) logger0;
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider2.pipeline(collectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      Spider.Status.fromValue(1190);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1190, threadPoolExecutor_AbortPolicy0);
      spider2.getThreadAlive();
      spider1.setEmptySleepTime(0);
      spider1.setExecutorService(scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider0.setScheduler(queueScheduler0);
      spider2.getScheduler();
      Page page0 = Page.fail();
      spider1.getUUID();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "83");
      Request request0 = new Request();
      Request request1 = new Request();
      request1.getExtras();
      spider2.getCollectorPipeline();
      request1.setExtras((Map<String, Object>) null);
      request0.addCookie("AE`}j", "Spider ");
      Request request2 = request1.setBinaryContent(false);
      request2.addCookie("_cycle_tried_times", "_cycle_tried_times");
      spider1.setEmptySleepTime(5);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, spider0, "AE`}j", 0L);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, false);
      spider2.setExecutorService(forkJoinPool0);
      Json json0 = page0.getJson();
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      spider0.setPipelines((List<Pipeline>) null);
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider0.getSpiderListeners();
      Page page0 = new Page();
      page0.setSkip(true);
      Page.fail();
      Scheduler scheduler0 = spider1.getScheduler();
      spider0.isExitWhenComplete();
      int int0 = 5000;
      Spider spider2 = spider0.thread(5000);
      spider2.scheduler = scheduler0;
      spider1.getThreadAlive();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.pipeline(collectorPipeline0);
      Spider spider4 = spider0.addPipeline(collectorPipeline0);
      spider4.scheduler(scheduler0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      // Undeclared exception!
      try { 
        spider3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      String string0 = "LUEVRHKTdrM";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("LUEVRHKTdrM");
      spider1.scheduler(fileCacheQueueScheduler0);
      spider0.scheduler(fileCacheQueueScheduler0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "00i=JJc!f~");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(121);
      spider0.getPageCount();
      spider0.getStartTime();
      Request request0 = new Request("|.Qs");
      Request request1 = request0.putExtra("us.codecraft.webmagic.Spider", simplePageProcessor0);
      Request request2 = request1.setCharset("|.Qs");
      Request request3 = request2.addHeader("us.codecraft.webmagic.Spider", "");
      Request request4 = request3.setExtras((Map<String, Object>) null);
      request4.setBinaryContent(false);
      request2.setPriority(121);
      request3.addCookie((String) null, "00i=JJc!f~");
      // Undeclared exception!
      try { 
        spider0.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider0.getSpiderListeners();
      String string0 = "file.separator";
      spider0.uuid = "file.separator";
      Page page0 = new Page();
      page0.setSkip(true);
      Page page1 = new Page();
      Scheduler scheduler0 = spider1.getScheduler();
      spider0.isExitWhenComplete();
      int int0 = 5000;
      Spider spider2 = spider0.thread(5000);
      spider2.scheduler = scheduler0;
      spider1.getThreadAlive();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.pipeline(collectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      spider2.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider3.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.pipeline((Pipeline) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedHashSet0);
      spider2.startUrls(linkedList0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(2813, 2813, 2813, timeUnit0, priorityBlockingQueue0, threadFactory0);
      BlockingQueue<Runnable> blockingQueue0 = threadPoolExecutor0.getQueue();
      ThreadPoolExecutor threadPoolExecutor1 = null;
      try {
        threadPoolExecutor1 = new ThreadPoolExecutor((-3268), (-1244), (-3268), timeUnit0, blockingQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.getSpiderListeners();
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.getUUID();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      int int0 = 30000;
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 30000);
      spider0.getUUID();
      Spider spider4 = spider0.setUUID("threadNum should be more than one!");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(",MKy0|x+j");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider4.scheduler(duplicateRemovedScheduler0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      // Undeclared exception!
      try { 
        spider3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`}j");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Page.fail();
      Request request0 = new Request("AE`}j");
      Request request1 = request0.setUrl("fe^zYDJsj");
      request1.getExtras();
      Request request2 = request1.setCharset("AE`}j");
      request2.setMethod("70Vcg");
      Request request3 = request1.setBinaryContent(true);
      request0.setPriority(1332L);
      request3.addCookie("us.codecraft.webmagic.selector.ReplaceSelector", "--\"^D");
      queueScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = Spider.create(simplePageProcessor0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider1.getUUID();
      Request request0 = new Request();
      Request request1 = new Request();
      request1.getExtras();
      spider0.getCollectorPipeline();
      Page page0 = Page.fail();
      page0.setRawText("&aE");
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList1);
      // Undeclared exception!
      try { 
        spider3.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider0.getSpiderListeners();
      spider0.uuid = "file.separator";
      Page page0 = new Page();
      page0.setSkip(true);
      Page page1 = new Page();
      spider1.getScheduler();
      spider1.isSpawnUrl();
      spider0.isExitWhenComplete();
      Spider spider2 = spider0.thread(5000);
      spider1.getThreadAlive();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider2.pipeline(collectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      Spider.Status.fromValue(1190);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1190, threadPoolExecutor_AbortPolicy0);
      // Undeclared exception!
      try { 
        spider2.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider0.getSpiderListeners();
      Page page0 = new Page();
      page0.setSkip(false);
      Page page1 = new Page();
      spider1.getScheduler();
      spider1.isSpawnUrl();
      spider0.isExitWhenComplete();
      Spider spider2 = spider0.thread(5000);
      spider1.getThreadAlive();
      Spider.Status.values();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider2.pipeline(collectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      MockThread.getDefaultUncaughtExceptionHandler();
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = spider0.setScheduler((Scheduler) null);
      assertTrue(spider2.isExitWhenComplete());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.setExitWhenComplete(false);
      spider3.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      spider3.startRequest(linkedList1);
      spider0.getUUID();
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "00i=JJc!f~");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(121);
      spider0.getPageCount();
      spider0.getStartTime();
      spider0.getScheduler();
      Spider spider1 = spider0.clearPipeline();
      spider1.getThreadAlive();
      Spider spider2 = spider1.thread(4);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider3 = spider1.setExitWhenComplete(false);
      Spider spider4 = spider3.pipeline(collectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList0);
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider0.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.getUUID();
      Spider spider3 = spider2.setUUID("_minus");
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_CallerRunsPolicy0);
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(true);
      Request request2 = request1.setUrl("_minus");
      request1.addHeader("Spider {} closed! {} pages downloaded.", "%%V,<0qm9|");
      Request request3 = request2.addHeader("%%V,<0qm9|", "Spider {} closed! {} pages downloaded.");
      // Undeclared exception!
      try { 
        spider3.onError(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      ResultItems resultItems0 = new ResultItems();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      multiPagePipeline0.process(resultItems0, spider0);
      spider1.scheduler((Scheduler) null);
      spider0.getStatus();
      boolean boolean0 = true;
      spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"d0A: E$('W`9M;");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.pipeline(multiPagePipeline0);
      ResultItems resultItems0 = new ResultItems();
      multiPagePipeline0.process(resultItems0, spider0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      spider1.getStatus();
      Spider spider2 = spider0.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider3.thread((ExecutorService) forkJoinPool0, 91);
      Spider spider4 = spider1.scheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider4.thread((ExecutorService) forkJoinPool0, (-5524));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(" +8ln:{A<\u0005");
      Spider spider0 = new Spider(simplePageProcessor1);
      Page page0 = Page.fail();
      page0.setSkip(true);
      spider0.getScheduler();
      spider0.isSpawnUrl();
      spider0.isExitWhenComplete();
      Spider spider1 = spider0.thread(4);
      int int0 = new Integer(4);
      Logger logger0 = (Logger)spider1.logger;
      spider1.logger = (org.slf4j.Logger) logger0;
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider1.pipeline(collectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.setEmptySleepTime(4);
      spider0.setSpiderListeners(linkedList0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`1}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`1}j");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      spider1.executorService = (ExecutorService) forkJoinPool0;
      Spider spider2 = spider1.thread(4);
      spider1.getThreadAlive();
      String[] stringArray0 = new String[0];
      spider2.getUUID();
      Spider spider3 = spider2.addUrl(stringArray0);
      Spider spider4 = spider0.clearPipeline();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider5 = spider4.startRequest(linkedList0);
      Spider spider6 = spider5.addUrl(stringArray0);
      Page page0 = Page.fail();
      spider6.extractAndAddRequests(page0, false);
      spider3.getSpiderListeners();
      spider3.setSpiderListeners((List<SpiderListener>) null);
      ForkJoinPool forkJoinPool1 = new ForkJoinPool(2);
      spider0.setExecutorService(forkJoinPool1);
      // Undeclared exception!
      try { 
        spider3.get("Sxege");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(" +8ln:{A<\u0005");
      Spider spider0 = new Spider(simplePageProcessor1);
      Page page0 = Page.fail();
      boolean boolean0 = true;
      page0.setSkip(true);
      spider0.getScheduler();
      spider0.isSpawnUrl();
      spider0.isExitWhenComplete();
      Spider spider1 = spider0.thread(4);
      spider1.getThreadAlive();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider2 = spider1.pipeline(collectorPipeline0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider2.setSpawnUrl(true);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      spider2.setSpawnUrl(false);
      Spider spider3 = spider2.clearPipeline();
      spider1.downloader((Downloader) null);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request(" +8ln:{A<\u0005");
      Request request1 = request0.addCookie(" +8ln:{A<\u0005", "");
      requestArray0[0] = request1;
      request1.getExtras();
      Request request2 = request0.setExtras((Map<String, Object>) null);
      requestArray0[1] = request2;
      Request request3 = request0.setBinaryContent(true);
      requestArray0[2] = request3;
      Request request4 = new Request();
      requestArray0[3] = request4;
      // Undeclared exception!
      try { 
        spider3.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.getSpiderListeners();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 470;
      Spider spider1 = spider0.thread(470);
      boolean boolean0 = false;
      Spider spider2 = spider1.setSpawnUrl(false);
      String string0 = "q%3>ql9597g}O\\e";
      Spider spider3 = spider2.setUUID("q%3>ql9597g}Oe");
      ForkJoinTask.getPool();
      spider3.setExecutorService((ExecutorService) null);
      String string1 = "},q";
      String string2 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("},q", "");
      Request request0 = new Request("q%3>ql9597g}Oe");
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download(request0, (Task) spider1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.JsonFilePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList1);
      LinkedList<Request> linkedList2 = new LinkedList<Request>();
      spider1.startRequest(linkedList2);
      spider0.getUUID();
      Page page0 = new Page();
      page0.setSkip(true);
      spider0.setUUID((String) null);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadPoolExecutor_CallerRunsPolicy0);
      Request request0 = new Request();
      Request request1 = request0.setUrl((String) null);
      Request request2 = request1.addHeader("6Sp_%%zEFsk", (String) null);
      request2.addHeader("_cycle_tried_times", "us.codecraft.webmagic.samples.scheduler.DelayQueueScheduler$RequestWrapper");
      // Undeclared exception!
      try { 
        spider1.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("V");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      boolean boolean0 = true;
      spider1.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", " stop fail!");
      spider1.setDownloader(phantomJSDownloader0);
      FilePipeline filePipeline0 = new FilePipeline("c!8zEP");
      Spider spider2 = Spider.create(simplePageProcessor0);
      spider2.pipeline(filePipeline0);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.scheduler((Scheduler) null);
      ReplaceSelector replaceSelector0 = new ReplaceSelector("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).", "Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "|F#";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|F#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string1 = "";
      Spider spider1 = spider0.setUUID("");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[7];
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequests = (List<Request>) linkedList0;
      stringArray0[0] = "|F#";
      spider2.setSpawnUrl(true);
      stringArray0[1] = "";
      priorityScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor1);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider0.getUUID();
      Page page0 = new Page();
      page0.setSkip(false);
      Spider spider3 = spider2.setUUID("us.codecraft.webmagic.pipeline.JsonFilePipeline");
      int int0 = 1;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39, threadFactory0);
      // Undeclared exception!
      try { 
        threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(spider3, scheduledThreadPoolExecutor0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "00i=JJc!f~");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(1587);
      spider0.getPageCount();
      spider0.getStartTime();
      spider0.getScheduler();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "00i=JJc!f~";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "]eE_B$D=B6(>l9C";
      stringArray0[4] = "";
      stringArray0[5] = "00i=JJc!f~";
      stringArray0[6] = "00i=JJc!f~";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("+V#u&SW");
      Spider spider0 = Spider.create(simplePageProcessor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.addPipeline(multiPagePipeline0);
      spider1.getStartTime();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("+V#u&SW");
      Spider spider0 = Spider.create(simplePageProcessor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpawnUrl(false);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.setScheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider3.get("+V#u&SW");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Request request0 = new Request();
      Request request1 = request0.setCharset("&aou.");
      Request request2 = request1.addCookie("&aou.", "_cycle_tried_times");
      Request request3 = request2.setBinaryContent(true);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request4 = request3.setExtras(hashMap0);
      linkedList0.add(request4);
      Spider spider3 = spider2.startRequest(linkedList0);
      String string0 = spider3.getUUID();
      assertNull(string0);
      
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      spider1.extractAndAddRequests(page1, false);
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider4 = Spider.create(simplePageProcessor0);
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("p~^#hGZ?Hy1(~GpX2d");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`}j");
      spider1.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.poll(spider1);
      Page.fail();
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("+V#u&SW");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      Spider spider1 = spider0.downloader((Downloader) null);
      spider1.isSpawnUrl();
      spider1.getStatus();
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AfE`}zj");
      Spider spider0 = new Spider(simplePageProcessor0);
      Locale locale0 = Locale.CHINA;
      locale0.getUnicodeLocaleKeys();
      Spider.Status.fromValue((-1));
      // Undeclared exception!
      try { 
        spider0.thread((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "AfE`}zj";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AfE`}zj");
      String string1 = "us.codecraft.webmagic.model.HttpRequestBody";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AfE`}zj");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider2.thread((-118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Yv");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.getUUID();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider2 = spider1.setSpawnUrl(false);
      spider2.thread((ExecutorService) forkJoinPool0, 2);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Yv");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setSpawnUrl(false);
      spider0.setExitWhenComplete(true);
      spider0.isSpawnUrl();
      assertFalse(spider0.isSpawnUrl());
      
      Spider spider1 = new Spider(simplePageProcessor0);
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}zj");
      String[] stringArray0 = new String[0];
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("AE`}zj");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      hashSetDuplicateRemover0.resetDuplicateCheck(spider0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      spider0.getStartTime();
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}zj");
      Spider spider0 = new Spider(simplePageProcessor0);
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.CHINA;
      locale1.getUnicodeLocaleKeys();
      Request request0 = new Request();
      Request request1 = request0.addCookie("AE`}zj", "");
      request1.addHeader("_cycle_tried_times", "java.io.tmpdir");
      // Undeclared exception!
      try { 
        spider0.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$VALUES", "us.codecraft.webmagic.scheduler.RedisScheduler");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.scheduler.RedisScheduler");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider2.scheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        hashSetDuplicateRemover0.isDuplicate((Request) null, spider1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}zj");
      String[] stringArray0 = new String[0];
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("AE`}zj");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(" +8ln:{A<\u0005");
      Spider spider0 = new Spider(simplePageProcessor1);
      Page page0 = Page.fail();
      page0.setSkip(true);
      spider0.getScheduler();
      spider0.isSpawnUrl();
      boolean boolean0 = spider0.isExitWhenComplete();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(" +8ln:{A<\u0005");
      Spider spider0 = new Spider(simplePageProcessor1);
      Page page0 = Page.fail();
      page0.setSkip(true);
      spider0.getScheduler();
      spider0.getSite();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider0.get("AE`}j");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      AtomicInteger atomicInteger0 = spiderMonitor_MonitorSpiderListener0.getSuccessCount();
      spider0.stat = atomicInteger0;
      spider0.setUUID("AE`}j");
      Locale locale0 = Locale.CHINA;
      locale0.getUnicodeLocaleKeys();
      List<Request> list0 = null;
      atomicInteger0.getAndIncrement();
      // Undeclared exception!
      try { 
        spider0.startRequest((List<Request>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider.Status.fromValue(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>(true);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(0, 0, 0, timeUnit0, synchronousQueue0, threadPoolExecutor_DiscardPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.thread((ExecutorService) null, 4);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.setScheduler((Scheduler) null);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      requestArray0[0] = request0;
      Request request1 = new Request();
      requestArray0[1] = request1;
      String string0 = "process request ";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("process request ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      spider1.thread(38);
      Page page0 = new Page();
      spider1.extractAndAddRequests(page0, false);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      
      Spider.Status spider_Status0 = Spider.Status.fromValue(38);
      assertEquals(Spider.Status.Init, spider_Status0);
      
      Spider spider2 = spider0.clearPipeline();
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`}j");
      String[] stringArray0 = new String[0];
      Spider spider2 = spider0.addUrl(stringArray0);
      spider2.setUUID((String) null);
      Spider spider3 = spider1.setUUID("AE`}j");
      spider3.isSpawnUrl();
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      spider1.thread(38);
      Spider spider2 = spider1.setUUID("");
      // Undeclared exception!
      try { 
        spider2.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      int int0 = 38;
      spider1.thread(38);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("AE`}j");
      // Undeclared exception!
      try { 
        spider0.get("AE`}j");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("p~^#hGZ?Hy1(~GpX2d");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`}j");
      spider0.setUUID("");
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      LinkedList<Selector> linkedList1 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList1);
      List<String> list0 = andSelector0.selectList("us.codecraft.webmagic.pipeline.ConsolePipeline");
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`}j");
      spider1.downloader((Downloader) null);
      Spider spider2 = spider1.pipeline((Pipeline) null);
      Spider spider3 = spider2.setExitWhenComplete(true);
      spider3.isSpawnUrl();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("YP");
      Spider spider2 = spider1.setExitWhenComplete(false);
      ForkJoinTask.getPool();
      spider2.setExecutorService((ExecutorService) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = ", extras=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", extras=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider1.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setUUID("");
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      Json json0 = page1.getJson();
      Class<Request> class0 = Request.class;
      json0.toList(class0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      // Undeclared exception!
      try { 
        spider1.thread((-719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D9RZst");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider2.setUUID("D9RZst");
      spider1.getScheduler();
      Spider spider4 = spider2.clearPipeline();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider5 = spider1.addPipeline(consolePipeline0);
      spider3.addPipeline(resultItemsCollectorPipeline0);
      String string0 = spider4.getUUID();
      assertNotNull(string0);
      
      spider0.setEmptySleepTime((-1));
      int int0 = spider5.getThreadAlive();
      assertEquals(0, int0);
      
      long long0 = spider2.getPageCount();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      spider1.downloader((Downloader) null);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"d0A: E$('W`9M;");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      ResultItems resultItems0 = new ResultItems();
      multiPagePipeline0.process(resultItems0, spider0);
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 3);
      spider4.start();
      spider4.stop();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.getSpiderListeners();
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      Page page2 = page1.setRawText("{?Z~g.^vt',uW^;5#");
      page2.setSkip(false);
      Spider spider2 = spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "e1<%SBc{sR65:7s]";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("e1<%SBc{sR65:7s]");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string1 = "#qF";
      Spider spider1 = spider0.setUUID("#qF");
      spider0.spawnUrl = false;
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      int int0 = 2263;
      spider2.thread(2263);
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`}j");
      spider1.downloader((Downloader) null);
      spider1.isSpawnUrl();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "Q";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Q");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(204, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.scheduler(queueScheduler0);
      String string1 = "";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider0.thread(38);
      spider1.getScheduler();
      Spider spider2 = spider0.addPipeline((Pipeline) null);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Yv");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.setPipelines(linkedList0);
      Spider spider2 = spider0.setExitWhenComplete(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      spider2.setDownloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setScheduler((Scheduler) null);
      Spider spider2 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list0 = new LinkedList<Request>();
      Spider spider3 = spider2.setExitWhenComplete(false);
      spider3.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider3.startRequest(linkedList0);
      assertFalse(spider2.isExitWhenComplete());
      
      spider0.getUUID();
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      spider1.thread(38);
      spider1.extractAndAddRequests((Page) null, false);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "&aou.";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = spider1.thread(38);
      spider2.getScheduler();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      Spider spider3 = spider1.pipeline(collectorPipeline0);
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider1 = spider0.startRequest(list0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider0.addPipeline(resultItemsCollectorPipeline0);
      spider2.setUUID("&aou.");
      spider1.getScheduler();
      spider1.setUUID("%20");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        spider0.sleep((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"d0A: E$('W`9M;");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      ResultItems resultItems0 = new ResultItems();
      multiPagePipeline0.process(resultItems0, spider0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 3);
      spider4.start();
      spider4.stop();
      // Undeclared exception!
      try { 
        spider3.setExecutorService(forkJoinPool0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider0.addPipeline(resultItemsCollectorPipeline0);
      Spider spider3 = spider2.setUUID("&aou.");
      spider1.getScheduler();
      spider1.setUUID("%20");
      // Undeclared exception!
      try { 
        spider3.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"d0A: E$('W`9M;");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.pipeline(multiPagePipeline0);
      ResultItems resultItems0 = new ResultItems();
      multiPagePipeline0.process(resultItems0, spider0);
      boolean boolean0 = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"d0A: E$('W`9M;";
      stringArray0[1] = "\"d0A: E$('W`9M;";
      stringArray0[2] = "\"d0A: E$('W`9M;";
      stringArray0[3] = "\"d0A: E$('W`9M;";
      stringArray0[4] = "\"d0A: E$('W`9M;";
      stringArray0[5] = "\"d0A: E$('W`9M;";
      stringArray0[6] = "\"d0A: E$('W`9M;";
      stringArray0[7] = "\"d0A: E$('W`9M;";
      spider0.getStatus();
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"d0A: E$('W`9M;");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      ResultItems resultItems0 = new ResultItems();
      multiPagePipeline0.process(resultItems0, spider0);
      boolean boolean0 = true;
      Spider spider2 = spider1.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      ForkJoinTask.getPool();
      Spider spider4 = spider3.thread((ExecutorService) null, 3);
      spider4.start();
      spider4.stop();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request("");
      request0.setPriority(0L);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      ResultItems resultItems0 = new ResultItems();
      multiPagePipeline0.process(resultItems0, spider0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "_cycle_tried_times");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      spider2.getScheduler();
      long long0 = spider2.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Spider ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider2.setPipelines(linkedList0);
      Json json0 = new Json((List<String>) null);
      Class<String> class0 = String.class;
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|F#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      Spider spider2 = Spider.create(simplePageProcessor0);
      Spider spider3 = spider1.setExitWhenComplete(false);
      spider3.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      AtomicInteger atomicInteger0 = spider0.stat;
      spider3.stat = atomicInteger0;
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.startRequest(linkedList0);
      spider3.getUUID();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"d0A: E$('W`9M;");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      ResultItems resultItems0 = new ResultItems();
      multiPagePipeline0.process(resultItems0, spider0);
      boolean boolean0 = true;
      Spider spider2 = spider1.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider4 = spider3.thread((ExecutorService) forkJoinPool0, 3);
      spider4.start();
      spider4.stop();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("AE`}j");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("AE`}j");
      Spider spider2 = spider1.downloader((Downloader) null);
      assertTrue(spider2.isExitWhenComplete());
      
      spider2.setExitWhenComplete(false);
      assertFalse(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$VALUES");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.addPipeline(consolePipeline0);
      boolean boolean0 = false;
      spider2.setSpawnUrl(false);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&aou.");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider3 = spider2.startRequest(linkedList0);
      String string0 = spider3.getUUID();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
      assertEquals(0L, spider3.getPageCount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider ");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.selector.RegexResult", "Spider ");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(5);
      Spider spider4 = spider3.downloader(phantomJSDownloader1);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "#l]eivL\")(7\"Z(zcAY");
      requestArray0[0] = request1;
      Request request2 = request1.putExtra("#l]eivL\")(7\"Z(zcAY", (Object) null);
      requestArray0[1] = request2;
      Request request3 = request0.setUrl("Thread interrupted when sleep");
      requestArray0[2] = request3;
      Request request4 = request0.addHeader("", "_cycle_tried_times");
      requestArray0[3] = request4;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("^Nebwn\"`Oug");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("^Nebwn\"`Oug");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      int int0 = (-2290);
      // Undeclared exception!
      try { 
        spider1.thread((-2290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "process request ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ExecutorService executorService0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "_cycle_tried_times");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      spider2.getScheduler();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PageProcessor pageProcessor0 = null;
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request("");
      Request request1 = request0.setPriority(0L);
      boolean boolean0 = true;
      Request request2 = request1.setBinaryContent(true);
      String string0 = "Stopped";
      Request request3 = request2.setUrl("Stopped");
      MockPrintStream mockPrintStream0 = new MockPrintStream(", html=");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      Request request4 = request3.putExtra("_cycle_tried_times", dataOutputStream0);
      Request request5 = request4.setMethod("");
      requestArray0[0] = request5;
      Request request6 = request2.addCookie("_cycle_tried_times", ", html=");
      requestArray0[1] = request6;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "D~CptQF(Q/H}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("D~CptQF(Q/H}");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.runAsync();
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      CountableThreadPool countableThreadPool0 = spider1.threadPool;
      spider1.threadPool = null;
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider2.addPipeline(multiPagePipeline0);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(false);
      Request request2 = request1.addCookie("", "_cycle_tried_times");
      Request request3 = request2.setExtras((Map<String, Object>) null);
      Request request4 = request3.setPriority(2390L);
      requestArray0[0] = request4;
      Request request5 = request0.setCharset("_cycle_tried_times");
      requestArray0[1] = request5;
      Request request6 = new Request();
      requestArray0[2] = request6;
      // Undeclared exception!
      try { 
        spider3.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.JsonFilePipeline");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider1 = spider0.startUrls(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.pipeline.JsonFilePipeline", "us.codecraft.webmagic.pipeline.JsonFilePipeline");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.clearPipeline();
      Spider spider4 = spider3.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider4.thread((ExecutorService) null, (-1339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("N&]#kQj?c2^7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.thread(4);
      Request request0 = new Request((String) null);
      Request request1 = request0.setUrl("");
      // Undeclared exception!
      try { 
        spider3.onSuccess(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|F#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = "";
      Spider spider1 = spider0.setUUID("");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|F#";
      spider2.setSpawnUrl(true);
      stringArray0[1] = "";
      priorityScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList1);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("process request ");
      Spider spider3 = spider2.addPipeline(jsonFilePipeline0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "k";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      spider1.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider1.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "z>";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("z>");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("z>", "z>");
      spider0.setDownloader(phantomJSDownloader0);
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(".json");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
      String string0 = "us.codecraft.webmagic.utils.FilePersistentBase";
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("us.codecraft.webmagic.utils.FilePersistentBase");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.pipeline(multiPagePipeline0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "charsets*=s*['\"]*([^s;'\"]*)";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "e1<%SBc{sR65:7s]";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("e1<%SBc{sR65:7s]");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string1 = "#qF";
      Spider spider1 = spider0.setUUID("#qF");
      boolean boolean0 = false;
      Spider spider2 = spider1.setExitWhenComplete(false);
      int int0 = 2263;
      spider2.thread(2263);
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setScheduler((Scheduler) null);
      Spider spider1 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
