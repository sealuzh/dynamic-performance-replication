/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:24:38 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Button;
import java.awt.Canvas;
import java.awt.Checkbox;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Panel;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.beans.VetoableChangeListener;
import java.beans.beancontext.BeanContextServicesSupport;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Method;
import java.util.Locale;
import java.util.Set;
import javax.swing.Action;
import javax.swing.InputMap;
import javax.swing.JApplet;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.classifiers.bayes.BayesNet;
import weka.clusterers.FilteredClusterer;
import weka.core.BinarySparseInstance;
import weka.core.CheckOptionHandler;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.OptionHandlerJavadoc;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.Loader;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getColorModel();
      filter0.setVisual((BeanVisual) null);
      filter0.getInputMap(1);
      String string0 = "trainingSet";
      // Undeclared exception!
      try { 
        filter0.performRequest("trainingSet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // trainingSet not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = DefaultEditorKit.EndOfLineStringProperty;
      // Undeclared exception!
      try { 
        filter0.performRequest("weka/gui/beans/icons/DefaultFilter.gif");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weka/gui/beans/icons/DefaultFilter.gif not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      testSetMaker0.getActionMap();
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      Component component0 = testSetMaker0.add((Component) jTabbedPane0);
      filter0.removeDataSourceListener(testSetMaker0);
      filter0.removeDataSourceListener(testSetMaker0);
      // Undeclared exception!
      try { 
        jTabbedPane0.setSelectedComponent(component0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // component not found in tabbed pane
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = classAssigner0.getBaselineResizeBehavior();
      BeanVisual beanVisual0 = classAssigner0.m_visual;
      beanVisual0.isFocusable();
      filter0.setVisual(beanVisual0);
      filter0.globalInfo();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(component_BaselineResizeBehavior0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.awt.Component$BaselineResizeBehavior : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(mockJapaneseDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      boolean boolean0 = filter0.connectionAllowed("Finished.");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      beanVisual0.getY();
      filter0.isDoubleBuffered();
      filter0.isBusy();
      filter0.hasFocus();
      // Undeclared exception!
      try { 
        filter0.connectionNotification("weka/gui/beans/icons/", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.setCustomName("_!aPpE/e+'yit~@_Z");
      assertEquals("_!aPpE/e+'yit~@_Z", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setRequestFocusEnabled(true);
      filter0.getVerifyInputWhenFocusTarget();
      String string0 = "Finished.";
      filter0.setToolTipText("Finished.");
      filter0.getUIClassID();
      filter0.getInputMap();
      filter0.enumerateRequests();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.eventGeneratable("");
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      filter0.addTestSetListener(crossValidationFoldMaker0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("Finished.");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setFocusTraversalPolicyProvider(true);
      AllFilter allFilter0 = new AllFilter();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      filter0.removeVetoableChangeListener(beanContextServicesSupport0);
      weka.filters.Filter.makeCopies(allFilter0, 2);
      filter0.disconnectionNotification("a _J~YhXz", allFilter0);
      filter0.enumerateRequests();
      ClassOrder classOrder0 = new ClassOrder();
      filter0.disconnectionNotification("-", classOrder0);
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      filter0.getGraphicsConfiguration();
      Frame frame0 = null;
      try {
        frame0 = new Frame((GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getContainerListeners();
      filter0.invalidate();
      filter0.removeVetoableChangeListener((VetoableChangeListener) null);
      Filter filter1 = new Filter();
      filter0.getCursor();
      filter0.addTrainingSetListener(filter1);
      String string0 = "YoS_V";
      int int0 = 0;
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      filter0.addMouseWheelListener((MouseWheelListener) null);
      filter0.getBackground();
      long long0 = 0L;
      filter0.firePropertyChange("#h2QIY!t%pRO]J", 0L, 0L);
      filter0.isRequestFocusEnabled();
      filter0.useDefaultVisual();
      ClassAssigner classAssigner0 = new ClassAssigner();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      KeyListener keyListener2 = AWTEventMulticaster.remove(keyListener1, (KeyListener) null);
      classAssigner0.addKeyListener(keyListener2);
      classAssigner0.addMouseWheelListener((MouseWheelListener) null);
      filter0.removeTestSetListener(classAssigner0);
      filter0.eventGeneratable("#h2QIY!t%pRO]J");
      Class<Method> class0 = Method.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#h2QIY!t%pRO]J";
      stringArray0[1] = "#h2QIY!t%pRO]J";
      stringArray0[2] = "#h2QIY!t%pRO]J";
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "#h2QIY!t%pRO]J", class0, stringArray0, "V", "#h2QIY!t%pRO]J");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found: #h2QIY!t%pRO]J on class java.lang.reflect.Method
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      boolean boolean0 = filter0.eventGeneratable("[Filter] ");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      filter1.hasFocus();
      String string0 = filter1.getCustomName();
      assertEquals("AllFilter", string0);
      
      String string1 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string1);
      
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      filter0.addMouseWheelListener((MouseWheelListener) null);
      filter0.getBackground();
      filter0.isRequestFocusEnabled();
      filter0.useDefaultVisual();
      ClassAssigner classAssigner0 = new ClassAssigner();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = AWTEventMulticaster.add(keyListener0, keyListener0);
      KeyListener keyListener2 = AWTEventMulticaster.remove(keyListener1, (KeyListener) null);
      classAssigner0.addKeyListener(keyListener2);
      classAssigner0.addMouseWheelListener((MouseWheelListener) null);
      filter0.removeTestSetListener(classAssigner0);
      String[] stringArray0 = new String[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0L, doubleArray0);
      binarySparseInstance0.dataset();
      InstanceEvent instanceEvent0 = new InstanceEvent(keyListener2, (Instances) null);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("WWhD $-3xJ");
      Loader loader0 = new Loader();
      BeanVisual beanVisual0 = loader0.getVisual();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      filter0.setVisual(beanVisual0);
      AllFilter allFilter0 = new AllFilter();
      filter0.setWrappedAlgorithm(allFilter0);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) filter0;
      objectArray0[3] = (Object) filter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) filter0;
      objectArray0[6] = (Object) filter0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("!F9 ]!P5iqAV");
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(defaultTableModel0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(filter0, (-132), 1229L, (-132), (-132), (-132), 1565, 1565, 1923, false, (-73), (-73), 1923);
      filter0.getPopupLocation(mouseWheelEvent0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Filter filter0 = new Filter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.setFilter(stratifiedRemoveFolds0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      weka.filters.Filter filter1 = null;
      filter0.setIgnoreRepaint(false);
      // Undeclared exception!
      try { 
        filter0.setFilter((weka.filters.Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      Filter filter1 = new Filter();
      filter1.acceptTrainingSet((TrainingSetEvent) null);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("Bx%1'rJu/GY7Vj");
      Filter filter2 = new Filter();
      filter2.enumerateRequests();
      filter1.setCustomName(".arff");
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter3 = filteredAssociator0.getFilter();
      filter2.setFilter(filter3);
      assertEquals("MultiFilter", filter2.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ComponentOrientation componentOrientation0 = filter0.getComponentOrientation();
      ComponentOrientation.getOrientation(locale0);
      filter0.applyComponentOrientation(componentOrientation0);
      filter0.addDataSourceListener((DataSourceListener) null);
      filter0.connectionNotification("pjT!*#", "pjT!*#");
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setCustomName(" not supported (Filter)");
      filter0.stop();
      filter0.connectionAllowed(" ERROR : ");
      boolean boolean0 = filter0.eventGeneratable("pjT!*#");
      assertEquals(" not supported (Filter)", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.firePropertyChange("VL?k~", (-1643L), 1227L);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.setCustomName("[Filter] ");
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.stop();
      assertEquals("[Filter] ", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ComponentOrientation componentOrientation0 = filter0.getComponentOrientation();
      ComponentOrientation.getOrientation(locale0);
      filter0.applyComponentOrientation(componentOrientation0);
      filter0.addDataSourceListener((DataSourceListener) null);
      filter0.connectionNotification("trainingSet", "trainingSet");
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setCustomName(" not supported (Filter)");
      filter0.stop();
      filter0.connectionAllowed(" ERROR : ");
      boolean boolean0 = filter0.eventGeneratable("trainingSet");
      assertEquals(" not supported (Filter)", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(substringLabeler0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, instances0);
      TestSetEvent testSetEvent1 = new TestSetEvent(filter0, instances0);
      testSetEvent1.m_setNumber = 4;
      filter0.acceptTestSet(testSetEvent1);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      filter0.getComponentOrientation();
      ComponentOrientation componentOrientation0 = ComponentOrientation.getOrientation(locale0);
      filter0.applyComponentOrientation(componentOrientation0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addDataSourceListener(flowByExpression0);
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      filter0.connectionNotification("trainingSet", optionHandlerJavadoc0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setCustomName("<!-- options-start -->");
      filter0.stop();
      filter0.connectionAllowed("<!-- options-start -->");
      filter0.connectionAllowed("trainingSet");
      filter0.eventGeneratable("VD7");
      filter0.getCustomName();
      filter0.connectionNotification("dataSet", optionHandlerJavadoc0);
      assertEquals("<!-- options-start -->", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Sorter sorter0 = new Sorter();
      filter0.addDataSourceListener(sorter0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DataSetEvent dataSetEvent0 = new DataSetEvent(integer0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      boolean boolean0 = filter0.connectionAllowed("instance");
      boolean boolean1 = filter0.eventGeneratable("instance");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      TestSetMaker testSetMaker0 = new TestSetMaker();
      filter0.connectionNotification("Zd!@,#iN<XlvC/L6O8J", testSetMaker0);
      boolean boolean0 = filter0.eventGeneratable("Zd!@,#iN<XlvC/L6O8J");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addInstanceListener((InstanceListener) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      filter0.isFocusOwner();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setSize((-43), (-43));
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.remove(mouseMotionListener0, mouseMotionListener0);
      filter0.addMouseMotionListener((MouseMotionListener) null);
      filter0.getInputMethodListeners();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.firePropertyChange("@data", 0.0, (-253.5));
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      InstanceEvent instanceEvent0 = new InstanceEvent(instances0, instances0);
      filter0.acceptInstance(instanceEvent0);
      assertTrue(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      filter0.connectionNotification("?K)wl>d:G[W", clusterer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = filter0.eventGeneratable("?K)wl>d:G[W");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      ListOptions listOptions0 = new ListOptions();
      TestInstances testInstances0 = new TestInstances();
      listOptions0.generateHelp();
      Instances instances0 = testInstances0.generate("jD_IfRzf-g");
      DataSetEvent dataSetEvent0 = new DataSetEvent(listOptions0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      TestSetEvent testSetEvent0 = new TestSetEvent(sysErrLog0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      System.setCurrentTimeMillis(367L);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      weka.filters.Filter filter1 = filteredClusterer0.getFilter();
      filter0.setFilter(filter1);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      filter0.getFilter();
      filter0.getAlignmentX();
      Saver saver0 = new Saver();
      saver0.getRegisteredKeyStrokes();
      filter0.addInstanceListener(substringReplacer0);
      BeanVisual beanVisual0 = filter0.getVisual();
      filter0.useDefaultVisual();
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.removeTrainingSetListener((TrainingSetListener) null);
      beanVisual0.setInheritsPopupMenu(true);
      filter0.removeInstanceListener(substringReplacer0);
      KnowledgeFlowApp knowledgeFlowApp0 = null;
      try {
        knowledgeFlowApp0 = new KnowledgeFlowApp(false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      filter0.setFilter(multiFilter1);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.setLog((Logger) null);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      testInstances0.setOptions(stringArray0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.getGraphicsConfiguration();
      Canvas canvas0 = new Canvas((GraphicsConfiguration) null);
      filter0.connectionNotification("instance", canvas0);
      filter0.disconnectionNotification("pjT!*#", (Object) null);
      filter0.useDefaultVisual();
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      ListOptions listOptions0 = new ListOptions();
      TestInstances testInstances0 = new TestInstances();
      listOptions0.generateHelp();
      Instances instances0 = testInstances0.generate("ListOptions Options:\n\n-W <classname>\n\tThe class to load.\n");
      TestSetEvent testSetEvent0 = new TestSetEvent(sysErrLog0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.firePropertyChange("@data", (double) (-1), (double) (-2));
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = ".arff";
      stringArray0[4] = "ListOptions Options:\n\n-W <classname>\n\tThe class to load.\n";
      stringArray0[5] = "$";
      stringArray0[6] = ".bsi";
      stringArray0[7] = "instance";
      stringArray0[8] = " ";
      testInstances0.setOptions(stringArray0);
      filter0.setFilter(multiFilter0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      InstanceEvent instanceEvent1 = new InstanceEvent(testInstances0, instances0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2);
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 0);
      InstanceEvent instanceEvent2 = new InstanceEvent(multiFilter0, binarySparseInstance0, 1);
      filter0.acceptInstance(instanceEvent2);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      substringReplacer0.resetKeyboardActions();
      instanceEvent0.setStatus((-22));
      filter0.acceptInstance(instanceEvent0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      boolean boolean0 = filter0.eventGeneratable("v7{");
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Add add0 = new Add();
      filter0.setFilter(add0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2161.2010287401813);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      InstanceEvent instanceEvent0 = new InstanceEvent(doubleArray0, sparseInstance0, 1890);
      MockThread mockThread0 = new MockThread();
      InstanceEvent instanceEvent1 = new InstanceEvent(mockThread0, instances0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      ListOptions listOptions0 = new ListOptions();
      TestInstances testInstances0 = new TestInstances();
      listOptions0.generateHelp();
      Instances instances0 = testInstances0.generate("ListOptions Options:\n\n-W <classname>\n\tThe class to load.\n");
      TestSetEvent testSetEvent0 = new TestSetEvent(sysErrLog0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = ".arff";
      stringArray0[4] = "ListOptions Options:\n\n-W <classname>\n\tThe class to load.\n";
      stringArray0[5] = "$";
      stringArray0[6] = ".bsi";
      stringArray0[7] = "instance";
      stringArray0[8] = " ";
      testInstances0.setOptions(stringArray0);
      filter0.setFilter(multiFilter0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      instanceEvent0.setStatus(47);
      filter0.acceptInstance(instanceEvent0);
      InstanceEvent instanceEvent1 = new InstanceEvent(testInstances0, instances0);
      filter0.acceptInstance(instanceEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      substringReplacer0.resetKeyboardActions();
      instanceEvent0.setStatus(1890);
      filter0.acceptInstance(instanceEvent0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1890;
      filter0.getGraphics();
      substringReplacer0.printAll((Graphics) null);
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1890;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1738.304446, intArray0, 1890);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1890;
      doubleArray0[3] = (double) 1890;
      doubleArray0[4] = (double) 1890;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.10000000149011612;
      doubleArray0[7] = 1738.304446;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      InstanceEvent instanceEvent1 = new InstanceEvent(crossValidationFoldMaker0, sparseInstance0, 2);
      filter0.acceptInstance(instanceEvent0);
      filter0.acceptInstance(instanceEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.getInputVerifier();
      filter0.setFilter(filter1);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      substringReplacer0.resetKeyboardActions();
      instanceEvent0.setStatus(1890);
      filter0.acceptInstance(instanceEvent0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 1890;
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instances0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.firePropertyChange("@data", 0.0, (-253.5));
      filter0.setFilter(multiFilter0);
      MockThread mockThread0 = new MockThread();
      filter0.m_filterThread = (Thread) mockThread0;
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      AllFilter allFilter0 = new AllFilter();
      InstanceEvent instanceEvent1 = new InstanceEvent(allFilter0, sparseInstance0, (-112));
      instanceEvent1.setStatus(20);
      filter0.acceptInstance(instanceEvent1);
      filter0.acceptInstance(instanceEvent0);
      assertTrue(filter0.isBusy());
  }
}
