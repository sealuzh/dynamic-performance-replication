/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:51:50 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.SegmentedByteString;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(2);
      buffer1.snapshot();
      try { 
        buffer1.readUtf8Line((long) 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      Charset.defaultCharset();
      long long0 = buffer0.indexOf((byte)0, (long) (byte)0, (long) (byte)0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink.sha256(hashingSink0);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[1];
      buffer0.write(byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-75L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-75 > size=16
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(56320);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writableSegment(258);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = realBufferedSink0.buffer();
      ((RealBufferedSink) bufferedSink0).buffer.writeLongLe(100000000000000000L);
      // Undeclared exception!
      try { 
        buffer2.read(buffer1, (-11L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -11
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.close();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.timeout();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals(0L, byteString0);
      buffer0.close();
      Buffer buffer1 = buffer0.writeShortLe(1792);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.toString();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Pipe pipe0 = new Pipe(1879L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = new ByteString((byte[]) null);
      buffer0.rangeEquals(8028626686875858033L, byteString0, (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writableSegment(1);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.rangeEquals((long) 1, byteString0, 240, 2093796556);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer0.writeByte((-414));
      buffer1.writeLong(4294967295L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.write((byte[]) null, (-414), (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Pipe pipe0 = new Pipe(4495L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink.sha256(buffer0);
      Buffer buffer1 = buffer0.writeLongLe(4495L);
      HashingSource.sha1(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.writeTo((OutputStream) byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      try { 
        buffer0.writeAll(inflaterSource0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(4495L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      buffer0.readAll(hashingSink0);
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Pipe pipe0 = new Pipe(4761L);
      pipe0.sourceClosed = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = pipe0.buffer;
      buffer0.readByteString();
      buffer0.md5();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      Buffer buffer1 = buffer0.write(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line(2657L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2656 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("z-cItBK\"P Tz", 1884, 1884);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1884 > 12
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8(".outputStream()", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.outputStream();
      HashingSink.sha256(buffer0);
      buffer0.sha512();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(57);
      byteArrayOutputStream0.close();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-86);
      buffer0.read(byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-2543));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      HashingSource.md5(buffer0);
      HashingSource.sha256(buffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.copyTo((OutputStream) pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      try { 
        buffer0.write((Source) hashingSource1, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      int int0 = 0;
      try { 
        buffer1.readUtf8Line((long) 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interrupted");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Buffer buffer1 = buffer0.writeLongLe((-366L));
      buffer1.readInt();
      buffer1.rangeEquals((-1970L), byteString0, 1431655765, (-2057));
      buffer1.readInt();
      Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        Charset.forName("SHA-1");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // SHA-1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.Util");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer0.require(1997L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HashingSink.sha256(buffer0);
      Buffer buffer1 = buffer0.writeShortLe(1792);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.offset = (long) 1792;
      buffer_UnsafeCursor0.buffer.toString();
      buffer_UnsafeCursor0.buffer.size();
      buffer1.readByteString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Pipe pipe0 = new Pipe(1639L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8LineStrict(10000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Charset charset0 = Charset.defaultCharset();
      String string0 = "";
      buffer0.writeString("z2YEI~-S|%5", charset0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8((String) null, 1879048192, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer1, byteString0);
      hashingSink1.timeout();
      buffer1.writeLongLe((-1868L));
      buffer1.snapshot();
      // Undeclared exception!
      try { 
        buffer1.write((Buffer) null, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(395L);
      buffer0.write((Source) buffer_UnsafeCursor0.buffer, 0L);
      buffer0.readShort();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line((-3616L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=393 offset=0 byteCount=-3616
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      buffer0.close();
      buffer0.buffer();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      // Undeclared exception!
      try { 
        buffer1.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte) (-37));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -37
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeHexadecimalUnsignedLong(3L);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      Buffer buffer1 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-7L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(2);
      buffer1.clear();
      buffer1.snapshot();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((long) 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha512();
      byte[] byteArray0 = new byte[2];
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      realBufferedSink0.emitCompleteSegments();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer1.readUtf8Line((long) (byte)34);
      realBufferedSink0.buffer.hmacSha512(byteString0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pipe pipe0 = new Pipe(5235L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-4);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha256(byteString0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOfElement(byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.hmacSha512(byteString0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>0x<VlPs'NXH7m");
      ByteString byteString0 = buffer0.sha512();
      buffer1.hmacSha512(byteString0);
      Integer integer0 = new Integer(122);
      Integer integer1 = new Integer(122);
      buffer0.equals(integer1);
      buffer1.toString();
      Integer integer2 = new Integer(487);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.timeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      buffer0.request(395L);
      buffer_UnsafeCursor0.resizeBuffer(395L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "endIndex > string.length: ");
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeInt((-1));
      buffer1.md5();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      buffer1.writeUtf8CodePoint(52);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.writeHexadecimalUnsignedLong((byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.writeDecimalLong((-1));
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      HashingSource.md5(buffer1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer2 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer2.sha1();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString((String) null, 831, 2679, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8CodePoint(8257536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7e0000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(100000L);
      buffer1.clear();
      buffer1.segmentSizes();
      buffer1.toString();
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, 100000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("I_59&TR2", charset0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      Segment segment0 = new Segment(byteArray0, (byte) (-7), (byte) (-7), true, false);
      SegmentPool.next = segment0;
      byte[] byteArray1 = new byte[2];
      buffer0.inputStream();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = 378L;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeString(">r',yEdc8Dwp<qUU", (-1), (-3248), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(2416);
      buffer0.indexOf((byte)12);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(4479L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = buffer0.sha256();
      long long0 = 4278190073L;
      buffer0.writeDecimalLong(4278190073L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.indexOfElement(byteString0);
      buffer1.segmentSizes();
      // Undeclared exception!
      try { 
        buffer1.readByteArray((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=10 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("/wRIy.l}i@vc");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(911L);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset.defaultCharset();
      int int0 = 2;
      Buffer buffer0 = new Buffer();
      int int1 = 24;
      Buffer buffer1 = buffer0.writeShortLe(24);
      // Undeclared exception!
      try { 
        buffer1.write((Source) buffer0, 1727L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("Z{t", charset0);
      ByteString[] byteStringArray0 = new ByteString[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      Options options0 = Options.of(byteStringArray0);
      options0.get((byte)0);
      buffer1.indexOfElement((ByteString) null, 2250L);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      try { 
        buffer0.readFully(buffer1, 100000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HashingSink.sha256(buffer0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8(".outputStream()", 1950, (-91));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -91 < 1950
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      buffer0.hmacSha1(byteString0);
      Charset.defaultCharset();
      hashingSink0.timeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer1.writeDecimalLong((byte)0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      buffer0.hashCode();
      buffer0.exhausted();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Pipe pipe0 = new Pipe(4479L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha256();
      Buffer buffer1 = buffer0.writeDecimalLong(4278190073L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.segmentSizes();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interrupted");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      buffer0.request((-1));
      buffer_UnsafeCursor0.resizeBuffer(395L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.timeout();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeShortLe(1809);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ByteString byteString1 = byteString0.sha512();
      Buffer buffer2 = buffer1.write(byteString1);
      buffer0.readUnsafe();
      buffer2.indexOfElement(byteString0, 1L);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "okio.Util";
      buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.writeDecimalLong(1382L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      try { 
        buffer2.write((Source) buffer1, (long) 9);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(@&e8 ]WJuhvJuvMa");
      buffer0.require((-2000L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer1.request(2044L);
      buffer0.sha256();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-66), (long) (byte) (-66), (long) (byte) (-66));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-66 toIndex=-66
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha512();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeDecimalLong(35L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HashingSink.md5(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-84), 3039L, (-4339L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=3039 toIndex=-4339
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(2);
      buffer0.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer3 = new Buffer();
      buffer0.inputStream();
      HashingSource.md5(buffer0);
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.writeAll(buffer1);
      long long0 = (-415L);
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer_UnsafeCursor0.buffer, (-415L), (long) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-415 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      EvoSuiteFile evoSuiteFile0 = null;
      buffer0.readUtf8CodePoint();
      buffer0.close();
      String string0 = "dxXni/DN 0<^9*NZ";
      int int0 = (-125);
      // Undeclared exception!
      try { 
        Charset.forName("dxXni/DN 0<^9*NZ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // dxXni/DN 0<^9*NZ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeLongLe((-366L));
      realBufferedSink0.buffer();
      buffer1.readInt();
      realBufferedSink0.writeUtf8CodePoint((-1828782081));
      realBufferedSink0.buffer.readUtf8CodePoint();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo(buffer1, (long) (-1828782081), (long) (-1828782081));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1828782081 byteCount=-1828782081
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      HashingSource.md5(buffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        buffer0.copyTo((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(378L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha512();
      realBufferedSink0.buffer.write(byteString0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Buffer buffer1 = buffer0.writeLongLe((-366L));
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer1.readInt();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint((-1828782081));
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      realBufferedSink0.buffer.readUtf8CodePoint();
      hashingSink0.hash();
      HashingSink.hmacSha512(hashingSink0, byteString0);
      hashingSink0.hash();
      realBufferedSink0.buffer.rangeEquals(2478L, byteString0, (-1828782081), 963);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HashingSink.sha256(buffer0);
      buffer0.sha512();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[6] = (byte)34;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.seek(2147483647L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=2147483647 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      hashingSource0.read(buffer0, (byte)0);
      buffer0.indexOf((byte)0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = new Buffer();
      HashingSource.sha1(buffer2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.writeDecimalLong((-1L));
      buffer1.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.resizeBuffer(437L);
      buffer_UnsafeCursor1.resizeBuffer(10000L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(98);
      buffer0.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      buffer0.hashCode();
      buffer0.writeLongLe(10000L);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(12);
      Segment segment0 = buffer0.head;
      segment0.limit = 430;
      SegmentPool.next = segment0;
      buffer0.indexOf((byte)6, (long) (byte)6, (long) (byte)6);
      buffer0.snapshot();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.equals(buffer1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      buffer1.request((-1513L));
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer2.indexOfElement(byteString0, (-3951L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>0x<VlPs'NXH7m");
      ByteString byteString0 = buffer0.sha512();
      buffer1.hmacSha512(byteString0);
      byteString0.utf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek((-1L));
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null, 56319, 2761);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(3L);
      buffer0.clone();
      Buffer buffer1 = new Buffer();
      buffer0.indexOf((byte)19);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer2.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeUtf8("/wRIy.l}i@vc");
      buffer1.readLong();
      Charset charset0 = Charset.defaultCharset();
      buffer1.writeString("/wRIy.l}i@vc", charset0);
      buffer0.readUtf8Line();
      HashingSink.sha512(buffer1);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HashingSink.sha256(buffer0);
      buffer0.sha512();
      Pipe pipe0 = new Pipe((byte)34);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(57);
      byteArrayOutputStream0.close();
      Buffer buffer1 = buffer0.writeByte(967);
      Buffer buffer2 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[0];
      buffer1.read(byteArray0);
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "/wRIy.l}i@vc";
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(33);
      buffer1.snapshot();
      buffer0.inputStream();
      Buffer buffer2 = new Buffer();
      buffer0.readByte();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      HashingSource.md5(buffer0);
      ByteString byteString0 = buffer1.sha256();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer0.readByte();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.timeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.sha256();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(386L);
      buffer_UnsafeCursor0.buffer.clone();
      Inflater inflater0 = new Inflater(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>x<VklPs'NXH7m");
      buffer0.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.sha256();
      buffer0.writeDecimalLong(5998363954247330896L);
      Buffer buffer2 = realBufferedSink0.buffer.writeLongLe(5998363954247330896L);
      buffer2.request(5998363954247330896L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeDecimalLong(35L);
      byteString0.base64();
      Buffer buffer2 = buffer1.writeUtf8("z4PhNX7vuL3xVChQ1m2AB9Yg5AULVxXcg/SpIdNs6c5H0NE8XYXysP+DGNKHfuwvY7kxvUdBeoGlODJ6+SfaPg==");
      buffer2.readHexadecimalUnsignedLong();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>x<VklPs'NXH7m");
      buffer1.readLong();
      buffer1.sha256();
      buffer1.request(255L);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x73
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(378L);
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0000000000000000000000000000000000000000000000000000000000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)86;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      Buffer buffer1 = buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      buffer1.size = (long) (byte)86;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      long long0 = buffer_UnsafeCursor0.offset;
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeShort((byte)86);
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer2, (long) (byte)86);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(642);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte byte0 = (byte)56;
      buffer1.writeShortLe((byte)56);
      realBufferedSink0.buffer.read(buffer0, 2147483647L);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      HashingSink hashingSink1 = HashingSink.sha256(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString1 = byteString0.sha512();
      buffer0.write(byteString1);
      buffer0.indexOf((byte)0, (long) (byte)0, 599836L);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1615);
      buffer0.writeUtf8("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(395L);
      buffer0.hashCode();
      buffer_UnsafeCursor0.resizeBuffer(395L);
      buffer_UnsafeCursor0.resizeBuffer(395L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J5<^`vZwwb~xsuU+uSn");
      Buffer buffer0 = new Buffer();
      Segment segment0 = buffer0.writableSegment(16);
      buffer0.head = segment0;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.sha256();
      buffer0.indexOfElement(byteString0, 1414L);
      buffer0.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("interrupted");
      mockFileOutputStream0.write((-1));
      Buffer buffer1 = buffer0.writeShortLe(60);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      buffer1.copyTo((OutputStream) filterOutputStream0);
      buffer0.sha256();
      buffer_UnsafeCursor0.buffer.clear();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      HashingSink.sha1(hashingSink0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals(1000L, byteString0, 60, (-2583));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>x<VklPs'NXH7m");
      buffer1.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.writeString("S>x<VklPs'NXH7m", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, 12L, (-4633L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interrupted");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      buffer0.request((-1));
      buffer_UnsafeCursor0.resizeBuffer(395L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("/wRIy.l}i@vHc");
      buffer1.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readAndWriteUnsafe();
      buffer1.sha256();
      Buffer buffer3 = buffer1.writeShortLe(33);
      buffer3.snapshot();
      Buffer buffer4 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(3420292917530356861L);
      buffer4.read(buffer3, 8L);
      buffer4.sha1();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x69
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("/wRIy.l}i@vc");
      buffer1.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.sha256();
      Buffer buffer2 = new Buffer();
      buffer2.inputStream();
      Buffer buffer3 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(3420292917530356861L);
      buffer3.read(buffer2, 8L);
      buffer3.sha1();
      buffer2.readByte();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x69
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = realBufferedSink0.buffer;
      Segment segment0 = new Segment();
      buffer1.head = segment0;
      buffer1.readLong();
      // Undeclared exception!
      buffer0.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>0x<VlPs'NXH7m");
      ByteString byteString0 = buffer0.sha512();
      ByteString byteString1 = buffer1.hmacSha512(byteString0);
      byteString0.utf8();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\uFFFD2;\uFFFDme\u07F8Q6[\uFFFD\uFFFD\uFFFDvO\u0013ax\uFFFD\uFFFD\uFFFD\u04B6\uFFFD\uFFFD\uFFFD~\u04E9J\uFFFD\uFFFDP\uFFFD\uFFFD\u00005c33Z\u0014\uFFFDZJ\t\uFFFD\uFFFDo\u00055\uFFFD\uFFFD3\uFFFD\u03AD\uFFFD\uFFFD\uFFFDm=");
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = new Buffer();
      buffer1.indexOfElement(byteString1);
      buffer0.segmentSizes();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer3.readByteArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.outputStream();
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.readShortLe();
      buffer0.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.timeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = buffer0.sha256();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(386L);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.clone();
      Pipe pipe0 = new Pipe(255L);
      Buffer buffer3 = pipe0.buffer;
      buffer0.writeShortLe((-1));
      buffer2.readDecimalLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      buffer1.clear();
      buffer0.outputStream();
      realBufferedSource0.buffer();
      buffer2.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.Utl");
      buffer0.readLong();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      buffer0.sha256();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "okio.Util");
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      buffer1.indexOfElement(byteString0);
      buffer1.indexOf(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink.sha512(buffer1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x6c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(4479L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString0 = buffer0.sha256();
      long long0 = 4278190085L;
      Buffer buffer1 = pipe0.buffer;
      buffer1.indexOfElement(byteString0);
      buffer1.segmentSizes();
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (-360L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(3585);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, (-608L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-608 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.writeDecimalLong(599836395424733L);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.writeHexadecimalUnsignedLong(599836395424733L);
      realBufferedSink0.buffer();
      ((RealBufferedSink) bufferedSink0).buffer.writeLongLe(100000000000000000L);
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.write(realBufferedSink0.buffer, 599836395424733L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(3073);
      realBufferedSink0.buffer.readUtf8CodePoint();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString((String) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      ByteString byteString0 = buffer0.sha512();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      buffer1.sha512();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.readShortLe();
      buffer2.readUtf8CodePoint();
      buffer1.writeLongLe(65533);
      Inflater inflater0 = new Inflater(true);
      realBufferedSink0.buffer.clone();
      Inflater inflater1 = new Inflater(true);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      realBufferedSink1.buffer.writableSegment(2699);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(388L);
      int int0 = buffer_UnsafeCursor0.end;
      buffer0.readInt();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      buffer_UnsafeCursor0.buffer.close();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer1 = buffer0.readFrom((InputStream) sequenceInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer1.readFrom((InputStream) pipedInputStream0, 188L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      HashingSource.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      realBufferedSink0.emit();
      realBufferedSink0.buffer.equals(buffer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("already attached to a buffer");
      buffer1.sha512();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer0.writeDecimalLong(599836395424733092L);
      long long0 = (-1087L);
      // Undeclared exception!
      try { 
        Charset.forName("already attached to a buffer");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // already attached to a buffer
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha512();
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.md5();
      buffer1.indexOf(byteString0);
      HashingSink.hmacSha256(buffer1, byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readUtf8();
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      long long0 = 388L;
      buffer_UnsafeCursor0.resizeBuffer(388L);
      buffer_UnsafeCursor0.buffer.indexOf(byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSink.sha512(hashingSink0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(hashingSink0, byteString1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink1);
      realBufferedSink0.buffer();
      buffer0.readUtf8();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(2);
      buffer1.hashCode();
      buffer0.readShortLe();
      Integer integer0 = new Integer((short)2);
      Integer integer1 = new Integer(2);
      buffer0.hashCode();
      buffer0.writeDecimalLong((short)2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = buffer0.clone();
      buffer0.require((-922337203685477580L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.writableSegment((short)2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink1.buffer();
      buffer2.writeByte((-634));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      HashingSource.md5(buffer0);
      ByteString byteString0 = buffer1.sha256();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.indexOf((byte)15);
      Buffer buffer2 = buffer1.writeDecimalLong(2147483647L);
      buffer1.hashCode();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      HashingSource.md5(buffer0);
      ByteString byteString0 = buffer1.sha256();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong((-922337203685477580L));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink1.buffer.selectPrefix(options0);
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.equals(buffer2);
      realBufferedSink0.buffer.snapshot(0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha512();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.indexOf(byteString0);
      byteString0.base64();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      hashingSink0.hash();
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readUtf8();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      buffer0.indexOf((byte)35, (long) (byte)35, (long) (byte)35);
      HashingSource.md5(buffer0);
      ByteString byteString0 = buffer1.sha256();
      ByteString[] byteStringArray0 = new ByteString[2];
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      buffer0.indexOf(byteString1, 9223372036854775807L);
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeShortLe(210);
      buffer0.readShort();
      Buffer buffer2 = buffer1.writeDecimalLong((short) (-11776));
      Buffer buffer3 = new Buffer();
      buffer0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>0x<VlPs'NXH7m");
      ByteString byteString0 = buffer0.sha512();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer1.hmacSha512(byteString0);
      byteString0.utf8();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\uFFFD2;\uFFFDme\u07F8Q6[\uFFFD\uFFFD\uFFFDvO\u0013ax\uFFFD\uFFFD\uFFFD\u04B6\uFFFD\uFFFD\uFFFD~\u04E9J\uFFFD\uFFFDP\uFFFD\uFFFD\u00005c33Z\u0014\uFFFDZJ\t\uFFFD\uFFFDo\u00055\uFFFD\uFFFD3\uFFFD\u03AD\uFFFD\uFFFD\uFFFDm=");
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = new Buffer();
      buffer3.indexOfElement(byteString0);
      buffer3.segmentSizes();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MD5");
      buffer3.readByteArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer2.outputStream();
      int int0 = ObjectStreamConstants.baseWireHandle;
      buffer0.writeDecimalLong(8257536);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer1.inputStream();
      HashingSource hashingSource0 = HashingSource.md5(buffer2);
      HashingSource hashingSource1 = HashingSource.sha1(realBufferedSink0.buffer);
      hashingSource1.timeout();
      HashingSource.sha256(hashingSource1);
      ByteString byteString0 = hashingSource0.hash();
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer3 = pipe0.buffer;
      buffer3.rangeEquals(3L, byteString0);
      Buffer buffer4 = buffer1.writeDecimalLong((-1129L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      buffer1.readByte();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Pipe pipe1 = new Pipe(1095216660480L);
      realBufferedSink0.writeDecimalLong(10000000L);
      Buffer buffer5 = pipe1.buffer;
      Buffer buffer6 = new Buffer();
      buffer2.read(buffer1, 10L);
      buffer4.readIntLe();
      buffer_UnsafeCursor0.buffer.readInt();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      realBufferedSource0.buffer();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-518));
      Inflater inflater0 = new Inflater(false);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
      Options options1 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options1.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 2;
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.forName("UTF-8");
      // Undeclared exception!
      try { 
        buffer0.writeString("UTF-8", 16, 110, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 110 > 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeShortLe(60);
      buffer1.inputStream();
      buffer0.sha256();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer2 = pipe0.buffer;
      buffer2.writeDecimalLong(3L);
      buffer2.clone();
      Inflater inflater0 = new Inflater(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(427819L);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      buffer2.hashCode();
      buffer0.exhausted();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(2);
      buffer1.snapshot();
      long long0 = 48594L;
      buffer1.sha256();
      // Undeclared exception!
      try { 
        buffer1.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("6kGouUtil");
      buffer0.readLong();
      HashingSource.md5(buffer0);
      ByteString byteString0 = buffer1.sha256();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.indexOf((byte)15);
      buffer1.select(options0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (long) (byte)15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      buffer0.indexOf((byte)35, (long) (byte)35, (long) (byte)35);
      HashingSource.md5(buffer0);
      ByteString[] byteStringArray0 = new ByteString[2];
      Options options0 = Options.of(byteStringArray0);
      byte byte0 = (byte)15;
      buffer1.indexOf((byte)15);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha512();
      byte[] byteArray0 = new byte[2];
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      realBufferedSink0.emitCompleteSegments();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((long) (byte)34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=33 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.write(byteString0);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteString[] byteStringArray0 = new ByteString[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteString1.hashCode = 58;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      byte[] byteArray0 = new byte[3];
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = realBufferedSink1.buffer;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%P[5kHG$C qM5");
      realBufferedSink1.buffer.segmentSizes();
      buffer1.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      byteString0.base64();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1));
      buffer1.writeByte((-1630));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      long long0 = buffer_UnsafeCursor0.offset;
      realBufferedSource1.close();
      realBufferedSink0.buffer();
      buffer_UnsafeCursor0.buffer.readUtf8();
      realBufferedSource1.buffer.sha1();
      realBufferedSource0.buffer();
      realBufferedSink0.buffer.writeUtf8("\u0000\u0000\uFFFD");
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      hashingSource0.read(buffer0, (byte)0);
      buffer0.indexOf((byte)0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      HashingSource hashingSource1 = HashingSource.sha1(buffer2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.rangeEquals((long) (byte)0, byteString0, 1431655765, (int) (byte)0);
      buffer1.read(realBufferedSource0.buffer, (long) (byte)0);
      Buffer buffer3 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer3.copyTo(realBufferedSource0.buffer, (long) (byte)0, (long) 1431655765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1431655765
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      byte[] byteArray0 = new byte[2];
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = realBufferedSink1.buffer;
      buffer1.readUtf8CodePoint();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-5595);
      Buffer buffer2 = buffer0.writeUtf8CodePoint((-5595));
      Inflater inflater0 = new Inflater(false);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer3 = realBufferedSink2.buffer();
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      Inflater inflater1 = new Inflater(false);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer3, byteString0);
      Buffer buffer4 = (Buffer)hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer4);
      ByteString byteString1 = realBufferedSource0.readByteString();
      realBufferedSource0.buffer.write((ByteString) segmentedByteString0);
      buffer2.rangeEquals((long) 0, byteString1);
      realBufferedSink0.buffer();
      HashingSink.md5(hashingSink0);
      ByteString[] byteStringArray0 = null;
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Pipe pipe0 = new Pipe(4495L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      Buffer buffer1 = buffer0.writeLongLe(4495L);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      Buffer buffer2 = buffer0.writeShortLe(52);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.buffer.writeUtf8CodePoint(52);
      Inflater inflater0 = new Inflater(false);
      Buffer buffer3 = realBufferedSink0.buffer();
      ByteString byteString0 = buffer2.snapshot();
      Inflater inflater1 = new Inflater(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readByteString();
      ByteString byteString1 = hashingSink0.hash();
      Buffer buffer4 = realBufferedSource0.buffer.write(byteString1);
      buffer4.rangeEquals(0L, byteString0);
      realBufferedSink0.buffer();
      HashingSink.md5(buffer0);
      HashingSink hashingSink1 = HashingSink.hmacSha1(realBufferedSource0.buffer, byteString1);
      ByteString byteString2 = hashingSink1.hash();
      realBufferedSource0.buffer.indexOfElement(byteString2);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      Buffer buffer5 = new Buffer();
      buffer3.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeShortLe(186);
      buffer0.readShort();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      // Undeclared exception!
      try { 
        buffer0.snapshot(2146409369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2146409369
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>0x<VlPs'NXH7m");
      // Undeclared exception!
      try { 
        buffer1.read((Buffer) null, 5L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.timeout();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SegmentPool.byteCount = (long) 1809;
      Buffer buffer1 = buffer0.writeShortLe(1809);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ByteString byteString1 = byteString0.sha512();
      buffer1.write(byteString1);
      buffer0.readUnsafe();
      long long0 = 17L;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 25, (-1), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 25
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.sha256();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeDecimalLong(92233720368559L);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeShortLe(210);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.sha512();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      hashingSink0.hash();
      HashingSink.sha512(hashingSink0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/okio.Util");
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Buffer buffer1 = new Buffer();
      HashingSource.md5(hashingSource0);
      hashingSink0.flush();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "FuAd)MO9u]");
      Buffer buffer2 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      MockFile mockFile0 = new MockFile("tlZYr(s*.ETAp:");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("tlZYr(s*.ETAp:");
      realBufferedSource0.buffer.sha512();
      PrintStream printStream0 = mockPrintStream0.append('q');
      buffer2.copyTo((OutputStream) printStream0);
      realBufferedSource0.timeout();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(655L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.writeShortLe(1242);
      buffer_UnsafeCursor0.resizeBuffer(655L);
      Buffer buffer3 = pipe0.buffer;
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.readByte();
      buffer3.sha1();
      buffer1.indexOf(byteString0);
      buffer3.read(buffer_UnsafeCursor0.data);
      buffer3.rangeEquals(1000000000L, byteString0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      buffer0.indexOf((byte)88, (long) (byte)88, (long) (byte)88);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource.sha256(buffer0);
      hashingSource0.hash();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)88, 788);
      buffer1.writeShortLe((byte)88);
      buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readShort();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((Buffer) null, (long) 788, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.close();
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSource0.buffer.sha1();
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.timeout();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.sha256();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      buffer1.clone();
      Pipe pipe0 = new Pipe(30L);
      Buffer buffer2 = pipe0.buffer;
      int int0 = 831;
      Buffer buffer3 = buffer0.writeShortLe(831);
      buffer3.readDecimalLong();
      buffer_UnsafeCursor0.buffer.clear();
      // Undeclared exception!
      try { 
        buffer0.readByteString((-7L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.writeDecimalLong(1382L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      buffer_UnsafeCursor0.next();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("okio.Util");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("HmacSHA512", charset0);
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(417L);
      buffer0.hashCode();
      buffer_UnsafeCursor0.resizeBuffer(417L);
      buffer_UnsafeCursor0.resizeBuffer(395L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      ByteString byteString0 = buffer1.sha256();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-39);
      byteArray0[1] = (byte) (-39);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-59);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      buffer0.writeDecimalLong(599836395L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.next();
      buffer_UnsafeCursor0.buffer.write((Source) realBufferedSink0.buffer, (-101L));
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-3012L));
      Buffer buffer2 = buffer1.clone();
      buffer2.size = (long) 1411;
      buffer1.writeShortLe(1411);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.next();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, buffer_UnsafeCursor0.data);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeDecimalLong(71776119061217280L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      buffer0.toString();
      Buffer buffer2 = new Buffer();
      buffer1.readUtf8CodePoint();
      buffer1.size();
      buffer2.readUnsafe();
      String string0 = "size=%s fromIndex=%s toIndex=%s";
      // Undeclared exception!
      try { 
        Charset.forName("Expected leading [0-9a-fA-F] character but was %#x");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Expected leading [0-9a-fA-F] character but was %#x
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readUtf8();
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer0.readFrom((InputStream) byteArrayInputStream0, (long) (byte)44);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = ((RealBufferedSink) bufferedSink0).buffer.readAndWriteUnsafe();
      boolean boolean0 = buffer_UnsafeCursor0.readWrite;
      Buffer buffer1 = bufferedSink0.buffer();
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "offset=%s > size=%s");
      Buffer buffer2 = new Buffer();
      ((RealBufferedSink) bufferedSink0).buffer.inputStream();
      HashingSource.md5(buffer1);
      buffer_UnsafeCursor0.next();
      bufferedSink0.writeAll(buffer2);
      buffer_UnsafeCursor0.buffer.copyTo(buffer1, 0L, (long) 1);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      buffer1.readFully(realBufferedSource0.buffer, (long) 2);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSource1.buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(655L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeDecimalLong((-1L));
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      HashingSource.sha256(buffer2);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      buffer_UnsafeCursor0.next();
      Buffer buffer3 = realBufferedSink1.buffer;
      buffer_UnsafeCursor0.resizeBuffer(655L);
      Buffer buffer4 = buffer_UnsafeCursor0.buffer;
      Buffer buffer5 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.readByte();
      buffer2.readDecimalLong();
      buffer1.indexOf(byteString0);
      buffer4.read(buffer_UnsafeCursor0.data);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong((byte) (-51));
      buffer2.outputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = ObjectStreamConstants.baseWireHandle;
      hashingSource0.toString();
      // Undeclared exception!
      try { 
        buffer1.writableSegment(8257536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(2);
      buffer1.snapshot();
      buffer0.clone();
      Pipe pipe0 = new Pipe(847L);
      Buffer buffer2 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.seek(2);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("/wRIy.l}i@vc");
      buffer1.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.sha512();
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.inputStream();
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = buffer3.writeShortLe(33);
      buffer3.inputStream();
      Buffer buffer5 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(3420292917530356861L);
      buffer5.read(buffer4, 8L);
      buffer3.readByte();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x69
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.resizeBuffer(395L);
      buffer_UnsafeCursor0.buffer.writeDecimalLong(395L);
      buffer0.hashCode();
      buffer_UnsafeCursor0.resizeBuffer(395L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer1 = buffer0.writeDecimalLong(572L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.indexOfElement(byteString0, 395L);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource.sha256(buffer0);
      hashingSource0.toString();
      buffer0.require(395L);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha512();
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(10000000000000000L);
      ByteString byteString1 = options0.get(0);
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      byteString0.hex();
      byteString0.string(uS_ASCII0);
      Buffer buffer2 = realBufferedSink1.buffer;
      HashingSource.sha256(realBufferedSink1.buffer);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink2.outputStream();
      byteString1.base64Url();
      Pipe pipe0 = new Pipe(9999999918366720L);
      buffer1.writeDecimalLong(8L);
      realBufferedSink2.buffer.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      realBufferedSource0.buffer();
      Buffer buffer3 = realBufferedSink1.buffer.writeInt((-1));
      buffer3.timeout();
      realBufferedSink1.buffer.writeDecimalLong(9999999918366720L);
      HashingSource hashingSource0 = HashingSource.md5(buffer3);
      hashingSource0.toString();
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readByteArray((-2375L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=35 offset=0 byteCount=-2375
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "okio.Util";
      Buffer buffer1 = buffer0.writeUtf8("okio.Util");
      buffer0.readLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      realBufferedSource0.buffer();
      buffer0.writeUtf8CodePoint((-1));
      Inflater inflater0 = new Inflater(true);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      ByteString byteString2 = buffer1.snapshot();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString2;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      // Undeclared exception!
      try { 
        options0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(0L);
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = buffer1.writeShortLe((-3733));
      pipe0.sinkClosed = true;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)10;
      byte byte0 = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer2.readHexadecimalUnsignedLong();
      Charset.defaultCharset();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      buffer3.readString(charset0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8LineStrict((long) (byte) (-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -115
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.writeDecimalLong(1095216660480L);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      hashingSource0.close();
      hashingSource0.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 6);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("/wRIy.l}i@vc");
      buffer1.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.inputStream();
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = buffer3.writeShortLe(33);
      ByteString byteString0 = buffer4.snapshot();
      buffer3.inputStream();
      buffer4.indexOfElement(byteString0, (long) 33);
      // Undeclared exception!
      try { 
        buffer3.read(buffer4, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShortLe(2);
      ByteString byteString0 = buffer0.snapshot();
      buffer1.hashCode();
      buffer0.readShortLe();
      byteString0.base64();
      HashingSource.sha256(buffer0);
      HashingSource.md5(buffer0);
      HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer.writeLongLe((short)2);
      realBufferedSink0.buffer.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      Buffer buffer3 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.flush();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null, (-1), 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("S>x<VklPs'NXH7m");
      buffer0.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(5998363954247330896L);
      Pipe pipe0 = new Pipe(5998363954247330896L);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("S>x<VklPs'NXH7m", charset0);
      buffer0.sha512();
      realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = buffer3.writeShortLe(24);
      ByteString byteString0 = buffer4.snapshot();
      buffer1.indexOfElement(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer4.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha512();
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = 35L;
      Buffer buffer2 = buffer0.writeDecimalLong(35L);
      buffer1.indexOf(byteString0);
      byteString0.base64();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      hashingSink0.hash();
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.readUtf8();
      buffer2.writeUtf8("\u03C3\uFFFD5~\uFE3D\uFFFDT(P\uFFFDm\uFFFD\u0007\uFFFD \uFFFD\u0005\u000BW\u0015\u0703\uFFFD\uFFFD!\uFFFDl\uFFFD\uFFFDG\uFFFD\uFFFD<]\uFFFD\uFFFD\uFFFD\uFFFD\u0018\u0487~\uFFFD/c\uFFFD1\uFFFDGAz\uFFFD\uFFFD82z\uFFFD'\uFFFD>");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>x<VklPs'NXH7m");
      buffer0.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer1.sha256();
      buffer0.writeDecimalLong(5998363954247330896L);
      Pipe pipe0 = new Pipe(5998363954247330896L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      buffer0.sha512();
      Buffer buffer2 = buffer1.writeByte(2);
      Buffer buffer3 = realBufferedSink0.buffer;
      Buffer buffer4 = buffer2.writeShortLe(24);
      buffer4.snapshot();
      buffer2.inputStream();
      realBufferedSink0.buffer.writeHexadecimalUnsignedLong(5998363954247330896L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer2.readUtf8Line((long) 2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Integer integer0 = new Integer((-1));
      Pipe pipe1 = new Pipe(5998363954247330896L);
      Buffer buffer5 = realBufferedSink0.buffer;
      buffer2.indexOf((byte)59, (long) 24);
      Buffer buffer6 = new Buffer();
      buffer2.emit();
      MockPrintStream mockPrintStream0 = new MockPrintStream("S>x<VklPs'NXH7m");
      buffer4.rangeEquals(1884L, byteString0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeAll(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString byteString0 = buffer1.sha256();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer();
      boolean boolean0 = realBufferedSink0.closed;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-22);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-22), (byte) (-22));
      buffer1.writeShortLe((byte) (-22));
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(10000000000000L);
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.rangeEquals(438L, byteString0, 55, (int) (byte) (-22));
      HashingSink.md5(buffer3);
      ByteString byteString1 = new ByteString(byteArray0);
      OutputStream outputStream0 = bufferedSink0.outputStream();
      buffer1.writeTo(outputStream0);
      buffer0.segmentSizes();
      buffer2.readByteArray();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>x<VklPs'NXH7m");
      buffer0.readLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer1.sha256();
      buffer0.writeDecimalLong(5998363954247330896L);
      realBufferedSink0.writeIntLe(48);
      Pipe pipe0 = new Pipe(5998363954247330896L);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.close();
      ByteString byteString1 = buffer0.sha512();
      Buffer buffer2 = buffer1.writeByte(2);
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = buffer3.writeShortLe(24);
      ByteString byteString2 = buffer4.snapshot();
      Buffer buffer5 = realBufferedSink0.buffer.writeHexadecimalUnsignedLong(5998363954247330896L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer2.readUtf8Line((long) 2);
      Pipe pipe1 = new Pipe(5998363954247330896L);
      Buffer buffer6 = realBufferedSink0.buffer;
      HashingSink.hmacSha512(buffer3, byteString1);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer6, byteString0);
      hashingSink0.hash();
      buffer5.indexOfElement(byteString2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Pipe pipe2 = new Pipe(24);
      Buffer buffer7 = pipe0.buffer;
      realBufferedSink0.buffer.writeInt((-672));
      buffer1.readByteArray();
      hashingSink0.hash();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeAll(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString byteString0 = buffer1.sha256();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSink0.buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer1.writeShortLe((byte) (-22));
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((byte) (-22));
      HashingSink.md5(bufferedSink0);
      Buffer buffer3 = realBufferedSink0.buffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer3.indexOf(byteString0, 14L);
      Buffer buffer4 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffea
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.writeDecimalLong(2L);
      Buffer buffer2 = buffer1.clone();
      Buffer buffer3 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer4 = new Buffer();
      buffer2.writeShortLe(4087);
      buffer1.snapshot();
      buffer1.readUtf8();
      buffer1.inputStream();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong(2854L);
      Buffer buffer5 = new Buffer();
      buffer2.readHexadecimalUnsignedLong();
      buffer2.clone();
      buffer2.readUtf8CodePoint();
      buffer0.clear();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Segment segment0 = buffer0.head;
      buffer_UnsafeCursor0.buffer.head = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(395L);
      buffer0.writeLongLe((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint((-1336));
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffc8)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(100000000000L);
      long long0 = 6L;
      buffer1.writeLongLe(6L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.readInt();
      realBufferedSink0.writeUtf8CodePoint((-1));
      realBufferedSink0.buffer.readUtf8CodePoint();
      Charset.defaultCharset();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        realBufferedSink0.buffer.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.readByteArray();
      Buffer buffer3 = new Buffer();
      realBufferedSink0.toString();
      HashingSink.sha256(buffer3);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      long long0 = buffer_UnsafeCursor0.offset;
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      hashingSource0.hash();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Buffer buffer4 = buffer2.writeDecimalLong(10000000000L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      buffer4.require((-2154L));
      buffer_UnsafeCursor0.buffer.readByteString();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShort((byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.inputStream();
      realBufferedSink0.buffer.read(realBufferedSource0.buffer, 3340L);
      buffer_UnsafeCursor0.buffer.inputStream();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      byteString0.toAsciiUppercase();
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      hashingSink0.hash();
      realBufferedSource0.buffer.indexOf(byteString0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer2 = new Buffer();
      HashingSink hashingSink1 = HashingSink.sha512(realBufferedSink0);
      hashingSink1.flush();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      hashingSource0.toString();
      byteString0.sha1();
      realBufferedSource2.buffer.writeUtf8CodePoint(65536);
      realBufferedSource1.buffer();
      HashingSource.md5(realBufferedSource2);
      MockFile mockFile0 = new MockFile("okio.ByteString", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('d');
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      realBufferedSource2.buffer.copyTo((OutputStream) mockPrintStream1);
      realBufferedSource2.buffer.clear();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = "okio.Util";
      buffer0.writeUtf8("okio.Util");
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      Buffer buffer1 = new Buffer();
      buffer0.indexOf((byte)120, 65536L);
      buffer_UnsafeCursor0.buffer.writeDecimalLong(1382L);
      buffer_UnsafeCursor0.next();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Hem`");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = buffer0.sha256();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(386L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      int int0 = new Integer((-1));
      buffer0.inputStream();
      realBufferedSink0.writeUtf8CodePoint(65529);
      realBufferedSink0.buffer.writeByte(3);
      ByteString byteString1 = new ByteString((byte[]) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Buffer buffer3 = new Buffer();
      buffer3.sha512();
      HashingSink.sha1(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      byteString0.base64Url();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha512();
      realBufferedSink0.buffer.size = 1129L;
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = buffer0.writeDecimalLong(35L);
      buffer1.md5();
      buffer1.indexOf(byteString0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      HashingSink.sha512(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer3.readUtf8();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // java.io.EOFException
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)0);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiUppercase();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = realBufferedSink0.buffer();
      ByteString byteString1 = buffer0.md5();
      buffer0.indexOf(byteString1);
      byteString0.base64();
      HashingSink.sha512(buffer3);
      realBufferedSink0.buffer();
      buffer1.readUtf8();
      buffer0.writeUtf8("AA==");
      buffer1.readHexadecimalUnsignedLong();
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("S>0x<VlPs'NXH7m");
      ByteString byteString0 = buffer0.sha512();
      ByteString byteString1 = buffer1.hmacSha512(byteString0);
      byteString0.utf8();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\uFFFD2;\uFFFDme\u07F8Q6[\uFFFD\uFFFD\uFFFDvO\u0013ax\uFFFD\uFFFD\uFFFD\u04B6\uFFFD\uFFFD\uFFFD~\u04E9J\uFFFD\uFFFDP\uFFFD\uFFFD\u00005c33Z\u0014\uFFFDZJ\t\uFFFD\uFFFDo\u00055\uFFFD\uFFFD3\uFFFD\u03AD\uFFFD\uFFFD\uFFFDm=");
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = new Buffer();
      buffer1.indexOfElement(byteString1);
      buffer0.segmentSizes();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer3.readByteArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OutputStream outputStream0 = buffer1.outputStream();
      int int0 = ObjectStreamConstants.baseWireHandle;
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteString2.write(outputStream0);
      buffer1.rangeEquals((-2808L), byteString2, 8257536, (-1135));
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-106), (long) 8257536, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=15 fromIndex=8257536 toIndex=8
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      buffer0.readUtf8Line();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(388L);
      Integer integer0 = new Integer(581);
      buffer_UnsafeCursor0.resizeBuffer(8192L);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1));
      buffer0.sha1();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }
}
