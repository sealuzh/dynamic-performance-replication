/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 09:29:07 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Choice;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Scrollbar;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.ImageObserver;
import java.awt.image.Kernel;
import java.awt.image.VolatileImage;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.PrintStream;
import java.sql.Time;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTabbedPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.plaf.synth.SynthRootPaneUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemExsltFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.firePropertyChange(" :Ds=@1xa7rb", (short) (-1460), (short) (-1570));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 10112);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds((-1225), 2, 2458, 2458);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      XmlDocument xmlDocument0 = new XmlDocument();
      Locale locale0 = xmlDocument0.getLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.getHeight();
      jDayChooser0.updateUI();
      jDayChooser0.setSundayForeground((Color) null);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2737, true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getTopLevelAncestor();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getChangeListeners();
      defaultCaret0.getUpdatePolicy();
      jDayChooser0.addMouseListener(defaultCaret0);
      defaultCaret0.getMarkBias();
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getSelectedDay();
      Time time0 = new Time(0);
      jDayChooser0.setSelectableDateRange(time0, time0);
      MockDate mockDate0 = new MockDate(0, 0, 1526);
      SynthRootPaneUI synthRootPaneUI0 = new SynthRootPaneUI();
      jDayChooser0.addPropertyChangeListener("", (PropertyChangeListener) synthRootPaneUI0);
      jDayChooser0.setSelectableDateRange(mockDate0, time0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      jDayChooser0.getLocale();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.weekdayForeground = color0;
      jDayChooser0.firePropertyChange("INVALID_BOOLEAN", false, false);
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.setYear((-671));
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(203, dimension0.width);
      
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setYear((-671));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "FOR";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Windows";
      stringArray0[5] = "Hr(b-";
      stringArray0[6] = "?@S_=tloy7xT4kQF6 ";
      stringArray0[7] = "freemind.view.mindmapview.MultipleImage";
      stringArray0[8] = "|jM6";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String string0 = null;
      jDayChooser0.setToolTipText((String) null);
      jDayChooser0.setFont((Font) null);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.today = (Calendar) mockGregorianCalendar0;
      jDayChooser0.getMaxDayCharacters();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 3380, "day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeNotify();
      int int0 = 0;
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      jDayChooser0.setFocus();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.isFocusable();
      jDayChooser0.setMaxDayCharacters((-769));
      jDayChooser0.setFocus();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar(0, 0, 0, 1441, 0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSize((-267), 406);
      jDayChooser0.setMaxDayCharacters((-1437625606));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 0, "day", 0, 0);
      actionEvent0.paramString();
      actionEvent0.paramString();
      jDayChooser0.getHierarchyListeners();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load((-280));
      jpegImage0.getTransparentColor();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setWeekOfYearVisible(false);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 1, "org.apache.xalan.lib.sql.XConnection");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.firePropertyChange("Tvd#_'d|`vJ|e,Hn", (-1L), (-1L));
      Color color0 = jDayChooser0.getWeekdayForeground();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.sundayForeground = color0;
      assertEquals((-16754012), jDayChooser0.sundayForeground.getRGB());
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      Color color1 = Color.pink;
      jDayChooser0.setWeekdayForeground(color1);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      jDayChooser0.getDay();
      jDayChooser0.initDecorations();
      jDayChooser0.scrollRectToVisible((Rectangle) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4984, (-1162), 14);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-2397), (-1162), 0, (-2397), '$', 238);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setInheritsPopupMenu(true);
      jDayChooser0.hasFocus();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setDecorationBackgroundVisible(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      styleContext0.getStyle("Center");
      // Undeclared exception!
      try { 
        styleContext0.getBackground((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 223, 223, (-1507), 33, '%');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day");
      MenuElement[] menuElementArray0 = new MenuElement[4];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.setFocusTraversalKeysEnabled(true);
      menuSelectionManager0.addChangeListener(jMonthChooser0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jRadioButtonMenuItem0, (-513), (-513), (-513), (-513), 'V', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.getMenuSelectionManager();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth((-1423));
      FocusEvent focusEvent0 = new FocusEvent(jRadioButtonMenuItem0, (-2546), false);
      jDayChooser0.focusLost(focusEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3710), 1L, 432, 432, '}');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMaxDayCharacters(3239);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDecorationBackgroundColor();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.keyTyped((KeyEvent) null);
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setSundayForeground(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day");
      MenuElement[] menuElementArray0 = new MenuElement[4];
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[2] = (MenuElement) jRadioButtonMenuItem0;
      menuElementArray0[3] = (MenuElement) jRadioButtonMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.setFocusTraversalKeysEnabled(true);
      menuSelectionManager0.addChangeListener(jMonthChooser0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jRadioButtonMenuItem0, (-513), (-513), (-513), (-513), 'V', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.getMenuSelectionManager();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth((-1423));
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 5, 5, 5, 'Y');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("Windows", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isFocusable();
      jDayChooser0.setMaxDayCharacters(42);
      jDayChooser0.setFocus();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      MockDate mockDate0 = new MockDate((-220), 42, 42, (-220), (-175));
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.updateUI();
      Scrollbar scrollbar0 = null;
      try {
        scrollbar0 = new Scrollbar(0, 0, 0, (-1886), 0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Time time0 = new Time(0L);
      jDayChooser0.setMinSelectableDate(time0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      SystemColor systemColor0 = SystemColor.textText;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 9999, 1, (-2466), 35, 'T');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textText;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 223, (-107L), (-1507), 33, '%');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 1, 1072, 39, '%');
      jDayChooser0.keyPressed(keyEvent0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      jDayChooser0.setFocus();
      assertEquals(15, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textText;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 223, (-107L), (-1507), 33, '%');
      keyEvent0.setKeyCode(37);
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 1025, 34, '%');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1507), 0L, 33, 36, ' ');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10, 33, 899, 38, '%');
      jDayChooser0.keyPressed(keyEvent0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775795L));
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getFocusTraversalKeys((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 40, 40, 40, ' ');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775766L);
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate(13, 8249, 10085);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.getDayPanel();
  }
}
