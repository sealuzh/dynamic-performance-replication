/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:09:58 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        basic1DMatrix0.blankOfColumns((-359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-359
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(39, 39, 39);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(39, 1428);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '39' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      DenseMatrix.from2DArray(doubleArray0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("2");
      basic1DMatrix0.setAll(9);
      Random.setNextRandom(9);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(664, 664, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(664, 664);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.copyOfShape(6, 6);
      assertEquals(6, matrix0.columns());
      assertEquals(6, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9);
      mockRandom0.setSeed(9);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(9, mockRandom0);
      assertEquals(9, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("fl,`+2%z8'C8lZ?/@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(9, 9, mockRandom0);
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(9, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(19, 16);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(789, 48, doubleArray0[0]);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(48, 789);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(8, 8);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(8, 1260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1260
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      Vector vector0 = basic1DMatrix0.getRow(1);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-23);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      basic1DMatrix0.swapRows((-4344), 17);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(26, 26);
      assertEquals(26, basic1DMatrix0.columns());
      assertEquals(26, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(26, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 676
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 8;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(8, 9);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(9, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int1 = 8;
      Matrix matrix0 = basic1DMatrix0.copyOfColumns(8);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertFalse(matrix0.equals((Object)basic1DMatrix0));
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(9, basic1DMatrix0.columns());
      assertEquals(8, matrix0.columns());
      assertEquals(8, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapColumns(8, 1260);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(807, 807);
      assertEquals(807, basic1DMatrix0.columns());
      assertEquals(807, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(807, basic1DMatrix0.columns());
      assertEquals(807, basic1DMatrix0.rows());
      assertNotNull(doubleArray0);
      
      basic1DMatrix0.setAll(807);
      assertEquals(807, basic1DMatrix0.columns());
      assertEquals(807, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(doubleArray0);
      
      basic1DMatrix0.setAll(807);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(8, 8);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      basic1DMatrix0.swapColumns(8, 8);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(8);
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      int int1 = NumberFormat.FRACTION_FIELD;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      assertNotNull(byteArray0);
      
      Basic1DMatrix basic1DMatrix1 = new Basic1DMatrix(1, 1);
      assertFalse(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(1, basic1DMatrix1.rows());
      assertNotNull(basic1DMatrix1);
      
      byte byte0 = (byte)0;
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.fromBinary(byteArray0);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertFalse(basic1DMatrix0.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertTrue(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertEquals(8, basic1DMatrix0.rows());
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(8, basic1DMatrix2.columns());
      assertEquals(8, basic1DMatrix2.rows());
      assertNotNull(basic1DMatrix2);
      
      // Undeclared exception!
      try { 
        basic1DMatrix1.getRow(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      basic1DMatrix0.swapRows((-4344), (-4344));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      int int0 = 48;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(18, 48, doubleArray0[0]);
      assertEquals(48, basic1DMatrix0.columns());
      assertEquals(18, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(48, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(2, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertTrue(denseMatrix1.equals((Object)denseMatrix0));
      assertEquals(2, denseMatrix1.rows());
      assertEquals(9, denseMatrix1.columns());
      assertNotNull(denseMatrix1);
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix1, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      assertEquals(2, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, denseMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(2, basic1DMatrix0.columns());
      assertEquals(2, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(9, denseMatrix0.columns());
      assertEquals(2, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertNotNull(basic1DMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      assertEquals(2, denseMatrix0.rows());
      assertEquals(1, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(1, denseMatrix0.rows());
      assertEquals(9, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      int int0 = 1;
      SparseVector sparseVector0 = SparseVector.zero(1);
      assertEquals(1, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      assertEquals(1, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }
}
