/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:44:42 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Member;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.Utility");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((-1201), (-1201));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("4ON[:v", "V", "V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4ON[:v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$84", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("84", string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.getSignature("6R#Aka59^P>!cv G");
      assertEquals("L6R#Aka59^P>!cv;", string0);
      
      boolean boolean0 = Utility.isSet(20, 20);
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("invokespecial", false);
      assertEquals("invokespecial", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("5L(_xT;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5L(_xT;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(":E!KKFEpfoK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:E!KKFEpfoK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P)w2Q'>Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P)w2Q'>Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Evb[` ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Evb[` 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.replace(".J>fgg/f$Koqxt>", ".J>fgg/f$Koqxt>", ".J>fgg/f$Koqxt>");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockFile mockFile0 = new MockFile("KA)@uK.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "KA)@uK.", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(10L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.accessToString(40, false);
      assertEquals("static synchronized", string0);
      
      String string1 = Utility.replace("|", "static synchronized", "static synchronized");
      assertEquals("|", string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.accessToString((-1355), true);
      Utility.compactClassName("public protected final transient strictfp synthetic annotation enum", "public protected final transient strictfp synthetic annotation enum", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public protected final transient strictfp synthetic annotation enum", "irem", "irem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected final transient strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = Utility.getSignature("Y0&9X");
      assertEquals("LY0&9X;", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.accessToString(581);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Utility.decode("fnWVBg$ ^o", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<init>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-48);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$d0", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.typeOfSignature("Invalid method signaNure: ");
      Utility.signatureToString("Invalid method signaNure: ", true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.getSignature(">\t");
      assertEquals("L>;", string0);
      
      String string1 = Utility.convertString("? extends ");
      assertEquals("? extends ", string1);
      
      byte[] byteArray0 = new byte[1];
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$A", string2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.classOrInterface(1871);
      Utility.compactClassName("java.lang.0!v:2.+bu1");
      Utility.searchOpcode("fload_2");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("getfield");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(47, 998);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "/k=uGD";
      Utility.compactClassName("/k=uGD");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("8 9dR+,xil");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8 9dR+,xil
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String[] stringArray0 = new String[7];
      stringArray0[0] = " int";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("eLSYSTEM;V", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = Utility.classOrInterface(46);
      assertEquals("class", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "class";
      stringArray0[1] = "Signature: ";
      stringArray0[2] = "Signature: ";
      stringArray0[3] = "class";
      String string1 = Utility.methodTypeToSignature("Signature: ", stringArray0);
      assertEquals("(Lclass;LSignature:;LSignature:;Lclass;)LSignature:;", string1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "[k=h#";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[k=h#", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [k=h#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.methodTypeToSignature("transient", (String[]) null);
      try { 
        Utility.typeOfSignature("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)107;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("3b c4 6b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3b c4 6b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short short0 = Constants.UNDEFINED;
      Utility.isSet((byte) (-71), 2435);
      try { 
        Utility.typeOfSignature("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Utility.getSignature(">\t");
      assertEquals("L>;", string0);
      
      short short0 = Utility.searchOpcode("aCZhh|qm1;Ab7j*");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.getSignature("\t\t%");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.classOrInterface(1853);
      try { 
        Utility.typeOfSignature("RCgKm39{`RVecvq5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RCgKm39{`RVecvq5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      Utility.searchOpcode("wide");
      Method method0 = new Method();
      try { 
        Utility.typeOfSignature("... (truncated)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ... (truncated)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.compactClassName("lstore_3", "lstore_3", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      Utility.encode(byteArray0, false);
      Utility.convertString("$84");
      Utility.classOrInterface(8);
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y0&9X", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y0&9X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = Utility.setBit(32, 32);
      assertEquals(33, int0);
      
      String string0 = Utility.methodSignatureReturnType("[L\";V");
      assertEquals("\"[]", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.convertString("hC4p6$V{[`yWJ+");
      // Undeclared exception!
      try { 
        Utility.getSignature("S:C9Q9[Kv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Kv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-70);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), (int) (byte) (-70));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.classOrInterface(1853);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1185, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("6b 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6b 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.getSignature("F+8=r8{$l");
      assertEquals("LF+8=r8{$l;", string0);
      
      String string1 = Utility.convertString("new");
      assertEquals("new", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("g", string2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-124);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, (int) (byte)56, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.convertString("P)w2Q'>Q");
      assertEquals("P)w2Q\\'>Q", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('E');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit((-2365), (-2365));
      assertEquals((-2365), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = Utility.getSignature("<init>");
      assertEquals("L<init>;", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifne");
      byte byte0 = Utility.typeOfSignature("L<init>;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("<init>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <init>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short short0 = Constants.NEW_QUICK;
      String string0 = "&IuF";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("&IuF");
      Utility.classOrInterface((short)221);
      String string1 = "bootstrap_method_attr_index";
      try { 
        Utility.typeOfSignature("&IuF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &IuF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t%");
      assertEquals("L%;", string0);
      
      String string1 = Utility.signatureToString("L%;");
      assertEquals("%", string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.compactClassName("lstore_3", "lstore_3", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      Utility.encode(byteArray0, false);
      Utility.convertString("$84");
      Utility.classOrInterface((byte) (-124));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("$84");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $84
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = Utility.setBit((-1651), (-1651));
      assertEquals((-1651), int0);
      
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.getSignature("Q@OFZKaUu^!");
      assertEquals("LQ@OFZKaUu^!;", string0);
      
      String string1 = Utility.format((-1651), (-1651), false, 'y');
      assertEquals("-1651", string1);
      
      String string2 = Utility.convertString("\"");
      assertEquals("\\\"", string2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.setBit((-1651), (-1651));
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("%0+2ZgiK^6 yk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %0+2ZgiK^6 yk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-101);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("27 9b 00 00 00 00 00 00 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 27 9b 00 00 00 00 00 00 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-548), 68);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Object object1 = new Object();
      Utility.typeOfSignature("*ZI)A--tTz3YRJ");
      Utility.isJavaIdentifierPart('O');
      String string0 = "I>)BL=g53{_Y1Kf~6";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("BootstrapMethod(", "areturn", "I>)BL=g53{_Y1Kf~6", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BootstrapMethod(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.decode("MOEMF4h#w`$YL|", false);
      Utility.isSet(33, 33);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(33, 60);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("=<y# z9M[JCo/w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =<y# z9M[JCo/w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("The suffix must not be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      try { 
        Utility.typeOfSignature("G9N\"oK3%,;.wm ~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G9N\"oK3%,;.wm ~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      try { 
        Utility.typeOfSignature("9_L^T}@w<<$'Zek");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9_L^T}@w<<$'Zek
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = ",^n`(F(ZFt05fVS,";
      try { 
        Utility.typeOfSignature(",^n`(F(ZFt05fVS,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,^n`(F(ZFt05fVS,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.fillup("putField", 1842, false, '}');
      Utility.getSignature("putField");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)76;
      Utility.toHexString(byteArray0);
      Utility.isSet((byte)76, 1842);
      byte byte0 = Constants.T_DOUBLE;
      try { 
        Utility.typeOfSignature("4c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), 4910);
      assertEquals("0:    nop\n1:    l2i\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "@3B<izY^W+q,TJ93&";
      Utility.convertString("@3B<izY^W+q,TJ93&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("@3B<izY^W+q,TJ93&");
      Utility.convertString("@3B<izY^W+q,TJ93&");
      Utility.classOrInterface(45);
      Utility.compactClassName("class", "class", true);
      boolean boolean0 = false;
      try { 
        Utility.typeOfSignature("@3B<izY^W+q,TJ93&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @3B<izY^W+q,TJ93&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      short short0 = Constants.IF_ACMPNE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)91;
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.typeOfSignature("C/1jZg=x8ous$#");
      Utility.signatureToString("C/1jZg=x8ous$#");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("putfield", "if_icmple");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"if_icmple\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("X#C$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X#C$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-25);
      byte byte2 = (byte)91;
      byte byte3 = (byte)91;
      try { 
        Utility.typeOfSignature("MOEMF4h#w`$YL|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MOEMF4h#w`$YL|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "BootstrapMethods(";
      Utility.signatureToString("BootstrapMethods(");
      Utility.convertString("BootstrapMethods(");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("BootstrapMethods(", "char", " (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BootstrapMethods(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "lstore_1";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lstore_1");
      Utility.typeOfSignature("B");
      String string1 = "Er\\\"";
      try { 
        Utility.typeOfMethodSignature("Er\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Er\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.isSet(216, 216);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte)72;
      byteArray1[3] = (byte) (-98);
      byteArray1[4] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 710, (int) (byte)91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.fillup("", 1842, false, '}');
      Utility.getSignature("");
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.getSignature("qK2:E!7AS14");
      String string1 = Constants.ILLEGAL_OPCODE;
      Utility.searchOpcode("/");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byteArray0[2] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, 83, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.getSignature("<init>");
      String string1 = Constants.ILLEGAL_OPCODE;
      short short0 = Constants.IMPDEP1;
      String string2 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, (int) (byte) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("MOEMF4h#w`$YL|", false);
      Utility.searchOpcode("MOEMF4h#w`$YL|");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, (int) (short) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-837), (int) (byte)18, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    bipush\t\t16
         // 2:    fload_1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-92);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 a4", string0);
      
      byte[] byteArray1 = Utility.decode("00 a4", false);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte)32, (byte)97, (byte)52}, byteArray1);
      
      boolean boolean0 = Utility.isSet((byte)0, 13);
      assertFalse(boolean0);
      
      Utility.fillup("c!N4v.{zgXn[gm", (byte)0, false, '/');
      String string1 = Utility.getSignature("SC( .7v%Wjco=#4^9%#");
      assertEquals("LSC(;", string1);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1126324538), (int) (byte) (-92), false);
      assertEquals("0:    faload\n1:    faload\n2:    lload_2\n3:    ladd\n4:    caload\n", string2);
      
      String string3 = Utility.format((-296), (-1635), true, '/');
      assertEquals("-296", string3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)74, 227);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.convertString("|J9");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte)69, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-98);
      byteArray1[2] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1022, (int) (byte)104, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byte byte0 = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-125);
      Utility.toHexString(byteArray0);
      short short0 = Constants.UNDEFINED;
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 256, (int) (byte) (-125), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte)104;
      short short0 = Utility.searchOpcode("*HM");
      assertEquals((short) (-1), short0);
      
      Utility.format(170, 1936, false, 'L');
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, (int) (byte)66);
      assertEquals("0:    nop\n1:    nop\n2:    imul\n", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte) (-70);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)67;
      short short0 = Constants.UNDEFINED;
      String string0 = Utility.compactClassName("h6J+BZ]mf` e9_71n");
      assertEquals("h6J+BZ]mf` e9_71n", string0);
      
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-2030), (int) (byte)67, false);
      assertEquals("0:    fstore_0\n", string1);
      
      String string2 = Utility.compactClassName(" is no interface", " is no interface", false);
      assertEquals(" is no interface", string2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal type>");
      Constant.getComparator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1725, (-2237), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.getSignature("N}0QFu04Nb");
      byte byte0 = (byte) (-86);
      Utility.compactClassName("N}0QFu04Nb");
      Utility.searchOpcode("N}0QFu04Nb");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-86);
      Utility.toHexString(byteArray1);
      short short0 = Constants.UNDEFINED;
      try { 
        Utility.typeOfSignature("N}0QFu04Nb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N}0QFu04Nb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("Invalid method signature: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-50);
      byte byte0 = (byte) (-2);
      boolean boolean0 = false;
      try { 
        Utility.decode("$xYxn{O,/8q7V", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-92);
      byte byte1 = (byte)5;
      byteArray0[2] = (byte)5;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (int) (byte) (-92), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "";
      int int0 = 1842;
      Utility.fillup("", 1842, false, '}');
      Utility.getSignature("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("L;");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) '}', 3531, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      String string1 = Utility.convertString("MOEMF4h#w`$fL|");
      assertEquals("MOEMF4h#w`$fL|", string1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i2f");
      try { 
        Utility.methodSignatureReturnType("M .");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M .'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.typeOfSignature("- 0jb.0WWzC5thqMy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: - 0jb.0WWzC5thqMy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)74;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature(")),\"j\"qit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )),\"j\"qit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.isSet(187, 187);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gm1#.uGPeRHa2s|", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gm1#.uGPeRHa2s|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      Utility.toHexString(byteArray0);
      Utility.convertString("9b 9b");
      Utility.classOrInterface((byte) (-101));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 778, (-353), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      Utility.convertString("M{v=*,EL]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "breakpoint");
      String string0 = "StackMapTable";
      Utility.typeOfSignature("StackMapTable");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `freturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "<illegal opcode>";
      Constant.getComparator();
      Utility.getSignature("y)]V?#\"Spg\"tkVzz{");
      String string1 = Constants.ILLEGAL_OPCODE;
      Utility.typeOfSignature("V}`7`<BeW=RBE0");
      String string2 = "WM >_Jl)>";
      String string3 = "[J8H%4*r9utrq";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Ly)]V?#\"Spg\"tkVzz{;", "if_acmpeq", "[J8H%4*r9utrq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ly)]V?#\"Spg\"tkVzz{;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.getSignature("");
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1382, 1382);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodref1;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("+y}6:@}r+d~/Zb[Zu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: y}6:@}r+d~/Zb[Zu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.fillup("<init>", 2587, false, 'P');
      try { 
        Utility.methodSignatureReturnType("Expected class `", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Expected class `'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.setBit((-1651), (-1651));
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)5;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XstAh~A9m2r{b");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)73, 2795, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.isSet(33, 33);
      Utility.methodSignatureReturnType("Ddl-Ac>y", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      String string0 = Pattern.quote("double");
      assertEquals("\\Qdouble\\E", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("The list of suffixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The list of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      String string0 = Utility.fillup("Gm1#.EG'eRHa2s|", 33, false, '}');
      assertEquals("}}}}}}}}}}}}}}}}}}Gm1#.EG'eRHa2s|", string0);
      
      String string1 = Utility.classOrInterface(33);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "annotation");
      byte byte0 = Utility.typeOfSignature("F!)3XqPP8InYw");
      assertEquals((byte)6, byte0);
      
      String string2 = Utility.replace("class", "annotation", "class");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-114);
      Utility.encode(byteArray0, false);
      Utility.convertString("$8e");
      Utility.classOrInterface((byte) (-114));
      ConstantMethodref constantMethodref0 = new ConstantMethodref(176, 577);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-114), (int) (byte) (-114), false);
      try { 
        Utility.methodSignatureArgumentTypes("$8e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $8e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-93);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("tw|2@zfa!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tw|2@zfa!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "()L<init>;";
      Utility.methodSignatureArgumentTypes("()L<init>;");
      byte[] byteArray0 = null;
      try { 
        MockURI.URI("()L<init>;", "()L<init>;", "()L<init>;", " PP.-e`/~");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ()L<init>;://()L<init>;()L%3Cinit%3E;#%20PP.-e%60/~
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.classOrInterface(30);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "class";
      try { 
        Utility.typeOfSignature("KK5ezS3Hy??GtD]RSw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KK5ezS3Hy??GtD]RSw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      short short0 = Constants.UNDEFINED;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-116);
      byteArray1[5] = (byte) (-116);
      byteArray1[6] = (byte) (-59);
      byteArray1[7] = (byte) (-116);
      byteArray1[8] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (short) (-1), 90, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~UrsN'`bMS?&]0!");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "~UrsN'`bMS?&]0!";
      objectArray0[1] = (Object) "~UrsN'`bMS?&]0!";
      objectArray0[3] = (Object) locale0;
      objectArray0[0] = (Object) "~UrsN'`bMS?&]0!";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "~UrsN'`bMS?&]0!", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      constantPool0.setConstantPool((Constant[]) null);
      byteArray0[0] = (byte)38;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.ache");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3530, (int) (byte)38, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.setBit((-200), 65);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3042), 247, true);
      Utility.toHexString(byteArray0);
      Utility.replace("0:    dload_0\n1:    <illegal opcode>\n2:    dstore_0\n3:    fadd\n4:    dload_1\n5:    istore_3\n6:    astore_2\n7:    <illegal opcode>\n", "? extends ", "0:    dload_0\n1:    <illegal opcode>\n2:    dstore_0\n3:    fadd\n4:    dload_1\n5:    istore_3\n6:    astore_2\n7:    <illegal opcode>\n");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "invokestatic";
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)98;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("\n", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (int) (byte)62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 45, (-225), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)37;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-93);
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 40, (int) (byte)5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)87, (byte)87);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0, false);
      Object object1 = new Object();
      try { 
        Utility.typeOfSignature("/rlHOk ]_5(DG{ zA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /rlHOk ]_5(DG{ zA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = Constants.T_ARRAY;
      int int0 = Member.DECLARED;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("impdep2", "impdep2", true);
      assertEquals("", string0);
      
      String string1 = Utility.getSignature("zU81N*]U2[+g]`Rc8l\"");
      assertEquals("[LzU81N*]U2;", string1);
      
      int int1 = Pattern.DOTALL;
      int int2 = Pattern.UNICODE_CASE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte1 = Utility.typeOfSignature("[LzU81N*]U2;");
      assertEquals((byte)13, byte1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "impdep2";
      stringArray0[1] = "";
      stringArray0[2] = "impdep2";
      String string2 = Utility.methodTypeToSignature(".<9*D0", stringArray0);
      assertEquals("(Limpdep2;L;Limpdep2;)L/<9*D0;", string2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "x@v$";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.getSignature("YUwUV{Q;;JpB'");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-21);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("LYUwUV{Q;;JpB';", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      boolean boolean0 = false;
      Utility.signatureToString("LYUwUV{Q;;JpB';", true);
      try { 
        Utility.typeOfSignature("YUwUV{Q;;JpB'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YUwUV{Q;;JpB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[2] = (byte) (-101);
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JavaClass.debug");
      Constant.getComparator();
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1614), (byte) (-101));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[6];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodref1.accept(emptyVisitor0);
      constantArray0[0] = (Constant) constantMethodref1;
      constantArray0[2] = (Constant) constantMethodref1;
      short short0 = Utility.searchOpcode("<illegal type>");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.methodSignatureReturnType("JavaClass.debug");
      assertEquals("long", string1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant.getComparator();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putfield");
      int int0 = Member.DECLARED;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1900), 1339, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)21, 256, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "XwgB,?NP0/x0'CH";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XwgB,?NP0/x0'CH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XwgB,?NP0/x0'CH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Object object0 = new Object();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("X;:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X;:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      Constant.getComparator();
      ConstantFloat constantFloat0 = new ConstantFloat(1930.5842F);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)48;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-57), (int) (byte)74, true);
      assertEquals("0:    ifnonnull\t\t#19143\n3:    ifnonnull\t\t#19146\n6:    faload\n", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "MOEMF4h#\\w`$fL|";
      // Undeclared exception!
      try { 
        Utility.decode("MOEMF4h#w`$fL|", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)74, 227);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.convertString("|J9");
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 129, (-2069), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Constants.CONSTANT_Utf8;
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant.getComparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = " (";
      byte[] byteArray0 = Utility.decode(" (", false);
      ConstantPool constantPool0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MOEMF4h#w`$YL|");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2556, 12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = Constants.ATTR_CONSTANT_VALUE;
      Utility.clearBit(859, (byte)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant.getComparator();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 138, (-1588));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.compactClassName("lstore_3", "lstore_3", true);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-124);
      byteArray0[0] = (byte) (-124);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.convertString("<init>");
      Utility.encode(byteArray0, true);
      Utility.convertString("u#");
      Utility.classOrInterface((byte) (-124));
      Utility.fillup("bUlc^_,r", 123, false, '6');
      Utility.getSignature("u#");
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("bUlc^_,r");
      Utility.convertString("<init>");
      try { 
        Utility.typeOfSignature("Unexpected element value kind in annotation: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unexpected element value kind in annotation: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-72));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LineNumberTable");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), (int) (byte)48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-96);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte) (-96);
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte)107;
      byteArray1[6] = (byte)107;
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-96), 170, false);
      assertEquals("0:    if_icmpne\t\t#-24416\n3:    if_icmpne\t\t#27395\n6:    dmul\n", string1);
      
      String string2 = Utility.classOrInterface(20);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.fillup("putField", 1842, false, '}');
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = Utility.decode("OQZ*3j18", false);
      ConstantFloat constantFloat0 = new ConstantFloat(1842);
      ConstantFloat constantFloat1 = new ConstantFloat(1842);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 175, 47, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Utility.classOrInterface((-1599));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte) (-107);
      byteArray1[3] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 191, (-4112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte byte0 = (byte)43;
      String[] stringArray0 = new String[24];
      stringArray0[0] = "N}0QFu04Nb";
      stringArray0[1] = "N}0QFu04Nb";
      stringArray0[2] = "N}0QFu04Nb";
      stringArray0[3] = "N}0QFu04Nb";
      stringArray0[4] = "N}0QFu04Nb";
      byte[] byteArray0 = Utility.decode("-dvK", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)100, (byte)118, (byte)75}, byteArray0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte)43);
      assertNotNull(constantFloat0);
      assertEquals(43.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat((-1.0F));
      assertFalse(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals((-1.0F), constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      Constant[] constantArray0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N}0QFu04Nb");
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, (int) (byte)43, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.getSignature("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L;", string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "L;";
      String string3 = Utility.methodTypeToSignature("<illegal opcode>", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("(L;L;LL;;)L<illegal;", string3);
      
      byte[] byteArray0 = Utility.decode("dload_3", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)100, (byte)108, (byte)111, (byte)97, (byte)100, (byte)95, (byte)51}, byteArray0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      assertNotNull(constantFloat0);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$uKJTbz+~,");
      assertFalse(boolean0);
      
      int int0 = (-2624);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 181, (-2624), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature("' at index ", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L';", string0);
      
      String string1 = "%mvqjKaon0]s`(";
      String string2 = "QoCNG";
      byte[] byteArray0 = Utility.decode("QoCNG", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)111, (byte)67, (byte)78, (byte)71}, byteArray0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(541);
      assertNotNull(constantFloat0);
      assertEquals(541.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZCBGXx@u");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 541, (int) (byte)13, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)43;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (int) (byte) (-97), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = Utility.compactClassName("", "", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(171);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Utility.getSignature("<illegal opcode>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L<illegal;", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) "<illegal opcode>";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureReturnType("L<illegal;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(171);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Constant[] constantArray0 = new Constant[0];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-104);
      byte[] byteArray1 = Utility.decode("xz50nO{i9v%Yq\"", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (-3390), 91);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("0:    ishl\n1:    ishr\n2:    saload\n3:    faload\n4:    fdiv\n5:    iastore\n6:    lshr\n7:    lmul\n8:    dstore\t\t%118\n10:   fload_3\n11:   dup\n12:   lrem\n13:   fload_0\n", string1);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("", constantUtf8_0.getBytes());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)1, (byte)0, (byte) (-104), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.format(9995, 1059, false, 'P');
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      boolean boolean2 = Utility.isSet((byte) (-27), (-5726));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (-2731));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MIG`Mx");
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(1, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      
      String string1 = constantPool1.toString();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertEquals("", string1);
      assertEquals(1, constantPool1.getLength());
      
      constantPool1.setConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertEquals(1, constantPool1.getLength());
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotNull(constantPool3);
      assertEquals(1, constantPool3.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte) (-1);
      byteArray0[4] = (byte)55;
      String string2 = Utility.classOrInterface((byte)55);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      String[] stringArray0 = Constants.TYPE_NAMES;
      assertNotNull(stringArray0);
      
      String string3 = Utility.encode(byteArray0, true);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)55, (byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
      
      ConstantPool constantPool4 = new ConstantPool(constantArray0);
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertNotNull(constantPool4);
      assertEquals(1, constantPool4.getLength());
      
      String string4 = Utility.codeToString(byteArray0, constantPool4, (-3784), 335, false);
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)55, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    lstore\t\t%0\n", string4);
      assertEquals(1, constantPool4.getLength());
      
      String string5 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("<init>", string5);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)55, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 181, 76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      byte[] byteArray0 = Utility.decode("if_acmpeq", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)97, (byte)99, (byte)109, (byte)112, (byte)101, (byte)113}, byteArray0);
      
      short short0 = Utility.searchOpcode("wide");
      assertEquals((short)196, short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short)196, 872, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      String string0 = Utility.convertString("[s<2zL'7GK");
      assertNotNull(string0);
      assertEquals("[s<2zL\\'7GK", string0);
      
      String string1 = Utility.compactClassName("[s<2zL'7GK");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[s<2zL'7GK", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("()LXwgB,?NP0.x", "PsvWg&n", "wyJ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LXwgB,?NP0.x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.getSignature("<init>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L<init>;", string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      
      short short0 = Constants.IMPDEP1;
      assertEquals((short)254, short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)26;
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4796), (-4796), false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)0, (byte)26}, byteArray0);
      assertEquals("0:    nop\n1:    iload_0\n", string3);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.convertString(" (");
      assertNotNull(string0);
      assertEquals(" (", string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-92), (byte) (-92), (byte) (-92)}, byteArray0);
      assertEquals("a4 a4 a4 a4", string1);
      
      String string2 = "\"{a&";
      try { 
        Utility.typeOfSignature("\"{a&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"{a&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("fC^0>,~5D Pt;");
      assertNotNull(string0);
      assertEquals("LfC^0>,~5D;", string0);
      
      String string1 = Utility.getSignature("Invalid method signature: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LInvalid;", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)80;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("LInvalid;");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("LInvalid;", constantUtf8_0.getBytes());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("LInvalid;", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("LInvalid;", constantUtf8_1.getBytes());
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(78, 78);
      assertNotNull(constantMethodref0);
      assertEquals(78, constantMethodref0.getClassIndex());
      assertEquals(78, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)80, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("lastore", string2);
      assertEquals(0, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      
      short short0 = Utility.searchOpcode(" (");
      assertEquals((short) (-1), short0);
      
      String string3 = Utility.printArray((Object[]) null);
      assertNull(string3);
      
      String string4 = Utility.replace("fneg", "jsr_w", "_Lq'y0')[MRQ9U.6#.");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("fneg", string4);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)81;
      byteArray0[5] = (byte) (-92);
      byteArray0[3] = (byte) (-64);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1232, (int) (byte) (-82));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-103), (byte) (-103));
      assertNotNull(constantMethodref0);
      assertEquals((-103), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-103), constantMethodref0.getClassIndex());
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-103), 2339);
      assertNotNull(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-103), constantInvokeDynamic0.getClassIndex());
      assertEquals(2339, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-103), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotNull(constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool3.getLength());
      
      ConstantPool constantPool4 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertNotNull(constantPool4);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool4.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)52;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool3, (-510), 1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("N}0QFu04Nb");
      assertNotNull(string0);
      assertEquals("LN}0QFu04Nb;", string0);
      
      String string1 = Utility.compactClassName("N}0QFu04Nb", "LN}0QFu04Nb;", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("N}0QFu04Nb", string1);
      
      String string2 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<clinit>", string2);
      
      String string3 = Utility.classOrInterface((byte) (-87));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("interface", string3);
      
      String string4 = Utility.convertString("N}0QFu04Nb");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("N}0QFu04Nb", string4);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)93, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("interface");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("interface", constantUtf8_0.getBytes());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("interface", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("interface", constantUtf8_1.getBytes());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 891, (-4276));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "U81N*]k2[+g]`.c8l\"";
      String string1 = Utility.getSignature("U81N*]k2[+g]`.c8l\"");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[LU81N*]k2;", string1);
      
      String string2 = "class_index";
      byte[] byteArray0 = Utility.decode("class_index", false);
      assertNotNull(byteArray0);
      
      byte byte0 = (byte)18;
      byte byte1 = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 157, (int) (byte) (-88), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.getSignature("<init>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L<init>;", string1);
      
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-24);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, 2076, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)25;
      byte[] byteArray1 = Utility.decode("boolean", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)111, (byte)111, (byte)108, (byte)101, (byte)97, (byte)110}, byteArray1);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.convertString("x6oTI;|VC=");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("x6oTI;|VC=", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 78, 87, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      byte[] byteArray0 = Utility.decode("x@v$", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)64, (byte)118}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (-1241), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)7, (byte)32, (byte)44, (byte)26, (byte) (-128)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertArrayEquals(new byte[] {(byte)7, (byte)32, (byte)44, (byte)26, (byte) (-128)}, byteArray0);
      assertEquals(7, int0);
      assertEquals(1, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = null;
      short short1 = Constants.UNDEFINED;
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (int) (byte)7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(1931.64F);
      assertNotNull(constantFloat0);
      assertEquals(1931.64F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      String string1 = Utility.convertString("<illegal type>");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      byte byte0 = (byte)86;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)47;
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      
      byte byte1 = (byte)93;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte)47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 147, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "N}0QFu04Nb";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "M{v=*,EL]";
      stringArray0[1] = "n$JqrB!(qnouBL";
      stringArray0[2] = "N}0QFu04Nb";
      String string1 = Utility.methodTypeToSignature("N}0QFu04Nb", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(LM{v=*,EL];Ln$JqrB!(qnouBL;LN}0QFu04Nb;)LN}0QFu04Nb;", string1);
      
      String string2 = "%mvqjKaon0]s`(";
      byte[] byteArray0 = Utility.decode("Ef4%J# /},{;xBto^9", false);
      assertNotNull(byteArray0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-214.559F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-214.559F), constantFloat0.getBytes(), 0.01F);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%mvqjKaon0]s`(");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)43, (int) (byte) (-72), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = Utility.decode("<illegal type>", false);
      assertNotNull(byteArray0);
      
      String string1 = Utility.compactClassName("<illegal type>");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      short short0 = Utility.searchOpcode(":zK5,Vq!WK@u!0i.");
      assertEquals((short) (-1), short0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short1 = Constants.UNDEFINED;
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6276, 1102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal type>");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(63, (-1520));
      assertNotNull(constantMethodref0);
      assertEquals((-1520), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(63, constantMethodref0.getClassIndex());
      
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.copy();
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      assertEquals((-1520), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(63, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals((-1520), constantMethodref1.getNameAndTypeIndex());
      assertEquals(63, constantMethodref1.getClassIndex());
      
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref0.equals((Object)constantMethodref1));
      assertTrue(constantMethodref2.equals((Object)constantMethodref0));
      assertTrue(constantMethodref2.equals((Object)constantMethodref1));
      assertNotNull(constantMethodref2);
      assertEquals((-1520), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(63, constantMethodref0.getClassIndex());
      assertEquals((-1520), constantMethodref2.getNameAndTypeIndex());
      assertEquals(63, constantMethodref2.getClassIndex());
      assertEquals((byte)10, constantMethodref2.getTag());
      
      constantMethodref0.setNameAndTypeIndex(243);
      assertFalse(constantMethodref0.equals((Object)constantMethodref2));
      assertFalse(constantMethodref0.equals((Object)constantMethodref1));
      assertNotSame(constantMethodref0, constantMethodref2);
      assertNotSame(constantMethodref0, constantMethodref1);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(63, constantMethodref0.getClassIndex());
      assertEquals(243, constantMethodref0.getNameAndTypeIndex());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 434, 582, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Utility.clearBit(2, 2);
      assertEquals(2, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 57, 1521, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[4] = object2;
      objectArray0[5] = (Object) null;
      objectArray0[5] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      boolean boolean3 = Utility.isSet(3983, 3983);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string1 = "(i[R)v<6{^4;x-PH5,'";
      try { 
        Utility.methodSignatureArgumentTypes("(i[R)v<6{^4;x-PH5,'", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i[R)v<6{^4;x-PH5,''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-70);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.methodTypeToSignature("Sm-+-21T", (String[]) null);
      assertNotNull(string0);
      assertEquals("()LSm-+-21T;", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("()LSm-+-21T;");
      assertEquals((byte)14, byte0);
      
      byte byte1 = Utility.typeOfSignature("BrbAp}}^");
      assertFalse(byte1 == byte0);
      assertEquals((byte)8, byte1);
      
      try { 
        Utility.methodSignatureArgumentTypes("Signature: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegal type: ");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)107, (byte)107);
      assertNotNull(constantMethodref0);
      assertEquals(107, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(107, constantMethodref0.getNameAndTypeIndex());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1246), (-1246));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      Constant[] constantArray0 = new Constant[0];
      Constant[] constantArray1 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool2.getLength());
      
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)78, (int) (byte)78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "asEp'-R-D'Je";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "void";
      stringArray0[1] = "asEp'-R-D'Je";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "UX";
      try { 
        Utility.methodTypeToSignature("asEp'-R-D'Je", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DfqN*efD1nxDV'FmT,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1672), 583, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray0);
      assertEquals("0:    lor\n", string0);
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-81), (byte)57, (byte)84, (byte)84, (byte) (-81)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-81), (byte)57, (byte)84, (byte)84, (byte) (-81)}, byteArray0);
      assertEquals("bastore", string0);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      BCELComparator bCELComparator1 = Constant.getComparator();
      assertFalse(bCELComparator1.equals((Object)bCELComparator0));
      assertNotNull(bCELComparator1);
      
      try { 
        Utility.decode("x@v$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.getSignature("<init>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L<init>;", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[4] = (Object) "<init>";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("L<init>;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pattern is misIing", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pattern is misIing'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("Gm1#.uGPeRHa2s|");
      assertNotNull(string0);
      assertEquals("LGm1#/uGPeRHa2s|;", string0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(1930.5842F);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1930.5842F, constantFloat0.getBytes(), 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      String string1 = Utility.fillup("LGm1#/uGPeRHa2s|;", (byte) (-89), true, 'I');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("LGm1#/uGPeRHa2s|;", string1);
      
      String string2 = Utility.getSignature("LGm1#/uGPeRHa2s|;");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("LLGm1#/uGPeRHa2s|;;", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals("a7 00 00", string3);
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      String string4 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (byte) (-89), false);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    goto\t\t#0\n", string4);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.getSignature("<init>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L<init>;", string1);
      
      String string2 = Constants.ILLEGAL_OPCODE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<illegal opcode>", string2);
      
      short short0 = Constants.IMPDEP1;
      assertEquals((short)254, short0);
      
      String string3 = Constants.ILLEGAL_OPCODE;
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("<illegal opcode>", string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)26;
      String string4 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4796), (-1613579142), false);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)34, (byte)26}, byteArray0);
      assertEquals("0:    fload_0\n1:    iload_0\n", string4);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      String string1 = Utility.classOrInterface((-1599));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte) (-107);
      byteArray1[3] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 191, (-4112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-96);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte) (-96);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte)103;
      byteArray1[4] = (byte)107;
      byteArray1[5] = (byte)107;
      byteArray1[6] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)103, 170, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 33;
      boolean boolean0 = Utility.isSet(33, 33);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.getSignature("<illegal type>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L<illegal;", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("L<illegal;", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("()LL<illegal;;", string2);
      
      String string3 = "~ygQBM{aG9";
      byte[] byteArray0 = Utility.decode("~ygQBM{aG9", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)126, (byte)121, (byte)103, (byte)81, (byte)66, (byte)77, (byte)123, (byte)97, (byte)71, (byte)57}, byteArray0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(1081.554F);
      assertNotNull(constantFloat0);
      assertEquals(1081.554F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, 33, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    lstore_3
         // 5:    astore_2
         // 6:    lshr
         // 7:    ladd
         // 8:    dstore_0
         // 9:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-92);
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Utility.decode("\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      assertEquals((byte)126, byte0);
      
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)126;
      byteArray2[1] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-92), (byte)0, (byte)0, (byte)0, (byte) (-92), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertNotNull(constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-92), (byte)0, (byte)0, (byte)0, (byte) (-92), (byte)0}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, (int) (byte)126, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-113);
      String string0 = Utility.classOrInterface((-1599));
      assertNotNull(string0);
      assertEquals("class", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte) (-113);
      byteArray1[2] = (byte) (-107);
      byteArray1[3] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 192, (-4112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-67)}, byteArray0);
      assertEquals("$bd", string1);
      
      String string2 = Utility.convertString("5gmMUMuIBxG\"d[Z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("5gmMUMuIBxG\\\"d[Z", string2);
      
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_PARAMETER_ANNOTATIONS;
      assertEquals((byte)14, byte0);
      
      try { 
        Utility.typeOfSignature("5gmMUMuIBxG\"d[Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5gmMUMuIBxG\"d[Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-25);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-14), (byte) (-2), (byte) (-108), (byte)81, (byte) (-25)}, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-14), (byte) (-2), (byte) (-108), (byte)81, (byte) (-25)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-14), (byte) (-2), (byte) (-108), (byte)81, (byte) (-25)}, byteArray0);
      assertEquals("lload_1", string0);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-119);
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)45;
      byteArray0[1] = (byte)45;
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      ConstantPool constantPool0 = null;
      int int0 = 206;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)33;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)33, (int) (byte) (-73), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(80);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)85, (int) (byte) (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = Utility.compactClassName("", "", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(206, (-1450));
      assertNotNull(constantMethodref0);
      assertEquals(206, constantMethodref0.getClassIndex());
      assertEquals((-1450), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = Utility.decode("ireturn", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)105, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)105, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
      assertEquals(105, int0);
      assertEquals(1, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)105, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
      assertEquals("frem", string2);
      assertEquals(3, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)105, (byte)114, (byte)101, (byte)116, (byte)117, (byte)114, (byte)110}, byteArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("M{v=*,EL]");
      assertNotNull(string0);
      assertEquals("LM{v=*,EL];", string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)14;
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)117;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)14, (byte)117}, byteArray0);
      assertFalse(boolean2);
      
      boolean boolean3 = true;
      boolean boolean4 = Utility.isJavaIdentifierPart('~');
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      int int0 = 301;
      int int1 = 757;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)117, 20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short short0 = Constants.FSTORE_1;
      assertEquals((short)68, short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The list of suffixes must not be null");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte)46, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertEquals("0:    iaload\n", string0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("0:    iaload\n");
      assertNotNull(constantUtf8_0);
      assertEquals("0:    iaload\n", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{}", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("The list of suffixes must not be null", "0:    iaload\n", "0:    iaload\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The list of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("<init>", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()L<init>;", string1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2270, (byte)63);
      assertNotNull(constantMethodref0);
      assertEquals(2270, constantMethodref0.getClassIndex());
      assertEquals(63, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-196), (-1887151503));
      assertNotNull(constantInvokeDynamic0);
      assertEquals((-196), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-196), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-1887151503), constantInvokeDynamic0.getNameAndTypeIndex());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotNull(constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertEquals(1, constantPool3.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool3, 206, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'m8*;BOeN&N`mV&-5|}");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte byte0 = (byte) (-108);
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("|)QN", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), (int) (byte) (-59));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Utility.fillup("4.ewl}3zibGt(/A", (-1260), false, '~');
      assertNotNull(string0);
      assertEquals("4.ewl}3zibGt(/A", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)36;
      byteArray0[0] = (byte)8;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-1), (int) (byte) (-57));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-91), (byte) (-1), (byte)26, (byte) (-57), (byte)28, (byte)36, (byte)0}, byteArray0);
      assertEquals("0:    iconst_5\n1:    if_acmpeq\t\t#-229\n4:    ifnonnull\t\t#7208\n7:    nop\n", string1);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      
      String string2 = Utility.printArray((Object[]) constantArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("{null}", string2);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<init>");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-66), (byte) (-66)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-66), (int) (byte) (-66), false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-66), (byte) (-66)}, byteArray0);
      assertEquals("0:    <illegal opcode>\n1:    arraylength\n2:    arraylength\n", string1);
      assertEquals(0, constantPool0.getLength());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<init>";
      stringArray0[1] = "0:    <illegal opcode>\n1:    arraylength\n2:    arraylength\n";
      String string2 = Utility.methodTypeToSignature("<init>", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("(L<init>;L0:;)L<init>;", string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-76);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)49;
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.convertString("invokespecial");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("invokespecial", string1);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), 195, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = (byte) (-124);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      String string0 = Utility.methodSignatureReturnType("F", true);
      assertNotNull(string0);
      assertEquals("float", string0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1.0F), constantFloat0.getBytes(), 0.01F);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = Member.PUBLIC;
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)60, (byte)60}, byteArray0);
      assertEquals("$3c$3c", string0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2688));
      assertNotNull(constantMethodType0);
      assertEquals((-2688), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2688), (byte)60);
      assertNotNull(constantMethodref0);
      assertEquals((-2688), constantMethodref0.getClassIndex());
      assertEquals(60, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant[] constantArray0 = new Constant[18];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(18, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(18, constantPool0.getLength());
      assertEquals(18, constantPool1.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-3427), (-3427));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(constantPool0, constantPool1);
      assertArrayEquals(new byte[] {(byte)60, (byte)60}, byteArray0);
      assertEquals("0:    istore_1\n1:    istore_1\n", string1);
      assertEquals(18, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)105}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      boolean boolean1 = true;
      int int0 = (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, (-2), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface(80);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte) (-109));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte) (-57));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n", string1);
      
      String string2 = Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0:    nop\\n1:    nop\\n2:    nop\\n3:    nop\\n", string2);
      
      try { 
        Utility.methodSignatureArgumentTypes("iub", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.classOrInterface(90);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[2] = (byte)31;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)31, (byte)0, (byte)31, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("1f 00 1f 00 00 00", string0);
      
      try { 
        Utility.typeOfSignature("1f 00 1f 00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1f 00 1f 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte byte0 = (byte) (-63);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "(SA <%?=";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(SA <%?=", "hopt", "jva.fa.R`yoEt7S_8!\"BF<}O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `A <%?='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "E.";
      stringArray0[1] = "E.";
      stringArray0[2] = "E.";
      stringArray0[3] = "E.";
      stringArray0[4] = "E.";
      stringArray0[5] = "E.";
      stringArray0[6] = "E.";
      String string0 = Utility.methodTypeToSignature("E.", stringArray0);
      assertNotNull(string0);
      assertEquals("(LE/;LE/;LE/;LE/;LE/;LE/;LE/;)LE/;", string0);
      
      String string1 = Utility.classOrInterface(157);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      int int0 = Utility.clearBit(157, 157);
      assertEquals(157, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string2 = Utility.compactClassName("E.", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("E.", string2);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oqr{_}lIO");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = Utility.methodSignatureToString("(LE/;LE/;LE/;LE/;LE/;LE/;LE/;)LE/;", "E.", "*Qnp;j_uq99ro");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("*Qnp;j_uq99ro E. E.(E. arg1, E. arg2, E. arg3, E. arg4, E. arg5, E. arg6, E. arg7)", string3);
      
      short short0 = Utility.searchOpcode("*Qnp;j_uq99ro E. E.(E. arg1, E. arg2, E. arg3, E. arg4, E. arg5, E. arg6, E. arg7)");
      assertEquals((short) (-1), short0);
      
      String string4 = Utility.format(7, 194, false, '7');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777", string4);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("XwgB,?NP0/x0'CH", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()LXwgB,?NP0/x0'CH;", string1);
      
      String string2 = Utility.classOrInterface(177);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      String string3 = Utility.compactClassName("()LXwgB,?NP0/x0'CH;", "<illegal type>", true);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("()LXwgB,?NP0.x0'CH;", string3);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W:V{ub");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = Utility.methodSignatureToString("()LXwgB,?NP0.x0'CH;", "<illegal type>", " DG");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(" DG XwgB,?NP0.x0'CH <illegal type>()", string4);
      
      String string5 = Utility.getSignature("()LXwgB,?NP0.x0'CH;");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("L()LXwgB,?NP0/x0'CH;;", string5);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(177);
      assertNotNull(constantMethodType0);
      assertEquals(177, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      try { 
        Utility.typeOfSignature("()LXwgB,?NP0.x0'CH;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()LXwgB,?NP0.x0'CH;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-81);
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-81), (byte)0, (byte) (-59), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-81), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    dreturn
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      byte byte0 = ObjectStreamConstants.TC_STRING;
      assertEquals((byte)116, byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) " D@>gf~*z[w";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) " D@>gf~*z[w";
      objectArray0[5] = (Object) " D@>gf~*z[w";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("null, null,  D@>gf~*z[w, null,  D@>gf~*z[w,  D@>gf~*z[w", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "null, null,  D@>gf~*z[w, null,  D@>gf~*z[w,  D@>gf~*z[w";
      stringArray0[1] = "i2l";
      stringArray0[2] = " D@>gf~*z[w";
      stringArray0[3] = "null, null,  D@>gf~*z[w, null,  D@>gf~*z[w,  D@>gf~*z[w";
      stringArray0[4] = "i2l";
      stringArray0[5] = "null, null,  D@>gf~*z[w, null,  D@>gf~*z[w,  D@>gf~*z[w";
      stringArray0[6] = "i2l";
      stringArray0[7] = "null, null,  D@>gf~*z[w, null,  D@>gf~*z[w,  D@>gf~*z[w";
      stringArray0[8] = "null, null,  D@>gf~*z[w, null,  D@>gf~*z[w,  D@>gf~*z[w";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("i2l", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[w, null,  D@>gf~*z[w,  D@>gf~*z[w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5, (int) (byte) (-84));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 64, (int) (byte) (-121), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = "\\3Dg/M!O8\\\\";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)23;
      byteArray0[0] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)25;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertNotNull(constantPool2);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool2.getLength());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)25, (int) (byte) (-111), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R]:@=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R]:@='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte byte0 = (byte) (-101);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-101);
      String string0 = Utility.getSignature("M{v=*,EL]");
      assertNotNull(string0);
      assertEquals("LM{v=*,EL];", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-101)}, byteArray0);
      assertFalse(boolean1);
      
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-101)}, byteArray0);
      assertEquals("$A$9b", string1);
      
      try { 
        Utility.decode("$A$9b", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-68);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-68), (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature(">", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()L>;", string1);
      
      String string2 = Utility.signatureToString("V#b[#emZ{]I;k2G", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("void", string2);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('T');
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "!:!";
      try { 
        Utility.typeOfSignature("!:!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = true;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      int int0 = 106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 806, 106, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)0;
      short short0 = Utility.searchOpcode("<clinit>");
      assertEquals((short) (-1), short0);
      
      ConstantPool constantPool0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals("lookupswitch\tdefault = 0, npairs = 0 ()", string1);
      assertEquals(12, byteSequence0.getIndex());
      
      try { 
        Utility.methodSignatureReturnType("lookupswitch\tdefault = 0, npairs = 0 ()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "?>...";
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("7Y3b'5]_-68T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Y3b'5]_-68T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)115;
      byteArray0[3] = (byte) (-71);
      byte[] byteArray1 = new byte[17];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-74);
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte) (-74);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)0, (byte)0, (byte) (-71)}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("S-:66_#)X", false);
      assertNotNull(string0);
      assertEquals("short", string0);
      
      String string1 = Utility.format((byte)115, (-402), false, ',');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("115", string1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      short short0 = Utility.searchOpcode("<clinit>");
      assertEquals((short) (-1), short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte) (-85), byte0);
      assertEquals(1, byteSequence0.getIndex());
      
      char char0 = byteSequence0.readChar();
      assertEquals('\uABAB', char0);
      assertEquals(3, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals("lookupswitch\tdefault = 3, npairs = 0 ()", string1);
      assertEquals(12, byteSequence0.getIndex());
      
      try { 
        Utility.methodSignatureReturnType("lookupswitch\tdefault = 3, npairs = 0 ()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)58, 206);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(206, constantMethodref0.getNameAndTypeIndex());
      assertEquals(58, constantMethodref0.getClassIndex());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      String string0 = Utility.convertString("2IaOR'D8!!XH[");
      assertNotNull(string0);
      assertEquals("2IaOR\\'D8!!XH[", string0);
      
      String string1 = Utility.fillup("Illegal signature: ", (byte)58, true, '6');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Illegal signature: 666666666666666666666666666666666666666", string1);
      
      String string2 = Utility.getSignature(">\t");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L>;", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertEquals("3a", string3);
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (short) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)23, (byte) (-6), (byte)23, (byte) (-6)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.ARETURN;
      assertEquals((short)176, short0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">=(h.z/N99IiZ\",4");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (-279), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ")";
      objectArray0[1] = (Object) ")";
      objectArray0[2] = (Object) ")";
      objectArray0[3] = (Object) ")";
      char[] charArray0 = new char[5];
      mockFileOutputStream0.close();
      charArray0[0] = '>';
      charArray0[1] = '^';
      charArray0[2] = 'a';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[3] = '%';
      charArray0[4] = 'v';
      mockPrintWriter0.println(charArray0);
      assertArrayEquals(new char[] {'>', '^', 'a', '%', 'v'}, charArray0);
      
      objectArray0[4] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (-1188));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.convertString("<illegal type>");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("O,DdbhG,U/@qI7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O,DdbhG,U/@qI7s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)102, (byte)30, (byte) (-84), (byte) (-84)}, byteArray0);
      assertEquals("f$k$ac$ac", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)102, (byte)30, (byte) (-84), (byte) (-84)}, byteArray0);
      assertEquals("f$k$ac$ac", string1);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3400);
      assertNotNull(constantMethodType0);
      assertEquals(3400, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-84), 5);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(5, constantMethodref0.getNameAndTypeIndex());
      assertEquals((-84), constantMethodref0.getClassIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), 3400);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)102, (byte)30, (byte) (-84), (byte) (-84)}, byteArray0);
      assertEquals("0:    fsub\n1:    lload_0\n2:    ireturn\n3:    ireturn\n", string2);
      assertEquals(0, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface((byte)50);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = Utility.typeOfSignature("Dow");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)5;
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.methodTypeToSignature("\t<", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L<;", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1, 12, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = Utility.classOrInterface(78);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (-134));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte) (-93));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    if_icmpgt\t\t#0\n3:    nop\n", string1);
      
      // Undeclared exception!
      try { 
        MockURI.parseServerAuthority((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = Utility.clearBit((-3471), 161);
      assertEquals((-3471), int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-63);
      byteArray0[1] = (byte) (-87);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2010, 174, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte byte0 = (byte) (-93);
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[6] = (byte) (-93);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", ",H8Yw", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)20;
      String string0 = Utility.compactClassName("\t\t");
      assertNotNull(string0);
      assertEquals("\t\t", string0);
      
      short short0 = Constants.INSTANCEOF;
      assertEquals((short)193, short0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 527, (int) (short)193, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      short short0 = Constants.DSTORE;
      assertEquals((short)57, short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, 1171, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte)19;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[0] = (byte) (-104);
      byteArray0[6] = (byte)19;
      byteArray0[6] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("N}0QFu04Nb");
      assertNotNull(string0);
      assertEquals("N}0QFu04Nb", string0);
      
      try { 
        Utility.methodSignatureReturnType("N}0QFu04Nb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N}0QFu04Nb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(1930.5842F);
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1930.5842F, constantFloat0.getBytes(), 0.01F);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[5] = (byte)29;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte)29, (byte)29, (byte)0, (byte)29}, byteArray0);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte)29, (byte)29, (byte)0, (byte)29}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantClass constantClass0 = new ConstantClass((byte)29);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(29, constantClass0.getNameIndex());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)29, (byte)29, (byte)29, (byte)29, (byte)0, (byte)29}, byteArray0);
      assertEquals("iload_3", string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      
      short short0 = Utility.searchOpcode("iload_3");
      assertEquals((short)29, short0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4[?(zN7U|n#SA'lwnrT");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.replace("4[?(zN7U|n#SA'lwnrT", "lookupswitch", "(");
      assertNotNull(string0);
      assertEquals("4[?(zN7U|n#SA'lwnrT", string0);
      
      byte[] byteArray0 = new byte[2];
      String string1 = Utility.signatureToString("Z", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("boolean", string1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iu");
      assertFalse(boolean0);
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)95;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)16, (byte)43, (byte) (-107), (byte)95, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("$Q$x$95_$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)16, (byte)43, (byte) (-107), (byte)95, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte)16, (byte)43, (byte) (-107), (byte)95, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(16, int0);
      assertEquals(1, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      char char0 = byteSequence0.readChar();
      assertArrayEquals(new byte[] {(byte)16, (byte)43, (byte) (-107), (byte)95, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals('\u2B95', char0);
      assertEquals(3, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)16, (byte)43, (byte) (-107), (byte)95, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("swap", string1);
      assertEquals(4, byteSequence0.getIndex());
      
      try { 
        Utility.methodSignatureReturnType("swap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `swap'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[5] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("a=ustVre_3");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("a=ustVre_3", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)83;
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)92, (byte)83, (byte) (-123), (byte)83}, byteArray0);
      assertEquals("5c 53 85 53", string2);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(236);
      assertNotNull(constantMethodType0);
      assertEquals(236, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(3, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool2.getLength());
      
      boolean boolean0 = false;
      String string3 = Utility.codeToString(byteArray0, constantPool2, (int) (byte) (-123), (int) (byte)83, false);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertArrayEquals(new byte[] {(byte)92, (byte)83, (byte) (-123), (byte)83}, byteArray0);
      assertEquals("0:    dup2\n1:    aastore\n2:    i2l\n3:    aastore\n", string3);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool2.getLength());
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    dup2\n1:    aastore\n2:    i2l\n3:    aastore\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dup2
         // 1:    aastore
         // 2:    i2l
         // 3:    aastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object0;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.convertString("astore_3");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("astore_3", string1);
      
      byte byte0 = Utility.typeOfSignature("BpDPgI(");
      assertEquals((byte)8, byte0);
      
      short short0 = Utility.searchOpcode("<illegal type>");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "freturn");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = Constants.ILLEGAL_TYPE;
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("<illegal type>", string2);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('J');
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = Utility.printArray(objectArray0, false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)26, (byte)8}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)26, (byte)8}, byteArray0);
      assertEquals("ifnull\t\t#6664", string4);
      assertEquals(3, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 153, (int) (byte) (-65), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object5));
      assertNotNull(object7);
      
      objectArray0[7] = object7;
      Object object8 = new Object();
      assertFalse(object8.equals((Object)object5));
      assertFalse(object8.equals((Object)object7));
      assertFalse(object8.equals((Object)object1));
      assertFalse(object8.equals((Object)object2));
      assertFalse(object8.equals((Object)object4));
      assertFalse(object8.equals((Object)object6));
      assertFalse(object8.equals((Object)object0));
      assertFalse(object8.equals((Object)object3));
      assertNotNull(object8);
      
      objectArray0[8] = object8;
      byte byte0 = Utility.typeOfSignature("JavaClass.debug");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 2339);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)9;
      byteArray0[8] = (byte)84;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)13;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte)9);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)9, (byte)0, (byte) (-87), (byte) (-105), (byte)112, (byte) (-3), (byte) (-117), (byte)13}, byteArray0);
      assertEquals("0:    <illegal opcode>\n1:    lconst_0\n2:    nop\n3:    ret\t\t%151\n5:    irem\n6:    <illegal opcode>\n7:    f2i\n8:    fconst_2\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)9, (byte)0, (byte) (-87), (byte) (-105), (byte)112, (byte) (-3), (byte) (-117), (byte)13}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      char char0 = byteSequence0.readChar();
      assertArrayEquals(new byte[] {(byte) (-10), (byte)9, (byte)0, (byte) (-87), (byte) (-105), (byte)112, (byte) (-3), (byte) (-117), (byte)13}, byteArray0);
      assertEquals('\uF609', char0);
      assertEquals(2, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)9, (byte)0, (byte) (-87), (byte) (-105), (byte)112, (byte) (-3), (byte) (-117), (byte)13}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string1);
      assertNotSame(byteSequence1, byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)9, (byte)0, (byte) (-87), (byte) (-105), (byte)112, (byte) (-3), (byte) (-117), (byte)13}, byteArray0);
      assertEquals("<illegal opcode>", string1);
      assertEquals(1, byteSequence1.getIndex());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(198, 198);
      assertEquals(134, int0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "goto_w");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int1 = byteSequence0.available();
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertEquals(1, int1);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertEquals("return", string0);
      assertEquals(1, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.replace("N}0QFu04Nb", (String) null, "<init>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("Invalid method signature: ");
      assertNotNull(string0);
      assertEquals("LInvalid;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-50);
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getstatic");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)28;
      byteArray0[5] = (byte) (-121);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantPool0.accept(emptyVisitor0);
      assertEquals(1, constantPool0.getLength());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65, 102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      String string1 = "!AXX~k``?|zqy";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!AXX~k``?|zqy");
      assertFalse(boolean0);
      
      int int0 = 177;
      int int1 = Utility.setBit(7, 177);
      assertFalse(int1 == int0);
      assertEquals(131079, int1);
      
      try { 
        Utility.typeOfSignature("!AXX~k``?|zqy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AXX~k``?|zqy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(880, 42);
      assertEquals(880, int0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (-1937));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-84);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-337), (-237));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray0);
      assertEquals("0:    ireturn\n", string0);
      
      try { 
        Utility.typeOfMethodSignature("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exception while looking for class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = Utility.clearBit((byte)49, 11);
      assertEquals(49, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-122);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 221, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = Utility.isSet(43, 189);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1484, (int) (byte) (-20));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("invokestatic", false);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-68), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, 197, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = constantPool0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-80)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, (int) (byte)18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)81;
      byteArray0[5] = (byte) (-92);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte)81, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte byte0 = Constants.T_ARRAY;
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.methodTypeToSignature("pa~ShKsx]T;aCSR", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Lpa~ShKsx]T;aCSR;", string0);
      
      String string1 = Utility.accessToString((int) (byte) (-119), false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public static transient native interface abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.convertString("pa~ShKsx]T;aCSR");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("pa~ShKsx]T;aCSR", string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-95), (byte)87}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-524), 12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    irem
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-65);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-74);
      byteArray1[1] = (byte)115;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)45;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)34, (byte)115, (byte) (-65)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)115, (byte)34, (byte)45}, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = Utility.clearBit(169, 169);
      assertEquals(169, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2445, (-1466));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byte byte0 = (byte)81;
      byteArray0[5] = (byte) (-92);
      byteArray0[3] = (byte) (-64);
      byteArray0[7] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (int) (byte) (-82));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcoe>");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-64), 48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-83);
      byte byte0 = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-83), (byte) (-94)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-83));
      assertNotNull(constantFloat0);
      assertEquals((-83.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), 196, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    lreturn
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-84);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-110);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-84), (byte)0, (byte)16, (byte)11, (byte) (-110)}, byteArray0);
      assertEquals("w$ac$A$Q$L$92", string0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(197);
      assertNotNull(constantMethodType0);
      assertEquals(197, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-894), 3090);
      assertNotNull(constantMethodref0);
      assertEquals(3090, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-894), constantMethodref0.getClassIndex());
      
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-894), (int) (byte)87);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-84), (byte)0, (byte)16, (byte)11, (byte) (-110)}, byteArray0);
      assertEquals("0:    dneg\n1:    ireturn\n2:    nop\n3:    bipush\t\t11\n5:    i2c\n", string1);
      assertEquals(2, constantPool0.getLength());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[3] = (byte)8;
      byteArray0[3] = (byte) (-112);
      byteArray0[0] = (byte)8;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)18;
      byteArray0[6] = (byte)18;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)18, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("TtMY;", false);
      assertNotNull(string0);
      assertEquals("tMY", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "tMY";
      objectArray0[1] = (Object) "tMY";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "TtMY;";
      objectArray0[5] = (Object) "TtMY;";
      objectArray0[6] = (Object) "TtMY;";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.accessToString(36, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("protected", string2);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "O2H";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O2H", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O2H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-103)}, byteArray0);
      assertFalse(boolean2);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(710, (byte) (-103));
      assertNotNull(constantMethodref0);
      assertEquals((-103), constantMethodref0.getNameAndTypeIndex());
      assertEquals(710, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      BCELComparator bCELComparator0 = Constant.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertNotNull(constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool2.getLength());
      assertEquals(0, constantPool3.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-99), (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = Utility.replace("ynL%", "ifnull", "Unreachable default case reached!");
      assertNotNull(string0);
      assertEquals("ynL%", string0);
      
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      
      String string1 = Utility.encode(byteArray0, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("00", string2);
      
      String string3 = ";ak0I%";
      try { 
        Utility.typeOfSignature(";ak0I%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;ak0I%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte byte0 = (byte)16;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      int int0 = 2270;
      int int1 = 23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2270, 23, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Constant[] constantArray0 = new Constant[0];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      String string1 = constantPool0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[4] = (byte)29;
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[2] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)61, (byte)0, (byte) (-88), (byte)0, (byte)29, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)29, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-63);
      byteArray0[1] = (byte) (-103);
      byteArray0[3] = (byte) (-63);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-103), (byte)0, (byte) (-63), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "char";
      stringArray0[1] = "char";
      stringArray0[2] = "char";
      stringArray0[3] = "char";
      stringArray0[4] = "char";
      stringArray0[5] = "char";
      stringArray0[6] = "char";
      stringArray0[7] = "Kn?^~gE7ehkatTHlZ4";
      String string0 = Utility.methodTypeToSignature("char", stringArray0);
      assertNotNull(string0);
      assertEquals("(CCCCCCCLKn?^~gE7ehkatTHlZ4;)C", string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kn?^~gE7ehkatTHlZ4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kn?^~gE7ehkatTHlZ4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte byte0 = (byte) (-5);
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-5);
      byteArray0[7] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      short short0 = Constants.UNDEFINED;
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'iS");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-71);
      byteArray0[1] = (byte) (-71);
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[4] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-71), (byte) (-71), (byte)0, (byte) (-71), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2072, (int) (byte) (-71), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = Utility.decode("Q:W/'t:wfRmiqv", false);
      assertNotNull(byteArray0);
      
      try { 
        Utility.typeOfSignature("Q:W/'t:wfRmiqv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q:W/'t:wfRmiqv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      Constant[] constantArray0 = new Constant[0];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 156, 71, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 185. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-5);
      byteArray0[7] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-5), (int) (byte) (-5));
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    tableswitch\tdefault = 171, low = 0, high = 0(1)\n20:   nop\n21:   nop\n22:   nop\n", string0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("0:    nop\n1:    tableswitch\tdefault = 171, low = 0, high = 0(1)\n20:   nop\n21:   nop\n22:   nop\n");
      assertNotNull(constantUtf8_0);
      assertEquals("0:    nop\n1:    tableswitch\tdefault = 171, low = 0, high = 0(1)\n20:   nop\n21:   nop\n22:   nop\n", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)0, byte0);
      assertEquals(1, byteSequence0.getIndex());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) constantUtf8_0;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) "0:    nop\n1:    tableswitch\tdefault = 171, low = 0, high = 0(1)\n20:   nop\n21:   nop\n22:   nop\n";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        Utility.methodSignatureReturnType("!4w3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!4w3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)22;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 206, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)22, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    iconst_3\n2:    lload\t\t%0\n4:    nop\n", string1);
      
      boolean boolean1 = Utility.isSet(33, 93);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.methodSignatureReturnType("java.lang.\"#Zq{d<taoFa8_wF", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.\"#Zq{d<taoFa8_wF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte byte0 = (byte) (-106);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-106);
      byteArray1[0] = (byte) (-127);
      byteArray1[0] = (byte) (-127);
      byteArray1[3] = (byte) (-106);
      int int0 = (-117);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 189, (-117));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
