/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:58:15 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=s<^x`5Te~PDd*`?4X");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_cycle_tried_times");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider0.setPipelines(linkedList0);
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("_cycle_tried_times");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      Request request0 = new Request("");
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("r");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      assertTrue(spider1.isExitWhenComplete());
      
      Spider spider2 = spider1.setExitWhenComplete(false);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider3.pipeline(consolePipeline0);
      Spider spider5 = spider4.setUUID("X/F;kRPrLxj-cjqA");
      spider0.getSpiderListeners();
      spider5.setSpiderListeners((List<SpiderListener>) null);
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request();
      request0.setPriority(0L);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      ForkJoinPool forkJoinPool1 = new ForkJoinPool(474);
      spider0.thread((ExecutorService) forkJoinPool1, 474);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.addPipeline(consolePipeline0);
      spider0.getScheduler();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y`_!=i|opGB>K");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      Spider spider2 = spider1.clearPipeline();
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7uOyF~~kGXy9`");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("7uOyF~~kGXy9`");
      Spider spider1 = spider0.setUUID("7uOyF~~kGXy9`");
      Spider spider2 = spider1.clearPipeline();
      Request[] requestArray0 = new Request[8];
      Request request0 = new Request();
      requestArray0[0] = request0;
      requestArray0[1] = request0;
      request0.setExtras((Map<String, Object>) null);
      requestArray0[2] = request0;
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(40);
      spider1.threadPool = countableThreadPool0;
      Request request1 = request0.setBinaryContent(false);
      requestArray0[3] = request1;
      Request request2 = new Request();
      request2.addHeader("_cycle_tried_times", "_cycle_tried_times");
      requestArray0[4] = request2;
      spider0.setDownloader((Downloader) null);
      Request request3 = request2.setUrl("_cycle_tried_times");
      requestArray0[5] = request3;
      Request request4 = request0.setBinaryContent(false);
      requestArray0[6] = request4;
      // Undeclared exception!
      try { 
        spider2.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 2129);
      spider1.threadNum = 2129;
      Spider spider2 = spider1.setSpawnUrl(true);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider1.setExecutorService((ExecutorService) null);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Spider spider3 = spider2.setScheduler(priorityScheduler0);
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider1.stop();
      // Undeclared exception!
      try { 
        spider3.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("@Ughl7a//!dv5w:j");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("MF$9&wOeWJ", "");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setUUID("mLzH,");
      spider1.getSpiderListeners();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.forLanguageTag("MF$9&wOeWJ");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      spider0.getAll((Collection<String>) list0);
      Request request0 = new Request();
      Request request1 = request0.setExtras((Map<String, Object>) null);
      Request request2 = request1.setPriority((-1L));
      request2.setExtras((Map<String, Object>) null);
      Request request3 = new Request();
      request0.setPriority((-628L));
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) forkJoinPool0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(", cycleRetryTimes=", "allText");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Spider spider2 = spider1.setUUID("allText");
      spider1.getSpiderListeners();
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.setSpawnUrl(false);
      Spider spider4 = spider3.pipeline(multiPagePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", cycleRetryTimes=");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider5 = spider4.setScheduler(duplicateRemovedScheduler0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "allText";
      stringArray0[1] = ", cycleRetryTimes=";
      stringArray0[2] = "pbE?`&?3BLi";
      stringArray0[3] = ", cycleRetryTimes=";
      // Undeclared exception!
      try { 
        spider5.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "$?");
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      spider0.clearPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", headePBrs=");
      spider0.scheduler(fileCacheQueueScheduler0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "K");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      phantomJSDownloader0.setRetryNum(0);
      Spider spider2 = spider0.setUUID("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      spider1.getSpiderListeners();
      Spider spider3 = spider2.setSpawnUrl(false);
      Spider spider4 = spider3.setExecutorService(scheduledThreadPoolExecutor0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_MvxIycTM_(^=");
      Spider spider5 = spider4.setScheduler(fileCacheQueueScheduler0);
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider5.stop();
      spider1.checkIfRunning();
      // Undeclared exception!
      try { 
        spider4.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "$?");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<SpiderListener> list1 = spider0.getAll((Collection<String>) list0);
      Spider spider2 = spider1.setSpiderListeners(list1);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider3 = spider1.clearPipeline();
      Spider spider4 = spider2.setSpawnUrl(true);
      spider3.pipeline(multiPagePipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" stop fail!");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider4.setScheduler(duplicateRemovedScheduler0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`yB_XLdohRkv,!$8#m";
      stringArray0[1] = ", cycleRetryTimes=";
      stringArray0[2] = "pbE?`&?3BLi";
      stringArray0[3] = "$?";
      stringArray0[4] = "$?";
      stringArray0[5] = "pbE?`&?3BLi";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "00-_)cl=S?/*");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.setUUID("00-_)cl=S?/*");
      spider1.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider0.setSpawnUrl(false);
      Spider spider3 = spider1.setExecutorService(scheduledThreadPoolExecutor0);
      spider0.getCollectorPipeline();
      spider3.isSpawnUrl();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("00-_)cl=S?/*");
      spider2.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "00-_)cl=S?/*";
      stringArray0[1] = "K";
      stringArray0[2] = "K";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "00-_)cl=S?/*");
      spider0.setUUID("00-_)cl=S?/*");
      spider0.getSpiderListeners();
      spider0.setSpiderListeners((List<SpiderListener>) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider1 = spider0.setExecutorService(scheduledThreadPoolExecutor0);
      spider0.getCollectorPipeline();
      spider1.isSpawnUrl();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("00-_)cl=S?/*");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "00-_)cl=S?/*";
      stringArray0[1] = "K";
      stringArray0[2] = "K";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1475, threadFactory0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1475);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(3633);
      Spider spider4 = spider3.setExecutorService(scheduledThreadPoolExecutor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("threadNum should be more than one!");
      Spider spider5 = spider4.scheduler(fileCacheQueueScheduler0);
      spider5.sleep(3633);
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"]uC2K g/w");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread(1463);
      Json json0 = new Json("_plus");
      Class<SpiderListener> class0 = SpiderListener.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7uOyF~~kGXy9`");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("7uOyF~~kGXy9`");
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      Spider spider2 = spider1.clearPipeline();
      Request[] requestArray0 = new Request[8];
      Request request0 = new Request();
      Request request1 = request0.setUrl("7uOyF~~kGXy9`");
      requestArray0[0] = request1;
      Request request2 = request1.setUrl("_cycle_tried_times");
      requestArray0[1] = request2;
      Request request3 = request1.setExtras((Map<String, Object>) null);
      requestArray0[2] = request3;
      Request request4 = new Request();
      requestArray0[4] = request4;
      Request request5 = request0.setPriority(0L);
      requestArray0[5] = request5;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      requestArray0[7] = null;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 474);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider1.addPipeline(consolePipeline0);
      spider0.getScheduler();
      long long0 = spider3.getPageCount();
      assertEquals(0L, long0);
      
      spider2.getSite();
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "K");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      Spider spider2 = spider0.setUUID("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      spider1.getSpiderListeners();
      spider2.setSpawnUrl(false);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_MvxIycTM_(^=");
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      String[] stringArray0 = null;
      spider0.thread(4566);
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 2129);
      boolean boolean0 = true;
      spider1.threadNum = 2129;
      Spider spider2 = spider1.setSpawnUrl(true);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider3 = spider2.scheduler(priorityScheduler0);
      Request request0 = new Request("");
      priorityScheduler0.pushWhenNoDuplicate(request0, spider1);
      Request request1 = new Request();
      Spider spider4 = spider2.setDownloader((Downloader) null);
      spider4.setEmptySleepTime(41);
      request1.setPriority(2129);
      request1.setBinaryContent(true);
      Request[] requestArray0 = new Request[0];
      Spider spider5 = spider3.addRequest(requestArray0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider6 = spider2.setPipelines(linkedList0);
      spider5.start();
      FilePipeline filePipeline0 = new FilePipeline("(u4$7Q|i9M*z&QDy8#");
      request0.setBinaryContent(boolean0);
      spider6.pipeline(filePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "K";
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "K");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      String string1 = "_MvxIycTM_(^=";
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_MvxIycTM_(^=");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("_MvxIycTM_(^=");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("waitNewUrl - interrupted, error {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      String string0 = "00-\\_)cl=S?/*";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "00-_)cl=S?/*");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.setUUID("00-_)cl=S?/*");
      spider1.getSpiderListeners();
      spider1.setSpiderListeners((List<SpiderListener>) null);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.setSpawnUrl(false);
      spider0.getCollectorPipeline();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("00-_)cl=S?/*");
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider1.clearPipeline();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        spider1.get("K");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "K");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      Spider spider2 = spider0.setUUID("K");
      spider1.getSpiderListeners();
      Spider spider3 = spider0.setSpawnUrl(false);
      spider1.setExecutorService(scheduledThreadPoolExecutor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("K");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      DuplicateRemovedScheduler duplicateRemovedScheduler1 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      duplicateRemovedScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      spider4.setScheduler(duplicateRemovedScheduler1);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "K");
      spider0.downloader(phantomJSDownloader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K");
      Spider spider1 = spider0.setUUID("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("jmH");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.setScheduler(duplicateRemovedScheduler0);
      spider1.getStatus();
      spider1.isSpawnUrl();
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("");
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider2 = new Spider(simplePageProcessor0);
      Spider spider3 = spider0.setScheduler(fileCacheQueueScheduler0);
      String[] stringArray0 = new String[0];
      spider3.test(stringArray0);
      spider0.close();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("00-_)cl=S?/*", "00-_)cl=S?/*");
      spider0.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider0.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("K", "00-_)cl=S?/*");
      spider0.getStatus();
      spider0.isSpawnUrl();
      simplePageProcessor0.getSite();
      Spider spider1 = spider0.setExitWhenComplete(true);
      ResultItems resultItems0 = new ResultItems();
      ResultItems resultItems1 = resultItems0.setSkip(true);
      resultItems1.setRequest((Request) null);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider1.setExitWhenComplete(true);
      // Undeclared exception!
      try { 
        consolePipeline0.process(resultItems1, spider2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.pipeline.ConsolePipeline", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "$?");
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", headers=");
      Spider spider3 = spider0.scheduler(fileCacheQueueScheduler0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider4 = spider2.startRequest(list0);
      SynchronousQueue<Spider> synchronousQueue0 = new SynchronousQueue<Spider>();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>(synchronousQueue0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider5 = spider1.scheduler(fileCacheQueueScheduler0);
      Locale locale0 = Locale.CHINESE;
      locale0.getUnicodeLocaleKeys();
      List<SpiderListener> list1 = spider3.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.setSpiderListeners(list1);
      Spider spider6 = spider1.setSpiderListeners(list1);
      Spider spider7 = spider6.setSpawnUrl(false);
      spider7.run();
      Spider spider8 = spider6.setScheduler(fileCacheQueueScheduler0);
      spider8.setExitWhenComplete(false);
      spider5.sleep(2673);
      spider3.setSpiderListeners(list1);
      spider5.getUUID();
      spider4.checkIfRunning();
      Spider.Status.values();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "K");
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("$?");
      spider0.scheduler(fileCacheQueueScheduler0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Request> list1 = spider2.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider3 = spider1.startRequest(list1);
      SynchronousQueue<Spider> synchronousQueue0 = new SynchronousQueue<Spider>();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>(synchronousQueue0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider1.scheduler(fileCacheQueueScheduler0);
      spider4.getThreadAlive();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      List<SpiderListener> list2 = spider0.getAll((Collection<String>) set0);
      Spider spider5 = spider1.setSpiderListeners(list2);
      spider3.setSpiderListeners(list2);
      spider5.setSpawnUrl(true);
      spider2.setScheduler(fileCacheQueueScheduler0);
      Spider spider6 = spider1.setExitWhenComplete(false);
      spider0.sleep(2673);
      Spider spider7 = spider6.downloader(phantomJSDownloader0);
      spider7.setSpiderListeners(list2);
      spider1.getUUID();
      spider2.checkIfRunning();
      spider6.getSite();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cycleRetryTimes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "$?");
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider1.downloader(phantomJSDownloader0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", headers=");
      Spider spider2 = spider0.scheduler(fileCacheQueueScheduler0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      SynchronousQueue<Spider> synchronousQueue0 = new SynchronousQueue<Spider>();
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>(synchronousQueue0);
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider3 = spider1.scheduler(fileCacheQueueScheduler0);
      Locale locale0 = Locale.CHINESE;
      List<SpiderListener> list1 = spider2.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.setSpiderListeners(list1);
      Spider spider4 = spider1.setSpiderListeners(list1);
      Request request0 = new Request(" stop fail!");
      Request request1 = request0.putExtra("$?", spider1);
      Request request2 = request1.setMethod("_cycle_tried_times");
      Request request3 = request2.setPriority(0L);
      Request request4 = request3.setUrl("C4}em&");
      fileCacheQueueScheduler0.push(request4, spider4);
      Spider spider5 = spider4.setScheduler(fileCacheQueueScheduler0);
      spider3.sleep(2673);
      spider2.setSpiderListeners(list1);
      spider3.getUUID();
      spider1.checkIfRunning();
      spider5.setEmptySleepTime(2673);
      spider4.getUUID();
  }
}
