/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:03:32 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.GzipSink;
import okio.HashingSink;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSink_ESTest extends RealBufferedSink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      inflater0.end();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.outputStream();
      realBufferedSink0.writeInt(32);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("qOg.");
      assertSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.toString();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("I\"ll.Q({>");
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      long long0 = realBufferedSink0.writeAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      long long0 = 1L;
      realBufferedSink0.writeLong(1L);
      realBufferedSink0.emit();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      int int0 = 1;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      byteString0.indexOf(byteArray0, (int) (byte)0);
      try { 
        realBufferedSource0.readUtf8LineStrict(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeLong((-16L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.flush();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(1543);
      assertSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = 0L;
      byte[] byteArray0 = new byte[6];
      realBufferedSink0.writeUtf8("_;<Tw?\"khjY");
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)94;
      buffer0.toString();
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      realBufferedSink0.outputStream();
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)61;
      buffer0.read(byteArray0);
      realBufferedSink0.writeHexadecimalUnsignedLong(0L);
      realBufferedSink0.flush();
      realBufferedSink0.write(buffer0, 0L);
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong((-3124L));
      Buffer buffer1 = realBufferedSink0.buffer();
      assertEquals(16L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.flush();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(buffer1, (-1474L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1474
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(1686L);
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = false;
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.writeShortLe(0);
      pipe0.sourceClosed = false;
      realBufferedSink0.writeLong(0);
      Buffer buffer0 = realBufferedSink0.buffer();
      int int0 = (-1041);
      realBufferedSink0.writeIntLe((-1041));
      realBufferedSink0.writeLong(10000000000000L);
      realBufferedSink0.emitCompleteSegments();
      String string0 = "";
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        byteBuffer0.put(0, (byte)100);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-2554));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe((-2554));
      assertSame(bufferedSink0, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(79L);
      Sink sink0 = pipe0.sink();
      pipe0.sinkClosed = false;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.timeout();
      realBufferedSink0.emit();
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe((-356L));
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(0);
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLongLe(2446L);
      try { 
        realBufferedSink0.write((Source) buffer0, 2446L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Pipe pipe0 = new Pipe(615L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.flush();
      realBufferedSink0.toString();
      realBufferedSink0.emit();
      realBufferedSink0.outputStream();
      realBufferedSink0.writeHexadecimalUnsignedLong(1000000000L);
      Buffer buffer0 = realBufferedSink0.buffer();
      pipe0.sinkClosed = true;
      buffer0.writeUtf8("");
      long long0 = 102L;
      // Undeclared exception!
      try { 
        realBufferedSink0.write((Source) buffer0, 102L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)83;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.flush();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.writeInt(0);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(byteArray0, (int) (byte)97, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=97 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      realBufferedSink0.write(byteArray0);
      realBufferedSink0.writeIntLe(1908874353);
      String string0 = "sink == null";
      // Undeclared exception!
      try { 
        Charset.forName("sink == null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // sink == null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)83;
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-50);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("YCmZO+T/A49,&B8z", (int) (byte) (-50), (int) (byte)83);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -50
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("2SE~,61}g#nCHqM\"h)", 2048, 1111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 1111 < 2048
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShort(2125114026);
      long long0 = realBufferedSink0.writeAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSink gzipSink0 = new GzipSink(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      realBufferedSink0.emit();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      int int0 = 1520;
      realBufferedSink0.writeUtf8("`U^ZkI\"u;Q");
      realBufferedSink0.writeShort(1520);
      String string0 = "sink == null";
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("sink == null", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-4);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte) (-53);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte)24;
      byteArray1[6] = (byte) (-4);
      byteArray1[7] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Buffer buffer1 = buffer0.readFrom((InputStream) dataInputStream0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      Pipe pipe0 = new Pipe(2556L);
      dataInputStream0.available();
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((byte)40);
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeDecimalLong(1897L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)108;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      GzipSink gzipSink0 = new GzipSink(hashingSink1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.write((Source) null, (-1L));
      assertSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("L{<hkti");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      try { 
        realBufferedSink0.write((Source) buffer0, 102L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(1982292598);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      charset0.decode(byteBuffer1);
      charset0.aliases();
      realBufferedSink0.writeString("UPNn", charset0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeString("E^@cvw", 1982292598, 1982292598, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1982292598 > 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.timeout();
      realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.writeInt(1908874353);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(7);
      assertSame(bufferedSink0, realBufferedSink0);
  }
}
