/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:30:31 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "ZM~z";
      HttpHeaders.skipUntil("ZM~z", 2900, "ZM~z");
      String string1 = null;
      String string2 = "l[E`Iq0))i";
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil((String) null, 2900, "l[E`Iq0))i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "HEAD";
      HttpHeaders.skipWhitespace("HEAD", 14);
      String string1 = "";
      HttpHeaders.skipUntil("", 14, ",");
      HttpHeaders.parseSeconds("U`hIS/3+Td)ZY4))7|N", 14);
      HttpHeaders.parseSeconds("HEAD", 14);
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace("", (-3290));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      hashMap0.put("WWW-Authenticate", "");
      hashMap0.put("", "chunked");
      headers1.toMultimap();
      hashMap0.put("", "pW");
      HttpHeaders.parseChallenges(headers1, "_wVK+b.Tj?0Tp[EJbk6");
      HttpHeaders.skipWhitespace("70[)oFa", 223);
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseChallenges(headers0, "vi}(9)~~eFVW0");
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpHeaders.skipWhitespace("hh##>iqb[l%zr", 1922);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotSame(headers1, headers0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      HttpHeaders.skipWhitespace("\"\"XbzF}F&&y.UjP]", 0);
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpHeaders.parseSeconds("Ps", 0);
      String string0 = "u2o;47:";
      HttpHeaders.skipWhitespace("u2o;47:", 0);
      HttpHeaders.parseSeconds("u2o;47:", 2288);
      HttpHeaders.skipUntil("u2o;47:", 0, "");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("1>PYpt", "1>PYpt");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpHeaders.parseSeconds("|7", (-1897));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|7";
      stringArray0[1] = "|7";
      Headers headers0 = Headers.of(stringArray0);
      headers0.newBuilder();
      headers0.toMultimap();
      headers0.getDate("|7");
      HttpHeaders.parseChallenges(headers0, "|7");
      headers0.names();
      HttpHeaders.contentLength(headers0);
      HttpHeaders.parseSeconds("|7", (-1897));
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      headers1.newBuilder();
      headers0.newBuilder();
      HttpHeaders.skipWhitespace("|7", 0);
      HttpHeaders.contentLength(headers1);
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("hh##>iqb[l%zr", (-24));
      assertEquals((-24), int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "H##>IQB[L%Zr";
      HttpHeaders.parseSeconds("H##>IQB[L%Zr", 1279);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clone();
      hashMap0.put("H##>IQB[L%Zr", "H##>IQB[L%Zr");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((String) null, "H##>IQB[L%Zr", biFunction0);
      headers0.toMultimap();
      HttpHeaders.contentLength(headers0);
      HttpHeaders.hasVaryAll(headers0);
      HttpHeaders.varyFields(headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      String string1 = "unexpected scheme: ";
      try { 
        MockURI.URI("H##>IQB[L%Zr", "unexpected scheme: ", "unexpected scheme: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in fragment at index 2: H##>IQB[L%Zr:unexpected%20scheme:%20#unexpected%20scheme:%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.values("<3N%bJw6 $X3O7fN");
      HttpHeaders.hasVaryAll(headers0);
      HttpHeaders.parseChallenges(headers0, "<3N%bJw6 $X3O7fN");
      System.setCurrentTimeMillis(4L);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(0, headers0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("9", (-1202));
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("content-length", "content-length");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("INLIPRT", "INLIPRT");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseChallenges(headers0, "INLIPRT");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap0.put("OPX] [1-*^l3", "Vary");
      hashMap2.put("Vary", "Vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = Headers.of((Map<String, String>) hashMap2);
      HttpHeaders.varyHeaders(headers0, headers1);
      HttpHeaders.varyFields(headers0);
      CookieJar cookieJar0 = null;
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("[_g{)[", "source == null");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseChallenges(headers0, "[_g{)[");
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      hashMap0.put("c", "0y>i");
      HttpUrl.parse("");
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      assertEquals(1, headers0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = HttpHeaders.skipWhitespace("t ip9Te(0XkM^4<", 1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "vary");
      hashMap0.put("Vary", "vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers1);
      assertFalse(boolean0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("\"A S]=AZ_i", "\"A S]=AZ_i");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "\"A S]=AZ_i");
      assertEquals(0, list0.size());
  }
}
