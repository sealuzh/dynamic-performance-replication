/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 01:23:52 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.ComponentOrientation;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Scrollbar;
import java.awt.event.ComponentListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.JToolTip;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.synth.SynthComboBoxUI;
import javax.swing.plaf.synth.SynthMenuBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.AbstractAssociator;
import weka.associations.FilteredAssociator;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.CostMatrix;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.rules.ZeroR;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.TestInstances;
import weka.core.converters.JSONLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      filter0.addTrainingSetListener(associator0);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setFilter(attributeSelection0);
      filter0.isFocusable();
      filter0.getWrappedAlgorithm();
      filter0.getVisual();
      filter0.connectionAllowed("weka/gui/beans/icons/");
      filter0.getFilter();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      iBk0.pruneToK((Instances) null, doubleArray0, 2);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        costMatrix0.applyCostMatrix((Instances) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = DefaultEditorKit.backwardAction;
      ImageSaver imageSaver0 = new ImageSaver();
      Logger logger0 = imageSaver0.m_logger;
      filter0.setLog((Logger) null);
      filter0.connectionNotification("caret-backward", imageSaver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      saver0.getActionMap();
      filter0.removeTestSetListener(saver0);
      filter0.connectionAllowed("");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addDataSourceListener(substringLabeler0);
      Class<Scrollbar> class0 = Scrollbar.class;
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "^KTWmE* L7SVGvdz%", class0, "instance");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found: instance on class java.awt.Scrollbar
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isRequestFocusEnabled();
      filter0.repaint();
      filter0.createImage(1, (-2109));
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.setVisual((BeanVisual) null);
      filter0.connectionAllowed("TriHH?(b^!(Qj^1_");
      boolean boolean0 = filter0.connectionAllowed("TriHH?(b^!(Qj^1_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getAncestorListeners();
      filter0.getWrappedAlgorithm();
      filter0.isBusy();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(serializedModelSaver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.SerializedModelSaver : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      boolean boolean0 = filter0.eventGeneratable("d[E8AdGZ8%");
      boolean boolean1 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      ImageSaver imageSaver0 = new ImageSaver();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(imageSaver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.ImageSaver : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setEnabled(true);
      filter0.stop();
      filter0.getVetoableChangeListeners();
      filter0.getFilter();
      filter0.addConfigurationListener((ConfigurationListener) null);
      Sorter sorter0 = new Sorter();
      JToolTip jToolTip0 = sorter0.createToolTip();
      filter0.addInstanceListener(sorter0);
      Appender appender0 = new Appender();
      filter0.removeTestSetListener(appender0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances0 = predictionAppender0.m_format;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(jToolTip0, (Instances) null, 0, 10000);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      DataSetEvent dataSetEvent0 = new DataSetEvent(substringLabeler0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      String string0 = JSONLoader.FILE_EXTENSION;
      assertEquals(".json", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      boolean boolean0 = filter0.eventGeneratable(" ");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(attributeSummarizer0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addDataSourceListener(trainTestSplitMaker0);
      boolean boolean0 = filter0.connectionAllowed("");
      assertTrue(boolean0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.US;
      substringLabeler0.setLocale(locale1);
      substringLabeler0.setLocale(locale0);
      filter0.addTrainingSetListener(substringLabeler0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      filter0.connectionNotification("", serializedModelSaver0);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setLocation((-1), 0);
      filter0.setLocation(0, 2827);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      KnowledgeFlowApp knowledgeFlowApp0 = null;
      try {
        knowledgeFlowApp0 = new KnowledgeFlowApp(true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = new Capabilities(zeroR0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(scatterPlotMatrix0, (Instances) null, (-2), (-2));
      filter0.acceptTrainingSet(trainingSetEvent0);
      Filter filter1 = new Filter();
      filter0.removeInstanceListener(filter1);
      filter1.removeInstanceListener(filter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      String string0 = DefaultEditorKit.deleteNextCharAction;
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable(".gif");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      String string0 = "weka.core.xml.XMLDocument";
      flowByExpression0.isValidateRoot();
      filter0.disconnectionNotification("weka.core.xml.XMLDocument", ".gif");
      flowByExpression0.firePropertyChange(".gif", (short) (-1845), (short) (-1845));
      filter0.removeTrainingSetListener(flowByExpression0);
      filter0.addInstanceListener(flowByExpression0);
      SynthComboBoxUI synthComboBoxUI0 = new SynthComboBoxUI();
      synthComboBoxUI0.configureArrowButton();
      filter0.addPropertyChangeListener((PropertyChangeListener) synthComboBoxUI0);
      filter0.getInputMethodListeners();
      filter0.removeTrainingSetListener(flowByExpression0);
      filter0.addInstanceListener(flowByExpression0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(flowByExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.FlowByExpression : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.useDefaultVisual();
      Appender appender0 = new Appender();
      filter0.removeInstanceListener(appender0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      substringReplacer0.removeComponentListener((ComponentListener) null);
      BeanVisual beanVisual0 = substringReplacer0.getVisual();
      SynthMenuBarUI synthMenuBarUI0 = new SynthMenuBarUI();
      beanVisual0.removePropertyChangeListener((PropertyChangeListener) synthMenuBarUI0);
      filter0.setVisual(beanVisual0);
      filter0.removeTestSetListener(appender0);
      filter0.enumerateRequests();
      filter0.globalInfo();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.isBusy();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      textViewer0.removeAncestorListener(ancestorListener0);
      textViewer0.repaint((-1L), (-1319), (-167), (-167), (-565));
      attributeSummarizer0.getBeanContext();
      textViewer0.m_beanContext = null;
      filter0.addTestSetListener(textViewer0);
      filter0.addTestSetListener(textViewer0);
      filter0.getMaximumSize();
      filter0.eventGeneratable("");
      filter0.getFilter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeInstanceListener(flowByExpression0);
      Appender appender0 = new Appender();
      Filter filter1 = new Filter();
      filter1.firePropertyChange("", '*', '$');
      filter1.getGraphics();
      appender0.update((Graphics) null);
      BeanVisual beanVisual0 = appender0.getVisual();
      beanVisual0.createImage(703, (-1319));
      filter0.setVisual(beanVisual0);
      assertEquals("Appender", filter0.getCustomName());
      
      boolean boolean0 = filter1.eventGeneratable("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setCustomName("b@N|r4J");
      filter0.getHierarchyListeners();
      // Undeclared exception!
      try { 
        filter0.eventGeneratable((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getComponentPopupMenu();
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.isOpaque();
      jSpinner0.setAlignmentX((-703.0F));
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      filter0.removePropertyChangeListener((PropertyChangeListener) jSpinner_NumberEditor0);
      filter0.validate();
      filter0.setLocation(737, 737);
      filter0.stop();
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isOpaque();
      // Undeclared exception!
      try { 
        filter0.performRequest("zeS}{2`un2oT*mFe5+S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zeS}{2`un2oT*mFe5+S not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCustomName();
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      jPopupMenu_Separator0.getBackground();
      jPopupMenu_Separator0.addFocusListener((FocusListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jPopupMenu_Separator0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      JComponent.isLightweightComponent(jPopupMenu_Separator0);
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.getVisual();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      flowByExpression0.getBackground();
      filter0.disconnectionNotification("", (Object) null);
      Sorter sorter0 = new Sorter();
      filter0.removeDataSourceListener(sorter0);
      filter0.removeTrainingSetListener(flowByExpression0);
      filter0.removeTrainingSetListener(flowByExpression0);
      // Undeclared exception!
      try { 
        filter0.performRequest(".arff");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .arff not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.associations.Associator associator0 = AbstractAssociator.makeCopy(filteredAssociator0);
      filteredAssociator0.setAssociator(associator0);
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      filter0.getCustomName();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.contains(39, (-702));
      filter0.addTestSetListener(substringLabeler0);
      Classifier classifier0 = new Classifier();
      filter0.addInstanceListener(classifier0);
      filter0.setFilter(filter1);
      filter0.useDefaultVisual();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification(">49V8D_*t5$", ">49V8D_*t5$");
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      DataSetEvent dataSetEvent0 = new DataSetEvent(stratifiedRemoveFolds0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      filter0.disconnectionNotification("ktyiX5.UFMd;j;7", integer0);
      attributeSummarizer0.checkImage((Image) null, 2, (-41), (ImageObserver) filter0);
      filter0.eventGeneratable("3>)+s*3Ht!|eVINMv");
      filter0.connectionAllowed("@relation");
      Clusterer clusterer0 = new Clusterer();
      BeanVisual beanVisual0 = clusterer0.m_visual;
      filter0.setVisual(beanVisual0);
      assertEquals("EM", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("d[E8AdGZ", "d[E8AdGZ");
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.connectionNotification("AllFilter", "AllFilter");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeTrainingSetListener(substringLabeler0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable("Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error (either on the training set or in the cross-validation, depending on useCrossValidation).");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      filter0.disconnectionNotification("Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error (either on the training set or in the cross-validation, depending on useCrossValidation).", manhattanDistance0);
      flowByExpression0.firePropertyChange("Use error on the probabilties as error measure when determining the best number of LogitBoost iterations. If set, the number of LogitBoost iterations is chosen that minimizes the root mean squared error (either on the training set or in the cross-validation, depending on useCrossValidation).", (short) (-1845), (short) (-1845));
      Locale locale0 = Locale.CHINA;
      locale0.toLanguageTag();
      filter0.firePropertyChange("weka.core.xml.XMLDocument", (long) 0, 0L);
      ComponentOrientation.getOrientation(locale0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      ComponentOrientation componentOrientation0 = ComponentOrientation.getOrientation(locale1);
      filter0.setComponentOrientation(componentOrientation0);
      filter0.removeNotify();
      boolean boolean0 = filter0.eventGeneratable("=59Z/I:?o};");
      assertFalse(boolean0);
      
      filter0.acceptDataSet((DataSetEvent) null);
      Filter filter1 = new Filter();
      filter1.addInstanceListener(filter0);
      filter0.acceptDataSet((DataSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      Locale locale0 = Locale.PRC;
      Filter filter1 = new Filter();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      filter1.removeComponentListener((ComponentListener) null);
      filter1.connectionNotification("d[E8AdGZ8%", checkOptionHandler0);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter1.setWrappedAlgorithm(spreadSubsample0);
      assertEquals("SpreadSubsample", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("|9", arrayList0, 3096);
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0, (-725), (-725));
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(",l8~3\"Y(Y#iwELOjm", arrayList0, 17);
      TestSetEvent testSetEvent0 = new TestSetEvent("instance", instances0, (-246), (-246));
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      TestSetEvent testSetEvent0 = new TestSetEvent(substringLabeler0, (Instances) null, (-709), (-709));
      TestSetEvent testSetEvent1 = new TestSetEvent(substringLabeler0, (Instances) null, (-1500120590), 91);
      filter0.acceptTestSet(testSetEvent0);
      filter0.addInstanceListener(substringLabeler0);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("d[E8AdG6Z8%", "d[E8AdG6Z8%");
      boolean boolean0 = filter0.eventGeneratable("d[E8AdG6Z8%");
      assertTrue(boolean0);
      
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("d[E8AdGZ8%", "d[E8AdGZ8%");
      Classifier classifier0 = new Classifier();
      filter0.removeInstanceListener(classifier0);
      boolean boolean0 = filter0.eventGeneratable("d[E8AdGZ8%");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("d[E8AdGZ8%", "d[E8AdGZ8%");
      Classifier classifier0 = new Classifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(classifier0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      String string0 = CostMatrix.FILE_EXTENSION;
      assertEquals(".cost", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("instance");
      assertFalse(boolean0);
      
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("instance", "instance");
      filter0.stop();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.connectionNotification(" is currently batch processing!", classifier0);
      boolean boolean0 = filter0.eventGeneratable(" is currently batch processing!");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("dataSet", "dataSet");
      Classifier classifier0 = new Classifier();
      boolean boolean0 = filter0.connectionAllowed("f$");
      boolean boolean1 = filter0.eventGeneratable("f$");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("dataSet", "dataSet");
      Classifier classifier0 = new Classifier();
      boolean boolean0 = filter0.connectionAllowed("model");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.connectionNotification(" is currently batch processing!", classAssigner0);
      boolean boolean0 = filter0.eventGeneratable(" is currently batch processing!");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      MockThread mockThread0 = new MockThread("M^/:$UkT/SBL FU^gg]");
      filter0.m_filterThread = (Thread) mockThread0;
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.useDefaultVisual();
      assertTrue(filter0.isBusy());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "I\"PWsDeO?D`?36Ysn");
      MockThread mockThread0 = new MockThread(threadGroup1, "I\"PWsDeO?D`?36Ysn");
      filter0.m_filterThread = (Thread) mockThread0;
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[4];
      threadGroupArray0[0] = threadGroup1;
      threadGroupArray0[1] = threadGroup0;
      threadGroupArray0[2] = threadGroup0;
      threadGroupArray0[3] = threadGroup1;
      threadGroup1.enumerate(threadGroupArray0, false);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus((-5));
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      sorter0.addHierarchyListener((HierarchyListener) null);
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Filter filter0 = new Filter();
      ComponentOrientation componentOrientation0 = filter0.getComponentOrientation();
      filter0.applyComponentOrientation(componentOrientation0);
      filter0.connectionNotification("testSet", "dataSet");
      boolean boolean0 = filter0.connectionAllowed("rt)q8 NB9f?!aW]J");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("dataSet", "dataSet");
      boolean boolean0 = filter0.connectionAllowed("trainingSet");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Add add0 = new Add();
      Filter filter0 = new Filter();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      sorter0.getAncestorListeners();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      boolean boolean0 = filter0.connectionAllowed("instance");
      assertEquals("Add", filter0.getCustomName());
      assertTrue(boolean0);
  }
}
