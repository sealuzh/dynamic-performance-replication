/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:55:34 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.identity(494);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      cRSMatrix0.transpose();
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(0, vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 2384;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 2384);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      cRSMatrix0.product();
      // Undeclared exception!
      try { 
        cRSMatrix0.power(2384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 4768.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)117;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cRSMatrix0.set(0, 0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      cRSMatrix0.toBinary();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.multiplyByItsTranspose();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      double[][] doubleArray0 = new double[0][4];
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-2886), 432, (double) (-2886), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.getColumn(120);
      int int1 = 13;
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 209.91797;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int int0 = 2793;
      int int1 = (-1192);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape(2793, (-1192));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 2793x-1192
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 3930;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3930, 3930, 3930);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3930, cRSMatrix0.rows());
      assertEquals(3930, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.copyOfShape(3930, 3930);
      int int1 = 104;
      int int2 = 48;
      cRSMatrix0.nonZeroAt(104, 48);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(104, 48, matrixFunction0);
      int int3 = 124;
      cRSMatrix0.swapColumns(3930, 1568);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int3, vectorProcedure0);
      String string0 = "t";
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket(string0);
      double double0 = (-1924.81);
      cRSMatrix0.divide(double0);
      cRSMatrix1.rotate();
      int int4 = 32;
      int int5 = 37;
      cRSMatrix0.blankOfShape(int4, int5);
      int int6 = 2;
      cRSMatrix0.getColumn(int6);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix2 = cRSMatrix0.to(matrixFactory0);
      int[] intArray0 = new int[4];
      intArray0[0] = int4;
      intArray0[1] = int0;
      intArray0[2] = int5;
      intArray0[3] = int1;
      cRSMatrix2.select(intArray0, intArray0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(int2, vectorProcedure1);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix1.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (double) 3;
      doubleArray0[3] = 892.6694305705839;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(3, 3, doubleArray0);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(3, sparseMatrix0.columns());
      assertEquals(3, sparseMatrix0.rows());
      assertEquals(892.6694305705839, sparseMatrix0.max(), 0.01);
      assertEquals(0.2222222222222222, sparseMatrix0.density(), 0.01);
      assertEquals(2, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 892.6694305705839, 0.0, 0.0, 0.0, 3.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 62;
      int int1 = (-491);
      // Undeclared exception!
      try { 
        ((CRSMatrix) sparseMatrix0).minInRow(62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(763, 3);
      assertEquals(763, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(763, 763);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(763, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(763, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1778);
      assertEquals(1778, denseMatrix0.columns());
      assertEquals(1778, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1779
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(124, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(124, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = cRSMatrix0.toBinary();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(124, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray1);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(124, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(124, cRSMatrix1.rows());
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.trace();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 89;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 1345.6;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(89);
      Double double0 = new Double(100.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(3, (-2466), matrixFunction0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 2384);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2384, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2384, columnMajorSparseMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(4768, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(4, 4.9E-324, (Random) mockRandom0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(byteArray0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(245);
      assertEquals(245, denseMatrix0.columns());
      assertEquals(245, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(124, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 124;
      doubleArray0[7] = (double) 3;
      doubleArray0[2] = (double) 124;
      doubleArray0[3] = 892.6694305705839;
      doubleArray0[5] = (double) 124;
      doubleArray0[6] = (double) 124;
      doubleArray0[7] = (double) 124;
      doubleArray0[8] = (double) 124;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(3, 3, doubleArray0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(3, sparseMatrix0.columns());
      assertEquals(0.7777777777777778, sparseMatrix0.density(), 0.01);
      assertEquals(3, sparseMatrix0.rows());
      assertEquals(7, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(892.6694305705839, sparseMatrix0.max(), 0.01);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotNull(sparseMatrix0);
      assertArrayEquals(new double[] {124.0, 0.0, 124.0, 892.6694305705839, 0.0, 124.0, 124.0, 124.0, 124.0}, doubleArray0, 0.01);
      
      CRSMatrix.identity(124);
      sparseMatrix0.getColumn(0);
      ((CRSMatrix) sparseMatrix0).copyOfShape(3, 11);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 124;
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-208.7683445115108), (-208.7683445115108), 2302.88233552889, (-208.7683445115108), (-31.36217302346042)).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      double[] doubleArray1 = new double[9];
      doubleArray0[120] = (double) 124;
      doubleArray1[7] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[5] = (double) 124;
      doubleArray0[17] = (double) 3;
      doubleArray1[7] = (double) 124;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(3, 3, doubleArray1);
      double[][] doubleArray2 = new double[1][6];
      doubleArray2[0] = doubleArray0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.swapColumns((-1), 124);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 2511;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2511, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = ((CRSMatrix) rowMajorSparseMatrix0).copyOfShape(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2324.27293380521;
      doubleArray0[2] = (double) 0;
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      cRSMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[][] doubleArray0 = new double[0][4];
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(3246);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3246
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.max();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight(67, 67);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [67..0][67..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(5);
      mockRandom0.nextBoolean();
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 2850);
      cRSMatrix0.getColumn(5);
      cRSMatrix0.copyOfShape(2866, 1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(2614, 2614, 0.0, (Random) mockRandom0);
      int int0 = 32;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZeroInRow(32, vectorProcedure0);
      Matrix matrix0 = sparseMatrix0.blank();
      MockRandom mockRandom1 = new MockRandom();
      Matrix.randomSymmetric(32, mockRandom1);
      sparseMatrix0.toColumnMajorSparseMatrix();
      matrix0.manhattanNorm();
      int int1 = 13;
      RowMajorSparseMatrix.zero(int1, int0);
      matrix0.rotate();
      ((CRSMatrix) sparseMatrix0).min();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(120, 3);
      cRSMatrix0.getColumn(120);
      cRSMatrix0.minInRow(13);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt((-74), 8, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -74
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = 714.8;
      doubleArray1[1] = (-589.9327549);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2665.80373);
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(3291);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3291
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = 51;
      intArray1[1] = 16;
      intArray1[2] = 229;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(494);
      int int0 = 2511;
      RowMajorSparseMatrix.zero(8, 494);
      int int1 = 8;
      cRSMatrix0.norm();
      cRSMatrix0.copyOfShape(int1, int0);
      cRSMatrix0.nonZeroAt(int0, int1);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix.zero(0, 2384);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2384, 335.45113825587447);
      ((CRSMatrix) sparseMatrix0).setAll(0);
      MockRandom mockRandom0 = new MockRandom((-1314L));
      mockRandom0.nextBoolean();
      cRSMatrix0.removeFirstColumn();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldNonZeroInRows(vectorAccumulator1);
      int int1 = 2112;
      ((CRSMatrix) sparseMatrix0).copyOfShape(int0, int1);
      CRSMatrix.identity(int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 124;
      int int1 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 124;
      doubleArray0[7] = (double) 3;
      doubleArray0[2] = (double) 124;
      doubleArray0[3] = 892.6694305705839;
      doubleArray0[5] = (double) 124;
      doubleArray0[6] = (double) 124;
      doubleArray0[7] = (double) 124;
      doubleArray0[8] = (double) 124;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(3, 3, doubleArray0);
      sparseMatrix0.shuffle();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.foldColumn(5039, vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5039' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColumnMajorSparseMatrix.zero(0, 2408);
      CRSMatrix.zero(2408, 2408);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2408);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2408, 2408, 2408);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).set(37, 2109, 2408);
      Double double0 = new Double(37);
      MockRandom mockRandom0 = new MockRandom(0);
      cRSMatrix0.maxInRow(40);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      cRSMatrix0.setAll(1.0);
      ColumnMajorSparseMatrix.zero(3, 3, 3);
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2614;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(2614, 2614, 0.0, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZeroInRow(32, vectorProcedure0);
      int int1 = 1;
      SparseMatrix.random(2614, 1, 1.614825816825292E136, (Random) mockRandom0);
      sparseMatrix0.blank();
      MatrixProcedure matrixProcedure0 = null;
      sparseMatrix0.eachNonZero(matrixProcedure0);
      double double0 = 3330.49627432398;
      ((CRSMatrix) sparseMatrix0).setAll(double0);
      ((CRSMatrix) sparseMatrix0).blankOfShape(int1, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(2614, 2614, 0.0, (Random) mockRandom0);
      sparseMatrix0.blank();
      int[] intArray0 = new int[2];
      intArray0[1] = 32;
      sparseMatrix0.eachNonZero((MatrixProcedure) null);
      ((CRSMatrix) sparseMatrix0).blankOfShape(intArray0[0], intArray0[1]);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(455L);
      int int0 = 3021;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3021, 474, 3021);
      RowMajorSparseMatrix.zero(474, 469);
      int[] intArray0 = new int[2];
      intArray0[0] = 469;
      intArray0[1] = 1271;
      cRSMatrix0.select(intArray0, intArray0);
      String string0 = null;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV(string0);
      int int1 = 4;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateAt(int1, intArray0[0], matrixFunction0);
      CRSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(120, 3);
      cRSMatrix0.getColumn(120);
      int int0 = 13;
      cRSMatrix0.minInRow(13);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[0][4];
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColumnMajorSparseMatrix.zero(0, 2410);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2410);
      RowMajorSparseMatrix.identity(2410);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(37, 2410);
      cRSMatrix1.getColumn(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = ((CRSMatrix) sparseMatrix0).toBinary();
      CRSMatrix cRSMatrix2 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix2.min();
      cRSMatrix0.nonZeroAt(1261, 1261);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 2614;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(2614, 2614, 0.0, (Random) mockRandom0);
      int int1 = 164;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.transform((MatrixFunction) null);
      sparseMatrix0.transformRow(int1, vectorFunction0);
      double double0 = 0.9;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(double0).when(matrixAccumulator0).accumulate();
      double double1 = new Double(double0);
      ((CRSMatrix) sparseMatrix0).toBinary();
      double double2 = (-348.0131);
      Double double3 = new Double(double2);
      MockRandom mockRandom1 = new MockRandom(int1);
      MockRandom mockRandom2 = new MockRandom(int0);
      int int2 = 1361;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int2);
      String string0 = null;
      String string1 = "7 &9SBWzco';u,_V";
      CRSMatrix.fromMatrixMarket(string1);
      ((CRSMatrix) sparseMatrix0).blankOfShape(int2, int1);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket(string0);
      cRSMatrix1.toRowMajorSparseMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 124;
      int int1 = 6079;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 6079);
      Matrix matrix0 = rowMajorSparseMatrix0.copyOfRows(6079);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)124, (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      Double double0 = new Double(int0);
      int int2 = 3903;
      int int3 = 13;
      CRSMatrix.zero(int2, int3);
      int int4 = 572;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int4);
      cRSMatrix0.minInRow(int1);
      int int5 = 4663;
      int int6 = 388;
      int int7 = (-1598);
      CRSMatrix.zero(int5, int6, int7);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 124;
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 124;
      doubleArray0[7] = (double) 3;
      doubleArray0[2] = (double) 124;
      doubleArray0[3] = 892.6694305705839;
      doubleArray0[5] = (double) 124;
      doubleArray0[6] = (double) 124;
      doubleArray0[7] = (double) 124;
      doubleArray0[8] = (double) 124;
      CRSMatrix cRSMatrix1 = (CRSMatrix)SparseMatrix.from1DArray(3, 3, doubleArray0);
      CRSMatrix.identity(124);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      cRSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix1.min();
      CRSMatrix.fromMatrixMarket("org.la4j.vector.dense.BasicVector");
      cRSMatrix1.iteratorOfNonZeroRows();
      int int1 = 937;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateAt(int0, int1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(2614, 2614, 0.0, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.eachNonZeroInRow(51, vectorProcedure0);
      Matrix matrix0 = sparseMatrix0.blank();
      mockRandom0.doubles();
      byte[] byteArray0 = ((CRSMatrix) sparseMatrix0).toBinary();
      CRSMatrix.fromBinary(byteArray0);
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(120, 3926);
      cRSMatrix0.multiplyByItsTranspose();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3926);
      mockRandom1.nextBoolean();
      SparseMatrix.random(4, 4, (double) 3926, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll(6.0);
      int int0 = Integer.MAX_VALUE;
      int int1 = 793;
      int int2 = 1696;
      int int3 = 856;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(1696, 856, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1451776.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      cRSMatrix0.getColumn(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)124, (-2.4758785612214185), 1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(3, vectorFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2.4758785612214185)).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2.4758785612214185);
      doubleArray0[1] = (double) 3;
      cRSMatrix0.toBinary();
      Double double0 = new Double(0.0);
      Double double1 = new Double((-2.4758785612214185));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.updateAt(2, 3050, matrixFunction0);
      matrix0.min();
      // Undeclared exception!
      try { 
        matrix0.updateAt(3, 2, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2397, 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(455L);
      mockRandom0.nextBoolean();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(804);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1271, 804);
      int[] intArray0 = new int[1];
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix.fromCSV((String) null);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(927L);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1106, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = new CRSMatrix(167, 167);
      RowMajorSparseMatrix.zero(167, 167);
      int[] intArray0 = new int[1];
      intArray0[0] = 804;
      cRSMatrix0.select(intArray0, intArray0);
      CRSMatrix.from2DArray((double[][]) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      Matrix.constant(124, 3, 0.0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(755, 1551, 751);
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(32);
      cRSMatrix2.copyOfColumns(4);
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2214.686768336129);
      doubleArray1[1] = 892.6694305705839;
      doubleArray1[2] = (double) 755;
      doubleArray1[3] = (double) 32;
      doubleArray1[4] = (double) 32;
      doubleArray1[5] = 892.6694305705839;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 892.6694305705839;
      doubleArray2[1] = 892.6694305705839;
      doubleArray2[2] = (-2214.686768336129);
      doubleArray2[3] = (-2214.686768336129);
      doubleArray2[4] = (double) 3;
      doubleArray0[1] = doubleArray1;
      Matrix.from2DArray(doubleArray0);
      cRSMatrix1.minInRow(746);
      org.evosuite.runtime.Random.setNextRandom((-893));
      cRSMatrix1.nonZeroIteratorOfRow((-1943));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      cRSMatrix0.getColumn(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)124, (-2.4758785612214185), 1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(3, vectorFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2.4758785612214185)).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2.4758785612214185);
      doubleArray0[1] = (double) 3;
      cRSMatrix0.toBinary();
      Double double0 = new Double(0.0);
      MockRandom mockRandom0 = new MockRandom(3);
      cRSMatrix0.maxInRow(16);
      // Undeclared exception!
      try { 
        CRSMatrix.random(3395, 3, Double.POSITIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(804);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1271, 804);
      cRSMatrix0.iterator();
      Double double0 = new Double(804);
      MockRandom mockRandom1 = new MockRandom(365L);
      ((CRSMatrix) rowMajorSparseMatrix0).maxInRow(1097);
      cRSMatrix0.set(804, 1051, (-2122));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 1807);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(4238.4932776533915, 4238.4932776533915, (double)3).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1807).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray(1815, (-3108), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1815x-3108
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1508;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, 1508);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(927L);
      int int0 = 1106;
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1106, 0.0, (Random) mockRandom0);
      double[] doubleArray0 = cRSMatrix0.foldRows((VectorAccumulator) null);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      int int1 = 1;
      SparseMatrix.from1DArray(int1, int1, doubleArray0);
      int int2 = 1106;
      cRSMatrix0.toBinary();
      Double double0 = new Double(int0);
      long long0 = 341L;
      MockRandom mockRandom1 = new MockRandom(long0);
      cRSMatrix0.maxInRow(int1);
      int int3 = 6;
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int3, int1, (double) int2, (Random) mockRandom1);
      cRSMatrix1.nonZeroIteratorOfRow(int2);
      cRSMatrix1.minInRow(int1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 124;
      int int1 = 6095;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(124);
      int int2 = 3903;
      int int3 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3903, 13);
      int int4 = 572;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(572);
      cRSMatrix1.set(3, 3, 3.349232062973958E163);
      cRSMatrix1.minInRow(6095);
      int int5 = 4663;
      int int6 = 388;
      int int7 = (-1598);
      CRSMatrix.zero(int5, int6, int7);
      cRSMatrix0.getColumn(int4);
      int[] intArray0 = new int[9];
      intArray0[0] = int2;
      intArray0[1] = int2;
      intArray0[2] = int1;
      intArray0[3] = int0;
      intArray0[4] = int3;
      int int8 = 88;
      intArray0[5] = int8;
      intArray0[6] = int3;
      int int9 = (-793);
      intArray0[7] = int9;
      intArray0[8] = int0;
      cRSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 2410);
      CRSMatrix.identity(2410);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2410);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int1 = 2386;
      SparseMatrix.diagonal(2386, 2410);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int2 = 2121;
      ((CRSMatrix) rowMajorSparseMatrix0).set(2386, 2121, 2410);
      Double double0 = new Double(2386);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int3 = 2109;
      MatrixMatrixOperation<Integer> matrixMatrixOperation0 = (MatrixMatrixOperation<Integer>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((MatrixOperation) null).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      rowMajorSparseMatrix0.apply(matrixMatrixOperation0, (Matrix) columnMajorSparseMatrix0);
      int int4 = 31;
      cRSMatrix0.set(int3, int4, int4);
      Double double1 = new Double(int0);
      MockRandom mockRandom0 = new MockRandom(int2);
      int int5 = 1857;
      ((CRSMatrix) rowMajorSparseMatrix0).maxInRow(int0);
      double double2 = (-1359.675091795236);
      MockRandom mockRandom1 = new MockRandom(int1);
      CRSMatrix.random(int5, int3, double2, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(118, 3);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 118;
      doubleArray0[3] = 892.6694305705839;
      doubleArray0[5] = (double) 118;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(3, 3, doubleArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(118);
      cRSMatrix0.iteratorOfColumn(3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 32;
      Matrix matrix0 = sparseMatrix0.power(32);
      matrix0.setAll((-1343.96285));
      Double double0 = new Double(892.6694305705839);
      cRSMatrix1.blankOfColumns(790);
      matrix0.iteratorOfRow(32);
      cRSMatrix1.min();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, int0);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      int int1 = 202;
      CRSMatrix.identity(int1);
      String string0 = "";
      CRSMatrix.fromMatrixMarket(string0);
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ColumnMajorSparseMatrix.zero(0, 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 37;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(37, 0);
      Locale locale0 = Locale.GERMAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      sparseMatrix0.toCSV(numberFormat0);
      sparseMatrix0.shuffle();
      rowMajorSparseMatrix0.shuffle();
      cRSMatrix0.getColumn(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      ((CRSMatrix) rowMajorSparseMatrix0).set(37, 2109, 0);
      SparseMatrix.identity(int0);
      int int1 = 2440;
      int int2 = 3309;
      int int3 = (-2314);
      CRSMatrix.zero(int3, int1, int2);
      rowMajorSparseMatrix0.removeFirstColumn();
      cRSMatrix0.copyOfShape(int3, int3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(1660, 1660, 0.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(713.9749157454839, (double)164, 0.9, (double)1660, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = sparseMatrix0.transformRow(164, vectorFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.9).when(matrixAccumulator0).accumulate();
      sparseMatrix0.foldNonZero(matrixAccumulator0);
      RowMajorSparseMatrix.identity(1660);
      ((CRSMatrix) sparseMatrix0).toBinary();
      matrix0.iterator();
      Double double0 = new Double(0.0);
      SparseVector sparseVector0 = SparseVector.zero(390, (-2100));
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1660);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      CRSMatrix.identity(109);
      CRSMatrix.fromMatrixMarket("x?");
      String string0 = "Can not remove from this iterator.";
      CRSMatrix.fromMatrixMarket(string0);
      String string1 = "";
      CRSMatrix.fromMatrixMarket(string1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3923);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(3923, 3923);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = (-2106);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1821);
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      cRSMatrix0.minInRow(7);
      cRSMatrix0.nonZeroIteratorOfRow(3923);
      int int1 = 1;
      int int2 = 764;
      Matrix.zero((-1821), (-1821));
      SparseMatrix.zero(int2, int2);
      int[] intArray0 = new int[1];
      intArray0[0] = int1;
      cRSMatrix1.select(intArray0, intArray0);
      long long0 = 1427L;
      MockRandom mockRandom1 = new MockRandom(long0);
      CRSMatrix.identity(int0);
      String string0 = null;
      CRSMatrix.fromMatrixMarket(string0);
      CRSMatrix.from1DArray(int0, int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 124;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 124;
      doubleArray0[2] = (double) 124;
      doubleArray0[5] = (double) 124;
      doubleArray0[7] = (double) 124;
      doubleArray0[8] = (double) 124;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(3, 3, doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-858.7045), 124.0, 124.0, 363.66107958497, 124.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = sparseMatrix0.transform(matrixFunction0);
      sparseMatrix0.nonZeroIterator();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(124);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      int int1 = 490;
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      matrix0.to(matrixFactory0);
      int int2 = 1626;
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
      double double0 = (-2629.8161);
      long long0 = 2106L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CRSMatrix.randomSymmetric(int2, double0, (Random) mockRandom0);
      cRSMatrix0.blankOfRows(int1);
      doubleArray1[1] = doubleArray0;
      double double1 = 440.5823787805853;
      cRSMatrix0.removeFirstColumn();
      Double double2 = new Double(double1);
      int int3 = 2;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(int0, int3, matrixFunction1);
      cRSMatrix0.toBinary();
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(927L);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1106, 0.0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(804, 166);
      RowMajorSparseMatrix.zero(166, 166);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-621.97004152)).when(matrixAccumulator0).accumulate();
      cRSMatrix1.foldNonZero(matrixAccumulator0);
      int[] intArray0 = new int[1];
      int int0 = 764;
      Matrix.zero(0, 804);
      SparseMatrix.zero(764, 0);
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      matrix0.rank();
      MockRandom mockRandom1 = new MockRandom(804);
      CRSMatrix.identity(804);
      CRSMatrix.fromMatrixMarket((String) null);
      int int1 = Integer.MAX_VALUE;
      cRSMatrix0.blankOfShape(int0, int1);
      String string0 = "";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      cRSMatrix0.getColumn(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)124, (-2.4758785612214185), 1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformRow(3, vectorFunction0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2.4758785612214185)).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2.4758785612214185);
      doubleArray0[1] = (double) 3;
      cRSMatrix0.toBinary();
      Double double0 = new Double(0.0);
      MockRandom mockRandom0 = new MockRandom(1283L);
      cRSMatrix0.maxInRow(16);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(16, 84, matrixFunction0);
      matrix0.min();
      org.evosuite.runtime.Random.setNextRandom(1470);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 2614;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(2614, 2614, 0.0, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      sparseMatrix0.foldRows(vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.transformRow(int0, vectorFunction0);
      int int1 = 3580;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(int1);
      Double double0 = new Double(int0);
      int int2 = 9;
      int int3 = 2997;
      MatrixFunction matrixFunction0 = null;
      ((CRSMatrix) sparseMatrix0).updateAt(int2, int3, matrixFunction0);
      cRSMatrix0.min();
      int int4 = 16;
      ((CRSMatrix) sparseMatrix0).updateAt(int4, int1, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(2614, 2614, 0.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.9).when(matrixAccumulator0).accumulate();
      sparseMatrix0.foldNonZero(matrixAccumulator0);
      ((CRSMatrix) sparseMatrix0).toBinary();
      Double double0 = new Double((-348.0131));
      MockRandom mockRandom1 = new MockRandom((-2874L));
      ((CRSMatrix) sparseMatrix0).maxInRow(164);
      int int0 = (-2076);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(3395, (-2076), 0.9, (Random) mockRandom0);
      int int1 = 3899;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      double double1 = (-606.83310028228);
      cRSMatrix0.set(int0, int1, double1);
      String string0 = "E(`egP";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 3920;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3920);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      MockRandom mockRandom0 = new MockRandom();
      int int1 = (-1821);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int1;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      cRSMatrix0.spliterator();
      Matrix.from2DArray(doubleArray1);
      cRSMatrix0.minInRow(int0);
      int int2 = 1683;
      cRSMatrix1.nonZeroIteratorOfRow(int2);
      cRSMatrix1.nonZeroIteratorOfColumn(int0);
      Double double0 = new Double(int1);
      int int3 = 1140;
      SparseVector.zero(int3, int0);
      int int4 = 780;
      cRSMatrix0.copyOfShape(int4, int4);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int5 = 2695;
      SparseMatrix.from1DArray(int1, int5, doubleArray0);
      CRSMatrix.from2DArray(doubleArray1);
      String string0 = "Can not compute determinant of non-square matrix.";
      CRSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(927L);
      int int0 = 1106;
      // Undeclared exception!
      CRSMatrix.randomSymmetric(1106, 0.168349952260901, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(124, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-208.7683445115108), (-208.7683445115108), (double)3, (-208.7683445115108), (-31.36217302346042)).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      double[] doubleArray1 = new double[9];
      doubleArray0[120] = (double) 124;
      doubleArray1[7] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray0[17] = (double) 3;
      doubleArray0[91] = (double) 124;
      double double0 = (-973.456866);
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(124, mockRandom0);
      // Undeclared exception!
      try { 
        SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
