/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:47:20 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Object, Map<Map<String, Object>, Object>> hashMap0 = new HashMap<Object, Map<Map<String, Object>, Object>>();
      DoubleKeyMap<Object, Map<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Object>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>();
      Integer integer0 = new Integer(1085);
      Object object0 = new Object();
      doubleKeyMap1.put(integer0, "e*>NLr!5", object0);
      doubleKeyMap1.remove(integer0, "e*>NLr!5");
      Integer integer1 = new Integer(0);
      doubleKeyMap1.remove(integer1, "L%'#787+dv*R9bbj");
      DoubleKeyMap<String, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<String, Object, Integer>();
      doubleKeyMap2.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap3.put("e*>NLr!5", (Map<Object, Object>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Object object0 = new Object();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2988));
      doubleKeyMap1.get(integer1, integer1);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>();
      Object object1 = new Object();
      Object object2 = doubleKeyMap2.remove(object1, object1);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      doubleKeyMap0.remove((Object) "");
      doubleKeyMap0.get((Object) hashMap0);
      HashMap<Object, Map<Object, Integer>> hashMap1 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap1);
      Integer integer0 = new Integer((-1617));
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) hashMap1, (Object) "", integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Integer, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, Object>, Integer>();
      Integer integer0 = new Integer((-279));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(integer0, (Map<String, Object>) hashMap0, integer0);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2203);
      doubleKeyMap1.put(integer1, integer2, "/?*{n[");
      Integer integer3 = new Integer(0);
      String string0 = doubleKeyMap1.get(integer3, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Map<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, Object>, Object>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>();
      Integer integer0 = new Integer(1085);
      Object object0 = new Object();
      Object object1 = new Object();
      doubleKeyMap2.put(integer0, "%@t)Yb[MI", object1);
      int int0 = 0;
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(1085);
      doubleKeyMap2.remove(integer2, (String) null);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap3 = new DoubleKeyMap<String, Object, Integer>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap4 = new DoubleKeyMap<String, Object, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap4.put("L%'#787+dv*R9bbj", (Map<Object, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.put(integer0, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0, class0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      DoubleKeyMap<Integer, Map<String, Object>, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, Map<String, Object>, Integer>();
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      doubleKeyMap0.put(integer0, integer2, "/?*{n[");
      Integer integer3 = new Integer(1993);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap3 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer4 = new Integer(741);
      Integer integer5 = new Integer(0);
      String string0 = doubleKeyMap3.get(integer4, integer5);
      assertNull(string0);
  }
}
