/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:04:19 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 49;
      try { 
        Parser.parse("?!P", 120457);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Parser.parse("_(?P<((>?Y$G|k6I", 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<((`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("Y(", (-299));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Y(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("(e", (-3400));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(e`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", (-128));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "('.rvzO";
      int int0 = 11373;
      try { 
        Parser.parse("('.rvzO", 11373);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `('.rvzO`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("_(?P<((>?Y$G|k6I", (-543));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<((`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4^", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "(?P<";
      int int0 = 1237;
      try { 
        Parser.parse("(?P<", 1237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse("Z(?Xs:.)", (-1055));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?X`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "(";
      try { 
        Parser.parse("(", 65392);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse(";^#MZKj^ I#TiJdT:H#", (-700));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse(";^#MZKj^ I#TiJdT:H#", (-700));
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      regexp3.op = regexp_Op1;
      regexpArray0[3] = regexp4;
      regexp2.op = regexp_Op0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 0);
      regexp4.flags = 0;
      Parser parser0 = new Parser("OX:6)UZK0)D8sr2", (-700));
      int int0 = 0;
      Parser.parse("", 0);
      Parser.parse(";^#MZKj^ I#TiJdT:H#", 0);
      regexp1.equals(regexp1);
      int int1 = 727;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 727, (-700));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Parser.parse(")", 37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("", 660);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("com.google.re2j.Parser$Stack", 660);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("{EI:.SDCVEp", 660);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = Parser.parse("", 660);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp2);
      regexpArray0[5] = regexp5;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp1);
      regexpArray0[7] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-798), 660);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -798
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("?Urf)A7gF{'", 1220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{", 240);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = (-1852);
      Parser.parse("", (-1852));
      String string0 = ":-";
      Parser.parse(string0, int0);
      String string1 = "\\P\\x00-\\x{10FFFF}";
      try { 
        Parser.parse(string1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\P\\`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      String string0 = "";
      int int0 = (-3268);
      Regexp regexp0 = Parser.parse("", (-3268));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexp0.cap = (-3268);
      Regexp regexp2 = Parser.parse("", 89);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp1.op = regexp_Op0;
      regexp2.min = (-3268);
      Regexp regexp3 = Parser.parse(",9sW'.h_\"xl", 89);
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[2] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[3] = regexp5;
      int int1 = (-436);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3268
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "H\\Tt'~Rhid{EX";
      int int0 = 7205;
      Regexp regexp0 = Parser.parse("HTt'~Rhid{EX", 7205);
      Regexp[] regexpArray0 = new Regexp[2];
      int int1 = (-927);
      regexp0.max = int1;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      regexp0.op = regexp_Op0;
      regexpArray0[0] = regexp0;
      regexp0.op = regexp_Op0;
      regexp0.op.isPseudo();
      regexp0.cap = int0;
      String string1 = "";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1237;
      String string0 = "(?(P#m*,jx#frC/zf";
      try { 
        Parser.parse("(?(P#m*,jx#frC/zf", 1237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "ndt";
      int int0 = 85;
      Parser.parse("ndt", 85);
      Parser parser0 = new Parser("ndt", 85);
      Parser.parse("Diacritic", 85);
      Parser.parse("", 85);
      try { 
        Parser.parse("(?", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        Parser.parse("I[", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PH*", 2525);
      String string0 = "-u";
      int int0 = (-687);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        Parser.parse("[:-0", 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 1220;
      Parser.parse("pmQ", 1220);
      String string0 = "Any";
      Parser.parse(string0, int0);
      String string1 = ";vr&@nAY9`";
      Regexp regexp0 = Parser.parse(string1, int0);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 869);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Parser.parse("", 3331);
      Parser.parse("", 164);
      Parser parser0 = new Parser("", 329);
      Parser.parse("", 164);
      Parser.parse("X!yH&fDSj}", (-601));
      Parser.parse(";|fv", 912);
      Parser.parse("", 329);
      Parser.parse("", 3331);
      Parser.parse("", 164);
      Parser.parse("", 1520);
      Parser.parse("Sc", 1520);
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 1520, 329);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Parser.parse("j|?D@@TF3x%#*UX", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp regexp0 = Parser.parse("]|", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp regexp0 = Parser.parse("&v|<", 108);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "";
      int int0 = 120310;
      Parser.parse("", 120310);
      String string1 = "Inscriptional_Pahlavi";
      Parser.parse("Inscriptional_Pahlavi", 0);
      String string2 = "";
      int int1 = 9;
      Parser parser0 = new Parser("", 9);
      try { 
        Parser.parse("k(R/Rc9$9tJ/kh", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `k(R/Rc9$9tJ/kh`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      int int0 = 0;
      Regexp regexp1 = Parser.parse("'jN", 0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp4;
      try { 
        Parser.parse("M'O*=$rXz6mR>)", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      String string0 = "[V,[#0H*";
      int int0 = (-295);
      try { 
        Parser.parse("[V,[#0H*", (-295));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[V,[#0H*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp0 = Parser.parse("", (-3268));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexp0.cap = (-3268);
      Regexp regexp2 = Parser.parse("", 89);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("Muo4d@I9`Hk]C%|M", 111);
      Regexp regexp4 = Parser.parse("Muo4d@I9`Hk]C%|M", 111);
      Regexp regexp5 = new Regexp(regexp0);
      Regexp regexp6 = Parser.parse("Muo4d@I9`Hk]C%|M", (-3268));
      Regexp regexp7 = new Regexp(regexp3);
      Regexp[] regexpArray1 = new Regexp[8];
      regexpArray1[0] = regexp3;
      regexpArray1[1] = regexp4;
      regexpArray1[2] = regexp7;
      regexpArray1[3] = regexp7;
      regexpArray1[4] = regexp7;
      regexpArray1[5] = regexp2;
      regexpArray1[6] = regexp6;
      regexpArray1[7] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-1245), (-3018));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp regexp0 = Parser.parse("RZ}ZOW/%|r", (-124277819));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Parser parser0 = new Parser(" !MY[;*K,_?;Yj9`?", 95);
      Regexp regexp0 = Parser.parse("\"$+|p", 4);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|G", 232);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Parser parser0 = new Parser("X>OO3({", 2432);
      try { 
        Parser.parse("X>OO3({", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `X>OO3({`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = new Parser("Z@", 2432);
      Regexp regexp0 = Parser.parse("2A`Cw;Vnd8j:Kd6+", 349);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "";
      int int0 = 2432;
      Parser parser0 = new Parser("", 2350);
      try { 
        Parser.parse(",[", 2432);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp0 = Parser.parse("ih~`|n|", 92);
      regexpArray0[0] = regexp0;
      regexp0.name = "?URP\"D5Kg:r";
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-3222), 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3222
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Parser.parse("hL{|e#1}~4#awO2", 127344);
      Parser.parse("en_MU2=Q>@", 127344);
      Regexp regexp0 = Parser.parse("hL{|e#1}~4#awO2", (-295));
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 0, 127344);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp regexp0 = Parser.parse("U'p", 92);
      Regexp regexp1 = Parser.parse("PP0H*", 92);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("S", 125);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Parser parser0 = new Parser("Dk`oCC~Jd", 124);
      Parser.parse(" cK5c?t+7^}dg", 2093);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("W", 124);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("W", (-478));
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("#0", (-478));
      regexpArray0[3] = regexp4;
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1406), 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1406
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 52;
      try { 
        Parser.parse("[-K0", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-K0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "#0";
      int int0 = 778;
      Parser parser0 = new Parser("#0", 778);
      try { 
        Parser.parse(":njLP,![-u0", (-243));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-u0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("&", 2525);
      int int0 = (-1540);
      Regexp regexp1 = Parser.parse("&", (-1540));
      assertTrue(regexp1.equals((Object)regexp0));
      
      Parser parser0 = new Parser("&", (-1540));
      Parser.parse("P#0H*", 2525);
      String string0 = "";
      Regexp regexp2 = Parser.parse(string0, int0);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 23;
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("nf\"%hq&wa6", 2201);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexp0.min = 52;
      Regexp regexp2 = Parser.parse("invalid or unsupported Perl syntax", 4227);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp3);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp2);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse("nf\"%hq&wa6", 92);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp4);
      regexpArray0[7] = regexp8;
      try { 
        Parser.parse("[:-u0", 2201);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:-u0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", (-820));
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      int int0 = 122;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser.parse("\tpCOD#3e!UCGB1'<]F", 597);
      Parser.parse("I", (-384));
      Regexp regexp0 = Parser.parse("R%PF+Bp", (-3695));
      Regexp regexp1 = Parser.parse("R%PF+Bp", (-384));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser.parse(" cK5c?t+7^}dg", 2093);
      Regexp regexp0 = Parser.parse("Q9;", 2392);
      Regexp regexp1 = Parser.parse("invalid escape sequence", 443);
      Regexp regexp2 = new Regexp(regexp1);
      Parser.parse("|,@I_", 4053);
      Regexp regexp3 = Parser.parse("W", (-1901));
      assertFalse(regexp3.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 2668;
      Parser parser0 = new Parser("invalid escape sequence", 2668);
      Parser.parse("3{4=x-fz", 2668);
      try { 
        Parser.parse(":njLP,![-u0", 2668);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-u0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{3S", 105);
      Regexp regexp1 = Parser.parse("{3S", 107);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        Parser.parse("7aTQ~[^01", 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^01`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      Parser parser0 = new Parser("", 2432);
      Parser.parse("[:^xdigit:]", 2432);
      Parser.parse("E", 2432);
      int int0 = 43;
      Parser.parse(string0, int0);
      int int1 = 2432;
      Parser parser1 = new Parser(string0, int1);
      String string1 = "\\XL@Kp6vyv%@\":8OZv";
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\X`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:]", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Parser parser0 = new Parser("x&5v(Z3", (-1612));
      String string0 = ":V";
      Regexp regexp0 = Parser.parse("pE", 1237);
      int int0 = 3551;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007", 49);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser.parse("ndt", 85);
      Parser parser0 = new Parser("ndt", 85);
      Parser.parse("ndt", (-924));
      String string0 = "\\W";
      try { 
        Parser.parse("$Ik^\u0002tv&^&o_(I", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `$Ik^\u0002tv&^&o_(I`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser.parse("\u0004|pP", 28);
      String string0 = "-";
      int int0 = (-785);
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Parser.parse("q&g\u0001p:nuarrpcU", 49);
      String string0 = "7J%#*~0]`].a";
      int int0 = 109;
      Parser.parse(string0, int0);
      String string1 = "HH=dQQ/Jf:2";
      int int1 = 3;
      Parser parser0 = new Parser(string1, int1);
      String string2 = "\\p\\E";
      int int2 = 37;
      try { 
        Parser.parse(string2, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 1237;
      try { 
        Parser.parse("(?(P#m*,jx#frC/zf", 1237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = new Parser("[::]", 354);
      Parser.parse("[::]", 65);
      int int0 = 63;
      Parser.parse("[:-u0", 63);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1197);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("5z=f~9L\fb3L}0erI,!", 36);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("I", 124);
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Parser.parse("(?-s:.)", 1220);
      String string0 = "(?P<";
      try { 
        Parser.parse("(?P<", (-476));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", 589);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 1220;
      try { 
        Parser.parse("(?-s.", 1220);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 1220;
      Regexp regexp0 = Parser.parse("\u0001$QQ", 1220);
      String string0 = "Any";
      Parser.parse(string0, int0);
      String string1 = ";vr&@nAY9`";
      Regexp regexp1 = Parser.parse(string1, int0);
      Parser.parse(string0, int0);
      String string2 = "KsIoNFxe1";
      Regexp regexp2 = Parser.parse(string2, int0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp3;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp2;
      int int1 = 3093;
      int int2 = 10217;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3093
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{/'oCVx#", 99);
      Regexp regexp1 = Parser.parse("{/'oCVx#", (-576));
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser.parse("", (-360));
      Regexp regexp0 = Parser.parse("", (-360));
      Regexp regexp1 = Parser.parse("[:m:]", (-360));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v|<", 108);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 3067;
      try { 
        Parser.parse("(/-I;r-C[^q5Tc2Gu", 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^q5Tc2Gu`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-360);
      String string0 = "\\x{";
      Parser.parse("x{", (-360));
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 45);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Parser.parse("com.google.re2j.Parser$Stack", 11);
      int int0 = 105;
      Parser.parse("com.google.re2j.Parser$Stack", 105);
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 105, 105);
      Parser.parse("SpN02`X%S3h", 105);
      Parser.parse("x{", 105);
      String string0 = "0vB\\O^@p^cWxXXHL";
      int int1 = 2703;
      Parser.parse(string0, int1);
      int int2 = (-1556);
      int int3 = 6;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1556
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "\\C";
      Parser.parse("C", 3263);
      int int0 = 72;
      Parser.parse("C", 72);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PPp", 1220);
      Parser parser0 = new Parser("tSI2", 1220);
      Regexp regexp1 = Parser.parse("PPp", (-190));
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 41, (-1307));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP", (-3));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "\\b";
      int int0 = 1260;
      Parser.parse("\b", 1260);
      String string1 = "invalid named capture";
      int int1 = 331;
      Parser parser0 = new Parser("invalid named capture", 331);
      try { 
        Parser.parse("[:", 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 105;
      String string0 = "LS(K0KBg;4rP?9)85^<";
      Regexp regexp0 = Parser.parse("LS(K0KBg;4rP?9)85^<", 2016);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp1 = Parser.parse("LS(K0KBg;4rP?9)85^<", 2016);
      regexp0.equals(regexp1);
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-935), 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -935
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser parser0 = new Parser((String) null, 64);
      Parser.parse("z", 64);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{1DF%FFF}", 400);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "\\b";
      int int0 = (-1839);
      Regexp regexp0 = Parser.parse("\b", (-1839));
      Parser parser0 = new Parser("\b", (-1839));
      Regexp regexp1 = Parser.parse("^x00-x{10FFFF}", (-1839));
      Regexp regexp2 = Parser.parse("\b", 6973);
      assertTrue(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse(string0, int0);
      assertFalse(regexp3.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x0-x{10FFFF}", 4);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      int int0 = 456;
      int int1 = 122;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x^-x{+S1DF%FFF}", (-2271));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", (-496));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Parser.parse("r+ahUbU}w3v=Z9O", 723);
      Regexp regexp0 = Parser.parse("\rX", (-2368));
      Parser.parse("u{=qEs&LD%2", 723);
      Regexp regexp1 = Parser.parse("7L>=A8M", 106);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\b", (-1839));
      Parser parser0 = new Parser("\b", (-1839));
      Regexp regexp1 = Parser.parse("~|u", (-1247));
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-1247), (-1247));
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("]@Av EfMq&\"/", 1220);
      Parser parser0 = new Parser("]@Av EfMq&\"/", 63);
      Regexp regexp1 = Parser.parse("YJ[Uwr9DKh^Ywq", (-573));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp regexp0 = Parser.parse("=f.^", 36);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Parser.parse("X&c^/5|-od+", (-7615));
      try { 
        Parser.parse("&Z{{-Ke0@('2", (-7615));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `&Z{{-Ke0@('2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":g3Aza]AH}&", 2880);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 13, 13);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser.parse(";", 1521);
      Parser.parse("B", 1521);
      Parser.parse("B", (-29));
      Parser parser0 = new Parser("O!(x$_6;.yzVp", (-29));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Parser.parse(";", 1521);
      Regexp regexp0 = Parser.parse("%rEb;=kyfVki\u000B", 1521);
      Regexp regexp1 = Parser.parse(";", 1521);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = (-1215);
      Parser.parse("/v/X3W'Z7", (-1215));
      String string0 = "(?i:";
      try { 
        Parser.parse("(?i:", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("nf\"%hq&wa6", 2201);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = Parser.parse("Muo4d@I9`Hk]C$A%|M", 524287);
      Regexp regexp4 = Parser.parse("Muo4d@I9`Hk]C$A%|M", 2201);
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = new Regexp(regexp1);
      assertFalse(regexp5.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("kW1dU\"|zpEw/y", (-576));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 2641);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "%rEb;=kyfVi\\3";
      Parser.parse("%rEb;=kyfVi\u0003", 73);
      int int0 = 11505;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\3`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 80, 80);
      Parser.parse("|ws6y5~g\u0007W6th3k", 85);
      int int0 = 64;
      int int1 = 2472;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 2660);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[9:m:]", (-360));
      Regexp regexp1 = Parser.parse("[9:m:]", (-360));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 76;
      Parser.parse("i4\"\n^\"b", 76);
      Parser.parse("px00-x{10FFFF}", 109);
      String string0 = "\\P:]";
      Parser parser0 = new Parser(string0, int0);
      String string1 = "[:";
      int int1 = 84;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser.parse("Any", (-1775));
      Parser parser0 = new Parser("aeX4", (-1));
      Regexp regexp0 = Parser.parse("+_sl6NmBP", (-1));
      Regexp regexp1 = Parser.parse("{G4jj^6+'^.emFrW", (-1484));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser.parse("RZ}ZOW/%^|r", (-124277819));
      try { 
        Parser.parse("7:\u0000h')=JEZ[Y5v{ds", (-124277819));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("OPS{10&o|FY}", 1220);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A", 1124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser.parse("Egyptian_Hieroglyphs", (-1771));
      Parser parser0 = new Parser("hlD*}T;[u&Dq[:EU?_x", (-1771));
      try { 
        Parser.parse("hlD*}T;[u&Dq[:EU?_x", (-1771));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[u&Dq[:EU?_x`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "\\P{10vFF}";
      Regexp regexp0 = Parser.parse("P{10vFF}", (-1811));
      int int0 = 643;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-11);
      String string0 = "\\p{Zh5#fa";
      Parser.parse("p{Zh5#fa", (-11));
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `\\p{Zh5#fa`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        Parser.parse("((?P<L[(Ux>?AKt;|BI", (-43));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<L[(Ux`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      try { 
        Parser.parse("#I-[wH-", 1140);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[wH-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "[4-qQE,]";
      int int0 = 92;
      Parser.parse("[4-qQE,]", 92);
      try { 
        Parser.parse(":X]20d'AO\"NE(D", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `:X]20d'AO\"NE(D`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser.parse("Kr.,L[U]%]", (-43));
      Parser parser0 = new Parser("Kr.,L[U]%]", (-43));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse(",{D[U]I", 9);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Regexp regexp0 = Parser.parse(";(?s)", 10217);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = new Parser("plpha:]", 1268);
      Regexp regexp0 = Parser.parse("7P=<*@_b_$0!2Zhz", 1268);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Parser.parse("_(?P<d>Y$k_k6I", (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `_(?P<d>Y$k_k6I`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp regexp0 = Parser.parse("#;cQ~", (-3));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Regexp regexp0 = Parser.parse(".|@s`NR'\"h`=;%&g_", (-3));
      Regexp regexp1 = Parser.parse(".|@s`NR'\"h`=;%&g_", 66369);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("&A", (-1227));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("XtW\"?a\"O./9=", 1728);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("PL~8d4g*K", (-2343));
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("h@sN`7j", (-1227));
      regexpArray0[4] = regexp5;
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp6);
      regexpArray0[6] = regexp7;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1227), 1728);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1227
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 93;
      Regexp regexp0 = Parser.parse("[:^blank:]", 93);
      Parser parser0 = new Parser("[:^blank:]", 93);
      Regexp regexp1 = Parser.parse("x%I!%R2&ptQ", 93);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Parser parser0 = new Parser("%|.|I{L09HUe?te", (-780));
      Regexp regexp0 = Parser.parse("%|.|I{L09HUe?te", (-780));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:z]|C", 64);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[3hF>xq\"=}z]|C", 92);
      assertNotNull(regexp0);
  }
}
