/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:13:34 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{eb$T@Q");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      token1.toString();
      token0.toString();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.identifier();
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer("!{");
      xPathLexer0.or();
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer2.dots();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("(+zM&%");
      xPathLexer0.div();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.number();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P");
      xPathLexer0.number();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.isIdentifierChar('&');
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bEm}6-(");
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "c.Sn$OKCCcGK\\',Y";
      XPathLexer xPathLexer1 = new XPathLexer("c.Sn$OKCCcGK',Y");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer1.identifierOrOperatorName();
      token1.toString();
      xPathLexer1.setXPath("");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.whitespace();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "bsO=]\"hNJA`h";
      XPathLexer xPathLexer0 = new XPathLexer("bsO=]\"hNJA`h");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.colon();
      xPathLexer0.number();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-523));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setXPath("0#Tp$A?Q");
      Token token1 = xPathLexer0.slashes();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.consume(1);
      String string0 = token1.toString();
      assertEquals("[ (11) (0)", string0);
      
      Token token2 = xPathLexer0.minus();
      assertEquals("T", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("p", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("$", token4.getTokenText());
      
      xPathLexer0.endPosition();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("A", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      char char0 = xPathLexer0.LA(8);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("Q", token7.getTokenText());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals("", token8.getTokenText());
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      xPathLexer0.consume();
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Io&au#tZ'c_&LV6)}");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume((-1955));
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.consume(1);
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.setXPath("0#Tp$A?Q");
      Token token2 = xPathLexer0.slashes();
      token2.toString();
      token2.toString();
      token2.toString();
      xPathLexer0.consume(1);
      String string0 = token2.toString();
      assertEquals("[ (11) (0)", string0);
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("p", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("$", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("A", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xvrT7");
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("vrT7", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.colon();
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      token0.toString();
      token2.toString();
      String string0 = token1.toString();
      assertEquals("[ (18) (=)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (19) (Gq)", string1);
      
      xPathLexer0.currentPosition();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals(",", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(")");
      Token token0 = xPathLexer1.identifierOrOperatorName();
      Token token1 = xPathLexer1.colon();
      token0.toString();
      token1.toString();
      Token token2 = xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("d1*`*1");
      Token token3 = xPathLexer2.nextToken();
      token3.toString();
      token3.toString();
      token1.toString();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r%0(s<!*E^EN%GHfKY");
      xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertNull(xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("1ttLx^VMl");
      xPathLexer2.slashes();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#U}xKqoYsOu.K#Ox");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("gr6IPb");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("gr6IPb", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",:PTJO");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("icyn??G0");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer1.consume(15);
      xPathLexer3.consume((-3142));
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer1.div();
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3142));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RM8+X :J(<");
      Token token0 = xPathLexer0.at();
      assertEquals("R", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r%0(s<!*E^EN%GHfKY");
      xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      assertEquals("", xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Io&au#tZ'c_&LV6)}");
      xPathLexer0.or();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("I", token0.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("au", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.setXPath("Io&au#tZ'c_&LV6)}");
      Token token4 = xPathLexer0.notEquals();
      assertEquals("Io", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("&", token5.getTokenText());
      
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      char char0 = xPathLexer0.LA(111);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.star();
      token0.toString();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-3948));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.dots();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      Token token0 = xPathLexer1.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-2333));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9Z!5(!7");
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?4!7");
      XPathLexer xPathLexer1 = new XPathLexer("`/h9p!5?4!7");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("`/h9p!5?4!7", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      String string0 = "0#Tp$A?Q";
      xPathLexer0.setXPath("0#Tp$A?Q");
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer1.div();
      xPathLexer1.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer1.slashes();
      xPathLexer0.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.star();
      String string1 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("W\"NaWc m9!!-<:ef");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("W", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("@DcfE");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("@", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("\"", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("o", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("e", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("q", token7.getTokenText());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("q", token8.getTokenText());
      
      xPathLexer0.number();
      Token token9 = xPathLexer0.star();
      assertEquals(";", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.getXPath();
      Token token10 = xPathLexer0.identifier();
      assertEquals("", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "`/h9p!5?!7";
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.doubleColon();
      token0.toString();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "5iahU[KXACrZ<";
      XPathLexer xPathLexer0 = new XPathLexer("5iahU[KXACrZ<");
      xPathLexer0.number();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+6w^)NDBkx6o");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("+", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("6", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("w^", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals(")", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r%0(s<!*E^EN%GHfKY");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath(">9oSsh");
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("0#Tp$A?Q");
      xPathLexer0.plus();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      token0.toString();
      String string0 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b:T");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(18, token2.getTokenType());
      assertEquals(":", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("vIfmZQY.A+V:");
      xPathLexer1.equals();
      Token token1 = xPathLexer1.notEquals();
      assertEquals("If", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer1.leftBracket();
      assertEquals("m", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      Token token5 = xPathLexer1.equals();
      assertEquals("", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("\"");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer2.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer3.nextToken();
      assertEquals("", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("\"");
      xPathLexer4.div();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer6.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("\"", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Nbw+(Frb4:)iWg3{vK");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Nbw", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "k20t%@{`Uw94ugTx\"x";
      XPathLexer xPathLexer0 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("(+zM&%");
      xPathLexer1.consume();
      xPathLexer0.div();
      Token token0 = xPathLexer1.nextToken();
      assertEquals(5, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.pipe();
      assertEquals(17, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(")");
      Token token0 = xPathLexer1.colon();
      token0.toString();
      Token token1 = xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("[ (18) ())");
      Token token2 = xPathLexer2.nextToken();
      token2.toString();
      token2.toString();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("=r%0(s<!*EdEN%GHfKr");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("{6J}LzBr14=0bM6N U");
      xPathLexer0.getXPath();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.setXPath("[ (26) (`)");
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.setXPath("0#Tp$A?Q");
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.setXPath("=i==]\"c(}");
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("i", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.getXPath();
      char char0 = xPathLexer0.LA((-1));
      assertEquals('=', char0);
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("P");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("*K6<&YNv92\"");
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jRkB:");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.number();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Gn");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-238));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mf'}ge>?^i|u6");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.colon();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      token1.toString();
      token0.toString();
      xPathLexer0.setXPath(">9oSsh");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("[ (19) (Gq)");
      xPathLexer2.setPreviousToken(token2);
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer(">9oSsh");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.not();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.colon();
      token1.toString();
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      token0.toString();
      token2.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setXPath(">9oSsh");
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer2.mod();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("vI", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Sr,");
      XPathLexer xPathLexer2 = new XPathLexer("Sr,");
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("f", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      xPathLexer1.and();
      Token token2 = xPathLexer2.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Sr", token2.getTokenText());
      
      xPathLexer2.identifier();
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("S", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RM8+X :J(<");
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("R", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GYBMB~%]8M3JxDbTvX");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) (GY)", string0);
      
      Token token1 = xPathLexer0.not();
      token1.toString();
      Token token2 = xPathLexer0.dots();
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (13) (M)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (23) (B)", string2);
      
      xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifier();
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("~", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
      
      char char0 = xPathLexer0.LA(5);
      assertEquals('J', char0);
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("]", token6.getTokenText());
      
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer1.isIdentifierChar('#');
      Token token8 = xPathLexer0.colon();
      assertEquals("8", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("L4JLy%c= <Vn");
      xPathLexer0.mod();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("L4JLy%c= <Vn");
      xPathLexer1.LA(13);
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer1.nextToken();
      xPathLexer2.whitespace();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Gn");
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-238));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bsO=]\"hNJA`h");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.colon();
      xPathLexer0.number();
      xPathLexer0.endPosition();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.currentPosition();
      xPathLexer2.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token0 = xPathLexer2.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("`/h9p!5?!7");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("J --!e&Ylcs");
      Token token0 = xPathLexer2.nextToken();
      assertEquals("J", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("`", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer1.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("`/h9p!5?!7");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer5.plus();
      xPathLexer4.setPreviousToken(token3);
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer4.identifierOrOperatorName();
      assertEquals("", token4.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("/", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer3.notEquals();
      assertEquals(22, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      xPathLexer0.getPreviousToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("k20t%@{`Uw94ugTx\"x");
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("2", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer1.notEquals();
      assertEquals("k2", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r%0(s<!*E^EN%GHfKY");
      xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertNull(xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      String string0 = "*K6<&YNv92\"";
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("*K6<&YNv92\"");
      Token token0 = xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/h9p!5?7");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("/h9p!5?7");
      token0.toString();
      token1.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.endPosition();
      xPathLexer1.endPosition();
      xPathLexer0.minus();
      xPathLexer1.number();
      xPathLexer1.not();
      xPathLexer1.leftParen();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-3948));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R2O^.]");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("R", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("2", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      char char0 = xPathLexer0.LA(47);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("^", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      xPathLexer0.setXPath("R2O^.]");
      xPathLexer0.and();
      xPathLexer0.endPosition();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("R", token5.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("2O", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("^.]", token7.getTokenText());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals("^", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.setXPath("L4JLy%c= <Vn");
      xPathLexer0.mod();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      xPathLexer0.isIdentifierChar('\'');
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer1.div();
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r%0(s<!*E^EN%GHfKY");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftParen();
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("%0", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      Token token3 = xPathLexer0.getPreviousToken();
      assertEquals("=", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("s", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("<!", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(20, token6.getTokenType());
      assertEquals("*", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("E", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer1.minus();
      assertEquals(6, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z=Mc\"L?i`aNeR8kJ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("z", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token1 = xPathLexer2.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfZQY.+V:");
      Token token0 = xPathLexer0.colon();
      assertEquals("v", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("If", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("Z", token2.getTokenText());
      
      xPathLexer0.equals();
      Token token3 = xPathLexer0.equals();
      assertEquals("Q", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("Y", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(31, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      XPathLexer xPathLexer2 = new XPathLexer("P-6v'");
      Token token6 = xPathLexer2.not();
      assertEquals("P", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer(";tWc>b^T2BUmK@r");
      Token token7 = xPathLexer1.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals("", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r%0(s<!*E^EN%GHfKY");
      xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("|3qaL$ve6O&,sP?9o_.");
      Token token0 = xPathLexer1.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(">9oSsh");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("3", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftParen();
      assertEquals("q", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer0.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer3.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("Doq@=-_Yu8g*mW/cU&Q");
      Token token5 = xPathLexer4.dollar();
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer5.dots();
      assertEquals("D", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      xPathLexer3.slashes();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bsO=]\"d^DhNJA`h");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("b", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      xPathLexer0.consume();
      xPathLexer1.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      int int1 = xPathLexer0.currentPosition();
      assertEquals(3, int1);
      
      Token token3 = new Token(3, "", 3, 15);
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.mod();
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r%0(s<!*E^EN%GHfKY");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("%0", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.setXPath(">9o_sk");
      Token token3 = xPathLexer0.relationalOperator();
      assertEquals(">", token3.getTokenText());
      assertEquals(9, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("9", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("o", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume(10);
      int int0 = xPathLexer0.currentPosition();
      assertEquals(7, int0);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer2.mod();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer2.nextToken();
      Token token8 = xPathLexer5.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer5.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.getPreviousToken();
      Token token11 = xPathLexer3.star();
      assertEquals(20, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.consume(21);
      xPathLexer0.literal();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.consume((-1));
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.equals();
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.consume((-1));
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "vIfZQY.+V:";
      XPathLexer xPathLexer0 = new XPathLexer("vIfZQY.+V:");
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("vIfZQY.+V:");
      xPathLexer0.or();
      Token token0 = xPathLexer1.rightParen();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.leftBracket();
      xPathLexer0.endPosition();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer2.and();
      xPathLexer1.or();
      xPathLexer2.getXPath();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R");
      xPathLexer0.setXPath("NAFs>6e");
      Token token0 = xPathLexer0.colon();
      token0.toString();
      token0.toString();
      xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume(444);
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.getPreviousToken();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.currentPosition();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      assertEquals("NAFs>6e", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfZQY.+V:");
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GYBMB~%]8M3JxDbTvX");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.at();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (16) (M)", string0);
      
      String string1 = token0.toString();
      assertEquals("[ (19) (GY)", string1);
      
      Token token3 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.currentPosition();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("~", token4.getTokenText());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("DG,OS^Z/L _;sbv==^{");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token5 = xPathLexer1.nextToken();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer2.leftParen();
      String string2 = token3.toString();
      assertEquals("[ (26) (B)", string2);
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      assertEquals(",", token6.getTokenText());
      
      xPathLexer2.div();
      xPathLexer1.setPreviousToken(token1);
      assertEquals("B", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token7 = xPathLexer1.pipe();
      assertEquals("O", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("o1uY!$6}[jB9");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer1.comma();
      String string0 = "2-;";
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer2.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      XPathLexer xPathLexer4 = new XPathLexer("YW/v:>|nN");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.colon();
      xPathLexer4.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer1.setXPath("d%j=xuWOmsI");
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-1058));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "vIfZQY.+V:";
      XPathLexer xPathLexer0 = new XPathLexer("vIfZQY.+V:");
      xPathLexer0.not();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("vIfZQY.+V:");
      xPathLexer1.equals();
      Token token0 = xPathLexer1.notEquals();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.leftBracket();
      xPathLexer0.endPosition();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer2.and();
      xPathLexer1.or();
      xPathLexer2.getXPath();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vIfmZQY.A+V:");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("vI", token0.getTokenText());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.minus();
      String string0 = token2.toString();
      assertEquals("[ (6) (m)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (13) (f)", string1);
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("H[H@RP3FoVa");
      XPathLexer xPathLexer2 = new XPathLexer("H[H@RP3FoVa");
      xPathLexer2.or();
      xPathLexer0.getXPath();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.leftParen();
      assertEquals("Y", token4.getTokenText());
      
      Token token5 = xPathLexer2.nextToken();
      assertEquals("H", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer3.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      xPathLexer0.hasMoreChars();
      Token token7 = xPathLexer3.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals(" (", token7.getTokenText());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer3.isIdentifierStartChar('k');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("*Ki<&Y v92X");
      xPathLexer0.getPreviousToken();
      xPathLexer0.equals();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dy");
      Token token0 = xPathLexer0.star();
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("bEm}6-(");
      xPathLexer1.whitespace();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer0.operatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.consume(61);
      xPathLexer0.dollar();
      xPathLexer0.setXPath("*K6<&YNv92\"");
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.setXPath("*K6<&YNv92\"");
      xPathLexer0.getPreviousToken();
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c.Sn$OKCCcGK',Y");
      XPathLexer xPathLexer1 = new XPathLexer("c.Sn$OKCCcGK',Y");
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer2.not();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      token1.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (15) ()", string0);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.setXPath("[ (15) ()");
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer1.setXPath("|qE(Ro\"jcV8:-CqC:n>");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("|qE(Ro\"jcV8:-CqC:n>");
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("|q", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token5 = xPathLexer1.leftParen();
      xPathLexer3.setPreviousToken(token5);
      assertEquals("(", token5.getTokenText());
      
      Token token6 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals("", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("rxwR9trR3#0=\"_MI&");
      Token token3 = xPathLexer2.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("r", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      xPathLexer2.setPreviousToken(token4);
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer3.div();
      Token token6 = xPathLexer2.nextToken();
      assertEquals("xwR9trR3#0=\"_MI&", token6.getTokenText());
      
      Token token7 = xPathLexer3.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      Token token8 = xPathLexer3.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token0 = xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.slashes();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("V", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      String string0 = token1.toString();
      assertEquals("[ (11) (q)", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (21) (%)", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (19) (=G)", string2);
      
      Token token4 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(",", token4.getTokenText());
      
      xPathLexer0.setXPath("C&PaGfb");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      Token token5 = xPathLexer0.comma();
      assertEquals("C", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.consume((-2598));
      int int0 = xPathLexer1.currentPosition();
      assertEquals((-2598), int0);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("C&PaGfb");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer3.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("C&PaGfb");
      Token token8 = xPathLexer3.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer6.or();
      Token token9 = xPathLexer1.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer2.consume();
      int int1 = xPathLexer3.endPosition();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RM8+X :J(<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals("+", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r%0(s<!*EdEN%GHfKr");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.colon();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.literal();
      token1.toString();
      token0.toString();
      Token token2 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.currentPosition();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("u");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = new Token(15, "[ (27) (0(s<!*EdEN)", 15, 15);
      xPathLexer0.getPreviousToken();
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer3.getPreviousToken();
      Token token4 = xPathLexer0.or();
      assertNull(token4);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`/h9p!5?!7");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.pipe();
      token1.toString();
      xPathLexer1.div();
      Token token2 = xPathLexer1.identifier();
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("[ (16) (h)");
      xPathLexer1.or();
      token1.toString();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer0.minus();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.operatorName();
      xPathLexer4.notEquals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w<B*2{d");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("lS");
      xPathLexer1.equals();
      xPathLexer1.and();
      xPathLexer0.equals();
      xPathLexer1.literal();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("=GqV%,oe4qq7;,-h*}");
      xPathLexer2.operatorName();
      xPathLexer2.setPreviousToken((Token) null);
      XPathLexer xPathLexer3 = new XPathLexer("8dNUKAw0");
      xPathLexer3.colon();
      xPathLexer3.div();
      xPathLexer3.not();
      xPathLexer0.LA(1);
      Token token0 = xPathLexer1.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("0#Tp$A?Q");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.getPreviousToken();
      Token token2 = xPathLexer1.not();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("0#Tp$A?Q");
      XPathLexer xPathLexer3 = new XPathLexer("0#Tp$A?Q");
      xPathLexer2.comma();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("|Q&0vZ");
      XPathLexer xPathLexer5 = new XPathLexer("F}US<I^OJ.(fP;<'");
      xPathLexer2.relationalOperator();
      xPathLexer5.nextToken();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(".*qMlo|X9-`?");
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      xPathLexer0.currentPosition();
      xPathLexer0.and();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.colon();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w<B*2{d");
      Token token0 = xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("|/q;7A2");
      Token token1 = xPathLexer1.nextToken();
      xPathLexer1.or();
      token1.toString();
      token0.toString();
      Token token2 = xPathLexer1.nextToken();
      xPathLexer0.minus();
      token2.toString();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer1.notEquals();
      xPathLexer1.setPreviousToken(token3);
      XPathLexer xPathLexer3 = new XPathLexer("[ (17) (|)");
      xPathLexer2.getPreviousToken();
      xPathLexer3.not();
      token2.toString();
      token3.toString();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token3);
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("r4x>7u?N9I~9{J#t");
      XPathLexer xPathLexer6 = new XPathLexer("[ (");
      xPathLexer6.star();
      xPathLexer1.comma();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer7 = new XPathLexer(":S`l");
      xPathLexer0.dollar();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token4 = xPathLexer8.getPreviousToken();
      assertNull(token4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("+`Ltc}T60r8");
      xPathLexer2.setPreviousToken((Token) null);
      XPathLexer xPathLexer3 = new XPathLexer("n");
      XPathLexer xPathLexer4 = new XPathLexer("lDkpz%&36yhzn3");
      xPathLexer4.nextToken();
      xPathLexer4.not();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer4.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "5iahU[KXACrZ<";
      XPathLexer xPathLexer0 = new XPathLexer("5iahU[KXACrZ<");
      Token token0 = xPathLexer0.number();
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer0.number();
      Token token1 = xPathLexer1.plus();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+!Bu0aX8wJ");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("!", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("Bu", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("0", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('?');
      Token token4 = xPathLexer0.dollar();
      assertEquals("a", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
  }
}
