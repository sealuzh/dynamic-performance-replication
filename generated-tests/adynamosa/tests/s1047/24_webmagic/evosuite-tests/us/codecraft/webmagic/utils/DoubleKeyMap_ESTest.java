/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 06:15:27 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>((Map<Integer, Map<String, Object>>) null);
      doubleKeyMap0.put((Integer) null, "", (Object) null);
      Map<String, Object> map0 = doubleKeyMap0.remove((Integer) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<Integer, Object>, Map<String, Map<String, Object>>> hashMap0 = new HashMap<Map<Integer, Object>, Map<String, Map<String, Object>>>();
      Class<Map> class0 = Map.class;
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      HashMap<Integer, Map<Integer, String>> hashMap2 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap2);
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<Map<Integer, Object>, String, Map<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Object>, String, Map<String, Object>>(hashMap0, class0);
      Map<String, Map<String, Object>> map1 = doubleKeyMap1.get((Map<Integer, Object>) hashMap1);
      assertSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Integer integer0 = new Integer(3089);
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>();
      Map<Object, Map<Integer, HashMap<Integer, Object>>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, HashMap<Integer, Object>> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, HashMap<Integer, Object>>(map0, class0);
      HashMap<Integer, Object> hashMap0 = doubleKeyMap2.remove((Object) doubleKeyMap0, integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, Integer>();
      Map<Map<String, String>, Integer> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) class0, "u=^D$[-3BoZJ=<f7c]", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Map<String, Object>, Map<Map<String, Object>, String>> hashMap0 = new HashMap<Map<String, Object>, Map<Map<String, Object>, String>>();
      DoubleKeyMap<Map<String, Object>, Map<String, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Map<String, Object>, String>(hashMap0);
      doubleKeyMap0.put((Map<String, Object>) null, (Map<String, Object>) null, (String) null);
      Map<Map<String, Object>, String> map0 = doubleKeyMap0.get((Map<String, Object>) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Map<String, Object>, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, HashMap<String, String>, Object>();
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) null, "J+`\"G{9!m");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<Map<String, Object>, Object, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Object, Map<String, Object>>();
      Object object0 = new Object();
      Map<String, Object> map0 = doubleKeyMap0.get((Map<String, Object>) hashMap0, object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0);
      String string0 = doubleKeyMap0.get((Integer) null, (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Map<String, Object>>, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Map<String, Object>>, HashMap<String, Object>>();
      Map<HashMap<String, Map<String, Object>>, HashMap<String, Object>> map0 = doubleKeyMap0.get((HashMap<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Map<String, Object>>, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<String, Map<String, Object>>, HashMap<String, Object>>();
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap0, class0);
      Map<Object, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, String>, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, HashMap<Object, Object>>(class0);
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) map0, (String) null, "tfQFW'M]IlxD");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, String>, String, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, String, HashMap<Object, Object>>(class0);
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Map<Object, Map<Integer, HashMap<String, String>>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, HashMap<String, String>> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, HashMap<String, String>>(map1);
      Map<Object, Map<Integer, Object>> map2 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Integer, Object>(map2);
      Map<Integer, Object> map3 = doubleKeyMap3.remove((Object) doubleKeyMap0);
      assertNull(map3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Map<Map<Map<String, Object>, Map<String, Object>>, String>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<Map<Map<String, Object>, Map<String, Object>>, String>, Map<String, Object>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Map<Map<String, Object>, Map<String, Object>>, String> map0 = doubleKeyMap0.newMap();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Map<Map<String, Object>, Map<String, Object>>, String> hashMap2 = new HashMap<Map<Map<String, Object>, Map<String, Object>>, String>();
      HashMap<Map<String, Object>, Map<String, Object>> hashMap3 = new HashMap<Map<String, Object>, Map<String, Object>>();
      hashMap2.put(hashMap3, "vG])Obq");
      doubleKeyMap0.put(hashMap0, (Map<Map<Map<String, Object>, Map<String, Object>>, String>) hashMap2, (Map<String, Object>) hashMap1);
      Map<String, Object> map1 = doubleKeyMap0.remove(hashMap0, map0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<String, Integer, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap0 = doubleKeyMap0.remove("EN=QeR9},+%o<p`/y8", (Integer) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<String, Object>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<String, Object>>, Object, String>();
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>(0);
      Object object0 = new Object();
      doubleKeyMap0.put(hashMap0, object0, "");
      String string0 = doubleKeyMap0.put(hashMap0, object0, "3TiviJ\"Y");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Map<Map<Map<String, Object>, Map<String, Object>>, String>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<Map<Map<String, Object>, Map<String, Object>>, String>, Map<String, Object>>();
      HashMap<Object, Map<Integer, Map<Integer, Object>>> hashMap0 = new HashMap<Object, Map<Integer, Map<Integer, Object>>>();
      DoubleKeyMap<Object, Integer, Map<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Integer, Object>>(hashMap0);
      Integer integer0 = new Integer(0);
      Map<Integer, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Map<String, Object>, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, HashMap<String, String>, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      doubleKeyMap0.put((Map<String, Object>) hashMap0, hashMap1, (Object) class0);
      Class class1 = (Class)doubleKeyMap0.get((Map<String, Object>) hashMap0, hashMap1);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(class0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(class0);
      Object object0 = doubleKeyMap1.remove((String) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Map<Map<Map<String, Object>, Map<String, Object>>, String>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<Map<Map<String, Object>, Map<String, Object>>, String>, Map<String, Object>>();
      Map<Map<Map<String, Object>, Map<String, Object>>, String> map0 = doubleKeyMap0.newMap();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put(hashMap1, map0, (Map<String, Object>) hashMap0);
      Map<String, Object> map1 = doubleKeyMap0.remove(hashMap1, map0);
      assertTrue(map1.isEmpty());
  }
}
