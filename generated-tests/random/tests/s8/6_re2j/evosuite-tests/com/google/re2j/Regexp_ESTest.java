/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:14:45 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.cap = 560;
      regexp1.cap = 560;
      regexp1.cap = 560;
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp2.min = (-48);
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp2.cap = 560;
      regexp0.equals(regexp2);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[0];
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      regexp0.runes = intArray0;
      boolean boolean0 = regexp0.equals(regexp_Op0);
      regexp0.toString();
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.valueOf("WORD_BOUNDARY");
      boolean boolean1 = regexp_Op1.isPseudo();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.name = "l1E%1N|";
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.op = regexp_Op0;
      regexp1.reinit();
      regexp0.equals("i?D(ryh8-tO^_*=0aA!");
      regexp0.equals(regexp1);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 15;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.op = regexp_Op0;
      regexp1.name = "";
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.max = 8991;
      regexp0.runes = null;
      regexp2.maxCap();
      regexp2.maxCap();
      regexp2.reinit();
      regexp0.min = 0;
      Regexp[] regexpArray0 = new Regexp[0];
      regexp2.subs = regexpArray0;
      Object object0 = new Object();
      regexp2.equals(object0);
      regexp0.name = "umvuN5h:&vG.\"YLsLv+";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      regexp1.op = regexp_Op1;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1051);
      intArray0[1] = 13;
      intArray0[2] = 46;
      regexp0.max = (-1051);
      regexp0.runes = intArray0;
      intArray0[3] = 13;
      regexp1.runes = intArray0;
      regexp1.toString();
      regexp1.name = "Yi";
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("C/@&iunO4TiP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.C/@&iunO4TiP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 6;
      String string0 = "(?-m:$)";
      regexp0.equals("(?-m:$)");
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.name = "";
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.equals(regexp2);
      regexp1.toString();
      regexp1.flags = 1477;
      regexp1.reinit();
      regexp2.reinit();
      regexp2.op = regexp_Op0;
      regexp1.op = regexp_Op0;
      regexp0.toString();
      regexp2.reinit();
      regexp1.toString();
      regexp_Op0.isPseudo();
      regexp0.toString();
      regexp1.maxCap();
      Regexp.Op.values();
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("'k6A8wZ9mI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.'k6A8wZ9mI
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = 256;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 232;
      intArray0[2] = (-1846);
      intArray0[3] = 10;
      intArray0[4] = 1054;
      intArray0[5] = 8348;
      intArray0[6] = (-2681);
      intArray0[7] = 43562;
      regexp0.runes = intArray0;
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      Object object0 = new Object();
      boolean boolean0 = regexp0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.name = "";
      regexp0.max = 2;
      regexp1.name = "zp.G(L&(R+C~~S";
      regexp0.equals(regexp1);
      Regexp regexp2 = new Regexp(regexp0);
      regexp0.equals(regexp2);
      regexp_Op0.isPseudo();
      regexp2.equals("zp.G(L&(R+C~~S");
      regexp0.max = 158;
      regexp2.toString();
      regexp2.equals(regexp1);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp0.op = regexp_Op1;
      regexp0.reinit();
      regexp0.equals(regexp_Op1);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      regexp0.op = regexp_Op1;
      regexp0.cap = 2498;
      regexp0.min = (-1293);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[3].cap = 6656;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      String string0 = regexp0.toString();
      assertEquals("(?:)", string0);
      
      regexp0.cap = 2565;
      boolean boolean0 = regexp0.equals(regexp_Op0);
      Regexp.Op.values();
      regexpArray0[7].subs = regexp0.subs;
      regexp0.equals(regexp_Op0);
      Regexp.Op.values();
      boolean boolean1 = regexp0.equals(regexp0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = (-2032);
      regexp1.op = regexp_Op0;
      regexp0.equals(regexp1);
      regexp0.max = (-460);
      regexp0.min = 4;
      regexp0.toString();
      regexp1.cap = 3990;
      regexp0.toString();
      regexp0.reinit();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-591);
      regexp0.reinit();
      regexp0.name = "Qo8%bSv";
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      Object object0 = new Object();
      regexp1.equals(object0);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 583;
      regexp0.op = regexp_Op0;
      regexp0.name = "tP!ue61Y^6D5Kvb";
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.reinit();
      regexp1.flags = 256;
      regexp1.toString();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexp0.reinit();
      regexp0.toString();
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp1;
      regexp0.toString();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = (-2227);
      regexpArray0[2].runes = intArray0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.reinit();
      regexp0.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = (-1660);
      regexp1.reinit();
      regexp0.reinit();
      regexp_Op0.isPseudo();
      regexp1.equals(regexp_Op0);
      regexp1.reinit();
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.toString();
      regexp1.equals("");
      regexp1.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp1.maxCap();
      String string0 = "iv\\Vq=Kx3V";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("ivVq=Kx3V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.ivVq=Kx3V
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexp1.reinit();
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp2;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = (-641);
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.min = 8;
      regexp2.reinit();
      regexp0.cap = 8;
      regexp0.flags = (-2176);
      regexp1.equals(regexp2);
      regexp2.equals("7IouF+u0.!zQbm_");
      Object object0 = new Object();
      regexp2.min = (-462);
      regexp0.equals(object0);
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 20;
      int[] intArray0 = new int[9];
      intArray0[0] = 20;
      intArray0[1] = 20;
      intArray0[2] = 20;
      intArray0[3] = 20;
      intArray0[4] = 20;
      intArray0[5] = 20;
      intArray0[6] = 20;
      intArray0[7] = 20;
      intArray0[8] = 20;
      regexp0.runes = intArray0;
      regexp0.reinit();
      regexp0.name = "";
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op.valueOf("EMPTY_MATCH");
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 5;
      regexp1.maxCap();
      regexp0.flags = 7;
      regexp0.reinit();
      regexp1.max = 92;
      regexp1.toString();
      regexp1.toString();
      Regexp.Op.values();
      regexp1.maxCap();
      regexp0.reinit();
      regexp1.equals(regexp0);
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp1.equals("(?-s:.)");
      regexp0.reinit();
      regexp1.equals("(?-s:.)");
      regexp1.reinit();
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?-s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?-s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Saurashtra");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Saurashtra
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = (-1853);
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      Object object0 = new Object();
      regexp0.min = 147;
      regexp0.name = "END_LINE";
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1853);
      intArray0[2] = (-1853);
      intArray0[3] = (-1853);
      intArray0[4] = 1;
      intArray0[5] = 0;
      Regexp.Op regexp_Op1 = Regexp.Op.valueOf("END_LINE");
      intArray0[6] = 0;
      regexp0.op = regexp_Op1;
      intArray0[7] = 0;
      intArray0[8] = (-1853);
      regexp0.runes = intArray0;
      regexp0.reinit();
      regexp0.equals("Zqm5E,tS>o;36t^jam");
      regexp0.equals(object0);
      regexp0.reinit();
      boolean boolean0 = regexp0.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = regexp0.op.isPseudo();
      Regexp regexp1 = new Regexp(regexp0.op);
      boolean boolean2 = regexp0.equals(regexp1);
      assertFalse(boolean2 == boolean1);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.reinit();
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 13;
      regexp0.toString();
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.reinit();
      regexp0.equals("+u?");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("wY+bP;0eAMU]R.}o4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.wY+bP;0eAMU]R.}o4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.toString();
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp0.runes = null;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = 69743;
      regexp1.toString();
      regexp0.maxCap();
      boolean boolean0 = regexp_Op0.isPseudo();
      Regexp.Op.values();
      Regexp.Op.values();
      regexp0.op = regexp_Op0;
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      regexp1.equals(regexp_Op0);
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      boolean boolean1 = regexp0.equals("");
      assertFalse(boolean1);
      
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Regexp regexp2 = new Regexp(regexp0);
      boolean boolean2 = regexp1.equals(regexp2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.min = 13;
      regexp1.flags = 13;
      regexp0.cap = 1;
      regexp1.name = "Nl";
      regexp1.min = 1;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 13;
      intArray0[2] = 1;
      intArray0[3] = 13;
      intArray0[4] = 13;
      intArray0[5] = 1;
      intArray0[6] = 13;
      intArray0[7] = 13;
      intArray0[8] = 1;
      regexp1.runes = intArray0;
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 9;
      regexp0.max = 9;
      regexp0.max = 8;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.min = 8;
      regexp1.max = 9;
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?:)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?:)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.toString();
      regexp0.reinit();
      regexp1.max = 252;
      regexp1.cap = 8;
      Object object0 = new Object();
      regexp1.equals(object0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf(");aoeM6_1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.);aoeM6_1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[9];
      intArray0[0] = 18;
      intArray0[1] = 8655;
      intArray0[2] = 42280;
      intArray0[3] = 1;
      intArray0[4] = (-1479);
      intArray0[5] = 221;
      intArray0[6] = 40;
      regexp0.max = 40;
      intArray0[7] = 463;
      intArray0[8] = 984;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 7;
      regexp1.toString();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      regexp0.toString();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertFalse(regexp_OpArray1.equals((Object)regexp_OpArray0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-438);
      regexp0.max = (-438);
      regexp0.toString();
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp0.max = 12441;
      regexp0.reinit();
      regexp0.op = regexp_Op1;
      regexp0.maxCap();
      regexp_Op1.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[1] = regexp3;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = (-345);
      Object object0 = new Object();
      regexp1.runes = null;
      regexp1.equals(object0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.flags = 476;
      regexp2.min = 476;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.op = regexp_Op1;
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-648);
      intArray0[1] = 12;
      intArray0[2] = 19;
      intArray0[3] = 3;
      intArray0[4] = 5509;
      intArray0[5] = (-15);
      intArray0[6] = (-1950);
      intArray0[7] = 835;
      regexp1.runes = intArray0;
      regexp0.reinit();
      regexp1.maxCap();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = (-1269);
      regexp0.flags = (-1269);
      regexp0.max = 2835;
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.reinit();
      regexp1.equals(regexp0);
      Regexp.Op.values();
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("X3zZlQYYT#`E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.X3zZlQYYT#`E
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.reinit();
      regexp0.max = 40;
      regexp0.flags = 2184;
      int[] intArray0 = new int[4];
      regexp0.cap = 2184;
      intArray0[0] = 2184;
      intArray0[1] = 2184;
      intArray0[2] = 2184;
      intArray0[3] = 2184;
      regexp0.runes = intArray0;
      regexp0.reinit();
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.runes = intArray0;
      regexp1.max = 0;
      regexp0.equals(regexp1);
      regexp0.maxCap();
      regexp1.runes = intArray0;
      regexp0.toString();
      regexp1.toString();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp_Op0);
      Object object0 = new Object();
      regexp1.equals(object0);
      Object object1 = new Object();
      regexp1.name = "y";
      regexp1.flags = 92;
      boolean boolean0 = regexp1.equals(object1);
      regexp0.min = 1577;
      regexp1.toString();
      regexp1.toString();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp0.toString();
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = new Regexp[3];
      regexpArray1[0] = regexp0;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp0;
      regexpArray0[0].subs = regexpArray1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.runes = null;
      regexp0.reinit();
      regexpArray0[1].runes = null;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      boolean boolean0 = regexp0.equals(regexp1);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      regexp0.maxCap();
      int int0 = regexp1.max;
      boolean boolean1 = regexp_Op0.isPseudo();
      assertFalse(boolean1 == boolean0);
      
      int int1 = regexp1.maxCap();
      assertTrue(int1 == int0);
      
      regexp0.toString();
      regexp0.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.flags = 12686;
      regexp0.name = "(?s:.)";
      regexp0.min = 6;
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.reinit();
      regexp0.subs = regexpArray0;
      regexp0.flags = 120042;
      regexp0.reinit();
      Regexp.Op.values();
      regexp0.toString();
      regexp0.min = 12686;
      regexp0.maxCap();
      regexp_Op0.isPseudo();
      regexp0.reinit();
      regexp0.toString();
      regexp0.max = 816;
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?s:.)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?s:.)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      String string0 = "U%Pzf";
      String string1 = "Canadian_Aboriginal";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Canadian_Aboriginal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Canadian_Aboriginal
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 8;
      regexp0.min = 8;
      regexp1.name = null;
      regexp1.flags = (-2);
      regexp0.equals(regexp1);
      Object object0 = new Object();
      regexp0.min = 2;
      boolean boolean0 = regexp1.equals(object0);
      assertFalse(boolean0);
      
      regexp0.reinit();
      boolean boolean1 = regexp_Op0.isPseudo();
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.name = null;
      boolean boolean2 = regexp1.equals(regexp2);
      assertFalse(boolean2 == boolean1);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "RR+!J|+Z .";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("RR+!J|+Z .");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.RR+!J|+Z .
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.maxCap();
      regexp0.cap = 0;
      regexp0.runes = null;
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
      
      regexp1.toString();
      regexp1.min = 11;
      boolean boolean1 = regexp0.equals(regexp_Op0);
      assertFalse(boolean1);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      boolean boolean2 = regexp0.equals(regexp2);
      assertTrue(boolean2);
  }
}
