/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 01:18:30 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.TemporalAdjuster;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, mockHijrahDate0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>(linkedList0);
      int int0 = 0;
      JSONObject jSONObject0 = new JSONObject(0);
      linkedHashSet0.add(jSONObject0);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedHashSet0);
      jSONArray3.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.subList(989, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(989) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(17);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-296), mockMinguoDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(0, "1.2.46");
      boolean boolean0 = jSONArray0.isEmpty();
      assertEquals(1, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(166);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(166);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 166, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray1.fluentRetainAll(jSONArray0);
      int int0 = 0;
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.UseBigDecimal;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.IgnoreNotMatch;
      featureArray0[2] = feature2;
      // Undeclared exception!
      try { 
        JSON.parse((byte[]) null, featureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2602);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray3 = jSONArray2.fluentSet(0, mockJapaneseDate0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAddAll(1434, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1434, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2602);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      long long0 = new Integer(3089);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      boolean boolean0 = jSONArray0.contains(propertyNamingStrategy0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2602);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getShort(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Method> class0 = Method.class;
      List<Method> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(1, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(list0);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      Integer integer0 = new Integer(932);
      JSONArray jSONArray4 = jSONArray3.fluentAdd((Object) integer0);
      jSONArray4.fluentRemoveAll(jSONArray2);
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(932);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 932, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      SerializeConfig serializeConfig0 = new SerializeConfig(989, true);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONObject jSONObject0 = new JSONObject(1);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      jSONObject1.getJSONArray("1.2.46");
      JSONObject jSONObject2 = jSONObject0.fluentRemove(jSONArray0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONObject0.fluentRemove(mockHijrahDate0);
      Integer integer0 = new Integer(989);
      jSONObject2.fluentPut("@type", integer0);
      jSONObject2.fluentClear();
      jSONObject2.getJSONArray("1.2.46");
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(941);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 941, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(963);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 963, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, false);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) serializeConfig0);
      jSONArray1.indexOf(simplePropertyPreFilter0);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3439);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3439, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONBytes((Object) jSONArray0, serializeFilterArray0, serializerFeatureArray0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.lastIndexOf(mockThaiBuddhistDate0);
      SerializeConfig serializeConfig0 = new SerializeConfig(3089, false);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(2784);
      // Undeclared exception!
      try { 
        jSONArray0.add((-829), (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -829, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-127));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -127
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSONArray jSONArray0 = new JSONArray(763);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(962);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 962, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(772, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 772, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.remove(object0);
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.of(3089, 3089, 3089);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 3089
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(2677);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2677, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONPath.Operator[] jSONPath_OperatorArray0 = new JSONPath.Operator[3];
      JSONPath.Operator jSONPath_Operator0 = JSONPath.Operator.NOT_RLIKE;
      ConcurrentHashMap.KeySetView<MockMinguoDate, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet(3089);
      jSONArray0.fluentAddAll(0, (Collection<?>) concurrentHashMap_KeySetView0);
      jSONPath_OperatorArray0[0] = jSONPath_Operator0;
      JSONPath.Operator jSONPath_Operator1 = JSONPath.Operator.GT;
      jSONPath_OperatorArray0[1] = jSONPath_Operator1;
      JSONPath.Operator jSONPath_Operator2 = JSONPath.Operator.LT;
      jSONPath_OperatorArray0[2] = jSONPath_Operator2;
      jSONArray0.toArray(jSONPath_OperatorArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1311);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1311, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.setRelatedArray(jSONArray0);
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      long long0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray0.remove(3177);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3177, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      TreeMap<MockThaiBuddhistDate, MockMinguoDate> treeMap0 = new TreeMap<MockThaiBuddhistDate, MockMinguoDate>();
      NavigableSet<MockThaiBuddhistDate> navigableSet0 = treeMap0.descendingKeySet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(navigableSet0);
      jSONArray1.hashCode();
      jSONArray0.removeAll(navigableSet0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      jSONArray0.add((Object) mockMinguoDate0);
      // Undeclared exception!
      try { 
        jSONArray1.removeAll(navigableSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(111);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      Object object0 = new Object();
      JSONArray jSONArray2 = jSONArray1.fluentAdd(object0);
      // Undeclared exception!
      try { 
        jSONArray2.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      Class<BufferedInputStream> class1 = BufferedInputStream.class;
      FieldInfo fieldInfo0 = new FieldInfo("yyyy-MM-dd HH:mm:ss", class0, class1, class0, (Field) null, 3089, 3089, 989);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      Class<JSONObject> class2 = JSONObject.class;
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class2, fieldInfo0.alternateNames);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, fieldInfo0.alternateNames);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(fieldInfo0.fieldClass, stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter3;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString((Object) null, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.getComponentType();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) mockThaiBuddhistDate0);
      MockThaiBuddhistDate.now();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.setComponentType((Type) null);
      jSONArray1.addAll((Collection<?>) jSONArray1);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) jSONArray0);
      jSONArray2.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(952);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 952, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONArray0.containsAll(set0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(978);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 978, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      JSON.setDefaultTypeKey("$ref");
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = new Integer(1);
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) mockHijrahDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONArray jSONArray1 = jSONArray0.fluentSet(246, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(246);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      double double0 = jSONArray1.getDoubleValue(0);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, 3089);
      jSONArray0.getIntValue(3089);
      jSONArray0.fluentRemove((Object) jSONArray1);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      double double0 = jSONArray1.getDoubleValue(3089);
      assertEquals(3090, jSONArray0.size());
      assertEquals(3089.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      long long0 = jSONArray1.getLongValue(1549);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3079, integer0);
      jSONArray1.getBoolean(989);
      Object object0 = new Object();
      jSONArray0.fluentRemove(object0);
      assertEquals(3080, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3079, integer0);
      jSONArray1.getByteValue(3067);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-662));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      jSONArray0.getBoolean(1731);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray1.getObject(1731, (Type) null);
      jSONArray0.listIterator(1731);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentSet(3089, integer0);
      jSONArray0.getBoolean(1731);
      jSONArray0.getShort(3089);
      long long0 = jSONArray0.getLongValue(3089);
      assertEquals(3090, jSONArray0.size());
      assertEquals(3089L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentSet(3089, integer0);
      short short0 = jSONArray0.getShortValue(3053);
      assertEquals(3090, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.fluentSet(3089, integer0);
      float float0 = jSONArray0.getFloatValue(989);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      float float0 = jSONArray1.getFloatValue(3089);
      assertEquals(3090, jSONArray0.size());
      assertEquals(3089.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      Integer integer1 = new Integer(3089);
      jSONArray1.getJSONArray(989);
      short short0 = jSONArray1.getShortValue(3089);
      assertEquals(3090, jSONArray0.size());
      assertEquals((short)3089, short0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, integer0);
      jSONArray0.getByteValue(989);
      jSONArray0.getBoolean((byte)0);
      Boolean boolean0 = jSONArray1.getBoolean(3089);
      jSONArray0.getShort(3079);
      jSONArray0.fluentSet((-1), boolean0);
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), mockHijrahDate0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@59ccda0d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
