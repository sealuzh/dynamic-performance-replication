/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 11:17:49 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LT!<k/ovdt1S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LT!<k/ovdt1S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.getSignature("h|iWQnP_)l4)");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.compactClassName("(b;Tytes = ", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)66;
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence1.reset();
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence1.read();
      try { 
        Utility.methodSignatureArgumentTypes("multianewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)37);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence1.readShort();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, true);
      byteSequence1.read();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Q;_'>I(W%,$lnY1p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q;_'>I(W%,$lnY1p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)88;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)59;
      Utility.encode(byteArray0, false);
      Utility.convertString("z$d1X$ccAq$3b");
      Utility.format((-4501), 189, false, '\"');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 189, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#~ eX0!s3;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #~ eX0!s3;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.convertString("(+3");
      assertEquals("(+3", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.signatureToString("Jp.5t.`'t", false);
      assertEquals("long", string1);
      
      String string2 = Utility.methodSignatureReturnType("ZR5u1~1");
      assertEquals("boolean", string2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.accessToString((-2513), true);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)10;
      byte byte1 = (byte)25;
      byteArray0[6] = (byte)25;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "SXv,70o/r^p@K";
      Utility.replace("public private protected static abstract synthetic annotation enum", "public private protected static abstract synthetic annotation enum", "SXv,70o/r^p@K");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), (int) (byte) (-5), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    impdep2
         // 1:    ifnull\t\t#20467
         // 4:    <illegal opcode>
         // 5:    lconst_1
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.convertString("T3E(Q^uS|&y:%A");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<Unknown>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<Unknown>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("(5v4-j:<$f", false);
      assertArrayEquals(new byte[] {(byte)40, (byte)53, (byte)118, (byte)52, (byte)45, (byte)106, (byte)58, (byte)60}, byteArray0);
      
      String string0 = Utility.compactClassName("(5v4-j:<$f", false);
      assertEquals("(5v4-j:<$f", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(",[wYU8O,!NT", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, false);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Utility.convertString("dneg");
      Utility.setBit(4672, 87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 228, 1741, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer((-110));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte)35;
      byteArray1[6] = (byte)35;
      byteArray1[7] = (byte)35;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.close();
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readShort();
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence3, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.decode("YVk$6%'-", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = ",[wYU8O,!NT";
      byte[] byteArray0 = Utility.decode(",[wYU8O,!NT", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        constantPool0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(55);
      String string0 = Utility.convertString("void");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(646);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore\t\t%83", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string2 = Utility.compactClassName("void", "void", false);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifeq\t\t#-25004", string0);
      
      String string1 = Utility.convertString("&(|k|(b3Lq$roNC");
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string2 = Utility.compactClassName("&(|k|(b3Lq$roNC", "M8-S!Rq)s;JDD_Q", false);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-88);
      byteArray1[1] = (byte)106;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte) (-79);
      byteArray1[4] = (byte) (-99);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = Utility.replace("cg", "fload_1", (String) null);
      assertEquals("cg", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-100);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Utility", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(95);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((Object[]) null);
      try { 
        Utility.typeOfMethodSignature("iN6_bPiO5VT(JA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iN6_bPiO5VT(JA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*bS'jE$,Vonz3O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bS'jE$,Vonz3O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lstore");
      Integer integer0 = new Integer(90);
      String string0 = Utility.getSignature("D");
      Utility.isJavaIdentifierPart('l');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fstore_0", (String) null, "Total of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = true;
      Utility.getSignature("Q40%x_A5$");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-88);
      byteArray0[3] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.searchOpcode("fdiv");
      Utility.accessToString(154);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 154, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.convertString("d_2C[o");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-126);
      byte byte0 = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$aP;^+*RS5");
      byteArray0[0] = (byte)50;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.setBit(213, 81);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      Utility.signatureToString("SAME_EXTENDED", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.mark((-342));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.convertString("\"");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.methodTypeToSignature("areturn", (String[]) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-65));
      try { 
        Utility.methodSignatureReturnType("\\\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "";
      Utility.fillup("", (-1159), true, 'Y');
      String string1 = "monitorexit";
      boolean boolean0 = false;
      int int0 = 431;
      int int1 = 3655;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("s%wadF ++=$");
      String string2 = "q/Mp";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "q/Mp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"q/Mp\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("short");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-58), (byte)7);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("??iD'0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ??iD'0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = "?\":mVh";
      try { 
        Utility.methodSignatureArgumentTypes("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("pma`ut|L<.sSn4", false);
      Utility.searchOpcode("pma`ut|L<.sSn4");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pma`ut|L<.sSn4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(1568);
      constantString0.setStringIndex(1568);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantString0.clone();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Field.getComparator();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = "swap";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pma`ut|L<.sSn4";
      stringArray0[1] = null;
      stringArray0[2] = "iushr";
      stringArray0[3] = "pma`ut|L<.sSn4";
      stringArray0[4] = "pma`ut|L<.sSn4";
      stringArray0[5] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("swap", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[4] = (Object) null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)19);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.equals(byteArray1, byteArray0);
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
      
      String string1 = Utility.accessToString((int) (byte)19);
      assertEquals("public private final", string1);
      
      Utility.fillup("byte", 2549, false, '?');
      String string2 = Utility.compactClassName("arraylength", false);
      assertEquals("arraylength", string2);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)19;
      byteArray2[1] = (byte)19;
      byteArray2[2] = (byte)19;
      byteArray2[3] = (byte)19;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)19;
      byteArray3[1] = (byte)19;
      byteArray3[2] = (byte)19;
      byteArray3[3] = (byte) (-60);
      boolean boolean0 = Utility.equals(byteArray2, byteArray3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((byte)61);
      byteSequence0.reset();
      boolean boolean0 = true;
      Utility.accessToString((int) (byte)61, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("3eG,R{B}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3eG,R{B}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.accessToString((-2951), true);
      Utility.searchOpcode("public static final volatile abstract synthetic annotation enum");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public static final volatile abstract synthetic annotation enum";
      objectArray0[2] = (Object) "public static final volatile abstract synthetic annotation enum";
      objectArray0[3] = (Object) "public static final volatile abstract synthetic annotation enum";
      objectArray0[4] = (Object) "public static final volatile abstract synthetic annotation enum";
      objectArray0[5] = (Object) "public static final volatile abstract synthetic annotation enum";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)65, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-22);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("short");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-31));
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.searchOpcode("\t\t#");
      Utility.equals(byteArray0, byteArray0);
      int int0 = 60;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), 60);
      Utility.compactClassName("lload_3", "0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    aload_0\n4:    land\n", true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -45
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.replace("7HFjlL[uj_+`S!ig&@k", "BRHpIj+)B_A:", "dstore_0");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "7HFjlL[uj_+`S!ig&@k";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"7HFjlL[uj_+`S!ig&@k\"}", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1658), 3853);
      assertEquals("0:    bipush\t\t-9\n2:    iload_3\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    iconst_m1\n6:    fconst_0\n7:    bipush\t\t2\n", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.classOrInterface(8);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence1.readFloat();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = ", ";
      try { 
        Utility.methodSignatureArgumentTypes("6V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-17);
      Utility.encode(byteArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = Utility.decode("-$b4h[Q fp\"Ndk|.kU", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)99;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b");
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) (byte)46;
      objectArray0[3] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[4] = (Object) (byte)46;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[5] = (Object) "-$b4h[Q fp\"Ndk|.kU";
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("]{XA`wJ[2BTwY");
      Utility.setBit((byte) (-17), (byte)99);
      Utility.encode(byteArray1, false);
      Utility.printArray(objectArray0);
      try { 
        Utility.decode("$z$b4h$5bQ$mfp$oNdk$7c$$kU", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("boolean");
      constantArray0[0] = (Constant) constantUtf8_0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)75);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)40);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("boolean");
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantString constantString0 = new ConstantString(967);
      constantArray0[6] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalVariableTable localVariableTable0 = null;
      String string0 = "lload_2";
      boolean boolean0 = false;
      Utility.decode("Q40%x_A5$", false);
      try { 
        Utility.typeOfMethodSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.compactClassName("e1Fd`{aAXl\"eiq");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("e1Fd`{aAXl\"eiq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e1Fd`{aAXl\"eiq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.mark((byte)88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte)117;
      byteArray1[4] = (byte) (-68);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence3, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence3, (ConstantPool) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-3008));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.mark((byte) (-28));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.convertString("\"");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[2] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.available();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString(74);
      Utility.fillup("G{m5{3C%S4", (byte)0, true, 'X');
      try { 
        Utility.typeOfMethodSignature("/tJj=X+Ro)(Yij");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /tJj=X+Ro)(Yij
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.getSignature("EXr{{])LNT5&4sue");
      try { 
        Utility.typeOfSignature("EXr{{])LNT5&4sue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EXr{{])LNT5&4sue
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.replace("Invawid Eetod siLnature: ", "Invawid Eetod siLnature: ", "Invawid Eetod siLnature: ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.searchOpcode("Invawid Eetod siLnature: ");
      Utility.fillup("Invawid Eetod siLnature: ", (-1477648431), true, '*');
      Utility.replace("Invawid Eetod siLnature: ", "OI=oGQzr])m", "Invawid Eetod siLnature: ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.classOrInterface(160);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invawid Eetod siLnature: ", "OI=oGQzr])m", "areturn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invawid Eetod siLnature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.typeOfSignature("F?K@N~@(UfE9");
      Utility.searchOpcode("iflt");
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)155);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("goto");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1369, (int) (byte)45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      objectArray0[1] = (Object) (byte)9;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{null, null, null, null, null}");
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 3577, 5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2209, (-3119));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)24;
      Utility.compactClassName("-!_d,#G40;D.o1Gn}2B");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(164);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      Utility.searchOpcode("U>@KcG}iIE/l[");
      Utility.accessToString((int) (byte)24);
      try { 
        Utility.methodSignatureReturnType("-!_d,#G40;D.o1Gn}2B", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-!_d,#G40;D.o1Gn}2B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$B~:d5uYpA?'Sf", false);
      assertEquals(14, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)22;
      byteArray1[3] = (byte) (-29);
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte)22;
      byteArray1[6] = (byte)22;
      byteArray1[7] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString((int) (byte)22, false);
      Utility.classOrInterface((byte)22);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), 4087, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("a", "0:    aconst_null\n1:    iand\n2:    astore\t\t%100\n4:    saload\n5:    land\n6:    lneg\n7:    dup\n8:    irem\n9:    lstore_2\n10:   lstore_0\n11:   dload_1\n12:   aastore\n13:   fsub\n", "private protected final");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("pma`ut|L<.sSn4", false);
      Utility.searchOpcode("pma`ut|L<.sSn4");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pma`ut|L<.sSn4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(1568);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(208);
      constantString0.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 208, 1027);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("pma`ut|L<.sSn4", false);
      Utility.searchOpcode("pma`ut|L<.sSn4");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pma`ut|L<.sSn4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(1568);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)34;
      Utility.compactClassName("-!_d,#G40;D.o1Gn}2B");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(164);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      short short0 = Utility.searchOpcode("U>@KcG}iIE/l[");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.accessToString((int) (byte)34);
      assertEquals("private synchronized", string1);
      
      String string2 = Utility.fillup("$l$8b$I$A$A$A$A$A$A$A", 199, true, '6');
      assertEquals("$l$8b$I$A$A$A$A$A$A$A6666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", string2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[2] = (byte)28;
      byteArray0[4] = (byte) (-101);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('1');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.encode(byteArray0, true);
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[4] = (Object) null;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[7] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      Object object2 = new Object();
      objectArray0[8] = object2;
      Utility.printArray(objectArray0, false, true);
      String string1 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.setBit((byte)19, 64);
      assertEquals(19, int0);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lstore_1", false);
      Utility.searchOpcode("lstore_1");
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)64);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lstore_1");
      Utility.encode(byteArray0, true);
      Utility.decode("lstore_1", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) pipedInputStream0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("]{XA`wJ[2BTwY");
      Utility.setBit(602, 602);
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.signatureToString("[SwGKn=P@WIU-");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)26;
      byteArray0[8] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)87;
      objectArray0[2] = (Object) byteSequence0;
      Utility.printArray(objectArray0, true, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-7), 89);
      Utility.encode(byteArray0, true);
      boolean boolean0 = true;
      try { 
        Utility.decode("fstore_2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("35gDVyly7N56", false);
      Utility.searchOpcode("CONSTANT_Integer");
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_Integer");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_Integer");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantString0.clone();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1042), (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    baload
         // 1:    saload
         // 2:    dsub
         // 3:    fstore_1
         // 4:    sastore
         // 5:    lshl
         // 6:    idiv
         // 7:    lshl
         // 8:    lstore\t\t%78
         // 10:   saload
         // 11:   
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid method signature: ", true);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)64;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      short short0 = Utility.searchOpcode("Invalid method signature: ");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.fillup("Invalid method signature: ", (-1477648431), true, '@');
      String string2 = Utility.replace("Invalid method signature: ", "OI=oGQzr])m", "int");
      assertTrue(string2.equals((Object)string1));
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string3 = Utility.format((short) (-15927), (byte)64, true, '@');
      assertEquals("-15927@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string3);
      
      String string4 = Utility.toHexString(byteArray0);
      assertEquals("c1 c9 40 61 2e", string4);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)46;
      byteArray1[4] = (byte)97;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lstore_1", false);
      Utility.searchOpcode("lstore_1");
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)64);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lstore_1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lstore_1");
      PipedInputStream pipedInputStream1 = new PipedInputStream((short)64);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lstore_1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hbl=rNIg");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.reset();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-122);
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence3, (ConstantPool) null, false);
      byteSequence3.close();
      ByteSequence byteSequence4 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence3, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("O>vR!", "O>vR!", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-14);
      byteArray0[0] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      Utility.compactClassName("O>vR!");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("object");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "instanceof", "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lstore_1", false);
      Utility.searchOpcode("lstore_1");
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)64);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lstore_1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lstore_1");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lstore_1";
      stringArray0[1] = "f/:-3ydr";
      stringArray0[2] = "lstore_1";
      stringArray0[3] = "lstore_1";
      stringArray0[4] = "long";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "\t";
      stringArray0[8] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.methodSignatureReturnType("(Llstore_1;Lf/:-3ydr;Llstore_1;Llstore_1;JL;L;L;L;)L;", false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)62;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c2 98 79 3e");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("<illegal opcode>");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark(1322);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("ifnull");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifnull", "<illegal opcode>", "java.lang.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("pma`ut|L<.sSn4", false);
      byte byte0 = (byte)62;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R.[r1f");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = 1198;
      Utility.fillup("irem", (byte)121, false, '!');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, (int) (byte)121, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object2 = new Object();
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte) (-91);
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte) (-91);
      byteArray1[4] = (byte)118;
      byteArray1[5] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.reset();
      boolean boolean0 = true;
      boolean boolean1 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-91);
      byteArray2[1] = (byte) (-91);
      byteArray2[2] = (byte)118;
      byteArray2[3] = (byte)118;
      byteArray2[4] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 55, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = (byte) (-107);
      byte byte1 = (byte)0;
      ConstantPool constantPool0 = null;
      byte byte2 = (byte) (-69);
      Utility.compactClassName(":{l");
      byte[] byteArray0 = new byte[3];
      byte byte3 = (byte)78;
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 195, 184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      Utility.compactClassName("O>vR!", "O>vR!", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-14);
      byte byte0 = (byte)50;
      byteArray0[7] = (byte)50;
      byte byte1 = (byte) (-69);
      byteArray0[8] = (byte) (-69);
      Utility.compactClassName("O>vR!");
      ConstantPool constantPool0 = null;
      int int0 = 2417;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2417, (int) (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 239);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-114);
      byteArray0[8] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-114));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 17751, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-104);
      byte byte0 = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)62;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c2 98 79 3e");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = 1198;
      Utility.fillup("c2 98 79 3e", 1198, true, 'F');
      int int1 = (-637);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, (-637), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-28));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("dload_3");
      assertEquals((short)41, short0);
      
      String string0 = Utility.getSignature("dload_3");
      assertEquals("Ldload_3;", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<Integer> class0 = Integer.class;
      syntheticRepository0.loadClass(class0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.classOrInterface(2778);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)66;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, (int) (byte) (-94));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byte byte0 = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)43;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('1');
      Utility.encode(byteArray0, false);
      MockFile mockFile0 = new MockFile("Invalid signature: ", "X(");
      File file0 = MockFile.createTempFile("$3e$7e$x$A$i$A$A", "org.apache.bcel.classfile.CodeException", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.AccessFlags");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.AccessFlags'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("pma`ut|L<.sSn4", false);
      Utility.searchOpcode("pma`ut|L<.sSn4");
      PipedInputStream pipedInputStream0 = new PipedInputStream(94);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pma`ut|L<.sSn4");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(1568);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), 118);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.replace("7HFjlL[uj_+`S!ig&@k", "BRHpIjCPB_A:", "dstore_0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(86);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      ByteSequence byteSequence5 = new ByteSequence(byteArray0);
      byteSequence5.readByte();
      Utility.codeToString(byteSequence5, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: breakpoint
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      Object object2 = new Object();
      String string0 = Utility.printArray(objectArray0, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{null, null, null, null, null}");
      Utility.accessToString(106);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("B@h", (-1043), false, 'u');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.convertString("\t\t#");
      Object object0 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      String string0 = "org.apache.bcel.classfile.ConstantMethodref";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantMethodref");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-4);
      byte byte1 = (byte) (-99);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-8), (int) (byte) (-8), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ConstantPool constantPool0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.");
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockURI.create("dcmpl");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(160, (byte) (-105));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((byte)80, (byte)9);
      ConstantClass constantClass0 = new ConstantClass((byte) (-105));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)62;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c2 98 79 3e");
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = true;
      Utility.fillup("c2 98 79 3e", 1198, true, 'F');
      String string0 = "aload_1";
      Method method0 = null;
      try {
        method0 = new Method(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object1;
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) (byte) (-88);
      Utility.printArray(objectArray0, true, true);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{\"java.lang.Object@7ded3d8e\", \"java.lang.Object@7ded3d8e\", \"java.lang.Object@7ecd670c\", \"java.lang.Object@de99c70\", \"-88\"}");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString((int) (byte) (-88));
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      String string0 = "O>vR!";
      boolean boolean0 = true;
      Utility.compactClassName("O>vR!", "O>vR!", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-49);
      Utility.compactClassName("");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-64));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)21;
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byte byte1 = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.readChar();
      byteSequence0.readInt();
      Utility.classOrInterface((byte)21);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, 174);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "(+3";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("(+3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<String> class0 = String.class;
      syntheticRepository0.loadClass(class0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.signatureToString("L(+3;");
      try { 
        Utility.typeOfSignature("(+3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (+3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.accessToString(8);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "5o5$W:p";
      objectArray0[1] = (Object) "static";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte) (-11);
      byteArray1[2] = (byte) (-124);
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte) (-49);
      byteArray1[5] = (byte) (-76);
      byteArray1[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3853, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      Utility.compactClassName("O>vR!", "O>vR!", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-49);
      Utility.compactClassName("O>vR!");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2417, (int) (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("YFPqQ7|HzEd/)Wp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YFPqQ7|HzEd/)Wp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("|*$}lV8pd1SjVLZW", "6 E", false);
      Utility.compactClassName("|*$}lV8pd1SjVLZW");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)30;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), 2417);
      assertEquals("0:    <illegal opcode>\n1:    d2f\n2:    goto_w\t\t#-1500475224\n7:    <illegal opcode>\n8:    lload_0\n", string1);
      
      String string2 = Utility.convertString("|*$}lV8pd1SjVLZW");
      assertTrue(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[0];
      String string3 = Utility.printArray(objectArray0);
      assertEquals("{}", string3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[2] = (byte) (-51);
      Utility.encode(byteArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("nop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.searchOpcode("1w[");
      Utility.isJavaIdentifierPart('(');
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)19;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantInteger constantInteger0 = new ConstantInteger(185);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantInteger2;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.clone();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4883. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.convertString("\tY0#");
      byte byte0 = (byte)0;
      byte byte1 = (byte)101;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      // Undeclared exception!
      try { 
        Utility.signatureToString("lsub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lsub'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      Utility.compactClassName("O>vR!", "O>vR!", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-49);
      Utility.compactClassName("");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2417, (int) (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      int int0 = 85;
      Utility.accessToString((int) (byte)0);
      Utility.compactClassName("\"~eF#,y");
      Utility.setBit((byte)0, (-277));
      try { 
        Utility.methodSignatureReturnType("\"~eF#,y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"~eF#,y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte)0, true);
      assertEquals("", string0);
      
      String string1 = Utility.classOrInterface(111);
      assertEquals("class", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1623), (-1623), true);
      assertEquals("0:    ddiv\n1:    frem\n2:    dsub\n3:    iaload\n4:    ladd\n5:    irem\n6:    ladd\n7:    dadd\n8:    imul\n9:    lsub\n10:   iaload\n11:   fadd\n12:   dadd\n13:   lsub\n14:   idiv\n15:   iaload\n16:   dadd\n17:   idiv\n18:   ladd\n19:   drem\n20:   drem\n21:   fsub\n22:   lmul\n23:   idiv\n24:   lsub\n25:   iaload\n26:   castore\n27:   ineg\n28:   lmul\n29:   idiv\n30:   lmul\n31:   ineg\n32:   lshl\n", string2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isSet((byte) (-87), (byte)26);
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("iload_0");
      assertEquals("iload_0", string0);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      objectArray0[0] = object1;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.getSignature("iload_0");
      assertEquals("Liload_0;", string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.skip((-204L));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isSet((byte)26, 429);
      Utility.compactClassName("ret\t\t%247");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-9);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) (byte) (-87);
      String string0 = Utility.printArray(objectArray0, true, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-127);
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = null;
      byteSequence0.mark(1763);
      int int0 = 16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, 3038);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('3');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("byte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "E5aNb8E";
      // Undeclared exception!
      try { 
        Utility.signatureToString("E5aNb8E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E5aNb8E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.skip((byte)0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isSet((byte)86, (-2723));
      Utility.compactClassName("_p>~{/I$cIiGWT:#");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)86;
      objectArray0[1] = (Object) (byte)86;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)86;
      objectArray0[4] = (Object) "O/R!";
      Utility.printArray(objectArray0, true, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ret\t\t%86", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.signatureToString("D(<83", true);
      Utility.getSignature("\t\t#");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "double";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-34);
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(1763);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("lload_1");
      String string0 = "class";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "class", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      String string0 = Utility.accessToString(73, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeInvisibleAnnotations", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(",", false);
      Utility.clearBit(218, 3635);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-10));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("JV");
      // Undeclared exception!
      try { 
        Utility.signatureToString("^`|@w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^`|@w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0zF}_4F[FaE~p[@";
      stringArray0[1] = "aload_2";
      stringArray0[2] = "aload_2";
      stringArray0[3] = "aload_2";
      stringArray0[4] = "aload_2";
      stringArray0[5] = "aload_2";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("aload_2", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[FaE~p[@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("(+3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte byte0 = (byte) (-128);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("ifnull\t\t#-24767", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull\t\t#-24767
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)43;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('1');
      Utility.isJavaIdentifierPart(':');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, constantPool0, true);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      javaClass0.isVarArgs(true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("istore_3", "istore_3", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      String string0 = "O/R!";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.compactClassName("(3");
      Utility.isSet((-2417), (-2417));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(1133);
      try { 
        Utility.typeOfSignature("(3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.classOrInterface(1980);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.printArray((Object[]) null, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fconst_1");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString(179);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)63;
      objectArray0[1] = (Object) "lstore_0";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte) (-112);
      Utility.printArray(objectArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (int) (byte)63, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-101);
      byte byte0 = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte) (-101);
      Utility.printArray(objectArray0, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "org.apache.bcel.classfile.ConstantCP", "org.apache.bcel.classfile.ConstantCP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)34;
      byte byte0 = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[4] = (byte)0;
      String string0 = "YlF, 4K;d8^";
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("YlF, 4K;d8^");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.isSet((byte)0, (byte)0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fconst_1");
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.classOrInterface((-18));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)81;
      byte byte0 = (byte) (-51);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-10);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)84;
      byteArray1[3] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.mark((byte)84);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("fastore");
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.accessToString(8);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart(')');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, constantPool0, false);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      javaClass0.isVarArgs(true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("dsub", "invokeinterface", ",dt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dsub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-10);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)84;
      byteArray1[3] = (byte)84;
      byteArray1[4] = (byte)84;
      byteArray1[5] = (byte) (-10);
      byteArray1[6] = (byte) (-10);
      byteArray1[7] = (byte)20;
      Utility.encode(byteArray1, false);
      Utility.decode("QT$ATT$f6$f6$U", false);
      String string0 = "[n%";
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$B~:d5uYpA?'Sf", false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte)38;
      byteArray1[2] = (byte)38;
      byteArray1[3] = (byte) (-29);
      byteArray1[4] = (byte)38;
      byteArray1[5] = (byte)38;
      byteArray1[6] = (byte)38;
      byteArray1[7] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.accessToString((int) (byte)38, false);
      assertEquals("private protected synchronized", string0);
      
      String string1 = Utility.classOrInterface((byte)38);
      assertEquals("class", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), 4087, false);
      assertEquals("0:    aconst_null\n1:    iand\n2:    astore\t\t%100\n4:    saload\n5:    land\n6:    lneg\n7:    dup\n8:    irem\n9:    lstore_2\n10:   lstore_0\n11:   dload_1\n12:   aastore\n13:   fsub\n", string2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.compactClassName("(3");
      Utility.isSet((-2417), (-2417));
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      byte byte1 = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byte byte2 = (byte)6;
      byteArray0[2] = (byte)6;
      byte byte3 = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byte byte4 = (byte)87;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-100);
      Constant[] constantArray0 = new Constant[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("(3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)43;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = 244;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 244, (int) (byte)28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = (-4);
      byte[] byteArray0 = Utility.decode(",", false);
      String[] stringArray0 = new String[1];
      Utility.clearBit(218, 3635);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 218, 218);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.signatureToString("TL;pjX'mGpYw^ISZ", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L";
      stringArray0[1] = "TL;pjX'mGpYw^ISZ";
      stringArray0[2] = "vwZa";
      stringArray0[3] = "";
      stringArray0[4] = "L";
      Utility.methodTypeToSignature("vwZa", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-4), 31, byteSequence0, (ConstantPool) null);
      Attribute.removeAttributeReader("L");
      try { 
        Utility.methodSignatureToString("", "vwZa", "F+g:;?i8]03", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.searchOpcode("1w[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")UNb");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)64;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("checkcast");
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-105);
      byteArray0[1] = (byte)87;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, (int) (byte)87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("G{m5{3C%S4PreR*0", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readBoolean();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 53
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.searchOpcode("1w[");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)64;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[7] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "float");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"float\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "lstore_1";
      byte[] byteArray0 = Utility.decode("lstore_1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      int int0 = 240;
      byteSequence1.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "java.lang.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"java.lang.\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lstore_1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = "int";
      try { 
        Utility.methodSignatureArgumentTypes("int", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)43;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('1');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)43;
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte)50;
      byteArray1[3] = (byte)43;
      byte byte0 = (byte) (-128);
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte) (-101);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("<|SO>Neie-7V>AP", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <|SO>Neie-7V>AP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true, true);
      Utility.getSignature("{null, null, null, null, null}");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit((byte)9, (byte)0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("org.apache.bcel.classfile.CodeException");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-3583), (byte)16);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("{null, null, null, null, null}");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("2B]@v^K.");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"", (String) null, "\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.accessToString(8);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (-624), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lstore_1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 240;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 240, 191);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 8;
      Utility.accessToString(8);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-124);
      Utility.fillup(":", (byte) (-124), true, 'd');
      Utility.replace("static", "static", "char");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, ":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \":\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "1w[";
      Utility.searchOpcode("1w[");
      Utility.isJavaIdentifierPart('H');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isSet((byte)19, (byte)19);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)15;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 86, (-574));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('%');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string0 = "putstatic";
      try { 
        Utility.methodSignatureArgumentTypes("putstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      Utility.signatureToString("Invalid method signature: ", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byte byte0 = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)64;
      byte byte1 = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.searchOpcode("Invalid method signature: ");
      Utility.fillup("Invalid method signature: ", (-1477648431), true, '*');
      Utility.replace("Invalid method signature: ", "OI=oGQzr])m", "int");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("(+3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), 14);
      assertEquals("0:    i2c\n1:    if_icmpeq\t\t#16796\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      String string1 = Utility.accessToString((-1152));
      assertEquals("transient native interface strictfp synthetic annotation enum", string1);
      
      int int0 = Utility.setBit((byte) (-110), 14);
      assertEquals((-110), int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.signatureToString("L(+3;");
      String string2 = Utility.classOrInterface((-110));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("(+3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "l2f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"l2f\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = null;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[1];
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature("{null, null, null, null, null}");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.clearBit((byte)9, (byte)15);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ishl", "{null, null, null, null, null}", "org.apache.bcel.classfile.CodeException", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ishl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)111;
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart(']');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("w#%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w#%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("(+3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byte byte0 = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-101);
      byte byte1 = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "Invalid type: ";
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance(classPath0);
      Class<String> class0 = String.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      javaClass0.isVarArgs(true);
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      // Undeclared exception!
      try { 
        constantPool0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.convertString("\t\t#");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("\t\t#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.compactClassName("G{m5{3C%S4PreR*0");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)56;
      byte byte0 = (byte) (-57);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("G{m5{3C%S4PreR*0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G{m5{3C%S4PreR*0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lstore_1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("`B-x", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `B-x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "$B~:d5uYpA?'Sf";
      objectArray0[1] = (Object) "$B~:d5uYpA?'Sf";
      objectArray0[2] = (Object) "$B~:d5uYpA?'Sf";
      objectArray0[3] = (Object) "$B~:d5uYpA?'Sf";
      objectArray0[4] = (Object) "$B~:d5uYpA?'Sf";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)47);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("putstatic");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{$B~:d5uYpA?'Sf, $B~:d5uYpA?'Sf, $B~:d5uYpA?'Sf, $B~:d5uYpA?'Sf, $B~:d5uYpA?'Sf}", "v15wYOt4", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {$B~:d5uYpA?'Sf, $B~:d5uYpA?'Sf, $B~:d5uYpA?'Sf, $B~:d5uYpA?'Sf, $B~:d5uYpA?'Sf}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")");
      ConstantClass constantClass0 = new ConstantClass(83);
      constantClass0.clone();
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      Utility.codeToString(byteArray0, constantPool0, 1, 76, true);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)67, 69);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V3J O49'");
      MockFile mockFile0 = new MockFile((File) null, "kSJn%d#)ZYN*>");
      File file0 = MockFile.createTempFile("SvraY[^$_vk+R1", "r", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = "wide";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"}ne>>Yh:Pf=4L+", "r", "wide", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"}ne>>Yh:Pf=4L+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("(+3");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "l2f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"l2f\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byte byte0 = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("O_xFfQ%pC.iXt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O_xFfQ%pC.iXt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)50;
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)126;
      byte byte1 = (byte)43;
      byteArray0[2] = (byte)43;
      byte byte2 = (byte) (-101);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      byte byte3 = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("iand", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iand
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short short0 = Utility.searchOpcode("1w[");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('H');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%201", string0);
      
      String string1 = Utility.accessToString((int) (byte)56, false);
      assertEquals("static final synchronized", string1);
      
      boolean boolean1 = Utility.isSet(223, (short) (-1));
      assertFalse(boolean1 == boolean0);
      
      String string2 = Utility.accessToString(6);
      assertEquals("private protected", string2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short short0 = Utility.searchOpcode("1w[");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('H');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean1 = Utility.isSet((byte)19, (byte)19);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.isJavaIdentifierPart('Q');
      try { 
        Utility.decode("$E]ivc^v8Px.rWsr/f", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) null;
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature("{null, null, null, null, null}");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.clearBit((byte)9, (byte)15);
      String string0 = "org.apache.bcel.classfile.CodeException";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f2l", "{null, null, null, null, null}", "org.apache.bcel.classfile.CodeException", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-28));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short short0 = Utility.searchOpcode("1w[");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('H');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("22 f4 95 a7 41 53 0c 0e 0d", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("fstore_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-20);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, 1324);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Agvj%%\"h0!y@>xTiVdz";
      try { 
        Utility.typeOfSignature("Agvj%%\"h0!y@>xTiVdz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Agvj%%\"h0!y@>xTiVdz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "G{m5{3C%S4PreR*0";
      Utility.convertString("G{m5{3C%S4PreR*0");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byte byte0 = (byte)59;
      byteArray0[2] = (byte)59;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      byte byte1 = (byte)127;
      byteArray0[3] = (byte)127;
      byte byte2 = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1230, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      String string0 = "O/R!";
      Utility.compactClassName("O/R!", "O/R!", true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Td/0wC&g", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Td/0wC&g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)100;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((byte)0, 3066);
      Utility.signatureToString("I`xVKG{xqE", true);
      Utility.searchOpcode("I`xVKG{xqE");
      Utility.getSignature("impdep1");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3066, 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6a 5b 00", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(73, 167);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)99);
      Utility.printArray((Object[]) null, true, true);
      Utility.getSignature("wide");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      Utility.clearBit((byte)99, (-1495));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("RN;5fhp^pI2nq,v", "wide", "s^`zxSXg y&~", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RN;5fhp^pI2nq,v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)100, 695);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant constant0 = constantPool0.getConstant((int) (byte)0);
      constantArray0[3] = constant0;
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic1);
      constantArray0[4] = (Constant) constantInvokeDynamic2;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.replace("G{m5{3C%S4PreR*0", "c_$eH(,hn^{ddpq`~fX", "c_$eH(,hn^{ddpq`~fX");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-6198));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("nop");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("G{m5{3C%S4PreR*0", "", "c_$eH(,hn^{ddpq`~fX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G{m5{3C%S4PreR*0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)57;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      Utility.isJavaIdentifierPart('^');
      String string0 = Utility.format(194, (byte)69, false, '2');
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)119;
      Utility.encode(byteArray0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format((byte) (-116), (byte) (-116), true, 'A');
      String string0 = Utility.accessToString((-2437), true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("^U:SH");
      Utility.clearBit(2, (byte) (-17));
      String string1 = Utility.compactClassName("dlo$KO*8r", "^U:SH", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.searchOpcode("iconst_5");
      Utility.isJavaIdentifierPart('H');
      Utility.replace("aload_2", "aload_2", "aload_2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)89);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", npairs = ", "\t\t%", "iconst_5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.isJavaIdentifierPart('8');
      Utility.compactClassName("O/R!", "O/R!", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-65);
      byte byte0 = (byte)57;
      byteArray0[7] = (byte)57;
      byte byte1 = (byte) (-49);
      byteArray0[8] = (byte) (-49);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 160, (int) (byte) (-112));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.replace("byte", "nop", "aload_2");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-836));
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("frem");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aload_2", "zC0#pS$b\"B\"", "+&-Ey@Jxy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.replace("nop", "nop", "goto3_w");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)91;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte) (-37);
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte) (-128);
      byteArray1[7] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("\r", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-4);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.format(194, (byte)69, false, '2');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, (int) (byte) (-4), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = Utility.replace("7HFjlL[uj_+`S!ig&@k", "BRHpIj+)B_A:", "dstore_0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-8);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (-2585));
      assertEquals("0:    lload_2\n1:    bipush\t\t32\n3:    <illegal opcode>\n4:    lconst_1\n5:    iconst_m1\n6:    iconst_m1\n7:    <illegal opcode>\n", string1);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\r";
      byte byte0 = Utility.typeOfSignature("BRHpIj+)B_A:");
      assertEquals((byte)8, byte0);
      
      Utility.compactClassName("java.lang.", "void", false);
      String string2 = Utility.compactClassName("7HFjlL[uj_+`S!ig&@k", false);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.replace("7HFjlL[uj_+`S!ig&@k", "BRHpIj+)B_A:", "dstore_0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-8);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (-2585));
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\r";
      objectArray0[2] = (Object) "7HFjlL[uj_+`S!ig&@k";
      objectArray0[3] = (Object) "dstore_0";
      objectArray0[4] = (Object) (byte)2;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    fstore_1\n1:    bipush\t\t68\n3:    <illegal opcode>\n4:    lconst_1\n5:    iconst_m1\n6:    iconst_m1\n7:    <illegal opcode>\n", "0:    fstore_1\n1:    bipush\t\t68\n3:    <illegal opcode>\n4:    lconst_1\n5:    iconst_m1\n6:    iconst_m1\n7:    <illegal opcode>\n", "7HFjlL[uj_+`S!ig&@k", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fstore_1
         // 1:    bipush\t\t68
         // 3:    <illegal opcode>
         // 4:    lconst_1
         // 5:    iconst_m1
         // 6:    iconst_m1
         // 7:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.replace("7HFjlL[uj_+`S!ig&@k", "BRHpIj+)B_A:", "dstore_0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-8);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-8), (-2585));
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\r";
      objectArray0[2] = (Object) "7HFjlL[uj_+`S!ig&@k";
      objectArray0[3] = (Object) "dstore_0";
      objectArray0[4] = (Object) (byte)2;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QH");
      int int0 = (-1312);
      Utility.isSet((-1312), (-1312));
      // Undeclared exception!
      try { 
        Utility.signatureToString("QH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.signatureToString("TL;pjX'mGpYw^ISZ", true);
      assertEquals("L", string0);
      
      Utility.methodSignatureReturnType("TL;pjX'mGpYw^ISZ");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "TL;pjX'mGpYw^ISZ";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte byte0 = (byte)80;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-968), 10, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.getSignature("@");
      assertEquals("L@;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      String string1 = Utility.signatureToString("L@;");
      assertEquals("@", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)66, false);
      assertEquals("0:    nop\n1:    lstore_3\n2:    lstore_3\n", string2);
      
      int int0 = Utility.setBit((byte)10, (byte)66);
      assertEquals(14, int0);
      
      String string3 = Utility.accessToString(53, true);
      assertEquals("public protected final", string3);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ConstantClass constantClass0 = new ConstantClass(8);
      Constant[] constantArray0 = new Constant[5];
      constantClass0.clone();
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)39;
      byte byte0 = (byte) (-33);
      byteArray0[4] = (byte) (-33);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, 163, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23847. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "G{m5{3C%S4PreR*0";
      Utility.convertString("G{m5{3C%S4PreR*0");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t");
      byteArray0[3] = (byte)127;
      byte byte0 = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1230, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)80;
      byteArray0[8] = (byte)1;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass((byte)80);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, 6, (int) (byte) (-40), false);
      assertEquals("6:    nop\n7:    nop\n8:    aconst_null\n", string0);
      
      int int0 = Utility.setBit((byte) (-5), 122);
      assertEquals((-5), int0);
      
      String string1 = Utility.accessToString(66, false);
      assertEquals("private volatile", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)99;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)46, 73);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)99);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantFloat0;
      Utility.printArray((Object[]) constantArray0, true, false);
      Utility.getSignature("{CONSTANT_Float[4](bytes = 99.0), CONSTANT_Float[4](bytes = 99.0), CONSTANT_InterfaceMethodref[11](class_index = 46, name_and_type_index = 73), CONSTANT_Float[4](bytes = 99.0), null, null}");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.clearBit(3405, (byte)99);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: `", "iaload", "{CONSTANT_Float[4](bytes = 99.0), CONSTANT_Float[4](bytes = 99.0), CONSTANT_InterfaceMethodref[11](class_index = 46, name_and_type_index = 73), CONSTANT_Float[4](bytes = 99.0), null, null}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.signatureToString("TL;pjX'mGpYw^ISZ", true);
      Utility.methodSignatureReturnType("TL;pjX'mGpYw^ISZ");
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    iflt\t\t#-25699
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)100;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(14, (byte)100);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("invokedynamic");
      assertEquals((short)186, short0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)14;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.compactClassName("YS9<ONq[*");
      Utility.compactClassName("YS9<ONq[*");
      Utility.encode(byteArray0, true);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$u$ff$S$A$c8Z$O", string0);
      
      int int0 = Utility.setBit((byte)90, (-1857));
      assertEquals((-2147483558), int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-17);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("-$b4h[Q fp\"Ndk|.kU", false);
      assertEquals(16, byteArray1.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)99;
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) (byte)46;
      objectArray0[3] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[4] = (Object) (byte)46;
      objectArray0[5] = (Object) "-$b4h[Q fp\"Ndk|.kU";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("99, $l$8b$I$A$A$A$A$A$A$A, 46, $l$8b$I$A$A$A$A$A$A$A, 46, -$b4h[Q fp\"Ndk|.kU", string1);
      
      String string2 = Utility.compactClassName("]{XA`wJ[2BTwY");
      assertEquals("]{XA`wJ[2BTwY", string2);
      
      String string3 = Utility.fillup("$l$8b$I$A$A$A$A$A$A$A", 87, false, 'D');
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD$l$8b$I$A$A$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)6;
      byteArray0[8] = (byte)1;
      byte byte0 = (byte) (-40);
      int int0 = 66;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass((byte)80);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (-220), (int) (byte)6, true);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)9;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sTwm!#m");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(720, false);
      String string0 = "java.lang.long";
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.long", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("", 1265, false, 'g');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*tZiX{!xG:Rs)KQW");
      try { 
        Utility.methodSignatureReturnType("invokestatic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokestatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-17);
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("Oc$ef");
      Utility.format((-508), 3360, false, 'b');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("invokespecial");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("(", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter0.format("invokedynamic", objectArray0);
      Utility.printArray(printWriter1, objectArray0);
      assertSame(mockPrintWriter0, printWriter1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.replace("<illegal opcode>", "\r", "");
      assertEquals("<illegal opcode>", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)10;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1065), 171);
      assertEquals("0:    iconst_m1\n1:    <illegal opcode>\n2:    bipush\t\t32\n4:    <illegal opcode>\n5:    lconst_1\n", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "\r";
      objectArray0[1] = (Object) (byte) (-35);
      objectArray0[2] = (Object) (byte)2;
      String string2 = Utility.printArray(objectArray0, false, false);
      assertEquals("\r, -35, 2", string2);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('[');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-30);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Utility.fillup("CE*D-uepp", 227, false, 'h');
      String string0 = Utility.format(512, 248, false, 'O');
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO512", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W+yM_RD");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) (byte)2;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, 95);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)94;
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte) (-121);
      byteArray1[4] = (byte)74;
      byteArray1[5] = (byte)40;
      byteArray1[6] = (byte) (-11);
      byteArray1[7] = (byte)94;
      byteArray1[8] = (byte) (-96);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("=*<50<Mjbb!*knaWl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =*<50<Mjbb!*knaWl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.long", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.convertString("G{m5{3C%S4PreR*0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)127;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte) (-101);
      Utility.printArray(objectArray0, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "Ooops, what primitive type is ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte)0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)100;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(14, (byte)100);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-86), (byte)56);
      constantInvokeDynamic0.setClassIndex((byte)56);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 2183, 2183, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)9;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, 156, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte byte0 = (byte) (-107);
      String string0 = "Vy&?qt}c;tB}ftj?;";
      Utility.signatureToString("Vy&?qt}c;tB}ftj?;", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)89;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("HG'&K`[G<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HG'&K`[G<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byte byte0 = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byte byte1 = (byte)80;
      byteArray0[2] = (byte)80;
      byte byte2 = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), 93, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.signatureToString("D(<83", true);
      assertEquals("double", string0);
      
      String string1 = Utility.replace("\t\t#", "\t\t#", "\t\t#");
      assertEquals("\t\t#", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "double";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[2] = (byte)49;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4487), (-4487));
      assertEquals("0:    dup\n1:    nop\n2:    daload\n", string2);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.compactClassName("java.lang.long");
      Utility.isJavaIdentifierPart('O');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-121);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 1129, (int) (byte) (-86), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.signatureToString("D(<83", true);
      Utility.getSignature("\t\t#");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "double";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byte byte0 = (byte) (-96);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)99;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)46, 73);
      ConstantFloat constantFloat0 = new ConstantFloat((byte)99);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      constantArray0[5] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)99, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4087, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte)63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "G{m5{3C%S4PreR*0";
      Utility.convertString("G{m5{3C%S4PreR*0");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)127;
      byte byte0 = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1230, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("impdep2", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "G{m5{3C%S4PreR*0";
      Utility.compactClassName("G{m5{3C%S4PreR*0");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1230, (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byte byte0 = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, (int) (byte)76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte) (-96));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-10), 897);
      assertEquals("0:    nop\n1:    nop\n2:    dstore_2\n3:    dstore_2\n4:    dstore_2\n5:    dstore_2\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Utility.compactClassName("(3");
      assertEquals("(3", string0);
      
      boolean boolean0 = Utility.isSet((-2417), (-2417));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)6;
      byteArray0[5] = (byte) (-58);
      byteArray0[4] = (byte) (-62);
      byteArray0[2] = (byte)87;
      byteArray0[6] = (byte) (-100);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_0", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{}", string2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)88;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Illegal signature: ";
      stringArray0[1] = "Illegal signature: ";
      stringArray0[2] = "Illegal signature: ";
      stringArray0[3] = "void";
      stringArray0[4] = ")\t";
      stringArray0[5] = "E`*_Z";
      try { 
        Utility.methodTypeToSignature("Illegal signature: ", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\\r";
      Utility.replace("\r", "\t\t%", "\r");
      try { 
        Utility.methodSignatureToString("\r", "", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.searchOpcode("java.lang.Object");
      Utility.getSignature("UQzB#Hm,VNFoB2gO7");
      try { 
        Utility.typeOfSignature("N\"lJuu5fb{n9X@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N\"lJuu5fb{n9X@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2637, (byte)102);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(88, (-986));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString(2113);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore\t\t%102", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.getSignature("jsr");
      assertEquals("Ljsr;", string0);
      
      boolean boolean0 = Utility.isSet((-1), (-1));
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The array of names must not be null");
      String string0 = Utility.classOrInterface(125);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)87;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("AR$h$da$5e$82W", string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-38);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2093, 2093);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.getSignature("Invalid method signature: ");
      Utility.typeOfSignature("Invalid method signature: ");
      Utility.classOrInterface((byte)10);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 45, (-3069));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-10);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("24 10 5b da 08 f7 4e f6", string0);
      
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "O1:M5aX1AZ0";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "static", false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)69;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-7), 1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yL[i?");
      // Undeclared exception!
      try { 
        Utility.signatureToString("N$m{:t;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N$m{:t;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[3] = object3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0, true, true);
      Utility.signatureToString("L;V");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{\"java.lang.Object@3f66332\", \"java.lang.Object@1122e821\", \"java.lang.Object@19ccef38\", \"java.lang.Object@2561a8db\"}", "L;V", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"java.lang.Object@3f66332\", \"java.lang.Object@1122e821\", \"java.lang.Object@19ccef38\", \"java.lang.Object@2561a8db\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Urr92@$i%T4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Urr92@$i%T4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 411, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = ".class";
      try { 
        Utility.typeOfSignature(".class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.signatureToString("Code(max_stack = ", true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("char", stringArray0);
      Utility.searchOpcode("V9@KZ)\"?p,^BNUz0w");
      Utility.printArray((Object[]) stringArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "Code(max_stack = ", "new", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 411, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = Utility.fillup("(83", (-889275720), true, 'a');
      assertEquals("(83", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.getSignature("@");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (-1722023837));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)92;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("1_vibJgO|1Wq,JdvQxU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1_vibJgO|1Wq,JdvQxU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.getSignature("@");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(841);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-1791584229), 4971);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = Utility.convertString(" arg");
      assertEquals(" arg", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      boolean boolean1 = Utility.isSet((-1616085931), 773);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "($3";
      try { 
        Utility.methodSignatureArgumentTypes("($3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-43);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-43), (int) (byte) (-43));
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Nzrj~gs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nzrj~gs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "Pk<";
      Locale.getISOLanguages();
      try { 
        Utility.typeOfSignature("Pk<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pk<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantDouble constantDouble0 = new ConstantDouble(39);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat((-2077.8752F));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachabl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachabl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-107);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(4259, 58);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat(58);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, 619);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "E9-;! ,JAtB^GLX'-Ps";
      // Undeclared exception!
      try { 
        Utility.signatureToString("E9-;! ,JAtB^GLX'-Ps");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E9-;! ,JAtB^GLX'-Ps'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("", string0);
      
      Utility.searchOpcode("");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Utility.accessToString(3730);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Oc5,Y6SV5?x5Y.,";
      objectArray0[1] = (Object) "private final transient interface abstract strictfp";
      objectArray0[2] = (Object) "Oc5,Y6SV5?x5Y.,";
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 3774, false, 'R');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("XKKM5y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XKKM5y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = Utility.signatureToString("BB]iz3", true);
      assertEquals("byte", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), 22, true);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.methodSignatureArgumentTypes("P?B/`$n)^!+=N/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P?B/`$n)^!+=N/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Sv");
      assertEquals("short", string0);
      
      String string1 = Utility.replace("'", "YCS", "YCS");
      assertEquals("'", string1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("MYs~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MYs~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pk<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pk<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("K", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature("+<uiHrd*Mu=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <uiHrd*Mu=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P'tn{_@Dbbi2:Rcc9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'tn{_@Dbbi2:Rcc9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("UuEO^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UuEO^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.compactClassName("\"RV,0)%d/r", "", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Yn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "(<83";
      boolean boolean0 = true;
      Utility.compactClassName("(<83", "(<83", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("Invalid method signature: ", "Invalid method signature: ", true);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      String string0 = Utility.getSignature("!XfZ%U14A);|5Q");
      assertEquals("L!XfZ%U14A);|5Q;", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = Utility.compactClassName("Invalid method signature: ", "Invalid method signature: ", true);
      assertEquals("", string0);
      
      String string1 = Utility.signatureToString("Invalid method signature: ", true);
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Utility.compactClassName("G{m5{3C%S4PreR*0", "L:Gj-!T9KAkpK}/;V", true);
      String string0 = Utility.signatureToString("L:Gj-!T9KAkpK}/;V", false);
      assertEquals(":Gj-!T9KAkpK}.", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Utility.compactClassName("(3");
      Utility.isSet((-2417), (-2417));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-100);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3600, (int) (byte)49);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Utility.compactClassName("G{m5{3C%S4PreR*0");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)100;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(14, (byte)100);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)123, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Utility.compactClassName("&D:z|exL", "address", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("O:zoc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O:zoc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Hi3Y 0_rT1[R[Po/\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hi3Y 0_rT1[R[Po/\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.compactClassName("F");
      Utility.replace("F", "F", "{+W:.jW\"r&fN|GoQ=Z");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 68, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("(83", "(83", true);
      Utility.classOrInterface(219);
      int int0 = 256;
      Utility.isSet(256, 256);
      String string0 = "Rzn8GH8*}GA";
      String string1 = null;
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString("Rzn8GH8*}GA", (String) null, "char", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rzn8GH8*}GA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = Utility.compactClassName("Mn$0u[G=2,iz:v");
      assertEquals("Mn$0u[G=2,iz:v", string0);
      
      int int0 = Utility.clearBit(0, 14);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = Utility.compactClassName("Mn$0u[G=2,iz:v");
      assertEquals("Mn$0u[G=2,iz:v", string0);
      
      int int0 = Utility.clearBit((-2621), 191);
      assertEquals(2147481027, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.compactClassName("G{m5{3C%S4PreR*0", "8navauHOqi@", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G{m5{3C%S4PreR*0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G{m5{3C%S4PreR*0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "980");
      try { 
        Utility.typeOfSignature("980");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 980
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"hV,G)%O/r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"hV,G)%O/r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int int0 = Utility.clearBit(81, 81);
      assertEquals(81, int0);
      
      boolean boolean0 = Utility.isSet(0, 81);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid method signature: ");
      assertEquals("int", string0);
      
      String string1 = Utility.signatureToString("Clone Not Supported", true);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = Utility.compactClassName("]5;1X|$", "]5;1X|$", false);
      assertEquals("]5;1X|$", string0);
      
      String string1 = Utility.classOrInterface(0);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("null, null, null, null, null", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = Utility.compactClassName("|nV2+6m9", "(<83", true);
      Utility.clearBit(55, 55);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Utility.replace("pa2ps'+ZNCDk~AP2m", "pa2ps'+ZNCDk~AP2m", "xL#2=k]Xq6.rvA:|");
      try { 
        Utility.typeOfSignature("&oRr-[8f2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &oRr-[8f2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.replace("<illegal opcode>", "\r", "");
      try { 
        Utility.methodSignatureToString("<illegal opcode>", "XBjEb*.ugC,_,", "", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Utility.replace("nop", "nop", "goto3_w");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".Fh]XT6]", "|YhD&Mv", "ior");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .Fh]XT6]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "Zlub<";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(<83", ")^ $+<-h6W0I!", ";=s\"`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<83'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("void");
      assertEquals("V", string0);
      
      String string1 = Utility.replace("3Lq3ju*`rxg=9<ITs[", "V", "void");
      assertEquals("3Lq3ju*`rxg=9<ITs[", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3Lq3ju*`rxg=9<ITs[");
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)0;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$dc$eb$Ha$aa$7c$ce$A", string2);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("$fR!eQOF?", stringArray0);
      assertEquals("()L$fR!eQOF?;", string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.accessToString((-141));
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "public private final synchronized volatile native interface abstract strictfp synthetic annotation enum";
      stringArray0[3] = "astore";
      stringArray0[4] = "bytes must not be null!";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.compactClassName("=_Z^LpD4{");
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-1208));
      constantArray0[0] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1208), 90);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(<83", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<83'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string0 = Utility.getSignature("vod");
      assertEquals("Lvod;", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      Utility.getSignature("void");
      try { 
        Utility.methodSignatureToString("", "?H}", "V", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Integer integer0 = new Integer((-2728));
      String string0 = Utility.getSignature("float");
      assertEquals("F", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Integer integer0 = new Integer(90);
      String string0 = "D";
      boolean boolean0 = true;
      Utility.signatureToString("D", true);
      Utility.isJavaIdentifierPart('o');
      // Undeclared exception!
      Utility.format((-1837), 32767, true, 'M');
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Integer integer0 = new Integer((-2747));
      String string0 = Utility.getSignature("ifnull");
      assertEquals("Lifnull;", string0);
      
      byte byte0 = Utility.typeOfSignature("ZZ@:FgO!w5 ");
      assertEquals((byte)4, byte0);
      
      String string1 = Utility.signatureToString("Lifnull;");
      assertEquals("ifnull", string1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Integer integer0 = new Integer((-2747));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "ineg", "getstatic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Utility.signatureToString("J(v");
      Utility.convertString("long");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("char", "long", ", locals={", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Integer integer0 = new Integer(149);
      String string0 = Utility.getSignature("void");
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$0}");
      int int0 = 1995;
      String string0 = Utility.format(1995, 1995, true, '_');
      Utility.methodTypeToSignature(string0, (String[]) null);
      int int1 = 2410;
      Utility.accessToString(2410);
      Utility.accessToString(2410);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Utility.accessToString(20);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("Byte code error: ", false);
      assertEquals("Byte code error: ", string0);
      
      String string1 = Utility.methodSignatureReturnType("Byte code error: ", true);
      assertEquals("byte", string1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Integer integer0 = new Integer(90);
      Utility.format(90, 90, false, '*');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) "****************************************************************************************90";
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) integer0;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      boolean boolean1 = Utility.isJavaIdentifierPart('z');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Integer integer0 = new Integer(79);
      Utility.accessToString(79);
      try { 
        Utility.methodSignatureToString("T!0b<`Pg;H", "Invalid method signature: ", "java.lang.K0 ww", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T!0b<`Pg;H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      int int0 = (-1142);
      try { 
        Utility.typeOfSignature(";?x=?I[$1Ub`;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;?x=?I[$1Ub`;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid method signature: ");
      assertEquals("LInvalid;", string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
      
      String string1 = Utility.methodSignatureReturnType("LInvalid;");
      assertEquals("Invalid", string1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = Utility.getSignature("Fok+xgb+ JD~Q*R");
      assertEquals("LFok+xgb+;", string0);
      
      String string1 = Utility.signatureToString("Fok+xgb+ JD~Q*R", true);
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "=K";
      try { 
        Utility.typeOfSignature("=K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Utility.format(4463, 4463, true, 'Y');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-123);
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte) (-123), true);
      Utility.classOrInterface((byte)47);
      Utility.encode(byteArray0, true);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      Constant[] constantArray0 = new Constant[5];
      int int0 = 4934;
      int int1 = 1828;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Byte code error: ", "ifnull");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ifnull\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Utility.convertString("\r");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\r");
      Utility.format(1370, 1370, false, '`');
      String string0 = "aMu?=F|bZ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\\r", "aMu?=F|bZ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // aMu?=F|bZ
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_MethodHandle");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.fillup("7~h/rJO!^", 9, false, ']');
      assertEquals("7~h/rJO!^", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = "Wg3HecW";
      Utility.replace("Wg3HecW", "WySQ9,", "Wg3HecW");
      Utility.accessToString((-3305));
      String string1 = "muO1v>8~&cb,;OK+K";
      String string2 = "short";
      Utility.replace("muO1v>8~&cb,;OK+K", "short", "7gTOH$Hq%?-");
      Utility.clearBit((-1884673189), (-1805910661));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)119;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean1 = true;
      String string3 = "#>ugk(&[R2S88 ";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "#>ugk(&[R2S88 ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // #>ugk(&[R2S88 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("F?K@N~@(UfE9");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.getSignature("F?K@N~@(UfE9");
      assertEquals("LF?K@N~@(UfE9;", string0);
      
      int int0 = Utility.clearBit(80, (-46));
      assertEquals(80, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("06 06 06 06 06", string1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TYrQp!I6}BeS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TYrQp!I6}BeS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_MethodHandle");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0, true, true);
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-106);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("O_Z^LpD4{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O_Z^LpD4{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":7U");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-1439196745);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":7U");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      int int1 = 12;
      try { 
        mockFileOutputStream0.write(byteArray0, 12, 12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "athrow");
      Utility.accessToString(2529);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "athrow";
      Utility.methodTypeToSignature("", stringArray0);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("ifnonnull", 1585, true, 'y');
      Utility.isJavaIdentifierPart('y');
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("T;%(!o7#+FB/`");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace(")=2zYgmMVRk9", "9[SM1u@w(_spS", "9[SM1u@w(_spS");
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("O_Z^LpD4{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O_Z^LpD4{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = ", npairs = ";
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      try { 
        Utility.typeOfMethodSignature("InL~Fq-sx)xM./ s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: InL~Fq-sx)xM./ s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<Ll~+%&#x00$NNX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Ll~+%&#x00$NNX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("(5v4-j:<q$f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (5v4-j:<q$f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      String string0 = "SourceFile: ";
      Utility.typeOfSignature("SourceFile: ");
      String string1 = "6i:h)H1W~u";
      try { 
        Utility.typeOfSignature("6i:h)H1W~u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6i:h)H1W~u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("YT'*?6odl4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YT'*?6odl4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "lkTzgyE>qJ/x/Q <|)";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Utility.isJavaIdentifierPart('M');
      try { 
        Utility.typeOfSignature("W3-J=L%:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W3-J=L%:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("VKf'|vt' ;FK:");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)72;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)21;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("", "[ bU*nf1|7:2NW", true);
      boolean boolean0 = true;
      Utility.compactClassName("P,x#7)\"o*_FI", true);
      Utility.isSet(76, 68);
      Utility.getSignature("K");
      int int0 = (-477);
      Utility.setBit((-477), 36);
      // Undeclared exception!
      try { 
        Utility.signatureToString("QV(k%4xE4%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QV(k%4xE4%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("W3-J=L%:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W3-J=L%:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      int int0 = Utility.setBit(48, 48);
      assertEquals(65584, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)119;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      try { 
        Utility.methodSignatureReturnType("X3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.compactClassName(", npairs = ");
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Utility.isJavaIdentifierPart('7');
      try { 
        Utility.typeOfSignature("3dw`\"ab^-!-]k|0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3dw`\"ab^-!-]k|0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Utility.searchOpcode("ifnonnull");
      String string0 = Utility.format(73, 2905, true, 'w');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature(")g<iD 2=:t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )g<iD 2=:t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("VKf'|vt' ;FK:");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Utility$JavaWriter", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$JavaWriter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureReturnType("athrow", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      try { 
        Utility.typeOfSignature("MMo$Z3[K7G'F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MMo$Z3[K7G'F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      // Undeclared exception!
      try { 
        Utility.signatureToString("OB&+L}uO(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OB&+L}uO('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Utility.typeOfSignature("[']9uXF2{(~=*E");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "[']9uXF2{(~=*E";
      objectArray0[1] = (Object) "[']9uXF2{(~=*E";
      objectArray0[2] = (Object) "[']9uXF2{(~=*E";
      objectArray0[3] = (Object) "[']9uXF2{(~=*E";
      objectArray0[4] = (Object) "[']9uXF2{(~=*E";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType("RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('N');
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("Dg+?A*G;=I5-'3~a$", false);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      int int0 = Utility.clearBit(69, 79);
      assertEquals(69, int0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, false);
      String string0 = Utility.convertString("ENpFvEfl)6/bi~s");
      assertEquals("ENpFvEfl)6/bi~s", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = Utility.compactClassName("multianewarray");
      assertEquals("multianewarray", string0);
      
      String string1 = Utility.classOrInterface((-40));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("Ziu1CgD3+46_B)&o");
      String string0 = Utility.signatureToString("Ziu1CgD3+46_B)&o", false);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      short short0 = Utility.searchOpcode("o=iV");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = Utility.convertString("&CfK*SW%VPB\"af:m1\"");
      assertEquals("&CfK*SW%VPB\\\"af:m1\\\"", string0);
      
      boolean boolean0 = Utility.isSet((-1218), (-4556));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("38", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = Utility.convertString("multianewarray");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "multianewarray";
      objectArray0[2] = (Object) "multianewarray";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      int int0 = (-2949);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.fillup("wide", (-2949), true, '\"');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("wide", "|+i~8<dURd~fhlpx@oR", ";6+t_\"_y0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal opcode>");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string0 = "org.apache.bcel.classfile.ExceptionTable";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.ExceptionTable", "org.apache.bcel.classfile.ExceptionTable", "org.apache.bcel.classfile.ExceptionTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.ExceptionTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 68, 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int int0 = new Integer(2206);
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.compactClassName("? super ");
      try { 
        Utility.methodSignatureReturnType("0}&Q7Px)xi`nbx;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xi`nbx;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@L>Iem+d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @L>Iem+d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Utility.typeOfSignature("D:9w");
      Utility.format(72, 8, true, '5');
      Utility.signatureToString("D:9w", true);
      try { 
        Utility.typeOfSignature("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5c'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Utility.isJavaIdentifierPart('!');
      String string0 = "UuEO^";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[{tkyFT}I2**1h'-", "CodeException(start_pc = ", "UuEO^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [{tkyFT}I2**1h'-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = Utility.compactClassName(";", "drem", true);
      assertEquals(";", string0);
      
      int int0 = Utility.setBit((-426), (-1634));
      assertEquals((-426), int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = "36";
      Utility.compactClassName("36");
      try { 
        Utility.methodSignatureReturnType("LrE`Q~YTSx@@9-z&G1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LrE`Q~YTSx@@9-z&G1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "I}mmvalid me";
      Utility.signatureToString("I}mmvalid me");
      try { 
        Utility.methodSignatureReturnType("QL@%Gdkdk,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QL@%Gdkdk,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Utility.convertString("java.lang.");
      Utility.compactClassName("java.lang.", true);
      Utility.isSet((-2998), (-1012));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("boolean", "(name_index = ", "java.lang.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid");
      assertEquals("int", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Invalid";
      objectArray0[1] = (Object) "int";
      objectArray0[2] = (Object) "int";
      objectArray0[3] = (Object) "int";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[4] = (Object) "Invalid";
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{Invalid, int, int, int, Invalid}", string1);
      
      String string2 = Utility.replace("", "Invalid", "int");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      int int0 = Utility.clearBit((-418), 1060);
      assertEquals((-434), int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("#|2d{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #|2d{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = Utility.signatureToString("I}mmvalid me");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Utility.accessToString(8);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (-624), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-rauFUop~8Rc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -rauFUop~8Rc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        Utility.typeOfSignature("YT'*?6odl4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YT'*?6odl4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = Utility.replace("$46(", "$46(", "$46(");
      assertEquals("$46(", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = Utility.accessToString((-3884));
      assertEquals("protected final volatile transient synthetic annotation enum", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.lshr");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "protected final volatile transient synthetic annotation enum");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "protected final volatile transient synthetic annotation enum";
      objectArray0[1] = (Object) "java.lang.lshr";
      Utility.printArray(printStream0, objectArray0);
      String string1 = Utility.compactClassName("`G_t3sV+Mrz", "", true);
      assertEquals("`G_t3sV+Mrz", string1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("_cRU9Jj \"wx");
      assertEquals("L_cRU9Jj;", string0);
      
      String string1 = Utility.format((-405223456), (-405223456), true, ']');
      assertEquals("-405223456", string1);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.compactClassName("Invaid method signature: ", true);
      Utility.accessToString((-275));
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)123;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2a a1 c8 a9 4f f4 d6 7b", string0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte) (-56);
      String string1 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) "p";
      objectArray0[1] = (Object) "p";
      objectArray0[2] = (Object) "Only element values of type array can be built with this etor - type specified: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: Padding byte != 0 in ");
      objectArray0[3] = (Object) "Only element values of type array can be built with this etor - type specified: ";
      objectArray0[4] = (Object) "\"";
      objectArray0[5] = (Object) "Only element values of type array can be built with this etor - type specified: ";
      try { 
        Utility.typeOfSignature("6P8be");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6P8be
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8Ot[qI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8Ot[qI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = Utility.getSignature("$z6");
      assertEquals("L$z6;", string0);
      
      byte byte0 = Utility.typeOfSignature("L$z6;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("yL[i?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[i?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)4;
      objectArray0[1] = (Object) (byte)4;
      objectArray0[2] = (Object) (byte)4;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("4, 4, 4", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-29);
      int int0 = Utility.clearBit(1226, (byte) (-29));
      assertEquals(1218, int0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleParameterAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.replace("$z6", "$z6", "$z6");
      try { 
        Utility.typeOfSignature("$z6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $z6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte) (-29), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G@!(5R7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G@!(5R7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("%F|%b\u0007yr=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %F|%b\u0007yr=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iB#U:x~IGVm{@/E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iB#U:x~IGVm{@/E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.replace("q8GxHxKA v]", "QL@%Gdkdk,tkeN+E", "q8GxHxKA v]");
      Utility.compactClassName("QL@%Gdkdk,tkeN+E", true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid method signature: ");
      String string1 = Utility.convertString("LInvalid;");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("nG^Pi6*", false);
      assertEquals("nG^Pi6*", string2);
      
      boolean boolean0 = Utility.isSet(1924, (-1012));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.compactClassName("$z6", false);
      String string0 = "\"STlb(:]TZ";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"STlb(:]TZ", "~CeS6p?kXC@{Esk(%S^", "ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"STlb(:]TZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = Utility.convertString("'");
      assertEquals("\\'", string0);
      
      String string1 = Utility.compactClassName("", true);
      assertEquals("", string1);
      
      boolean boolean0 = Utility.isSet(13, (-839));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Utility.getSignature("$z6");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M4$B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M4$B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = "4.)2+U#2$C\"#P:";
      try { 
        Utility.typeOfSignature("4.)2+U#2$C\"#P:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4.)2+U#2$C\"#P:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("FR.", false);
      assertArrayEquals(new byte[] {(byte)70, (byte)82, (byte)46}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-29);
      try { 
        Utility.typeOfSignature(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = Utility.getSignature("putfield");
      assertEquals("Lputfield;", string0);
      
      String string1 = Utility.convertString("$z6");
      assertEquals("$z6", string1);
      
      String string2 = Utility.compactClassName("UuEO^", false);
      assertEquals("UuEO^", string2);
      
      boolean boolean0 = Utility.isSet((-839), (-839));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = Utility.convertString("gotow");
      assertEquals("gotow", string0);
      
      boolean boolean0 = Utility.isSet((byte)2, 1245);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-29);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)4;
      objectArray0[1] = (Object) (byte) (-29);
      objectArray0[2] = (Object) (byte)4;
      objectArray0[3] = (Object) (byte)4;
      objectArray0[4] = (Object) (byte)4;
      objectArray0[6] = (Object) (byte) (-29);
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{4, -29, 4, 4, 4, null, -29}", string0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = Utility.replace("Only element values of type array can be built with this ctor - type specified: ", "p", "\"");
      assertEquals("Only element values of ty\"e array can be built with this ctor - ty\"e s\"ecified: ", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String[] stringArray0 = new String[0];
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BJ";
      stringArray0[1] = "BJ";
      String string0 = Utility.methodTypeToSignature("UuEO^", stringArray0);
      assertEquals("(LBJ;LBJ;)LUuEO^;", string0);
      
      String string1 = Utility.classOrInterface((byte)83);
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("short", false);
      assertEquals("short", string2);
      
      String string3 = Utility.format((byte)49, (byte)83, false, 'U');
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU49", string3);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.searchOpcode("RuntimeVisibleAnnotations");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)8;
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-50);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isSet((byte) (-50), 78);
      // Undeclared exception!
      try { 
        Utility.signatureToString("runtimevisibleannotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `runtimevisibleannotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = Utility.accessToString(302);
      assertEquals("private protected static synchronized native", string0);
      
      int int0 = Utility.clearBit(302, 46);
      assertEquals(302, int0);
      
      Utility.compactClassName(")", "acgWgAF&|5-b", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "private protected static synchronized native";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      String string1 = Utility.accessToString((int) (byte)122, false);
      assertEquals("private static final synchronized volatile", string1);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("YJDkM{D#+3:ocI.", "", "YJDkM{D#+3:ocI.");
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-29);
      try { 
        Utility.typeOfSignature("%F|%b\u0007yr=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %F|%b\u0007yr=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("dup2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte byte0 = (byte)4;
      String string0 = "";
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-29);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)4;
      objectArray0[1] = (Object) (byte) (-29);
      objectArray0[2] = (Object) (byte)4;
      objectArray0[3] = (Object) (byte)4;
      objectArray0[4] = (Object) (byte)4;
      objectArray0[5] = (Object) (byte) (-29);
      objectArray0[6] = (Object) (byte) (-29);
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{4, -29, 4, 4, 4, -29, -29}", string0);
      assertNotNull(string0);
      
      String string1 = Utility.format((byte) (-29), (byte)4, true, '#');
      assertEquals("-29#", string1);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      int int0 = Utility.setBit(32767, 122);
      assertEquals(67141631, int0);
      
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      String string1 = Utility.compactClassName("8?g00gs3z}D");
      assertEquals("8?g00gs3z}D", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)3;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("86 00 49 2d 00 d6 00 00 03", string2);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.isJavaIdentifierPart(']');
      String string0 = null;
      String string1 = "}7|QTS \\O?DKDJ#/";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, "}7|QTS O?DKDJ#/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = "float";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("float", "float", "8I>Z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      try { 
        Utility.decode("\t<", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".zip", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .zip
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.accessToString(302);
      Utility.clearBit(302, 46);
      Utility.compactClassName(")", "acgWgAF&|5-b", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "private protected static synchronized native";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.setBit((-675), 0);
      String string0 = "org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations", "org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.bcel.classfile.RuntimeVisibleParameterAnnotations
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) pipedOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.accessToString(6, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("private protected", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private protected'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.getSignature("");
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "\"sEcLLi p47t", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      int int0 = 2284;
      Utility.classOrInterface(2284);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.compactClassName("Invalid method signature: ", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid method signature: ", "Invalid method signature: ", "Invalid method signature: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      boolean boolean0 = false;
      char char0 = '7';
      Utility.fillup("Q", 171, false, '7');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(171);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777Q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = "(xdkJm['wy3.MWv";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Q";
      Object object0 = new Object();
      objectArray0[1] = object0;
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      // Undeclared exception!
      try { 
        charArrayWriter0.write(charArray0, 0, 171);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.replace("zIUXawl7 \u0007gd2A0dH=", "5v=4:K],74SJiEHiujs", "zIUXawl7 \u0007gd2A0dH=");
      int int0 = 0;
      Utility.format(0, 0, true, 's');
      try { 
        Utility.methodSignatureReturnType("5v=4:K],74SJiEHiujs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5v=4:K],74SJiEHiujs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("ym7#mY<UMh!0zXx", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ym7#mY<UMh!0zXx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("Illegally nested brackets:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Illegally nested brackets:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = "";
      Utility.convertString("");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = Utility.getSignature("$z6");
      assertEquals("L$z6;", string0);
      
      String string1 = Utility.convertString("nG^Pi6*");
      assertEquals("nG^Pi6*", string1);
      
      String string2 = Utility.compactClassName("", false);
      assertEquals("", string2);
      
      boolean boolean0 = Utility.isSet((-839), 60);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      Utility.decode("", false);
      boolean boolean0 = false;
      Utility.fillup("wBF?3", 91, false, 'v');
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.accessToString(182);
      Utility.getSignature("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byte byte0 = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-29);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-29), 20);
      assertEquals("0:    iconst_1\n1:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      Utility.fillup("jLgkB9", 91, true, '>');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-34);
      byte byte0 = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-52);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("jLgkB9>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "00 e9 30 de 90 20 cc", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Utility.getSignature("UuEO^");
      Utility.format(60, 60, false, ';');
      Utility.getSignature("BJ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)7;
      PipedInputStream pipedInputStream0 = new PipedInputStream(3186);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      Utility.searchOpcode("RuntimeVisibleAnnotations");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-117));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = "uG(K!";
      try { 
        Utility.typeOfMethodSignature("uG(K!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: uG(K!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      int int0 = (-707);
      Utility.classOrInterface((-707));
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = Utility.accessToString(250, true);
      assertEquals("private static final volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.isJavaIdentifierPart('S');
      try { 
        Utility.methodSignatureReturnType("xq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
