/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:49:41 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.IOException;
import java.io.PipedReader;
import java.io.StringReader;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.a-g.Point", 0);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanFloat('x');
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[7] = '/';
      jSONScanner0.matchField2(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'x';
      jSONScanner0.charArrayCompare(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 117);
      int int0 = jSONScanner0.scanType("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$=lQtfuv):$CSk/");
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONScanner0.scanStringArray(hashSet0, '&');
      StringReader stringReader0 = new StringReader("$=lQtfuv):$CSk/");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.getCalendar();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanLong('Q');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      int int0 = jSONScanner0.matchStat();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z");
      jSONReaderScanner0.intValue();
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, 'h');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("treeset", 1);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5{i8a''0JamY!K>MlwK");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H/m_e-w");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanIdent();
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("(;q4#x@;}");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanType("(;q4#x@;}");
      assertEquals(';', jSONScanner0.getCurrent());
      assertEquals((-2), int0);
      
      jSONScanner0.scanDouble('~');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("55J5RR");
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('{');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      jSONScanner0.stringDefaultValue = "java.a-g.Point";
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.a-g.Point", 0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      char char0 = 'Q';
      jSONReaderScanner0.scanLong('Q');
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2), 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("l|;L:nc )", 108);
      jSONScanner0.putChar(']');
      jSONScanner0.indexOf('a', 108);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.a-g.Point", 0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("w7^'>EAEbzZZ");
      jSONScanner0.stringDefaultValue();
      jSONScanner0.getCalendar();
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      jSONScanner0.features = 19;
      jSONScanner0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!;;~jNLzbC");
      JSONScanner jSONScanner0 = new JSONScanner("!;;~jNLzbC");
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      int int0 = jSONScanner0.scanType("!;;~jNLzbC");
      assertEquals((-2), int0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("(;q4#x@;}");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.scanType("(;q4#x@;}");
      jSONScanner0.scanDouble('~');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}2jLwL^K6j4Ns;v", 5022);
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'A';
      charArray0[2] = '5';
      charArray0[3] = '%';
      charArray0[4] = '9';
      charArray0[5] = '6';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanType("WRITE_MAP_NULL_FEATURES");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}2jLwL^K6j4Ns;v");
      char[] charArray1 = new char[8];
      charArray1[0] = 'I';
      charArray1[1] = 'p';
      charArray1[2] = 'g';
      charArray1[3] = '.';
      charArray1[4] = 'I';
      charArray1[5] = 'c';
      charArray1[6] = 'z';
      charArray1[7] = 't';
      jSONReaderScanner0.scanFieldFloatArray2(charArray1);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("s)IIu");
      jSONScanner0.scanString('R');
      JSONScanner jSONScanner1 = new JSONScanner("+lB$G");
      jSONScanner1.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 0, json : s)IIu
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str");
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("//(4=_=B0]HcG(R23");
      jSONReaderScanner0.nextToken();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      jSONScanner0.scanNumber();
      long long0 = jSONScanner0.longValue();
      assertEquals(2, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("94[SfUVm?", (-795));
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'U';
      charArray0[2] = '*';
      charArray0[3] = 'H';
      charArray0[4] = 'P';
      charArray0[5] = '(';
      charArray0[6] = 'U';
      jSONReaderScanner0.nextIdent();
      charArray0[7] = '?';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-795), charArray0, 65, 212);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x|OG");
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = '@';
      charArray0[2] = 'f';
      charArray0[3] = '=';
      charArray0[4] = 'h';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. |
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WD0#wq.(q");
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - #, info : pos 3, json : WD0#wq.(q
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.a-g.Point", 0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.close();
      jSONScanner0.longValue();
      jSONScanner0.charAt(1560);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. j
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '~';
      charArray0[2] = 'u';
      charArray0[3] = '>';
      charArray0[4] = 's';
      charArray0[5] = '=';
      charArray0[6] = 'a';
      charArray0[7] = 's';
      charArray0[8] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 371, 371);
      jSONReaderScanner0.close();
      assertEquals(371, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.np = 0;
      jSONScanner0.scanBoolean('}');
      jSONScanner0.putChar('X');
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      
      jSONScanner0.getCalendar();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]d:p$_1zzCj", 57);
      jSONScanner0.close();
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]d:p$_1zzCj");
      jSONReaderScanner0.stringVal();
      jSONScanner0.bytesValue();
      assertEquals(15, jSONScanner0.token());
      
      jSONReaderScanner0.isEnabled((-1467667144), 20);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("RHy[r7>2-Kkb<");
      jSONReaderScanner0.features = 114;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(114, (-468));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -468
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 110);
      jSONScanner0.token = 110;
      jSONScanner0.isBlankInput();
      jSONScanner0.isEOF();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!lf0`IXLV`SD-JF[p-)");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.scanNumber();
      assertEquals('l', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '2';
      charArray0[2] = 'U';
      charArray0[3] = '4';
      charArray0[4] = 'E';
      charArray0[5] = 'J';
      charArray0[6] = '&';
      charArray0[7] = '7';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('4');
      jSONReaderScanner0.charAt(78);
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'I';
      charArray0[2] = 'X';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.scanUUID('Z');
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanLong('Z');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(2114);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanDate('S');
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.pos();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextToken(0);
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - a, info : pos 5, json : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5{i8a''0JamY!K>MlwK");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-33), "5{i8a''0JamY!K>MlwK");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 5, info : pos 0, json : 5{i8a''0JamY!K>MlwK
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.P$oint");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      boolean boolean0 = JSONLexerBase.isWhitespace('a');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("MapSortField");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@Wy r]LnZn+h<1R#s", 0);
      int[] intArray0 = JSONLexerBase.digits;
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'S';
      jSONReaderScanner0.scanDecimal('S');
      jSONReaderScanner0.scanDate('D');
      charArray0[2] = '@';
      charArray0[3] = 'R';
      charArray0[5] = '\u0000';
      charArray0[6] = '.';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, ']');
      int int0 = jSONScanner0.getFeatures();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("55455");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 'r';
      charArray0[2] = 's';
      charArray0[3] = '3';
      charArray0[4] = 'A';
      charArray0[5] = 'E';
      charArray0[6] = '!';
      charArray0[7] = 'o';
      charArray0[8] = 'y';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("Z", 68);
      jSONScanner0.indexOf('s', (-2));
      assertEquals(68, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5545RR");
      char[] charArray0 = new char[5];
      charArray0[1] = '&';
      charArray0[2] = '#';
      charArray0[3] = '1';
      charArray0[4] = 'r';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, (-409));
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('P');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match P - \u0000, info : pos 0, json : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-1681));
      jSONReaderScanner0.ch = 'U';
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      jSONReaderScanner0.nextIdent();
      charArray0[1] = 'J';
      charArray0[2] = '|';
      jSONReaderScanner0.scanFieldLong(charArray0);
      charArray0[3] = '1';
      charArray0[4] = '~';
      charArray0[5] = 'c';
      charArray0[6] = 'f';
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1681), (-1681));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = 52;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52, 52);
      jSONReaderScanner0.scanInt(' ');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanInt('G');
      jSONScanner0.scanDouble('u');
      jSONScanner0.close();
      jSONScanner0.info();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('d');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(103);
      jSONScanner0.scanEnum(class0, symbolTable0, '2');
      jSONScanner0.scanFloat('2');
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("55J5RR");
      jSONScanner0.isRef();
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('{');
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'p';
      charArray0[2] = '{';
      charArray0[3] = '{';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new", 127);
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = '5';
      charArray0[2] = 'G';
      charArray0[3] = 'd';
      charArray0[4] = 'X';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      int int0 = jSONScanner0.matchStat();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = null;
      jSONScanner0.token = (-5869);
      jSONScanner0.token = (-915);
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$54Rd");
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Pat{9");
      Locale locale0 = jSONScanner0.getLocale();
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '#');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - P, info : pos 0, json : Pat{9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      Feature feature0 = Feature.InternFieldNames;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">reelet");
      jSONReaderScanner0.nextToken((-1591));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'X';
      charArray0[1] = '2';
      charArray0[2] = 'V';
      charArray0[3] = 'x';
      charArray0[4] = '@';
      charArray0[5] = 'U';
      charArray0[6] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1767, 255);
      JSONScanner jSONScanner0 = new JSONScanner("null", (-75));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken();
      jSONScanner0.scanString('?');
      jSONScanner0.scanType("unclosed.str.lit");
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'i';
      charArray0[2] = '(';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFloat(']');
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("(;q4#x@;}");
      jSONScanner0.scanType("error parse new");
      boolean boolean0 = JSONLexerBase.isWhitespace('i');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = ',';
      charArray0[2] = 'b';
      charArray0[3] = '*';
      charArray0[4] = 'X';
      charArray0[5] = 'B';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 7, 4);
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.isEnabled(feature0);
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("(<j4@hilgg@", 2127);
      char[] charArray1 = new char[4];
      charArray1[0] = 'X';
      charArray1[1] = 'b';
      charArray1[2] = 'h';
      charArray1[3] = '*';
      jSONScanner1.matchField(charArray1);
      jSONScanner0.scanUUID('i');
      assertEquals(4, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")`");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getCalendar();
      assertEquals('`', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ed", 66);
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'S';
      charArray0[2] = '}';
      charArray0[3] = '/';
      charArray0[4] = 'k';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      MockCalendar.getInstance();
      SymbolTable symbolTable0 = new SymbolTable(88);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("lMx4\"ZF[9b9-@,;R");
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7");
      jSONScanner0.next();
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 2, json : 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" -wi<k$%EORu", 3392903);
      jSONReaderScanner0.scanInt('T');
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '[';
      charArray0[2] = '#';
      charArray0[3] = 'A';
      charArray0[4] = '\'';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 3678080);
      jSONReaderScanner1.scanUUID('D');
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("w7^'>EAEbzZZ");
      jSONScanner0.stringDefaultValue();
      jSONScanner0.getCalendar();
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      jSONScanner0.features = 19;
      jSONScanner0.setLocale(locale0);
      Feature feature0 = Feature.SupportNonPublicField;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = 'x';
      charArray1[1] = 'x';
      charArray1[2] = 'x';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray1, 118, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(;q4#x@;}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5qK>kG$gYf");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      char char0 = 's';
      charArray0[1] = 's';
      charArray0[2] = '!';
      charArray0[3] = '\'';
      charArray0[4] = '_';
      char char1 = '2';
      charArray0[5] = '2';
      charArray0[6] = 'F';
      char char2 = 'P';
      charArray0[7] = 'P';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 22);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", 39);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'n';
      charArray0[2] = 'C';
      charArray0[3] = '$';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(39, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      Feature feature0 = Feature.InternFieldNames;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanUUID('x');
      assertEquals(11, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("d3h]]`%Nn'aK8pwO5D", 65536);
      jSONScanner0.nextToken();
      jSONScanner0.scanType("d3h]]`%Nn'aK8pwO5D");
      jSONScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(93, (-2), 2484, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      int int0 = jSONScanner0.scanType((String) null);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String string0 = "z";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("z", 127);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("error parse new");
      String string0 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals("error", string0);
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("55555R");
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = '0';
      charArray0[2] = '`';
      charArray0[3] = '/';
      charArray0[4] = '7';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.intValue();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'5MO");
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(Integer.MIN_VALUE);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "";
      int int0 = 893;
      JSONScanner jSONScanner0 = new JSONScanner("", 893);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!lf0`IXLV`SD-JF[p-)");
      jSONScanner0.nextToken(1078);
      jSONScanner0.scanType("!lf0`IXLV`SD-JF[p-)");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken();
      int int0 = JSONLexer.OBJECT;
      Feature feature0 = Feature.AutoCloseSource;
      jSONScanner0.config(feature0, false);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-");
      jSONScanner0.scanInt('w');
      jSONScanner0.scanIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      jSONScanner0.scanType(",");
      jSONScanner0.scanInt('8');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3-");
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanType("unclosed.str.lit");
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanUUID('A');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = ':';
      charArray0[2] = 'f';
      int int0 = 48;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("55455", 78);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('4');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(;U)o", 87);
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '(';
      charArray0[2] = '{';
      charArray0[3] = '[';
      charArray0[4] = 'D';
      charArray0[5] = '3';
      charArray0[6] = 'J';
      charArray0[7] = 'N';
      charArray0[8] = '5';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanDate('F');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.putChar('d');
      jSONReaderScanner0.token = (-2601);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit");
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('z');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      jSONReaderScanner0.scanDecimal('4');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      jSONScanner0.bp = 149;
      jSONScanner0.close();
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("//(4=_=B0]HcG(R23");
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5545rr");
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!lf0`IXLV`SD-JF[p-)");
      jSONReaderScanner0.scanLong('!');
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = '+';
      charArray0[2] = '/';
      charArray0[3] = 'T';
      char char0 = 'P';
      charArray0[4] = 'P';
      charArray0[5] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51, 51);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      char[] charArray0 = new char[2];
      charArray0[1] = 't';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('I');
      double double0 = jSONReaderScanner0.scanDouble('6');
      assertEquals(0.0, double0, 0.01);
      
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '6');
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$7c`lobf7", 84);
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      
      float float0 = jSONReaderScanner0.scanFloat('[');
      assertEquals(84, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", (-832));
      jSONScanner0.matchField2(charArray0);
      assertEquals((-832), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("W=Mk~Z6BiQo");
      JSONScanner jSONScanner1 = new JSONScanner("xk", 125);
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. k
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '|';
      charArray0[1] = 'g';
      charArray0[2] = 'K';
      charArray0[3] = '+';
      charArray0[4] = 'F';
      charArray0[5] = 'W';
      charArray0[6] = 'z';
      charArray0[7] = 'a';
      charArray0[8] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('$');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match $ - |, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-+Oh+#>cC!cuHc");
      JSONScanner jSONScanner1 = new JSONScanner("-+Oh+#>cC!cuHc");
      jSONScanner1.nextToken();
      assertEquals('+', jSONScanner1.getCurrent());
      
      int int0 = jSONScanner0.scanType("j77I(Eqpv$m.p`,NF?");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '4';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = 'R';
      charArray0[6] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114, (-3536));
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanIdent();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      int int0 = jSONScanner0.token();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3Z^<|@nO4KCvv\"Ac>(");
      jSONScanner0.scanFloat('k');
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 2842);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      jSONScanner0.scanFloat('2');
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 66);
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = '-';
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner(">reeLet");
      // Undeclared exception!
      try { 
        jSONScanner0.charArrayCompare((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5{i8a''0JamY!K>MlwK");
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = 'M';
      charArray0[2] = 'O';
      charArray0[3] = 'Y';
      charArray0[4] = 'f';
      jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanType("5{i8a''0JamY!K>MlwK");
      jSONScanner0.scanDecimal('-');
      jSONScanner0.info();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("K6");
      SymbolTable symbolTable0 = new SymbolTable(127);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '\\');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",", 102);
      jSONScanner0.scanString('3');
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : pos 0, json : ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.a-g.Point");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('$');
      boolean boolean0 = jSONReaderScanner0.isEnabled(0);
      boolean boolean1 = JSONLexerBase.isWhitespace('Q');
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '|';
      charArray0[2] = 'B';
      jSONScanner0.charArrayCompare(charArray0);
      int int0 = jSONScanner0.scanType("");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-2), int0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(;q4#x@;}");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getCalendar();
      int int0 = jSONReaderScanner0.scanInt('r');
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F(&:[E%v", 999);
      jSONScanner0.matchStat();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = ' ';
      charArray0[2] = '7';
      charArray0[3] = 'Z';
      charArray0[4] = ',';
      charArray0[5] = 'n';
      charArray0[6] = 'O';
      charArray0[7] = 'h';
      charArray0[8] = '[';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      jSONReaderScanner0.scanDate('L');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.tokenName();
      JSONScanner jSONScanner0 = new JSONScanner("Unknown", 19);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanLong('L');
      assertEquals(19, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">reelet");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanType("");
      jSONScanner0.scanFloat('$');
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")`", 57);
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONScanner0.token();
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-673));
      jSONScanner0.scanUUID('_');
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.pos();
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5qK>kG$gYf");
      jSONReaderScanner0.nextToken();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '4';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      jSONReaderScanner0.scanStringArray(list0, 'f');
      jSONReaderScanner0.charAt(396);
      jSONReaderScanner0.isEnabled(2399, 3280);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("CEwO#F,L>* ;;]8e", 4096);
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.charAt(32);
      long long0 = jSONScanner0.longValue();
      assertEquals(4096, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      // Undeclared exception!
      try { 
        jSONScanner0.isEnabled((Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      jSONReaderScanner0.features = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "h[DX";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("h[DX");
      char char0 = '&';
      jSONReaderScanner0.putChar('&');
      jSONReaderScanner0.bp = (-367);
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.integerValue();
      int int0 = (-602);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - h, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      jSONScanner0.sp = 1452;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.matchField(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!(@pTlPE");
      jSONReaderScanner0.stringVal();
      jSONScanner0.bytesValue();
      assertEquals((-2), jSONScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(2, 441);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("int");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 45);
      jSONReaderScanner0.nextToken(10);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanType("java.awt.Point");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'z';
      charArray0[2] = 'Y';
      charArray0[3] = '9';
      charArray0[4] = '[';
      charArray0[5] = 'a';
      charArray0[6] = '7';
      charArray0[7] = '9';
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanType(", ");
      long long0 = jSONScanner0.longValue();
      assertEquals(16, jSONScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanDate('S');
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.pos();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.nextToken(0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('a', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("float overflow : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IgnoreErrorGetter", 12);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('\"');
      assertFalse(boolean0);
      
      jSONReaderScanner0.indexOf('\"', 116);
      assertEquals(12, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDecimal('@');
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse true");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.intValue();
      char[] charArray1 = new char[5];
      charArray1[0] = 'Z';
      charArray1[1] = '/';
      charArray1[2] = ']';
      charArray1[3] = 'W';
      charArray1[4] = ' ';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.sp = 512;
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('{');
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      jSONScanner0.matchField2(charArray0);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(;q4#x@;}");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.isEnabled(1674, 45);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.SerializeConfig");
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) null;
      jSONScanner0.lexError((String) null, objectArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5qK>kG$gYf");
      char char0 = 'V';
      jSONReaderScanner0.scanInt('V');
      char char1 = '$';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('$');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 119);
      JSONScanner jSONScanner1 = new JSONScanner("false");
      // Undeclared exception!
      try { 
        jSONScanner1.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#Srz@T9n}");
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.token();
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'x';
      charArray0[2] = '';
      charArray0[3] = 'n';
      charArray0[4] = 'y';
      charArray0[5] = '0';
      charArray0[6] = '`';
      charArray0[7] = ';';
      charArray0[8] = '$';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals('S', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!(@pTlPE");
      jSONReaderScanner0.stringVal();
      jSONScanner0.bytesValue();
      assertEquals(1, jSONScanner0.token());
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-2517), (-278));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('{');
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '4';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = 'R';
      charArray0[6] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114, (-3536));
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanIdent();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x|OG");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. |
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.longValue();
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = 'C';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldBoolean(charArray0);
      int int0 = jSONScanner0.scanType("java.awt.Point");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!lf0`IXLV`SD-JF[p-)");
      float float0 = jSONScanner0.scanFloat(']');
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils$1");
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.util.IOUtils$1", 9999);
      jSONScanner0.longValue();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      Feature feature0 = Feature.InternFieldNames;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = '.';
      jSONScanner0.nextToken(2036);
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanType(">reelet");
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1424), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 966);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(;q4x@;}");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('M');
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      SymbolTable symbolTable0 = new SymbolTable(51);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'M');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      jSONScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(69);
      jSONScanner0.scanSymbol(symbolTable0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'P';
      charArray0[2] = '!';
      charArray0[3] = '4';
      charArray0[4] = '=';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P", 40);
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = 'R';
      charArray0[2] = '1';
      charArray0[3] = 'v';
      charArray0[4] = 'I';
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextToken();
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      jSONScanner0.features = 1185;
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ',';
      charArray0[1] = ']';
      charArray0[2] = '?';
      charArray0[3] = 'F';
      charArray0[4] = ';';
      charArray0[5] = '3';
      charArray0[6] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2536, 115);
      jSONReaderScanner0.resetStringPosition();
      assertEquals(115, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58, 159);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, 'd');
      SymbolTable symbolTable0 = new SymbolTable(159);
      jSONReaderScanner0.addSymbol(159, 58, 4, symbolTable0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]d:p$_1zzCj", 57);
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanUUID('x');
      assertEquals('d', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("g=a[");
      jSONScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(698);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'Y');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!lf0`IXLV`SD-JF[p-)");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '*';
      charArray0[2] = 'M';
      charArray0[3] = 'f';
      charArray0[4] = 'l';
      charArray0[5] = 'g';
      charArray0[6] = '^';
      charArray0[7] = 'l';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'z';
      charArray0[1] = ',';
      charArray0[2] = 'b';
      charArray0[3] = '*';
      charArray0[4] = 'X';
      charArray0[5] = 'B';
      charArray0[6] = 'I';
      charArray0[7] = 'R';
      charArray0[8] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114, 114);
      char[] charArray1 = new char[7];
      charArray1[0] = 'R';
      charArray1[1] = '*';
      charArray1[2] = '*';
      charArray1[3] = '$';
      charArray1[4] = '*';
      charArray1[5] = ',';
      charArray1[6] = 'R';
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.scanIdent();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xt(rzZtEU:Y;!/f");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xt(rzZtEU:Y;!/f", 0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.close();
      jSONScanner0.longValue();
      jSONScanner0.charAt(1560);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new", 127);
      char[] charArray0 = new char[5];
      charArray0[2] = '+';
      charArray0[1] = '5';
      charArray0[2] = 'G';
      charArray0[1] = 'd';
      charArray0[4] = 'X';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      StringReader stringReader0 = new StringReader("error parse new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'Y');
      long long0 = jSONReaderScanner0.longValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      jSONScanner0.scanType(",");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",/4)^&s1|eR:_K*y!", (-198));
      jSONScanner0.scanUUID('_');
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-198), ",/4)^&s1|eR:_K*y!", (-1372), (-1372), (-198), (-1), (-1), (-1372), (-198), (-1372), (-3455), 37, (-1372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1372
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFloat('X');
      jSONReaderScanner0.newCollectionByType(class0);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"2i)\"[uHNS[");
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'q';
      jSONScanner0.charArrayCompare(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'q';
      charArray1[1] = 'q';
      charArray1[2] = 'q';
      charArray1[3] = '.';
      boolean boolean0 = jSONScanner0.matchField(charArray1);
      assertFalse(boolean0);
      
      jSONScanner0.charArrayCompare(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x|OG");
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'g';
      charArray0[3] = 'D';
      charArray0[4] = 'z';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'g');
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 3581);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TFSv orF? Lb(/");
      jSONScanner0.nextToken();
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = 'V';
      charArray0[2] = 'i';
      charArray0[3] = 't';
      charArray0[4] = '_';
      charArray0[5] = 'g';
      charArray0[6] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("I720(Xt!l");
      jSONScanner0.scanUUID('{');
      jSONScanner0.scanUUID('{');
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.scanUUID('{');
      jSONScanner0.scanInt('U');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("55555R");
      jSONScanner0.stringVal();
      boolean boolean0 = JSONLexerBase.isWhitespace('4');
      assertFalse(boolean0);
      
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.config(feature0, false);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+WD0#/wn.(q");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'Z';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.scanDecimal('6');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - W, info : pos 1, json : +WD0#/wn.(q
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new", 127);
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "error parse new";
      objectArray0[1] = (Object) '+';
      objectArray0[2] = (Object) '+';
      objectArray0[3] = (Object) jSONScanner0;
      objectArray0[4] = (Object) jSONScanner0;
      objectArray0[5] = (Object) '+';
      objectArray0[6] = (Object) '+';
      jSONScanner0.lexError("error parse new", objectArray0);
      charArray0[1] = '5';
      char char0 = 'G';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",");
      jSONReaderScanner0.scanDecimal('B');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.a-g.Point");
      jSONReaderScanner0.nextToken(0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals(1, jSONReaderScanner0.token());
      
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Point");
      jSONReaderScanner0.getCalendar();
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. j
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('x');
      assertEquals(989, jSONScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-3005));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - j, info : pos 0, json : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("", 1290);
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      jSONScanner0.scanFieldSymbol(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UNXQ~hv=ba|{>jU");
      jSONReaderScanner0.scanDate('I');
      try { 
        pipedReader0.mark(1290);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F(&:[E%v", 999);
      jSONScanner0.matchStat();
      char[] charArray0 = new char[9];
      char char0 = 'i';
      charArray0[0] = 'i';
      charArray0[1] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("55555R");
      char char0 = ' ';
      jSONScanner0.ch = ' ';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 5, info : pos 1, json : 55555R
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$7c`lobf7");
      jSONScanner0.scanBoolean('9');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - $, info : pos 0, json : $7c`lobf7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 58);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H/m_e-w");
      jSONScanner0.scanIdent();
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[3];
      char char0 = '`';
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("55555R");
      jSONScanner0.scanNumber();
      long long0 = jSONScanner0.longValue();
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(55555L, long0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zgQ#j74p=Vy");
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'Y';
      charArray0[2] = 'x';
      charArray0[3] = '1';
      SymbolTable symbolTable0 = new SymbolTable(239);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 558, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "aQMZF5uG";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("aQMZF5uG");
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 't';
      charArray0[2] = 'L';
      charArray0[3] = 'V';
      charArray0[4] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.getCalendar();
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",");
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = 'i';
      charArray0[2] = '7';
      charArray0[3] = 'R';
      charArray0[4] = '$';
      charArray0[5] = 'B';
      charArray0[6] = 'a';
      jSONReaderScanner0.scanDate('6');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~7eelt");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat(']');
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$7c`lobf7");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - $, info : pos 0, json : $7c`lobf7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'x';
      charArray0[2] = 'G';
      charArray0[3] = 'c';
      charArray0[4] = 'V';
      charArray0[5] = 'x';
      charArray0[6] = '0';
      charArray0[7] = 'R';
      charArray0[8] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 945, 945);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(945, jSONReaderScanner0.getFeatures());
      assertEquals('G', char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.charArrayCompare(charArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      char[] charArray0 = new char[2];
      charArray0[1] = 't';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('6');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}P!Rafb.,");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - P, info : pos 1, json : }P!Rafb.,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONScanner jSONScanner1 = new JSONScanner("new", 0);
      jSONScanner1.nextToken();
      assertEquals('\u001A', jSONScanner1.getCurrent());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '';
      charArray0[2] = 'o';
      charArray0[3] = '{';
      charArray0[4] = '^';
      charArray0[5] = 'I';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0);
      int int0 = jSONScanner2.scanType("new");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!lf0`IXLV`SD-JF[p-)");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanType("!lf0`IXLV`SD-JF[p-)");
      jSONScanner0.nextToken(2485);
      jSONScanner0.scanFloat(']');
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('7');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 7 - ,, info : pos 0, json : ,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-.Point");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.scanNullOrNew();
      jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(;q4#x@;}");
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(;q4#x@;}");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - (, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String string0 = "(;q4#x@;}";
      JSONScanner jSONScanner0 = new JSONScanner("(;q4#x@;}");
      SymbolTable symbolTable0 = new SymbolTable(115);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : (pos 0, json : (;q4#x@;}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zgQ#j74p=Vy");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.Point");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.scanDouble('J');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'D';
      charArray0[2] = '%';
      charArray0[3] = 'v';
      charArray0[4] = 'w';
      charArray0[5] = 't';
      charArray0[6] = 'W';
      charArray0[7] = 's';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, (-1467667144));
      SymbolTable symbolTable0 = new SymbolTable(1669);
      jSONReaderScanner0.scanSymbol(symbolTable0, 't');
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanString('l');
      jSONReaderScanner0.pos();
      JSONScanner jSONScanner0 = new JSONScanner("z", (-1));
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('s', 'W', 'w');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken();
      jSONScanner0.bp = 78;
      int int0 = JSONLexer.OBJECT;
      jSONScanner0.skipWhitespace();
      Feature feature0 = Feature.AutoCloseSource;
      jSONScanner0.scanNumber();
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'z';
      charArray0[2] = 'A';
      charArray0[3] = '|';
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")`", 57);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = 'R';
      charArray0[6] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114, (-3536));
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.matchStat();
      jSONReaderScanner0.scanUUID('5');
      jSONReaderScanner0.scanString('R');
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!l1f0`IXLV`SD-JF[p-)");
      jSONScanner0.scanIdent();
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("//(4=_=B0]HcG(R23");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      char[] charArray0 = new char[0];
      jSONScanner0.charArrayCompare(charArray0);
      int int0 = jSONScanner0.scanType("java.awt.Point");
      assertEquals((-2), int0);
      
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'U';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-730));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WRITE_MAP_NULL_FEATURES");
      jSONScanner0.nextToken();
      jSONScanner0.scanUUID('G');
      jSONScanner0.scanIdent();
      assertEquals('_', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'f';
      charArray0[0] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4565);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      Feature feature0 = Feature.SupportAutoType;
      jSONReaderScanner0.isEnabled(feature0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      jSONScanner0.isEOF();
      int int0 = 32;
      SymbolTable symbolTable0 = new SymbolTable(5);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 65279, 2544);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65279
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EI?+XoD{l51Y><");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "java.a-g.Point";
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '/');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("55555r");
      jSONScanner0.putChar('6');
      jSONScanner0.scanType("$");
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('*', '6', '$', 'h', '$');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner(" - ", 1);
      jSONScanner0.nextToken();
      int int0 = jSONScanner0.scanType("unclosed.str.lit");
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")`");
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'b';
      jSONReaderScanner0.scanDouble('8');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new", 127);
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = '5';
      charArray0[2] = '+';
      charArray0[2] = 'd';
      charArray0[4] = 'X';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.matchStat();
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match n - e, info : pos 0, json : error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'A';
      charArray0[2] = '5';
      charArray0[3] = '%';
      charArray0[4] = '9';
      charArray0[5] = '6';
      char[] charArray1 = new char[8];
      charArray1[0] = 'I';
      charArray1[1] = 'I';
      charArray1[2] = 'g';
      charArray1[3] = '.';
      charArray1[4] = 'I';
      charArray1[5] = 'c';
      charArray1[6] = 'z';
      charArray1[7] = 't';
      StringReader stringReader0 = new StringReader("true");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('g');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.awt.Point");
      TimeZone timeZone0 = TimeZone.getTimeZone("8gJncvP9:7T)QLIb");
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('x');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'D';
      charArray0[2] = '%';
      charArray0[3] = 'v';
      charArray0[4] = 'w';
      charArray0[5] = 't';
      charArray0[6] = 'W';
      charArray0[7] = 's';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, (-1467667144));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanString('l');
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x|OG");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.a-g.Point");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.a-g.Point");
      jSONReaderScanner0.scanLong('<');
      jSONReaderScanner0.getCalendar();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.setToken(32);
      jSONScanner0.token = (-2201);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : pos 0, json : , 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 0);
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'W';
      charArray0[2] = '}';
      charArray0[3] = 'y';
      charArray0[4] = '<';
      charArray0[5] = 'u';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }
}
