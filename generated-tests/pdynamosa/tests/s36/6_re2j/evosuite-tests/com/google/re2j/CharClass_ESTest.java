/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:37:59 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1876;
      intArray0[0] = 1876;
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3007;
      int int2 = 1379;
      intArray0[4] = 1379;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1876, 0, 0, 3007, 1379}, intArray0);
      
      int int3 = 0;
      CharClass charClass1 = charClass0.appendLiteral(1379, 0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1876, 0, 0, 3007, 1379}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, 1379);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 7073;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-219);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2);
      intArray0[5] = 122;
      intArray0[6] = (-3436);
      intArray0[7] = 816;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 816}, intArray0);
      
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 816}, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 1114111}, intArray0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 1114111}, intArray0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, (-227));
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 1114111}, intArray0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(404, 404);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = new int[5];
      intArray1[0] = 404;
      intArray1[1] = 404;
      intArray1[2] = 404;
      intArray1[3] = 404;
      intArray1[4] = (-1395);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 404;
      intArray2[1] = 404;
      intArray2[2] = 404;
      intArray2[3] = 404;
      intArray2[4] = 404;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1395);
      intArray3[1] = (-1395);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-1395);
      intArray4[1] = (-1395);
      intArray4[2] = 404;
      intArray4[3] = 404;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = (-1395);
      intArray5[1] = (-1395);
      intArray5[2] = 404;
      intArray5[3] = (-1395);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = (-730);
      intArray6[1] = (-1395);
      intArray6[2] = (-1395);
      intArray6[3] = (-1395);
      intArray6[4] = (-1395);
      intArray6[5] = 411;
      intArray6[6] = (-1395);
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = CharClass.charClassToString((int[]) null, (-3998));
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 66640;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 66640}, intArray0);
      
      int[][] intArray1 = new int[4][9];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass0.appendFoldedRange(1662, 66640);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(8657, 8657);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange(8657, 8657);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      int[][] intArray0 = new int[9][6];
      int[] intArray1 = new int[7];
      intArray1[0] = 8657;
      intArray1[1] = 8657;
      intArray1[2] = 8657;
      intArray1[3] = 8657;
      intArray1[4] = 8657;
      intArray1[5] = 8657;
      intArray1[6] = 8657;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 8657;
      intArray3[1] = 8657;
      intArray3[2] = 8657;
      intArray3[3] = 8657;
      intArray3[4] = (-251);
      intArray3[5] = 8657;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-251);
      intArray4[1] = (-251);
      intArray4[2] = 8657;
      intArray4[3] = 8657;
      intArray0[3] = intArray4;
      intArray0[4] = intArray4;
      int[] intArray5 = new int[1];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = (-251);
      intArray0[5] = intArray5;
      int[] intArray6 = new int[3];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 2423;
      intArray6[1] = (-251);
      intArray6[2] = (-251);
      intArray0[0] = intArray6;
      int[] intArray7 = new int[7];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = 8657;
      intArray7[1] = 0;
      intArray7[2] = 8657;
      intArray7[3] = 8657;
      intArray7[4] = (-251);
      intArray7[5] = (-251);
      intArray7[6] = 8657;
      intArray0[7] = intArray7;
      int[] intArray8 = new int[4];
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = 8657;
      intArray8[1] = 2423;
      intArray8[2] = 0;
      intArray8[3] = 0;
      intArray0[8] = intArray8;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray0, (-251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 64;
      intArray0[1] = (-2097);
      intArray0[2] = (-2097);
      intArray0[3] = (-1604);
      intArray0[4] = (-2097);
      intArray0[5] = 0;
      intArray0[6] = (-1803);
      intArray0[7] = (-10);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {64, (-2097), (-2097), (-1604), (-2097), 0, (-1803), (-10)}, intArray0);
      
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {64, (-2097), (-2097), (-1604), (-2097), 1114111, (-1803), (-10)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals(8, intArray0.length);
      assertEquals("[0x40-0xfffff7cf 0xfffff7cf-0xfffff9bc 0xfffff7cf-0x10ffff 0xfffff8f5-0xfffffff6]", string0);
      assertArrayEquals(new int[] {64, (-2097), (-2097), (-1604), (-2097), 1114111, (-1803), (-10)}, intArray0);
      assertSame(charClass0, charClass1);
      
      int[][] intArray2 = new int[2][7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2097), 1114111, (-2097), (-1604), (-1803), (-10), 64, (-2097)}, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[9][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass3 = charClass1.appendFoldedRange(1, (-203));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, (-3259));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1054;
      intArray0[1] = (-3252);
      intArray0[2] = 809;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1054, (-3252), 809}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange(0, 91);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1054, (-3252), 809}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 66639;
      intArray0[1] = (-1328);
      intArray0[2] = 0;
      intArray0[3] = (-1157);
      intArray0[4] = 94;
      intArray0[5] = (-2);
      intArray0[6] = 0;
      intArray0[7] = 764;
      intArray0[8] = 43453;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {66639, (-1328), 0, (-1157), 94, (-2), 0, 764, 43453}, intArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1157);
      intArray1[1] = 0;
      intArray1[2] = (-2938);
      intArray1[3] = 0;
      intArray1[4] = 43453;
      intArray1[5] = (-2);
      intArray1[6] = 0;
      String string0 = CharClass.charClassToString(intArray1, (-1328));
      assertNotNull(string0);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-1157), 0, (-2938), 0, 43453, (-2), 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 66640;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 66640}, intArray0);
      
      int[][] intArray1 = new int[4][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 66640}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(8657, 8657);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange(8657, 8657);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[][] intArray0 = new int[9][6];
      int[] intArray1 = new int[7];
      intArray1[0] = 8657;
      intArray1[1] = 8657;
      intArray1[2] = 8657;
      intArray1[3] = 8657;
      intArray1[4] = 8657;
      intArray1[5] = 8657;
      intArray1[6] = 8657;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 8657;
      intArray3[1] = 8657;
      intArray3[2] = 8657;
      intArray3[3] = 8657;
      intArray3[4] = (-251);
      intArray3[5] = 8657;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-251);
      intArray4[1] = (-251);
      intArray4[2] = 8657;
      intArray4[3] = 8657;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 2423;
      intArray5[1] = (-251);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      
      intArray6[0] = (-251);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = 2423;
      intArray7[1] = (-251);
      intArray7[2] = (-251);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[7];
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray5));
      
      intArray8[0] = 8657;
      intArray8[1] = 0;
      intArray8[2] = 8657;
      intArray8[3] = 8657;
      intArray8[4] = (-251);
      intArray8[5] = (-251);
      intArray8[6] = 8657;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[4];
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray7));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray1));
      
      intArray9[0] = 8657;
      intArray9[1] = 2423;
      intArray9[2] = 0;
      intArray9[3] = 0;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray0, (-251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 3068;
      CharClass charClass1 = charClass0.appendFoldedRange(3068, 3068);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[7][5];
      int[] intArray1 = new int[9];
      intArray1[0] = 3068;
      intArray1[1] = 3068;
      intArray1[2] = 3068;
      intArray1[3] = 3068;
      intArray1[4] = 3068;
      intArray1[5] = 3068;
      intArray1[6] = 3068;
      intArray1[7] = 3068;
      intArray1[8] = 3068;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 3068;
      intArray2[2] = 3068;
      intArray2[3] = 3068;
      intArray2[4] = 3068;
      intArray2[5] = 3068;
      intArray2[6] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 0;
      intArray3[1] = 3068;
      intArray3[2] = 0;
      intArray3[3] = 3068;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 3068;
      intArray3[7] = 0;
      intArray3[8] = 3068;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 3068;
      intArray4[3] = 3068;
      intArray4[4] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 1;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 0;
      intArray7[1] = 1;
      intArray7[2] = 1;
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray7[5] = 3068;
      intArray7[6] = 1;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 963;
      intArray0[2] = 91;
      intArray0[3] = 8491;
      intArray0[4] = (-784);
      intArray0[5] = (-1665);
      intArray0[6] = (-35);
      intArray0[7] = 116;
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 963, 91, 8491, (-784), (-1665), (-35), 116}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass4 = charClass1.appendNegatedClass(intArray1);
      assertNotNull(charClass4);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-219);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2);
      intArray0[5] = 122;
      intArray0[6] = (-3436);
      intArray0[7] = 816;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 816}, intArray0);
      
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 816}, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 1114111}, intArray0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 1114111}, intArray0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1334), (-1334));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[0xfffffaca]", string0);
      assertSame(charClass0, charClass1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1334);
      intArray0[1] = (-1334);
      intArray0[2] = (-1334);
      intArray0[3] = (-1334);
      String string1 = CharClass.charClassToString((int[]) null, (-1551));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[]", string1);
      
      CharClass charClass2 = charClass1.appendLiteral((-1334), (-1551));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray1 = charClass1.toArray();
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1334), (-1334)}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4572;
      intArray0[1] = 1486;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 3645);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {4572, 1486}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(1486, 836);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {4572, 1486}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {4572, 1486}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {4572, 1486}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3758;
      intArray1[1] = 3645;
      intArray1[2] = 836;
      intArray1[3] = 836;
      intArray1[4] = 4572;
      intArray1[5] = 1486;
      CharClass charClass5 = charClass4.appendFoldedClass(intArray1);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4572, 1486}, intArray0);
      assertArrayEquals(new int[] {3758, 3645, 836, 836, 4572, 1486}, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      
      int[][] intArray2 = new int[1][8];
      intArray2[0] = intArray1;
      CharClass charClass6 = charClass5.appendTableWithSign(intArray2, 836);
      assertNotNull(charClass6);
      assertEquals(1, intArray2.length);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4572, 1486}, intArray0);
      assertArrayEquals(new int[] {3758, 3645, 836, 836, 4572, 1486}, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendFoldedRange(2, 2);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[5][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 32;
      intArray1[1] = (-963);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-963);
      intArray2[1] = 32;
      intArray2[2] = 32;
      intArray2[3] = (-963);
      intArray2[4] = 32;
      intArray2[5] = 7009;
      intArray2[6] = 32;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 32;
      intArray3[1] = 7009;
      intArray3[2] = (-963);
      intArray3[3] = 32;
      intArray3[4] = 7009;
      intArray3[5] = (-963);
      intArray3[6] = 7009;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-963);
      intArray4[1] = 7009;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = (-963);
      intArray5[1] = (-963);
      intArray5[2] = 7009;
      intArray5[3] = 7009;
      intArray5[4] = (-963);
      intArray5[5] = 32;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(0, 0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 410);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 65}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.appendClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 65}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      String string0 = charClass4.toString();
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertEquals("[0x0-0x4b 0x61-0x6b 0x212a 0x4c-0x53 0x6c-0x73 0x17f 0x54-0x61 0x74-0x7a 0x41-0x4a 0x62-0x6b 0x212a 0x4b-0x52 0x6c-0x73 0x17f 0x53-0x5a 0x74-0xb5 0x39c 0x3bc 0xb6-0xc5 0xe0-0xe5 0x212b 0xc6-0xd8 0xe6-0xf6 0xf8-0xfe 0xd9-0xe0 0x1e9e 0xc0-0xc4 0xe1-0xe5 0x212b 0xc5-0xd6 0xe6-0xff 0xd8-0xde 0x178 0xff-0x17f 0x53 0x73 0x180-0x181 0x243 0x253-0x254 0x182-0x18e 0x256-0x257 0x1dd 0x18f-0x190 0x259 0x25b 0x191-0x194 0x260 0x263 0x195-0x196 0x1f6 0x268-0x269 0x197-0x19a 0x23d 0x0-0x41]", string0);
      assertArrayEquals(new int[] {0, 65}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      
      int int1 = 1155;
      CharClass charClass5 = charClass0.appendLiteral(0, 1155);
      assertNotNull(charClass5);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 65}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1155;
      intArray1[1] = (-2416);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-1);
      intArray1[7] = 410;
      intArray1[8] = 0;
      // Undeclared exception!
      try { 
        charClass5.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      int int0 = (-817);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, (-817));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 0;
      int[][] intArrayArray0 = null;
      int int1 = 173;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, 173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2112);
      intArray0[1] = 881;
      intArray0[2] = 2801;
      int int0 = 3205;
      intArray0[3] = 3205;
      intArray0[4] = 65111;
      int int1 = 93;
      intArray0[5] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2112), 881, 2801, 3205, 65111, 93}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2112), 881, 2801, 3205, 65111, 93}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2112), 881, 2801, 3205, 65111, 93}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2112), 881, 2801, 3205, 65111, 93}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      int[][] intArray1 = new int[5][0];
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2112), 881, 2801, 3205, 65111, 93}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      
      // Undeclared exception!
      try { 
        charClass4.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(66640, 11558);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 3636;
      intArray0[2] = 0;
      intArray0[3] = 745;
      intArray0[4] = 0;
      intArray0[5] = (-2238);
      intArray0[6] = 2400;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 3636, 0, 745, 0, (-2238), 2400, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 3636, 0, 745, 0, (-2238), 0, 3636}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 3636, 0, 745, 0, (-2238), 0, 3636}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-2252);
      intArray0[0] = (-2252);
      int int1 = 91;
      intArray0[1] = 91;
      int int2 = 8151;
      intArray0[2] = 8151;
      intArray0[3] = (-1382);
      int int3 = 0;
      intArray0[4] = 0;
      int int4 = 91;
      intArray0[5] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2252), 91, 8151, (-1382), 0, 91}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2252), 91, 8151, (-1382), (-2252), 91}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-2252), 91, 8151, (-1382), (-2252), 91}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass1.appendRange((-2514), 11499);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendFoldedRange(93, 39);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1334), (-1334));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[0xfffffaca]", string0);
      assertSame(charClass0, charClass1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1334);
      intArray0[1] = (-1334);
      intArray0[2] = (-1334);
      intArray0[3] = (-1334);
      intArray0[4] = (-1334);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-219);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2);
      intArray0[5] = 122;
      intArray0[6] = (-3436);
      intArray0[7] = 816;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 816}, intArray0);
      
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 816}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 1830);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 816}, intArray0);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendLiteral(816, (-1163712));
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertArrayEquals(new int[] {1, (-219), 0, 0, (-2), 122, (-3436), 816}, intArray0);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertArrayEquals(new int[] {(-3436), 816, (-2), 122, 0, 0, 1, (-219)}, intArray0);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass2);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      
      CharClass charClass5 = charClass3.appendRange(122, (-917));
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass4));
      assertArrayEquals(new int[] {(-3436), 816, (-2), 122, 0, 0, 1, (-219)}, intArray0);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass3.appendClassWithSign(intArray0, 1571);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass4));
      assertArrayEquals(new int[] {(-3436), 816, (-2), 122, 0, 0, 1, (-219)}, intArray0);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass3 = new CharClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendFoldedRange(65340, 2207);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = CharClass.charClassToString((int[]) null, (-3998));
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.appendLiteral((-3998), (-2766));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1075);
      intArray0[1] = (-1);
      intArray0[2] = (-43);
      intArray0[3] = 6757;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-4980));
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1075), (-1), (-43), 6757}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = charClass1.toArray();
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1075), (-1), (-43), 6757}, intArray0);
      assertArrayEquals(new int[] {6758, 1114111}, intArray1);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 3309;
      intArray0[2] = 487;
      int int0 = (-41);
      intArray0[3] = (-41);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 3309, 487, (-41)}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 3309, (-40), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 66640;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 66640}, intArray0);
      
      int[][] intArray1 = new int[4][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 66640}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 3309;
      intArray0[2] = 487;
      intArray0[3] = (-41);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 3309, 487, (-41)}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 3309, (-40), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][4];
      intArray1[2] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      int int0 = (-219);
      intArray0[1] = (-219);
      int int1 = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2);
      intArray0[5] = 122;
      intArray0[6] = (-3436);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = (-219);
      intArray1[5] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray1[7] = intArray4;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-2008));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-963), 8179);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[5][7];
      int[] intArray1 = new int[1];
      intArray1[0] = 8179;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-963);
      intArray3[1] = 8179;
      intArray3[2] = (-963);
      intArray3[3] = (-963);
      intArray3[4] = (-963);
      int int0 = 1435;
      intArray3[5] = 1435;
      intArray3[6] = 8179;
      intArray3[7] = (-963);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-963);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = (-963);
      intArray5[1] = 1435;
      intArray5[2] = 1435;
      intArray5[3] = 8179;
      intArray5[4] = 1435;
      intArray5[5] = 64;
      intArray5[6] = 8179;
      intArray5[7] = 1435;
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, (-963));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 936;
      intArray0[1] = 297;
      intArray0[2] = 199;
      intArray0[3] = 5116;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {936, 297, 199, 5116}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(1723, 936);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {936, 297, 199, 5116}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {936, 297, 199, 5116}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 66639;
      intArray0[1] = 1918;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {66639, 1918}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {66639, 1918}, intArray0);
      assertArrayEquals(new int[] {66639, 1918}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 66638}, intArray0);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 66638}, intArray0);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      // Undeclared exception!
      charClass2.appendFoldedRange((-2), 1918);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 254;
      intArray0[0] = 254;
      int int1 = (-2283);
      intArray0[1] = (-2283);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {254, (-2283)}, intArray0);
      
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {254, (-2283)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[2] = intArray0;
      int int2 = 65287;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 65287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 64;
      intArray0[1] = (-2097);
      intArray0[2] = 1625;
      intArray0[3] = (-1604);
      intArray0[4] = (-3688);
      intArray0[5] = 0;
      intArray0[6] = (-1803);
      intArray0[7] = (-1);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {64, (-2097), 1625, (-1604), (-3688), 0, (-1803), (-1)}, intArray0);
      
      int[][] intArray1 = new int[2][7];
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-3688), 0, 64, (-2097), 1625, (-1604), 1625, (-1604)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-3688), 0, 64, (-2097), 1625, (-1604), (-3687), (-3625)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-3688), 0, 64, (-2097), 1625, (-1604), (-3687), (-3625)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[3][9];
      int[] intArray1 = new int[9];
      intArray1[0] = 66640;
      intArray1[1] = 23;
      intArray1[2] = 1369;
      intArray1[3] = 4956;
      intArray1[4] = 3136;
      intArray1[5] = 1212;
      intArray1[6] = (-3191);
      intArray1[7] = 4947;
      intArray1[8] = 4953;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 3136;
      intArray2[1] = 4947;
      intArray2[2] = 4956;
      intArray2[3] = 1212;
      intArray2[4] = 66640;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1212;
      intArray3[1] = 4956;
      intArray3[2] = 1212;
      intArray3[3] = (-3191);
      intArray3[4] = 66640;
      intArray3[5] = 3136;
      intArray3[6] = 23;
      intArray0[2] = intArray3;
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertNotNull(charClass2);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass3.appendFoldedRange(443, 443);
      assertNotNull(charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 0;
      int[][] intArrayArray0 = null;
      int int1 = 173;
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[] intArray1 = charClass0.toArray();
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 0);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      
      String string0 = charClass4.toString();
      assertNotNull(string0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals("[0x0-0x10ffff]", string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      
      CharClass charClass6 = charClass4.negateClass();
      assertNotNull(charClass6);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        charClass2.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 556;
      intArray0[1] = (-1426);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {556, (-1426), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {556, (-1426), 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      intArray0[2] = 120102;
      intArray0[3] = 1467;
      intArray0[4] = (-5916);
      intArray0[5] = 1187;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[3];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1603);
      intArray0[1] = 120831;
      intArray0[2] = 2468;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-3385);
      intArray0[7] = 1669;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[0][3];
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = new CharClass();
      assertNotNull(charClass3);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      
      CharClass charClass4 = charClass3.appendRange(1842, 263);
      assertNotNull(charClass4);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass0));
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      
      String string0 = charClass5.toString();
      assertNotNull(string0);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass0));
      assertEquals("[0x0-0x731 0x108-0x10ffff]", string0);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass4.negateClass();
      assertNotNull(charClass6);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass0));
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      
      CharClass charClass7 = charClass3.appendFoldedRange((-3576), (-3576));
      assertNotNull(charClass7);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass0));
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendFoldedRange((-5070), 0);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-5070), 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-5070), 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      
      CharClass charClass6 = charClass5.negateClass();
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-5070), 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      
      String string0 = charClass6.toString();
      assertNotNull(string0);
      assertEquals(8, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-5070), 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      
      CharClass charClass7 = charClass2.cleanClass();
      assertNotNull(charClass7);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-5070), 1114111, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      // Undeclared exception!
      try { 
        charClass3.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray0 = new int[3][4];
      int[] intArray1 = new int[4];
      intArray1[0] = 8492;
      intArray1[1] = (-2753);
      intArray1[2] = (-726);
      intArray1[3] = 658;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 8492;
      intArray2[1] = 8492;
      intArray2[2] = 8492;
      intArray2[3] = 8492;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2753);
      intArray3[1] = (-2753);
      intArray3[2] = 8492;
      intArray3[3] = 658;
      intArray0[2] = intArray3;
      CharClass charClass3 = charClass0.appendTable(intArray0);
      assertNotNull(charClass3);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertNotNull(charClass4);
      assertEquals(3, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 64;
      intArray0[1] = (-2097);
      intArray0[2] = 1625;
      intArray0[3] = (-1604);
      intArray0[4] = (-3688);
      intArray0[5] = 0;
      intArray0[6] = (-1803);
      intArray0[7] = (-1);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][7];
      charClass0.cleanClass();
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      charClass1.appendTableWithSign(intArray1, (-1803));
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      charClass2.toArray();
      charClass2.appendTableWithSign(intArray1, 7019);
      assertArrayEquals(new int[] {(-3688), 0, 64, (-2097), 1625, (-1604), (-3687), (-3625)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 2006;
      intArray1[2] = 66639;
      intArray1[3] = 1523;
      intArray1[4] = 39;
      intArray1[5] = (-101);
      intArray1[6] = 64;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 2006;
      intArray2[1] = 2006;
      intArray2[2] = (-851);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 39;
      intArray4[1] = 1;
      intArray4[2] = 1;
      intArray4[3] = 61;
      intArray4[4] = 4083;
      intArray4[5] = 64;
      intArray4[6] = 64;
      intArray4[7] = (-851);
      intArray4[8] = 66639;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 2006;
      intArray5[1] = 2006;
      intArray5[2] = 4083;
      intArray5[3] = 4083;
      intArray5[4] = 1523;
      intArray5[5] = (-2848);
      intArray5[6] = 39;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      intArray6[0] = 64;
      intArray6[1] = 66639;
      intArray6[2] = 4083;
      intArray6[3] = 184;
      intArray6[4] = 4083;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      intArray7[0] = 1;
      intArray7[1] = 184;
      intArray7[2] = 66639;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      intArray8[0] = 66639;
      intArray8[1] = 64;
      intArray8[2] = 61;
      intArray8[3] = 184;
      intArray8[4] = 39;
      intArray0[7] = intArray8;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-3152));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.cleanClass();
      int[] intArray0 = new int[0];
      charClass1.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertSame(charClass2, charClass0);
      
      String string0 = CharClass.charClassToString(intArray0, (-3259));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.cleanClass();
      int[] intArray0 = new int[0];
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      assertSame(charClass1, charClass3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      CharClass charClass1 = charClass0.negateClass();
      charClass0.toString();
      charClass1.toArray();
      int int0 = 21;
      CharClass charClass2 = charClass1.appendLiteral(1084, 21);
      charClass2.toString();
      charClass2.appendFoldedRange(1084, 65);
      int int1 = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 383);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      intArray0[0] = 8585;
      intArray0[1] = 8585;
      CharClass charClass1 = new CharClass(intArray0);
      charClass1.appendNegatedClass(intArray0);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 8585);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass0.negateClass();
      CharClass charClass3 = charClass1.appendFoldedRange((-2297147), (-3372));
      int[] intArray0 = charClass0.toArray();
      int[] intArray1 = charClass3.toArray();
      CharClass charClass4 = charClass2.appendClass(intArray1);
      charClass4.appendLiteral(93, (-3372));
      charClass2.appendFoldedClass(intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-2297147), (-3372)}, intArray0);
      
      int[] intArray2 = new int[4];
      intArray2[0] = (-3372);
      intArray2[1] = 93;
      intArray2[2] = (-3372);
      intArray2[3] = (-2297147);
      String string0 = CharClass.charClassToString(intArray2, 0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      int[][] intArray0 = new int[9][3];
      int[] intArray1 = new int[9];
      intArray1[0] = (-1636);
      intArray1[1] = (-1);
      intArray1[2] = 66639;
      intArray1[3] = (-2713);
      intArray1[4] = 1454;
      intArray1[5] = (-2312);
      intArray1[6] = (-3003);
      intArray1[7] = 2803;
      intArray1[8] = 393;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = (-2713);
      intArray2[1] = (-1);
      intArray2[2] = (-2312);
      intArray2[3] = (-2312);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      intArray3[0] = (-1636);
      intArray3[1] = 1454;
      intArray3[2] = 393;
      intArray3[3] = 2803;
      intArray3[4] = (-2312);
      intArray3[5] = 66639;
      intArray3[6] = 2803;
      intArray3[7] = (-2312);
      intArray3[8] = (-3003);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 393;
      intArray4[1] = 66639;
      intArray4[2] = 66639;
      intArray4[3] = 1454;
      intArray4[4] = (-3003);
      intArray4[5] = 393;
      intArray4[6] = (-2713);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = 2803;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = (-1);
      intArray6[1] = (-2713);
      intArray6[2] = 2;
      intArray6[3] = 1454;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      intArray0[6] = intArray7;
      int[] intArray8 = new int[0];
      intArray0[7] = intArray8;
      int[] intArray9 = new int[4];
      intArray9[0] = (-2713);
      intArray9[1] = 66639;
      intArray9[2] = (-2312);
      intArray9[3] = (-2312);
      intArray0[8] = intArray9;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray0, (-1));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 42;
      intArray0[1] = (-2097);
      intArray0[4] = (-3688);
      intArray0[5] = (-3688);
      intArray0[6] = (-1803);
      intArray0[7] = (-1);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][7];
      CharClass charClass1 = charClass0.cleanClass();
      charClass1.cleanClass();
      intArray1[0] = intArray0;
      charClass0.appendFoldedRange(42, 3232);
      assertArrayEquals(new int[] {(-3688), (-3688), (-1803), 0, 42, (-2097), 42, 65}, intArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(0, 0);
      CharClass charClass2 = charClass1.negateClass();
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 888;
      intArray2[8] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 888;
      intArray3[2] = 0;
      intArray3[3] = 470;
      intArray3[4] = 888;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = 0;
      intArray4[1] = 470;
      intArray4[2] = 0;
      intArray4[3] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = 470;
      intArray5[3] = 0;
      intArray5[4] = 0;
      intArray5[5] = 0;
      intArray5[6] = 888;
      intArray5[7] = 0;
      intArray0[4] = intArray5;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[5][0];
      int[] intArray1 = new int[1];
      intArray1[0] = 1114111;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 1114111;
      intArray2[1] = 1114111;
      intArray2[2] = 1114111;
      intArray2[3] = 1114111;
      intArray2[4] = 1114111;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 225;
      intArray3[1] = 1114111;
      intArray3[2] = 1114111;
      intArray3[3] = 1114111;
      intArray3[4] = 2584;
      intArray3[5] = 1114111;
      intArray3[6] = 1114111;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 225;
      intArray4[1] = 225;
      intArray4[2] = 2584;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
