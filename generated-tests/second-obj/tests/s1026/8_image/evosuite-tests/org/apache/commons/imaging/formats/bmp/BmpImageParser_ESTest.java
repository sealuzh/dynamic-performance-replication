/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:28:51 GMT 2018
 */

package org.apache.commons.imaging.formats.bmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dimension;
import java.awt.Panel;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.net.URI;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import javax.swing.JApplet;
import javax.swing.JSplitPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyleContext;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BmpImageParser_ESTest extends BmpImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[6];
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[21];
      try { 
        bmpImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = bmpImageParser0.getName();
      assertEquals("Bmp-Custom", string0);
      
      String string1 = bmpImageParser0.getDefaultExtension();
      assertEquals(".bmp", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[3];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("", byteArray0);
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        bmpImageParser0.getBufferedImage((InputStream) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ImageFormats imageFormats0 = ImageFormats.UNKNOWN;
      bmpImageParser0.canAcceptType(imageFormats0);
      bmpImageParser0.getName();
      hashMap0.put("", bmpImageParser0);
      try { 
        bmpImageParser0.getImageInfo((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: 
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = bmpImageParser0.getXmpXml((ByteSource) null, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("PIXEL_DENSITY");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("6?UZjh", byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      byteSourceArray0.getInputStream();
      hashtable0.put("6?UZjh", "6?UZjh");
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: 6?UZjh
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("J/R,|{qo_5#x'S", byteArray0);
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "E4SD+Y`.3&";
      Panel panel0 = new Panel();
      hashMap0.put("BUFFERED_IMAGE_FACTORY", panel0);
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      bmpImageParser0.getMetadata(byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put(" B", bmpImageParser0);
      try { 
        bmpImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter:  B
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, pipedOutputStream0, hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Dimension dimension0 = new Dimension();
      hashtable0.put("h8mk", byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("h8mk");
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, mockPrintStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: h8mk
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("ieP+2B8G;AW,N`}^Vp");
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      bmpImageParser1.getBufferedImage((File) mockFile0, (Map<String, Object>) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        bmpImageParser1.writeImage((BufferedImage) null, byteArrayOutputStream0, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("VERBOSE", byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("VERBOSE", byteArray0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      bmpImageParser0.getMetadata(byteArray0, (Map<String, Object>) hashMap1);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      bmpImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashMap0);
      ByteSourceArray byteSourceArray1 = new ByteSourceArray((byte[]) null);
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      File file0 = MockFile.createTempFile("PIXEL_DENSITY", "PIXEL_DENSITY");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      MockLocalDate mockLocalDate0 = new MockLocalDate();
      mockLocalDate0.getMockedClassName();
      Writer writer0 = bufferedWriter0.append((CharSequence) "java.time.LocalDate");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0, true);
      mockFileWriter0.write("PIXEL_DENSITY");
      byte[] byteArray0 = new byte[1];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      bmpImageParser0.getICCProfileBytes(byteArray0, (Map<String, Object>) hashtable0);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      Locale locale0 = Locale.UK;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "BUFFERED_IMAGE_FACTORY", (Object[]) null);
      file0.setReadable(true, true);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(file0);
      byteSourceFile0.getDescription();
      try { 
        bmpImageParser0.dumpImageFile(printWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("c49%");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Locale locale0 = Locale.GERMANY;
      String string0 = DefaultEditorKit.selectionEndAction;
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) bmpImageParser0;
      String string1 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      ZoneId.getAvailableZoneIds();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "PNG _ontains more than6one XlP chunk.", objectArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      mockPrintWriter0.append((CharSequence) "oneTouchExpandable");
      locale0.getExtension('X');
      mockPrintWriter0.printf("8tTO!Oe^", objectArray0);
      PrintWriter printWriter1 = mockPrintWriter0.format(locale0, "8tTO!Oe^", objectArray0);
      String string2 = StyleContext.DEFAULT_STYLE;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      printWriter0.format(locale0, "PNG _ontains more than6one XlP chunk.", objectArray0);
      printWriter1.write("ColorSpaceBlueY");
      try { 
        bmpImageParser0.dumpImageFile(printWriter1, (ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 1969775392
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "VERBOSE";
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("VERBOSE", byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("VERBOSE", byteArray0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      try { 
        bmpImageParser0.getBufferedImage(byteArray1, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("c49%");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      mockFileWriter0.write("c49%");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Locale locale0 = Locale.GERMANY;
      String string0 = DefaultEditorKit.selectionEndAction;
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) bmpImageParser0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string1 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      locale0.getUnicodeLocaleAttributes();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "PNG _ontains more than6one XlP chunk.", objectArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Locale.getISOCountries();
      printWriter0.write("selection-end");
      mockPrintWriter0.append((CharSequence) "oneTouchExpandable");
      locale0.getExtension('X');
      mockPrintWriter0.printf("oneTouchExpandable", objectArray0);
      PrintWriter printWriter1 = mockPrintWriter0.format(locale0, "PNG _ontains more than6one XlP chunk.", objectArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      printWriter1.write("d");
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      printWriter0.format(locale0, "PNG _ontains more than6one XlP chunk.", objectArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      printWriter1.write("oneTouchExpandable");
      Dimension dimension0 = bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
      assertEquals(543519343, dimension0.width);
      assertEquals(1851877492, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("cmG9%");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      mockFileWriter0.write("cmG9%");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Locale locale0 = Locale.GERMANY;
      String string0 = DefaultEditorKit.selectionEndAction;
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) bmpImageParser0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string1 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      FileSystemHandling.createFolder(evoSuiteFile0);
      locale0.getUnicodeLocaleAttributes();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "PNG _ontains more than6one XlP chunk.", objectArray0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Locale.getISOCountries();
      printWriter0.write("selection-end");
      mockPrintWriter0.append((CharSequence) "oneTouchExpandable");
      hashtable0.put("VERBOSE", "cmG9%");
      locale0.getExtension('X');
      mockPrintWriter0.printf("oneTouchExpandable", objectArray0);
      PrintWriter printWriter1 = mockPrintWriter0.format(locale0, "PNG _ontains more than6one XlP chunk.", objectArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      printWriter1.write("d");
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      printWriter0.format(locale0, "PNG _ontains more than6one XlP chunk.", objectArray0);
      FileSystemHandling.createFolder(evoSuiteFile1);
      printWriter1.write("oneTouchExpandable");
      bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 1817714789
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }
}
