/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:57:30 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.LongBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.loadClass("DisableFieldS=ar;atch");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("DisableFieldS=ar;atch");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("float", (ClassLoader) aSMClassLoader0);
      InstantiationError instantiationError0 = new InstantiationError();
      MockFile mockFile0 = new MockFile("create instance error, class ", "}.NzkN4(|E");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "}.NzkN4(|E");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // }.NzkN4(|E
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.fnv1a_64("valueOf");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "valueOf");
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Hashtable<AtomicInteger, SQLClientInfoException> hashtable0 = new Hashtable<AtomicInteger, SQLClientInfoException>();
      hashtable0.values();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.getClassFromMapping(",");
      TypeUtils.toLocale("L");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      String string0 = "*Fvd/";
      char char0 = File.separatorChar;
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.fnv1a_64_lower("*Fvd/");
      TypeUtils.toLocale("*Fvd/");
      TypeUtils.castToBytes("*Fvd/");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      TypeUtils.isProxy(class1);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("*Fvd/");
      Timestamp timestamp0 = new Timestamp((-1283L));
      TypeUtils.castToTimestamp(timestamp0);
      Class<HttpCookie> class2 = HttpCookie.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class2, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      TypeUtils.isPath(class1);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      TypeUtils.castToByte((Object) null);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "oracle.sql.DATE");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass(";x?G?Sk!@R", classLoader0);
      TypeUtils.getGenericParamType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(";x?G?Sk!@R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : ;x?G?Sk!@R
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = TypeUtils.decapitalize("{Q");
      assertEquals("{Q", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.isNumber("ge");
      boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("ge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ge
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<String> class0 = String.class;
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      TypeUtils.castToJavaBean((Object) mockNullPointerException0, class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("org.evosuite.runtime.mock.java.lang.MockNullPointerException@0000000001");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.evosuite.runtime.mock.java.lang.MockNullPointerException@0000000001", "org.evosuite.runtime.mock.java.lang.MockNullPointerException@0000000001", illegalThreadStateException0);
      illegalThreadStateException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      illegalThreadStateException0.getStackTrace();
      Properties properties0 = new Properties();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      noSuchMethodException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLIntegrityConstraintViolationException: org.evosuite.runtime.mock.java.lang.MockNullPointerException@0000000001
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.setClassAssertionStatus((String) null, false);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      Class<Insets> class1 = Insets.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fi", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      UnaryOperator.identity();
      UnaryOperator.identity();
      TypeUtils.toLocale("n2MWLa;*A*|j}A");
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getFieldFromCache("b+Z", linkedHashMap0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      treeSet0.descendingSet();
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeSet0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("KVf!y\"_7^9+,#7u");
      Class<String> class0 = String.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "KVf!y\"_7^9+,#7u", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("KVf!y\"_7^9+,#7u", class0, class0, class0, (Field) null, 21, 200, (-1706));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean1 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 122, 122);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(classLoader1, jSONReaderScanner0, parserConfig0);
      throwableDeserializer0.createInstance(defaultJSONParser0, (Type) class0);
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) throwableDeserializer0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.BufferCapabilities
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0, true);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      TypeUtils.loadClass("^e^{");
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) treeMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.lang.AutoCloseable");
      TypeUtils.toLocale("L");
      TypeUtils.castToShort((Object) null);
      TypeUtils.castToString("L");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, map0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Insets insets0 = new Insets((-2279), 95, 24, 38);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.forEach(biConsumer0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.setClassAssertionStatus("(K9R+qaOMB;l*[+", false);
      classLoader1.clearAssertionStatus();
      TypeUtils.loadClass("(K9R+qaOMB;l*[+", classLoader1);
      Random.setNextRandom((-68703773));
      InterruptedException interruptedException0 = new InterruptedException("(K9R+qaOMB;l*[+");
      TypeUtils.castToString(interruptedException0);
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<RenderingHints> class1 = RenderingHints.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e[Z`Y");
      Class<TimeUnit> class0 = TimeUnit.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, true);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("`;?rdKUO@a9RX/ J2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`;?rdKUO@a9RX/ J2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      hashMap0.put("qY\"'3zrkSJv0", (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = "PYS@s|CW^36;{A";
      TypeUtils.fnv1a_64("PYS@s|CW^36;{A");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Class<Double> class1 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      MockThread mockThread0 = new MockThread("PYS@s|CW^36;{A");
      mockThread0.getContextClassLoader();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(130, 39, 130, 39, 130);
      ArrayList<NumberDeserializer> arrayList0 = new ArrayList<NumberDeserializer>(52);
      SecurityException securityException0 = new SecurityException("PYS@s|CW^36;{A");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.SecurityException: PYS@s|CW^36;{A
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("^d,['i(i{V#c", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. ^d,['i(i{V#c
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("double", "lBK!'92AJ4OZ(da", "bashCYde", 54);
      StackTraceElement stackTraceElement1 = new StackTraceElement("double", "lBK!'92AJ4OZ(da", "re", (-627));
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig.getGlobalInstance();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      Field[] fieldArray0 = new Field[1];
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      Class<SimpleDateFormat> class2 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("can not cast oracle.sql.TIMESTAMP to Date", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("1", javaBeanInfo0.clazz, class2, class1, (Field) null, 54, 2238, (-1724381683));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      fieldArray0[0] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "+FZc'k6?ro}S7", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      assertEquals("class java.lang.Object", class2.toString());
      
      TypeUtils typeUtils0 = new TypeUtils();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockRuntimeException0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(sQLFeatureNotSupportedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig();
      ParserConfig parserConfig2 = new ParserConfig(false);
      TypeUtils.castToBoolean((Object) null);
      Class<Float> class0 = Float.class;
      Float float0 = TypeUtils.cast((Object) null, class0, parserConfig2);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "";
      TypeUtils.loadClass("", (ClassLoader) null);
      TypeUtils.getGenericParamType((Type) null);
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getClass((Type) class0);
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.GridBagConstraints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.getClassFromMapping("M~");
      TypeUtils.toLocale("M~");
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.unwrapOptional((Type) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Random.setNextRandom((-1631));
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToString(class0);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      TypeUtils.isPath(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLException sQLException0 = new SQLException();
      InternalError internalError0 = new InternalError("F!&m]0", sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(internalError0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLSyntaxErrorException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("F!&m]0", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientConnectionException: F!&m]0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.awt.GridBagConstraints@2ac84926
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getCollectionItemType(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.isKotlin(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hu}");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.EnumSerializer");
      TypeUtils.loadClass("hu}");
      String string0 = "getClass";
      TypeUtils.loadClass("getClass");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.decapitalize("");
      TypeUtils.getClassFromMapping("");
      TypeUtils.castToTimestamp("");
      TypeUtils.loadClass("");
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.loadClass("kotlin.reflect.KFunction");
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      Field[] fieldArray0 = new Field[3];
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Field field0 = ParserConfig.getFieldFromCache("Ljava.awt.Rectangle", concurrentHashMap0);
      fieldArray0[0] = null;
      fieldArray0[1] = field0;
      ParserConfig.getFieldFromCache("kotlin.reflect.KFunction", concurrentHashMap0);
      fieldArray0[2] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "kotlin.reflect.KFunction", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e[Z`Y");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "e[Z`Y", fieldArray0);
      MockUUID.fromString("G");
      Locale locale1 = new Locale("G", "69mUXRduFH", "eras");
      BreakIterator.getSentenceInstance(locale1);
      AtomicInteger atomicInteger0 = new AtomicInteger((-1894));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1894
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      TypeUtils.fnv1a_64("jS7w`O'c9}'IOd");
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.isKotlin(class0);
      Class<String> class1 = String.class;
      TypeUtils.castToJavaBean((Object) null, class1);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, illegalThreadStateException0);
      illegalThreadStateException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      illegalThreadStateException0.getStackTrace();
      TypeUtils.isHibernateInitialized(illegalThreadStateException0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(10, 1.0F);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(428);
      weakHashMap0.put("getStackTrace", (String) null);
      long long0 = TypeUtils.fnv1a_64("getgetLocalizedMessage");
      assertEquals(1018107206021399397L, long0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("\"d#TX4&8sKgj", treeMap0);
      Class<StringIndexOutOfBoundsException> class1 = StringIndexOutOfBoundsException.class;
      Class<HttpCookie> class2 = HttpCookie.class;
      FieldInfo fieldInfo0 = new FieldInfo("([C)I", class1, class2, class0, (Field) null, (-1861046464), (-68703773), 4);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      Class<String> class3 = String.class;
      TypeUtils.castToJavaBean((Object) "Ljava.awt.Point", class3);
      Class<SQLTransientConnectionException> class4 = SQLTransientConnectionException.class;
      int int0 = TypeUtils.getParserFeatures(class4);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(class2);
      beanContext0.getMethod();
      boolean boolean1 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.loadClass("writeReference");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Constructor<MapDeserializer>[] constructorArray0 = (Constructor<MapDeserializer>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(fileSystemHandling0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.testdata.FileSystemHandling@7607980a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Double double0 = TypeUtils.castToDouble(bigDecimal0);
      assertEquals((-1.478777995E9), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("cause", (ClassLoader) aSMClassLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      String string0 = "[n";
      TypeUtils.fnv1a_64("[n");
      Stack<Locale> stack0 = new Stack<Locale>();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LE";
      stringArray0[2] = "[n";
      stringArray0[4] = stringArray0[3];
      stringArray0[5] = "[n";
      stringArray0[6] = "[n";
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("Z");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ljava.awt.Color";
      stringArray0[2] = "U5A`odWkxX";
      stringArray0[3] = "7NcpYc|k;[j;O D5!a1";
      stringArray0[5] = "Ljava.awt.Color";
      stringArray0[6] = "?(a";
      dateFormatSymbols0.setAmPmStrings(stringArray0);
      TypeUtils.castToDouble(stringArray0[4]);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      System.setCurrentTimeMillis((-755L));
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.isProxy(class0);
      TypeUtils.decapitalize("ulP");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Boolean.valueOf("ulP");
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      outOfMemoryError0.getLocalizedMessage();
      StackTraceElement stackTraceElement0 = new StackTraceElement("o", "o", "o", 926);
      SQLTransientException sQLTransientException0 = new SQLTransientException("o", "#4vgn", 926, outOfMemoryError0);
      outOfMemoryError0.addSuppressed(sQLTransientException0);
      stackTraceElementArray0[0] = stackTraceElement0;
      outOfMemoryError0.setStackTrace(stackTraceElementArray0);
      TypeUtils.loadClass("`:Z%,;v`hsKkN", (ClassLoader) null);
      Constructor<Long>[] constructorArray0 = (Constructor<Long>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Float float0 = new Float(25.337885F);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(float0);
      assertEquals(25000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Locale locale0 = TypeUtils.toLocale("LE");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "LE");
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread0, "LE");
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("LE", classLoader0);
      DateFormatSymbols.getInstance(locale0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, map0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache(":true", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo(":true", class0, class0, class0, (Field) null, (-456), 84, 0);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class1 = beanContext0.getBeanClass();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      Locale locale0 = TypeUtils.toLocale("double");
      assertEquals("", locale0.getVariant());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      assertEquals("class [F", class1.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      Locale locale0 = TypeUtils.toLocale("1q(D/_&%+_BE");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "1q(D/_&%+_BE");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("5[oN>{W6C${U", classLoader0);
      TypeUtils.getGenericParamType(class0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55);
      Locale locale0 = jSONReaderScanner0.getLocale();
      Locale locale1 = Locale.UK;
      locale0.getDisplayVariant(locale1);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      DateFormatSymbols.getInstance();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("?K/J");
      // Undeclared exception!
      try { 
        TypeUtils.toLocale("_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.fnv1a_64("PYS@s|CW^36;{A");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Class<Double> class1 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      MockThread mockThread0 = new MockThread("PYS@s|CW^36;{A");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(130, 39, 130, 39, 130);
      ArrayList<NumberDeserializer> arrayList0 = new ArrayList<NumberDeserializer>(52);
      SecurityException securityException0 = new SecurityException("PYS@s|CW^36;{A");
      TypeUtils.loadClass("$assertionsDisabled", classLoader0, false);
      TypeUtils.decapitalize("PYS@s|CW^36;{A");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.Object@1920886d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      long long0 = TypeUtils.fnv1a_64("L");
      assertEquals((-5808516191223665813L), long0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("6&yvSk&A'W=&vu7");
      assertEquals("java.lang.IllegalThreadStateException: 6&yvSk&A'W=&vu7", illegalThreadStateException0.toString());
      assertEquals("6&yvSk&A'W=&vu7", illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      StackTraceElement[] stackTraceElementArray0 = illegalThreadStateException0.getStackTrace();
      assertEquals("java.lang.IllegalThreadStateException: 6&yvSk&A'W=&vu7", illegalThreadStateException0.toString());
      assertEquals("6&yvSk&A'W=&vu7", illegalThreadStateException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat> identityHashMap1 = new java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat>();
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertNotNull(identityHashMap1);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      StackTraceElement stackTraceElement0 = TypeUtils.cast((Object) identityHashMap1, (Type) class0, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(stackTraceElement0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = TypeUtils.toLocale("LE");
      assertEquals("le", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("le", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "LE");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread0, "LE");
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("LE", classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("le", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("le", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNotNull(noSuchFieldError0);
      
      Boolean boolean0 = Boolean.valueOf("LE");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class [I", class1.toString());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class [I", class1.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class [I", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      Locale locale0 = TypeUtils.toLocale("double");
      assertEquals("double", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("double", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Class<NullPointerException> class3 = NullPointerException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      String string0 = weakHashMap0.put("double", "oWOzfR79mM");
      assertNull(string0);
      
      long long0 = TypeUtils.fnv1a_64("vq(");
      assertEquals(7582441201052101952L, long0);
      
      Class<SimpleTimeZone> class4 = SimpleTimeZone.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("double", treeMap0);
      assertEquals(0, treeMap0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo((String) null, class4, class2, class3, (Field) null, (-68703773), (-1338), (-3295));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "gettoString";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gettoString");
      assertFalse(boolean0);
      
      String string1 = "b|l/\\j}_(";
      Locale locale0 = TypeUtils.toLocale("b|l/j}_(");
      assertEquals("b|l/j}", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("b|l/j}_(", locale0.toString());
      assertEquals("(", locale0.getCountry());
      assertNotNull(locale0);
      
      Class<?> class0 = TypeUtils.loadClass("gettoString", (ClassLoader) null);
      assertNull(class0);
      
      String string2 = "getName";
      Method method0 = null;
      Field[] fieldArray0 = new Field[0];
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, "b|l/j}_(", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      Calendar calendar0 = TypeUtils.cast((Object) null, (Type) class1, (ParserConfig) null);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNull(calendar0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockRuntimeException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(sQLFeatureNotSupportedException0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLFeatureNotSupportedException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertEquals("byte", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@6bc6307d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kotlin.ranges.LongRange");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = identityHashMap0.put("J", "J");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string1 = "NextException";
      InternalError internalError0 = new InternalError("NextException");
      assertEquals("NextException", internalError0.getMessage());
      assertEquals("java.lang.InternalError: NextException", internalError0.toString());
      assertNotNull(internalError0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("kotlin.ranges.LongRange", "[S", 80, internalError0);
      assertEquals("NextException", internalError0.getMessage());
      assertEquals("java.lang.InternalError: NextException", internalError0.toString());
      assertEquals("kotlin.ranges.LongRange", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: kotlin.ranges.LongRange", sQLFeatureNotSupportedException0.toString());
      assertEquals(80, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("[S", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.initCause(internalError0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.lang.InternalError: NextException
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setClassAssertionStatus("(K9R+qaOMB;l*[+", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = treeMap0.put("(K9R+qaOMB;l*[+", "rdU%8C.)s|");
      assertEquals(1, treeMap0.size());
      assertNull(string0);
      
      SortedMap<String, String> sortedMap0 = treeMap0.tailMap("A`w");
      assertEquals(1, treeMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      assertEquals(0, treeMap1.size());
      assertNotNull(treeMap1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, true, propertyNamingStrategy0);
      assertEquals(1, treeMap0.size());
      assertEquals(0, treeMap1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertTrue(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class [B", class2.toString());
      assertNotNull(class2);
      
      Insets insets0 = new Insets(111, 361, 111, 361);
      assertEquals(361, insets0.right);
      assertEquals(361, insets0.left);
      assertEquals(111, insets0.top);
      assertEquals(111, insets0.bottom);
      assertNotNull(insets0);
      
      Insets insets1 = (Insets)insets0.clone();
      assertEquals(361, insets0.right);
      assertEquals(361, insets0.left);
      assertEquals(111, insets0.top);
      assertEquals(111, insets0.bottom);
      assertEquals(111, insets1.bottom);
      assertEquals(361, insets1.left);
      assertEquals(361, insets1.right);
      assertEquals(111, insets1.top);
      assertTrue(insets1.equals((Object)insets0));
      assertNotSame(insets0, insets1);
      assertNotSame(insets1, insets0);
      assertNotNull(insets1);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(33, 38, 3, 47, 361, 38, 6282, (-2096), insets0, 361, 111);
      assertEquals(361, insets0.right);
      assertEquals(361, insets0.left);
      assertEquals(111, insets0.top);
      assertEquals(111, insets0.bottom);
      assertEquals(38, gridBagConstraints0.gridy);
      assertEquals(47, gridBagConstraints0.gridheight);
      assertEquals(361.0, gridBagConstraints0.weightx, 0.01);
      assertEquals((-2096), gridBagConstraints0.fill);
      assertEquals(361, gridBagConstraints0.ipadx);
      assertEquals(3, gridBagConstraints0.gridwidth);
      assertEquals(38.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(111, gridBagConstraints0.ipady);
      assertEquals(6282, gridBagConstraints0.anchor);
      assertEquals(33, gridBagConstraints0.gridx);
      assertTrue(insets0.equals((Object)insets1));
      assertNotNull(gridBagConstraints0);
      
      Class<TypeNotPresentException> class3 = TypeNotPresentException.class;
      // Undeclared exception!
      try { 
        Currency.getInstance("double");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("rSSn*l^6*<*Cr0RM'*`");
      assertEquals("rssn*l^6*<*cr0rm'*`", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("rssn*l^6*<*cr0rm'*`", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Class<MockDate> class0 = MockDate.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation1 = TypeUtils.getAnnotation((Class<?>) class0, class2);
      assertSame(class2, class1);
      assertNull(annotation1);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      long long0 = TypeUtils.fnv1a_64("PYS@s|CW^36;{A");
      assertEquals((-3487101784288242948L), long0);
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      assertNotNull(mockIllegalAccessException0);
      
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      HttpCookie httpCookie0 = new HttpCookie(":6GSnN&W{Ut?r+Yy", "Message");
      assertFalse(httpCookie0.getSecure());
      assertFalse(httpCookie0.isHttpOnly());
      assertNull(httpCookie0.getPortlist());
      assertEquals(":6GSnN&W{Ut?r+Yy=\"Message\"", httpCookie0.toString());
      assertFalse(httpCookie0.hasExpired());
      assertEquals((-1L), httpCookie0.getMaxAge());
      assertEquals(":6GSnN&W{Ut?r+Yy", httpCookie0.getName());
      assertNull(httpCookie0.getComment());
      assertFalse(httpCookie0.getDiscard());
      assertNull(httpCookie0.getPath());
      assertNull(httpCookie0.getCommentURL());
      assertEquals("Message", httpCookie0.getValue());
      assertEquals(1, httpCookie0.getVersion());
      assertNull(httpCookie0.getDomain());
      assertNotNull(httpCookie0);
      
      httpCookie0.setMaxAge(2866L);
      assertFalse(httpCookie0.getSecure());
      assertFalse(httpCookie0.isHttpOnly());
      assertNull(httpCookie0.getPortlist());
      assertEquals(":6GSnN&W{Ut?r+Yy=\"Message\"", httpCookie0.toString());
      assertFalse(httpCookie0.hasExpired());
      assertEquals(":6GSnN&W{Ut?r+Yy", httpCookie0.getName());
      assertNull(httpCookie0.getComment());
      assertFalse(httpCookie0.getDiscard());
      assertNull(httpCookie0.getPath());
      assertNull(httpCookie0.getCommentURL());
      assertEquals("Message", httpCookie0.getValue());
      assertEquals(1, httpCookie0.getVersion());
      assertNull(httpCookie0.getDomain());
      assertEquals(2866L, httpCookie0.getMaxAge());
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertNotNull(gridBagConstraints0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.GridBagConstraints@1cf49470
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("*ebV=`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*ebV=`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      InternalError internalError0 = new InternalError("iO.iBI]vf,8M");
      assertEquals("java.lang.InternalError: iO.iBI]vf,8M", internalError0.toString());
      assertEquals("iO.iBI]vf,8M", internalError0.getMessage());
      assertNotNull(internalError0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeSupport", (-1691), internalError0);
      assertEquals("java.lang.InternalError: iO.iBI]vf,8M", internalError0.toString());
      assertEquals("iO.iBI]vf,8M", internalError0.getMessage());
      assertEquals((-1691), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("fastjson.parser.autoTypeSupport", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: fastjson.parser.autoTypeSupport", sQLTransactionRollbackException0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLTransactionRollbackException: fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache(":true", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo(":true", class0, class0, class0, (Field) null, (-480), 84, 0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(84, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals(":true", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(84, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals(":true", fieldInfo0.toString());
      assertEquals(84, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(":true", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertNotNull(beanContext0);
      
      Class<?> class1 = beanContext0.getBeanClass();
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(84, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals(":true", fieldInfo0.toString());
      assertEquals(84, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(":true", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.MapDeserializer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(84, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals(":true", fieldInfo0.toString());
      assertEquals(84, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(":true", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.MapDeserializer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(type0);
      
      Class<?> class2 = TypeUtils.getClass(type0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(84, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(class2.equals((Object)class1));
      assertNull(fieldInfo0.getFormat());
      assertEquals(":true", fieldInfo0.toString());
      assertEquals(84, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(":true", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.MapDeserializer", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertNotNull(class2);
      
      Byte byte0 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte0);
      assertNotNull(byte0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byte0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      String string0 = "|?wawEDLFpO6)E<Y\\H";
      Field[] fieldArray0 = new Field[3];
      Class<StackOverflowError> class1 = StackOverflowError.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 607;
      Random.setNextRandom(607);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      int int1 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<ClassLoader> class1 = ClassLoader.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = null;
      try {
        concurrentHashMap0 = new ConcurrentHashMap<String, String>(0, (-914.3166F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Class<StackTraceElement> class1 = StackTraceElement.class;
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      String string0 = hashMap0.getOrDefault(class0, (String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, (Map<String, String>) hashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      DataTruncation dataTruncation0 = new DataTruncation(1103, true, true, 337, 1680);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("ge1");
      assertEquals((-3106746962810315208L), long0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      Class<String> class0 = String.class;
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("ge1");
      assertEquals("java.lang.IllegalThreadStateException: ge1", illegalThreadStateException0.toString());
      assertEquals("ge1", illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      StackTraceElement[] stackTraceElementArray0 = illegalThreadStateException0.getStackTrace();
      assertEquals("java.lang.IllegalThreadStateException: ge1", illegalThreadStateException0.toString());
      assertEquals("ge1", illegalThreadStateException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, false);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("+X", "+X");
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("+X", sQLSyntaxErrorException0.getMessage());
      assertEquals("+X", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: +X", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+X");
      assertEquals("+X", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: +X", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("is", "+X", "is", (-1962));
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("is", stackTraceElement0.getClassName());
      assertEquals("+X", stackTraceElement0.getMethodName());
      assertEquals("is", stackTraceElement0.getFileName());
      assertEquals((-1962), stackTraceElement0.getLineNumber());
      assertEquals("is.+X(is)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.springframework.security.core.context.SecurityContextImpl", "Ljava.awt.Point", "org.springframework.security.core.context.SecurityContextImpl", 930);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("org.springframework.security.core.context.SecurityContextImpl", stackTraceElement1.getClassName());
      assertEquals("org.springframework.security.core.context.SecurityContextImpl.Ljava.awt.Point(org.springframework.security.core.context.SecurityContextImpl:930)", stackTraceElement1.toString());
      assertEquals(930, stackTraceElement1.getLineNumber());
      assertEquals("org.springframework.security.core.context.SecurityContextImpl", stackTraceElement1.getFileName());
      assertEquals("Ljava.awt.Point", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("+X", "[I", "[I", 49);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertEquals("[I", stackTraceElement2.getMethodName());
      assertEquals("+X.[I([I:49)", stackTraceElement2.toString());
      assertEquals("+X", stackTraceElement2.getClassName());
      assertEquals(49, stackTraceElement2.getLineNumber());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("[I", stackTraceElement2.getFileName());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = null;
      try {
        stackTraceElement3 = new StackTraceElement("acaVA]ENUrt8mecb{", (String) null, "org.springframework.security.core.context.SecurityContextImpl", (-1962));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      long long0 = TypeUtils.fnv1a_64("LE");
      assertEquals(655664105523207978L, long0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      Locale locale0 = Locale.lookup(stack1, stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNull(locale0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      DateFormatSymbols dateFormatSymbols0 = null;
      try {
        dateFormatSymbols0 = new DateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(string0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException((String) null);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNotNull(illegalThreadStateException0);
      
      Throwable[] throwableArray0 = illegalThreadStateException0.getSuppressed();
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNotNull(throwableArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = 'Z';
      charArray0[2] = '6';
      charArray0[3] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1152);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {')', 'Z', '6', 'S'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertArrayEquals(new char[] {')', 'Z', '6', 'S'}, charArray0);
      assertNotNull(locale0);
      
      Locale locale1 = Locale.UK;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string1 = locale1.getDisplayVariant(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertArrayEquals(new char[] {')', 'Z', '6', 'S'}, charArray0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("GanjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      DateFormatSymbols dateFormatSymbols1 = DateFormatSymbols.getInstance();
      assertFalse(dateFormatSymbols1.equals((Object)dateFormatSymbols0));
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols1.getLocalPatternChars());
      assertNotSame(dateFormatSymbols1, dateFormatSymbols0);
      assertNotNull(dateFormatSymbols1);
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat("?K/J");
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertTrue(choiceFormat0.isGroupingUsed());
      assertNotNull(choiceFormat0);
      
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      Class<JSONPDeserializer> class3 = JSONPDeserializer.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("&e?a", identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("sAWsB8Z9", class3, class1, class1, (Field) null, (-1310), (-231), 5396);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-231), fieldInfo0.serialzeFeatures);
      assertEquals(5396, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertNull(fieldInfo0.getFormat());
      assertEquals("sAWsB8Z9", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-231), fieldInfo0.serialzeFeatures);
      assertEquals(5396, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertNull(fieldInfo0.getFormat());
      assertEquals("sAWsB8Z9", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertEquals("sAWsB8Z9", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals((-231), beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals((-231), fieldInfo0.serialzeFeatures);
      assertEquals(5396, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertNull(fieldInfo0.getFormat());
      assertEquals("sAWsB8Z9", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertEquals("sAWsB8Z9", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals((-231), beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(method0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      StackTraceElement[] stackTraceElementArray0 = outOfMemoryError0.getStackTrace();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotNull(stackTraceElementArray0);
      
      StackTraceElement[] stackTraceElementArray1 = new StackTraceElement[1];
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      
      String string0 = outOfMemoryError0.getLocalizedMessage();
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(string0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("1", "1", "1", 926);
      assertEquals("1.1(1:926)", stackTraceElement0.toString());
      assertEquals("1", stackTraceElement0.getMethodName());
      assertEquals("1", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(926, stackTraceElement0.getLineNumber());
      assertEquals("1", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("1", "#4vgn", 926, outOfMemoryError0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertEquals("1", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: 1", sQLTransientException0.toString());
      assertEquals("#4vgn", sQLTransientException0.getSQLState());
      assertEquals(926, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      outOfMemoryError0.addSuppressed(sQLTransientException0);
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertEquals("1", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: 1", sQLTransientException0.toString());
      assertEquals("#4vgn", sQLTransientException0.getSQLState());
      assertEquals(926, sQLTransientException0.getErrorCode());
      
      stackTraceElementArray1[0] = stackTraceElement0;
      outOfMemoryError0.setStackTrace(stackTraceElementArray1);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertNull(outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      
      Class<?> class0 = TypeUtils.loadClass("`:Z%,;v`hsKkN", (ClassLoader) null);
      assertNull(class0);
      
      Constructor<Long>[] constructorArray0 = (Constructor<Long>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      Class<String> class1 = String.class;
      String string1 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(string1);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("`:Z%,;v`hsKkN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : `:Z%,;v`hsKkN
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("yyy-MM-ddTHH:mm:ss.SSS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : yyy-MM-ddTHH:mm:ss.SSS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.util.Calendar", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      boolean boolean1 = TypeUtils.isNumber("+X");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.forName("+X");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // +X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e[Z`Y");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertNotNull(jSONReaderScanner0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = treeMap0.put("e[Z`Y", "e[Z`Y");
      assertEquals(1, treeMap0.size());
      assertNull(string0);
      
      String string1 = treeMap0.put("e[Z`Y", "e[Z`Y");
      assertEquals("e[Z`Y", string1);
      assertEquals(1, treeMap0.size());
      assertNotNull(string1);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertEquals(1, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNotNull(type0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = "not support class : ";
      Locale locale1 = null;
      try {
        locale1 = new Locale("e[Z`Y", (String) null, "not support class : ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNotNull(noSuchFieldError0);
      
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      assertNotNull(weakHashMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      weakHashMap0.put("fi", clientInfoStatus0);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale("\":", "5]PHd^&TO\"YSv", "getFormat");
      assertEquals("getFormat", locale0.getVariant());
      assertEquals("5]PHD^&TO\"YSV", locale0.getCountry());
      assertEquals("\":_5]PHD^&TO\"YSV_getFormat", locale0.toString());
      assertEquals("\":", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
      assertEquals("getFormat", locale0.getVariant());
      assertEquals("5]PHD^&TO\"YSV", locale0.getCountry());
      assertEquals("\":_5]PHD^&TO\"YSV_getFormat", locale0.toString());
      assertEquals("\":", locale0.getLanguage());
      assertNotNull(string0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("getFormat", locale0.getVariant());
      assertEquals("5]PHD^&TO\"YSV", locale0.getCountry());
      assertEquals("\":_5]PHD^&TO\"YSV_getFormat", locale0.toString());
      assertEquals("\":", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockGregorianCalendar0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("getFormat", locale0.getVariant());
      assertEquals("5]PHD^&TO\"YSV", locale0.getCountry());
      assertEquals("\":_5]PHD^&TO\"YSV_getFormat", locale0.toString());
      assertEquals("\":", locale0.getLanguage());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(320000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.32", timestamp0.toString());
      assertNotNull(timestamp0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "port");
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("getgetDeclaringClass");
      assertEquals(1132427420798482026L, long0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.clearClassMapping();
      char[] charArray0 = new char[5];
      charArray0[1] = 'U';
      System.setCurrentTimeMillis((-161L));
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      Boolean boolean1 = Boolean.valueOf(";tIEB&j_y:<}Qo");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = TypeUtils.castToBoolean(boolean1);
      assertFalse(boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      String string0 = TypeUtils.castToJavaBean((Object) mockNullPointerException0, class0);
      assertNotNull(string0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("org.evosuite.runtime.mock.java.lang.MockNullPointerException@0000000001");
      assertNotNull(illegalThreadStateException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.evosuite.runtime.mock.java.lang.MockNullPointerException@0000000001", "org.evosuite.runtime.mock.java.lang.MockNullPointerException@0000000001", illegalThreadStateException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      illegalThreadStateException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = illegalThreadStateException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      Class<TimeUnit> class1 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("%");
      assertEquals("%", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: %", illegalThreadStateException0.toString());
      assertNotNull(illegalThreadStateException0);
      
      StackTraceElement[] stackTraceElementArray0 = illegalThreadStateException0.getStackTrace();
      assertEquals("%", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: %", illegalThreadStateException0.toString());
      assertNotNull(stackTraceElementArray0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%", "%", illegalThreadStateException0);
      assertEquals("%", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: %", illegalThreadStateException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("%", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("%", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      illegalThreadStateException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals("%", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: %", illegalThreadStateException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("%", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("%", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: %", sQLIntegrityConstraintViolationException0.toString());
      
      StackTraceElement[] stackTraceElementArray1 = illegalThreadStateException0.getStackTrace();
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertEquals("%", illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException: %", illegalThreadStateException0.toString());
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNotNull(stackTraceElementArray1);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<Float> class1 = Float.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      long long0 = TypeUtils.fnv1a_64_lower("%");
      assertEquals((-5808631639944627968L), long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      long long0 = TypeUtils.fnv1a_64("LE");
      assertEquals(655664105523207978L, long0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = bitSet0.get(1255, 1255);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) bitSet1, class0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(string0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("6&yvSk&A'W=&vu7");
      assertEquals("java.lang.IllegalThreadStateException: 6&yvSk&A'W=&vu7", illegalThreadStateException0.toString());
      assertEquals("6&yvSk&A'W=&vu7", illegalThreadStateException0.getMessage());
      assertNotNull(illegalThreadStateException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.util.BitSet@0000000001", "LE", 1255);
      assertEquals("LE", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(1255, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      StackTraceElement[] stackTraceElementArray0 = illegalThreadStateException0.getStackTrace();
      assertEquals("java.lang.IllegalThreadStateException: 6&yvSk&A'W=&vu7", illegalThreadStateException0.toString());
      assertEquals("6&yvSk&A'W=&vu7", illegalThreadStateException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<MessageFormat> class1 = MessageFormat.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "LE", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "valueOf";
      long long0 = TypeUtils.fnv1a_64("valueOf");
      assertEquals((-6654070744266697509L), long0);
      
      Type[] typeArray0 = new Type[0];
      Class<Long> class0 = Long.TYPE;
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<?> class0 = TypeUtils.loadClass("^e^{");
      assertNull(class0);
      
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not create ASMParser
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      String string1 = ";x?G?Sk!@R";
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "oracle.sql.DATE");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass(";x?G?Sk!@R", classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) null;
      typeArray0[1] = null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@34e63b41
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(string0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException((String) null);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertNotNull(illegalThreadStateException0);
      
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      assertNotNull(weakHashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("getFormat", weakHashMap0, illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: getFormat", sQLClientInfoException0.toString());
      assertEquals("getFormat", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      weakHashMap0.put("java.lang.Comparable", clientInfoStatus0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: getFormat", sQLClientInfoException0.toString());
      assertEquals("getFormat", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, illegalThreadStateException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: getFormat", sQLClientInfoException0.toString());
      assertEquals("getFormat", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.lang.IllegalThreadStateException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.lang.IllegalThreadStateException", sQLClientInfoException1.getMessage());
      assertNotNull(sQLClientInfoException1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.alibaba.fastjson.util.TypeUtils", "java.lang.Comparable", (-1955037304), sQLClientInfoException1);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: getFormat", sQLClientInfoException0.toString());
      assertEquals("getFormat", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: java.lang.IllegalThreadStateException", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.lang.IllegalThreadStateException", sQLClientInfoException1.getMessage());
      assertEquals((-1955037304), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.alibaba.fastjson.util.TypeUtils", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("com.alibaba.fastjson.util.TypeUtils", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.lang.Comparable", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\":", "5]PHd^&TO\"YSv", (-2295), illegalThreadStateException0);
      assertNull(illegalThreadStateException0.getMessage());
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
      assertEquals("5]PHd^&TO\"YSv", sQLTransactionRollbackException0.getSQLState());
      assertEquals((-2295), sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: \":", sQLTransactionRollbackException0.toString());
      assertEquals("\":", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Class<Annotation> class2 = Annotation.class;
      Class<SQLTimeoutException> class3 = SQLTimeoutException.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class3, class2);
      assertNull(annotation0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class4 = TypeUtils.loadClass("E[j?ZtQ~.]k!B@dWyI~", classLoader0, true);
      assertNull(class4);
      
      String string1 = TypeUtils.decapitalize("lemur");
      assertEquals("lemur", string1);
      assertNotNull(string1);
      
      Class<?> class5 = TypeUtils.getCollectionItemClass(class1);
      assertEquals("class java.lang.Object", class5.toString());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertNotNull(class5);
      
      Collection collection0 = TypeUtils.createCollection(class5);
      assertEquals("class java.lang.Object", class5.toString());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertNotNull(collection0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(clientInfoStatus0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.sql.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      long long0 = TypeUtils.fnv1a_64("[n");
      assertEquals(675918209222509084L, long0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LE";
      stringArray0[0] = "[n";
      stringArray0[4] = stringArray0[3];
      stringArray0[5] = "[n";
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Class<NegativeArraySizeException> class1 = NegativeArraySizeException.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("[n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [n
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      BiFunction<Object, Object, NoSuchFieldException> biFunction0 = (BiFunction<Object, Object, NoSuchFieldException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = "toString";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("toString", classLoader0);
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNull(type0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      classLoader1.setPackageAssertionStatus("Cfh{2_,ud~ut`u", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertSame(classLoader0, classLoader2);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertFalse(class2.equals((Object)class1));
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertNotNull(class2);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class2, class2);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(parameterizedTypeImpl1);
      
      Class<Object> class3 = Object.class;
      int int0 = TypeUtils.getSerializeFeatures(class3);
      assertEquals(0, int0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-1223));
      assertEquals("String index out of range: -1223", stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException: String index out of range: -1223", stringIndexOutOfBoundsException0.toString());
      assertNotNull(stringIndexOutOfBoundsException0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      Class<NumberDeserializer> class4 = NumberDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) weakHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = null;
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(string0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = hashMap0.put("4GosBa%#-hz", "yyyy-MM-dd");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      String string2 = hashMap0.put("]IyY%", "yyyyMMddHHmmssSSSZ");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string2);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("yyyyMMddHHmmssSSSZ");
      assertNotNull(mockNullPointerException0);
      
      StackTraceElement[] stackTraceElementArray0 = mockNullPointerException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      DataTruncation dataTruncation0 = new DataTruncation(15, false, false, 15, 15);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      int int0 = Opcodes.T_INT;
      assertEquals(10, int0);
      
      long long0 = TypeUtils.fnv1a_64_lower("?B9_wYh|0:BI[t\",");
      assertEquals((-3149979104593783531L), long0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]IyY%");
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertNotNull(defaultJSONParser0);
      
      Byte byte0 = new Byte((byte) (-66));
      assertEquals((byte) (-66), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-66));
      assertEquals((byte) (-66), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Character character0 = new Character('t');
      assertEquals('t', (char)character0);
      assertNotNull(character0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : t
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("1");
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("1");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = TypeUtils.castToByte("1");
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("1", true);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Locale locale0 = TypeUtils.toLocale("yAJ#N.|)3A,b<J");
      assertEquals("", locale0.getCountry());
      assertEquals("yaj#n.|)3a,b<j", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("yaj#n.|)3a,b<j", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Hashtable<AtomicInteger, SQLClientInfoException> hashtable1 = new Hashtable<AtomicInteger, SQLClientInfoException>();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      Collection<SQLClientInfoException> collection0 = hashtable1.values();
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(collection0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertFalse(type1.equals((Object)type0));
      assertNotNull(type1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("yyyy-MM-ddTHH:mm:ss.SSS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : yyyy-MM-ddTHH:mm:ss.SSS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      assertNotNull(mockIllegalAccessException0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("parse error");
      assertNotNull(mockNullPointerException0);
      
      StackTraceElement[] stackTraceElementArray0 = mockNullPointerException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat> identityHashMap1 = new java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat>();
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertNotNull(identityHashMap1);
      
      Class<Character> class1 = Character.TYPE;
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      Class<SimpleDateFormat> class2 = SimpleDateFormat.class;
      boolean boolean2 = TypeUtils.isProxy(class2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      assertNull(indexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.IndexOutOfBoundsException", indexOutOfBoundsException0.toString());
      assertNotNull(indexOutOfBoundsException0);
      
      String string0 = indexOutOfBoundsException0.getLocalizedMessage();
      assertNull(indexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.IndexOutOfBoundsException", indexOutOfBoundsException0.toString());
      assertNull(string0);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e[Z`Y");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<SQLDataException> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      String string0 = linkedHashMap0.computeIfAbsent("org.apache.ibatis.javassist.util.proxy.ProxyObject", unaryOperator0);
      assertEquals("org.apache.ibatis.javassist.util.proxy.ProxyObject", string0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      assertNotNull(string0);
      
      String string1 = linkedHashMap0.put("b+Z", "b+Z");
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(2, linkedHashMap0.size());
      assertNull(string1);
      
      Class<NumberFormat> class1 = NumberFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, linkedHashMap0, true, propertyNamingStrategy0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(2, linkedHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale locale1 = TypeUtils.toLocale("n2MWLa;*A*|j}A");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("n2mwla;*a*|j}a", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("n2mwla;*a*|j}a", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Class<JobAttributes> class2 = JobAttributes.class;
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNotNull(linkedHashMap1);
      
      Field field0 = ParserConfig.getFieldFromCache("b+Z", linkedHashMap1);
      assertTrue(linkedHashMap1.isEmpty());
      assertEquals(0, linkedHashMap1.size());
      assertNull(field0);
      
      Class<SQLFeatureNotSupportedException> class3 = SQLFeatureNotSupportedException.class;
      FieldInfo fieldInfo0 = new FieldInfo("b+Z", class0, class3, class2, (Field) null, 484, 0, 73);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertEquals(73, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals("b+Z", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      
      Class<HttpCookie> class4 = HttpCookie.class;
      BeanContext beanContext0 = new BeanContext(class4, fieldInfo0);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertEquals(73, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals("b+Z", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(0, beanContext0.getFeatures());
      assertEquals("b+Z", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertEquals(73, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.isEnum);
      assertEquals("b+Z", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals(0, beanContext0.getFeatures());
      assertEquals("b+Z", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertNull(method0);
      
      Byte byte0 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte0);
      assertNotNull(byte0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-5266), 2147483645, (-26760553));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-5266,MONTH=2147483645,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-26760553,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Time time0 = TypeUtils.castToSqlTime(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-5266,MONTH=2147483645,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-26760553,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("00:00:00", time0.toString());
      assertNotNull(time0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      String string0 = TypeUtils.decapitalize("T;RS$");
      assertEquals("t;RS$", string0);
      assertNotNull(string0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      String string1 = "create instance error, ";
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("T;RS$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : T;RS$
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S::/7^FS");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = '@';
      charArray0[2] = '\"';
      charArray0[3] = 'W';
      charArray0[4] = 'g';
      charArray0[5] = '5';
      charArray0[6] = 'h';
      charArray0[7] = '`';
      charArray0[8] = 'f';
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {']', '@', '\"', 'W', 'g', '5', 'h', '`', 'f'}, charArray0);
      assertNull(uUID0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      boolean boolean0 = false;
      TypeUtils.clearClassMapping();
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      char char0 = File.separatorChar;
      assertEquals('/', char0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      long long0 = TypeUtils.fnv1a_64_lower("M5C+s;$");
      assertEquals((-7445842403242075459L), long0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("M5C+s;$");
      assertEquals("M5C+s;$", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fileName", "UMNZE/hr", "AllowUnQuotedFieldNames", 0);
      assertEquals("fileName", stackTraceElement0.getClassName());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("fileName.UMNZE/hr(AllowUnQuotedFieldNames:0)", stackTraceElement0.toString());
      assertEquals("UMNZE/hr", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("AllowUnQuotedFieldNames", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("y}7eSoMQz]A* s[");
      assertEquals("y}7eSoMQz]A* s[", outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError: y}7eSoMQz]A* s[", outOfMemoryError0.toString());
      assertNotNull(outOfMemoryError0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      outOfMemoryError0.setStackTrace(stackTraceElementArray0);
      assertEquals("y}7eSoMQz]A* s[", outOfMemoryError0.getMessage());
      assertEquals("java.lang.OutOfMemoryError: y}7eSoMQz]A* s[", outOfMemoryError0.toString());
      
      ThreadGroup threadGroup1 = new ThreadGroup("AllowUnQuotedFieldNames");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("AllowUnQuotedFieldNames", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread("j");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "j", 3730752432285826863L);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("AllowUnQuotedFieldNames", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("AllowUnQuotedFieldNames", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader0.setPackageAssertionStatus("UMNZE/hr", false);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("AllowUnQuotedFieldNames", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      
      Character character0 = new Character('4');
      assertEquals('4', (char)character0);
      assertFalse(character0.equals((Object)char0));
      assertNotNull(character0);
      
      Short short0 = new Short((short)4);
      assertEquals((short)4, (short)short0);
      assertNotNull(short0);
      
      java.util.Date date0 = TypeUtils.castToDate(short0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kotlin.ranges.LongRange");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Double double0 = new Double((-1080.0));
      assertEquals((-1080.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Short short0 = TypeUtils.castToShort(double0);
      assertEquals((short) (-1080), (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Field[] fieldArray0 = new Field[0];
      UUID uUID0 = MockUUID.fromString("G");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat> identityHashMap1 = new java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat>();
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertNotNull(identityHashMap1);
      
      Class<Character> class1 = Character.TYPE;
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("cbn@t.Q4Pac)?2fS1`d");
      assertEquals("java.lang.NegativeArraySizeException: cbn@t.Q4Pac)?2fS1`d", negativeArraySizeException0.toString());
      assertEquals("cbn@t.Q4Pac)?2fS1`d", negativeArraySizeException0.getMessage());
      assertNotNull(negativeArraySizeException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.NegativeArraySizeException: cbn@t.Q4Pac)?2fS1`d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      Field[] fieldArray0 = new Field[0];
      UUID uUID0 = MockUUID.fromString("G");
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertNotNull(uUID0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
      
      Field field0 = TypeUtils.getField(class0, "P9x$mO60{Jq^W,^Igu", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("G", class0, class0, class0, (Field) null, 2492, 127, 2114);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(2114, fieldInfo0.parserFeatures);
      assertEquals(127, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertNull(fieldInfo0.getFormat());
      assertEquals("G", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      Class<ChoiceFormat> class2 = ChoiceFormat.class;
      Field field1 = TypeUtils.getField(class2, "@CqS)>'9<#q^LZ-Uzn", fieldArray0);
      assertNull(field1);
      
      FieldInfo fieldInfo1 = new FieldInfo("", class1, fieldInfo0.declaringClass, fieldInfo0.fieldType, (Field) null, (-1640), 127, (-728));
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(2114, fieldInfo0.parserFeatures);
      assertEquals(127, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo1.fieldTransient);
      assertFalse(fieldInfo1.jsonDirect);
      assertEquals(127, fieldInfo1.serialzeFeatures);
      assertFalse(fieldInfo1.unwrapped);
      assertFalse(fieldInfo1.isEnum);
      assertFalse(fieldInfo1.fieldAccess);
      assertFalse(fieldInfo1.getOnly);
      assertEquals((-728), fieldInfo1.parserFeatures);
      assertFalse(fieldInfo1.equals((Object)fieldInfo0));
      assertNull(fieldInfo0.getFormat());
      assertEquals("G", fieldInfo0.toString());
      assertEquals("", fieldInfo1.toString());
      assertNull(fieldInfo1.getFormat());
      assertNotNull(fieldInfo1);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo1);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(2114, fieldInfo0.parserFeatures);
      assertEquals(127, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo1.fieldTransient);
      assertFalse(fieldInfo1.jsonDirect);
      assertEquals(127, fieldInfo1.serialzeFeatures);
      assertFalse(fieldInfo1.unwrapped);
      assertFalse(fieldInfo1.isEnum);
      assertFalse(fieldInfo1.fieldAccess);
      assertFalse(fieldInfo1.getOnly);
      assertEquals((-728), fieldInfo1.parserFeatures);
      assertFalse(fieldInfo0.equals((Object)fieldInfo1));
      assertFalse(fieldInfo1.equals((Object)fieldInfo0));
      assertNull(fieldInfo0.getFormat());
      assertEquals("G", fieldInfo0.toString());
      assertEquals("", fieldInfo1.toString());
      assertNull(fieldInfo1.getFormat());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals("", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(127, beanContext0.getFeatures());
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(2114, fieldInfo0.parserFeatures);
      assertEquals(127, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo1.fieldTransient);
      assertFalse(fieldInfo1.jsonDirect);
      assertEquals(127, fieldInfo1.serialzeFeatures);
      assertFalse(fieldInfo1.unwrapped);
      assertFalse(fieldInfo1.isEnum);
      assertFalse(fieldInfo1.fieldAccess);
      assertFalse(fieldInfo1.getOnly);
      assertEquals((-728), fieldInfo1.parserFeatures);
      assertFalse(fieldInfo0.equals((Object)fieldInfo1));
      assertFalse(fieldInfo1.equals((Object)fieldInfo0));
      assertNull(fieldInfo0.getFormat());
      assertEquals("G", fieldInfo0.toString());
      assertEquals("", fieldInfo1.toString());
      assertNull(fieldInfo1.getFormat());
      assertNull(beanContext0.getFormat());
      assertEquals("", beanContext0.getLabel());
      assertEquals("", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(127, beanContext0.getFeatures());
      assertNotSame(fieldInfo0, fieldInfo1);
      assertNotSame(fieldInfo1, fieldInfo0);
      assertNull(method0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      StackTraceElement stackTraceElement0 = TypeUtils.cast((Object) null, (Type) fieldInfo0.fieldClass, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(2114, fieldInfo0.parserFeatures);
      assertEquals(127, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.equals((Object)fieldInfo1));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNull(fieldInfo0.getFormat());
      assertEquals("G", fieldInfo0.toString());
      assertNotSame(fieldInfo0, fieldInfo1);
      assertNull(stackTraceElement0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertEquals(0, treeMap1.size());
      assertNotNull(treeMap1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(fieldInfo0.declaringClass, (Map<String, String>) treeMap1, propertyNamingStrategy0, false);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(2114, fieldInfo0.parserFeatures);
      assertEquals(127, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertFalse(fieldInfo0.equals((Object)fieldInfo1));
      assertEquals(0, treeMap1.size());
      assertNull(fieldInfo0.getFormat());
      assertEquals("G", fieldInfo0.toString());
      assertNotSame(treeMap1, treeMap0);
      assertNotSame(fieldInfo0, fieldInfo1);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class org.evosuite.runtime.mock.java.util.MockCalendar", class1.toString());
      assertNotNull(class1);
      
      TypeUtils.clearClassMapping();
      Class<Short> class2 = Short.class;
      Short short0 = TypeUtils.castToEnum((Object) "", class2, (ParserConfig) null);
      assertNull(short0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      NoSuchMethodException noSuchMethodException1 = new NoSuchMethodException();
      assertFalse(noSuchMethodException1.equals((Object)noSuchMethodException0));
      assertNull(noSuchMethodException1.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException1.toString());
      assertNotNull(noSuchMethodException1);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      boolean boolean1 = TypeUtils.isNumber("getConstructors");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale1 = TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("fastjson.parser.autotypeaccept", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fastjson.parser.autotypeaccept", locale1.toString());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("T;RS$");
      assertEquals("T;RS$", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "c\";hos3J[J.");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("T;RS$", threadGroup0.getName());
      assertEquals("c\";hos3J[J.", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "getCalendarType", (-362L));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals("T;RS$", threadGroup0.getName());
      assertEquals("c\";hos3J[J.", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread();
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      Thread thread1 = MockThread.currentThread();
      assertFalse(thread1.isInterrupted());
      assertFalse(thread1.isDaemon());
      assertSame(thread1, thread0);
      assertNotNull(thread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      
      MockThread mockThread2 = new MockThread();
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertNotNull(mockThread2);
      
      MockThread mockThread3 = new MockThread(mockThread1);
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread3);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig2 = ParserConfig.global;
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertNotSame(parserConfig2, parserConfig0);
      assertNotSame(parserConfig2, parserConfig1);
      assertNotNull(parserConfig2);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat> identityHashMap0 = new java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<Character> class0 = Character.TYPE;
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("thy}d=2ta@lqb");
      assertEquals("thy}d=2ta@lqb", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: thy}d=2ta@lqb", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      StackTraceElement stackTraceElement0 = TypeUtils.cast((Object) "", (Type) parameterizedTypeImpl0, parserConfig2);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertNotSame(parserConfig2, parserConfig0);
      assertNotSame(parserConfig2, parserConfig1);
      assertNull(stackTraceElement0);
      
      boolean boolean3 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("c\";hos3J[J.");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : c\";hos3J[J
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      String string0 = TypeUtils.decapitalize("T;RS$");
      assertEquals("t;RS$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      boolean boolean1 = TypeUtils.isNumber("getConstructors");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale1 = TypeUtils.toLocale("fastjson.parser.autoTypeAccept");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fastjson.parser.autotypeaccept", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fastjson.parser.autotypeaccept", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("T;RS$");
      assertEquals("T;RS$", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      String string1 = "tDq2/-7#+zg(+";
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "tDq2/-7#+zg(+");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("T;RS$", threadGroup0.getName());
      assertEquals("tDq2/-7#+zg(+", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread(threadGroup1, thread0, "getCalendarType", (-362L));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertEquals("T;RS$", threadGroup0.getName());
      assertEquals("tDq2/-7#+zg(+", threadGroup1.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(thread0, " os|A.wCtWGgZ8(nq[");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      Thread thread1 = MockThread.currentThread();
      assertFalse(thread1.isInterrupted());
      assertFalse(thread1.isDaemon());
      assertSame(thread1, thread0);
      assertNotNull(thread1);
      
      MockThread mockThread2 = new MockThread();
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      
      MockThread mockThread3 = new MockThread(mockThread1);
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread3);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig2 = ParserConfig.global;
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertNotSame(parserConfig2, parserConfig1);
      assertNotSame(parserConfig2, parserConfig0);
      assertNotNull(parserConfig2);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat> identityHashMap0 = new java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<Character> class0 = Character.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("thy}d=2ta@lqb");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("thy}d=2ta@lqb", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: thy}d=2ta@lqb", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "t;RS$", (Type) parameterizedTypeImpl0, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 7, json : \"t;RS$\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "tri");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader1);
      
      Class<?> class1 = TypeUtils.loadClass("get", classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNull(class1);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) null;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      Class<?> class2 = TypeUtils.getCollectionItemClass(typeArray0[2]);
      assertFalse(class2.isAnnotation());
      assertEquals("class java.util.concurrent.TimeUnit", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(17409, class2.getModifiers());
      assertTrue(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      typeArray0[4] = (Type) class2;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, typeArray0[3]);
      assertNotNull(parameterizedTypeImpl0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.ibatis.javassist.util.proxy.ProxyObject", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.ibatis.javassist.util.proxy.ProxyObject", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLException sQLException0 = new SQLException((String) null, (String) null, sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: org.apache.ibatis.javassist.util.proxy.ProxyObject", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("org.apache.ibatis.javassist.util.proxy.ProxyObject", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNotNull(sQLException0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<DecimalFormatSymbols> class3 = DecimalFormatSymbols.class;
      boolean boolean0 = TypeUtils.isPath(class3);
      assertFalse(boolean0);
      
      OptionalCodec optionalCodec0 = new OptionalCodec();
      assertEquals(12, optionalCodec0.getFastMatchToken());
      assertNotNull(optionalCodec0);
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(typeArray0[2]);
      assertTrue(class4.isEnum());
      assertFalse(class4.isAnnotation());
      assertEquals(17409, class4.getModifiers());
      assertEquals("class java.util.concurrent.TimeUnit", class4.toString());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertSame(class4, class2);
      assertNotNull(class4);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(string0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = hashMap0.put("4GosBa%#-hz", "yyyy-MM-dd");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      String string2 = hashMap0.put("]IyY%", "yyyyMMddHHmmssSSSZ");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string2);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("yyyyMMddHHmmssSSSZ");
      assertNotNull(mockNullPointerException0);
      
      StackTraceElement[] stackTraceElementArray0 = mockNullPointerException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<AtomicInteger> class1 = AtomicInteger.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, treeMap0.size());
      assertNotNull(list0);
      
      Locale locale0 = TypeUtils.toLocale("false");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("false", locale0.getLanguage());
      assertEquals("false", locale0.toString());
      assertNotNull(locale0);
      
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      assertEquals("java.lang.StackOverflowError", stackOverflowError0.toString());
      assertNull(stackOverflowError0.getMessage());
      assertNotNull(stackOverflowError0);
      
      MockNullPointerException mockNullPointerException1 = new MockNullPointerException("5W");
      assertFalse(mockNullPointerException1.equals((Object)mockNullPointerException0));
      assertNotNull(mockNullPointerException1);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, weakHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = TypeUtils.decapitalize("T;RS$");
      assertEquals("t;RS$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ThreadGroup threadGroup0 = new ThreadGroup(")*quh8Jh");
      assertEquals(")*quh8Jh", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("t;RS$", true);
      String string1 = "_,0[^$#\\.p,Z";
      Class<?> class0 = TypeUtils.loadClass("_,0[^$#.p,Z", classLoader0);
      assertNull(class0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ParserConfig parserConfig2 = ParserConfig.global;
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertNotSame(parserConfig2, parserConfig0);
      assertSame(parserConfig2, parserConfig1);
      assertNotNull(parserConfig2);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("fastjson.parser.deny");
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig2, (Type) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"asmEnable\":true,\"autoTypeSupport\":false,\"compatibleWithJavaBean\":true,\"deserializers\":{},\"fieldBased\":false,\"symbolTable\":{}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = treeMap0.put("e[Z`Y", "e[Z`Y");
      assertEquals(1, treeMap0.size());
      assertNull(string0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      treeMap0.putAll(linkedHashMap0);
      assertEquals(1, treeMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[0] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[3]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[4], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = Byte.toUnsignedInt((byte) (-21));
      assertEquals(235, int0);
      
      long long0 = Byte.toUnsignedLong((byte) (-63));
      assertEquals(193L, long0);
      
      int int1 = Byte.compare((byte) (-63), (byte) (-63));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Boolean boolean1 = TypeUtils.castToBoolean(byte0);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      VerifyError verifyError0 = new VerifyError();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNotNull(verifyError0);
      
      String string0 = verifyError0.getLocalizedMessage();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(verifyError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      String string0 = TypeUtils.decapitalize("T;RS$");
      assertEquals("t;RS$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("!q_wR;-$`%-", "fastjson.compatibleWithJavaBean", 97);
      assertEquals("!q_wR;-$`%-", sQLTransientException0.getMessage());
      assertEquals(97, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: !q_wR;-$`%-", sQLTransientException0.toString());
      assertEquals("fastjson.compatibleWithJavaBean", sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 29);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNotNull(noSuchFieldError0);
      
      String string0 = TypeUtils.decapitalize("T;RS$");
      assertEquals("t;RS$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      ParserConfig parserConfig2 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertNotSame(parserConfig2, parserConfig0);
      assertNotSame(parserConfig2, parserConfig1);
      assertNotNull(parserConfig2);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat> identityHashMap0 = new java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<Character> class0 = Character.TYPE;
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("-0ZTn*@i6Q*@J");
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: -0ZTn*@i6Q*@J", sQLRecoverableException0.toString());
      assertEquals("-0ZTn*@i6Q*@J", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("char", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("Ljava.util.concurrent.ConcurrentSkipListMap", (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-1.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      TypeUtils.clearClassMapping();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("");
      assertEquals("java.lang.OutOfMemoryError: ", outOfMemoryError0.toString());
      assertEquals("", outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Throwable throwable0 = outOfMemoryError0.fillInStackTrace();
      assertEquals("java.lang.OutOfMemoryError: ", outOfMemoryError0.toString());
      assertEquals("", outOfMemoryError0.getMessage());
      assertEquals("", throwable0.getMessage());
      assertEquals("java.lang.OutOfMemoryError: ", throwable0.toString());
      assertSame(outOfMemoryError0, throwable0);
      assertSame(throwable0, outOfMemoryError0);
      assertNotNull(throwable0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "can not cast to : ", 2118);
      assertEquals("can not cast to : ", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(".(can not cast to : :2118)", stackTraceElement0.toString());
      assertEquals(2118, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getClassName());
      assertEquals("", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "can not cast to : ", "can not cast to : ", 19);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("can not cast to : ", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(19, stackTraceElement1.getLineNumber());
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals("can not cast to : ", stackTraceElement1.getMethodName());
      assertEquals(".can not cast to : (can not cast to : :19)", stackTraceElement1.toString());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Lorg.springframework.util.LinkedMultiValueMap", "can not cast to : ", "| ", 2821);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals(2821, stackTraceElement2.getLineNumber());
      assertEquals("| ", stackTraceElement2.getFileName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("can not cast to : ", stackTraceElement2.getMethodName());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap.can not cast to : (| :2821)", stackTraceElement2.toString());
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", stackTraceElement2.getClassName());
      assertNotNull(stackTraceElement2);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("sM5Lx+!U/", treeMap0);
      assertEquals(0, treeMap0.size());
      assertNull(field0);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      TreeSet<NoSuchFieldError> treeSet1 = new TreeSet<NoSuchFieldError>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      NavigableSet<NoSuchFieldError> navigableSet0 = treeSet1.descendingSet();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(navigableSet0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      StackTraceElement stackTraceElement3 = TypeUtils.cast((Object) "", (Type) class0, parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(stackTraceElement3);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNotNull(noSuchFieldError0);
      
      String string0 = TypeUtils.decapitalize("T;RS$");
      assertEquals("t;RS$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      ThreadGroup threadGroup0 = new ThreadGroup(")*quh8Jh");
      assertEquals(")*quh8Jh", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig2 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertNotSame(parserConfig2, parserConfig1);
      assertNotSame(parserConfig2, parserConfig0);
      assertNotNull(parserConfig2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus((String) null, false);
      classLoader0.setPackageAssertionStatus("t;RS$", true);
      Class<?> class0 = TypeUtils.loadClass("_,0[^$#.p,Z", classLoader0);
      assertNull(class0);
      
      ParserConfig parserConfig3 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig3.compatibleWithJavaBean);
      assertFalse(parserConfig3.fieldBased);
      assertFalse(parserConfig3.equals((Object)parserConfig0));
      assertFalse(parserConfig3.equals((Object)parserConfig1));
      assertTrue(parserConfig3.isAsmEnable());
      assertFalse(parserConfig3.isAutoTypeSupport());
      assertNotSame(parserConfig3, parserConfig0);
      assertNotSame(parserConfig3, parserConfig1);
      assertSame(parserConfig3, parserConfig2);
      assertNotNull(parserConfig3);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertSame(classLoader0, classLoader1);
      assertNotNull(classLoader2);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.AtomicCodec", classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.alibaba.fastjson.serializer.AtomicCodec", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertSame(classLoader1, classLoader0);
      assertNotNull(class1);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("fastjson.parser.deny");
      assertEquals("java.lang.NoSuchMethodError: fastjson.parser.deny", noSuchMethodError0.toString());
      assertEquals("fastjson.parser.deny", noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NoSuchMethodError: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class0 = TypeUtils.getClass(type0);
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Locale locale0 = TypeUtils.toLocale("LE");
      assertEquals("le", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("le", locale0.getLanguage());
      assertNotNull(locale0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "LE");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread0, "LE");
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[n", classLoader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      assertNotNull(noSuchFieldError0);
      
      String string0 = "T;RS$";
      String string1 = TypeUtils.decapitalize("T;RS$");
      assertEquals("t;RS$", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      long long0 = TypeUtils.fnv1a_64_lower("yhNUY!}BeXV':]#6D");
      assertEquals(5895930423713771342L, long0);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ahz^A-l$^i[");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertNotNull(defaultJSONParser0);
      
      Byte byte0 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("yhNUY!}BeXV':]#6D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yhNUY!}BeXV':]#6D\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNotNull(noSuchMethodException0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertNotNull(class0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("uuOAQyL'm\"g^");
      assertEquals("uuOAQyL'm\"g^", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: uuOAQyL'm\"g^", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat> identityHashMap0 = new java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<Character> class1 = Character.TYPE;
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("PATTERN_DAY_OF_WEEK_IN_MONTH");
      assertEquals("PATTERN_DAY_OF_WEEK_IN_MONTH", negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException: PATTERN_DAY_OF_WEEK_IN_MONTH", negativeArraySizeException0.toString());
      assertNotNull(negativeArraySizeException0);
      
      InternalError internalError0 = new InternalError("moduleVersion");
      assertEquals("moduleVersion", internalError0.getMessage());
      assertEquals("java.lang.InternalError: moduleVersion", internalError0.toString());
      assertNotNull(internalError0);
      
      ParserConfig parserConfig1 = new ParserConfig(true);
      assertTrue(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      SecurityException securityException0 = new SecurityException();
      assertNull(securityException0.getMessage());
      assertEquals("java.lang.SecurityException", securityException0.toString());
      assertNotNull(securityException0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException: fastjson.parser.autoTypeSupport", illegalMonitorStateException0.toString());
      assertNotNull(illegalMonitorStateException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = TypeUtils.castToByte("");
      assertNull(byte0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("", true);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockThread mockThread0 = new MockThread("");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      String string0 = "yAJ#N.|)3A,b<J";
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      Locale locale0 = TypeUtils.toLocale("yAJ#N.|)3A,b<J");
      assertEquals("yaj#n.|)3a,b<j", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("yaj#n.|)3a,b<j", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      
      ThreadGroup threadGroup0 = new ThreadGroup(")*rJM.A*_");
      assertEquals(")*rJM.A*_", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        threadGroup0.uncaughtException(mockThread0, mockRuntimeException0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = ",H>yG/ $";
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(",H>yG/ $");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ,H>yG/ $
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = null;
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(string0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = hashMap0.put("4GosBa%#-hz", "yyyy-MR{dd");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      String string2 = hashMap0.put("]IyY%", "yyyyMMddHHmmssSSSZ");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string2);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("yyyyMMddHHmmssSSSZ");
      assertNotNull(mockNullPointerException0);
      
      long long0 = TypeUtils.fnv1a_64_lower("yyyy-MR{dd");
      assertEquals(1442555787156177379L, long0);
      
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("t}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      String string0 = treeMap0.compute("rdU%8C.)s|", biFunction0);
      assertEquals(0, treeMap0.size());
      assertNull(string0);
      
      String string1 = treeMap0.put("(K9R+qaOMB;l*[+", "rdU%8C.)s|");
      assertEquals(1, treeMap0.size());
      assertNull(string1);
      
      SortedMap<String, String> sortedMap0 = treeMap0.tailMap("A`w");
      assertEquals(1, treeMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(treeMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = treeMap0.put("rdU%8C.)s|", "rdU%8C.)s|");
      assertEquals(1, treeMap0.size());
      assertNull(string0);
      
      SortedMap<String, String> sortedMap0 = treeMap0.tailMap("A3`w");
      assertEquals(1, treeMap0.size());
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      Type[] typeArray0 = new Type[2];
      Class<Double> class1 = Double.TYPE;
      assertEquals("double", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      Type type0 = TypeUtils.getGenericParamType(typeArray0[1]);
      assertNull(type0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      assertEquals("double", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) sortedMap0);
      assertEquals(1, treeMap0.size());
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      Long long0 = new Long(3730752432285826863L);
      assertEquals(3730752432285826863L, (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = TypeUtils.castToInt(long0);
      assertEquals(525483823, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      TypeUtils.clearClassMapping();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("");
      assertEquals("java.lang.OutOfMemoryError: ", outOfMemoryError0.toString());
      assertEquals("", outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      OutOfMemoryError outOfMemoryError1 = new OutOfMemoryError("");
      assertFalse(outOfMemoryError1.equals((Object)outOfMemoryError0));
      assertEquals("", outOfMemoryError1.getMessage());
      assertEquals("java.lang.OutOfMemoryError: ", outOfMemoryError1.toString());
      assertNotNull(outOfMemoryError1);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "can not cast to : ", 2118);
      assertEquals("", stackTraceElement0.getMethodName());
      assertEquals("can not cast to : ", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(".(can not cast to : :2118)", stackTraceElement0.toString());
      assertEquals(2118, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getClassName());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "can not cast to : ", "can not cast to : ", 19);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("", stackTraceElement1.getClassName());
      assertEquals("can not cast to : ", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("can not cast to : ", stackTraceElement1.getFileName());
      assertEquals(".can not cast to : (can not cast to : :19)", stackTraceElement1.toString());
      assertEquals(19, stackTraceElement1.getLineNumber());
      assertNotNull(stackTraceElement1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      InterruptedException interruptedException0 = new InterruptedException(";R");
      assertEquals("java.lang.InterruptedException: ;R", interruptedException0.toString());
      assertEquals(";R", interruptedException0.getMessage());
      assertNotNull(interruptedException0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      Class<Timestamp> class1 = Timestamp.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("", ";R", 19);
      assertEquals("", sQLTransientException0.getMessage());
      assertEquals(19, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ", sQLTransientException0.toString());
      assertEquals(";R", sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, class0, class1);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      ConcurrentHashMap<String, String> concurrentHashMap1 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap1.equals((Object)concurrentHashMap0));
      assertTrue(concurrentHashMap1.isEmpty());
      assertNotNull(concurrentHashMap1);
      
      ConcurrentHashMap<String, String> concurrentHashMap2 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap2.equals((Object)concurrentHashMap1));
      assertTrue(concurrentHashMap2.equals((Object)concurrentHashMap0));
      assertTrue(concurrentHashMap2.isEmpty());
      assertNotNull(concurrentHashMap2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap1, propertyNamingStrategy0, true);
      assertTrue(concurrentHashMap1.equals((Object)concurrentHashMap2));
      assertTrue(concurrentHashMap1.equals((Object)concurrentHashMap0));
      assertTrue(concurrentHashMap1.isEmpty());
      assertNotSame(concurrentHashMap1, concurrentHashMap0);
      assertNotSame(concurrentHashMap1, concurrentHashMap2);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("valueOf");
      assertEquals((-6654070744266697509L), long0);
      
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      Hashtable<AtomicInteger, SQLClientInfoException> hashtable0 = new Hashtable<AtomicInteger, SQLClientInfoException>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Collection<SQLClientInfoException> collection0 = hashtable0.values();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(collection0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNotNull(noSuchFieldError0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Class<Calendar> class0 = Calendar.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = "Q";
      classLoader0.setPackageAssertionStatus("Q", true);
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.deny", classLoader0);
      assertNull(class1);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      ParserConfig parserConfig2 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertSame(parserConfig2, parserConfig1);
      assertNotSame(parserConfig2, parserConfig0);
      assertNotNull(parserConfig2);
      
      parserConfig0.setAsmEnable(true);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.equals((Object)parserConfig2));
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotSame(parserConfig0, parserConfig2);
      assertNotSame(parserConfig0, parserConfig1);
      
      Class<?> class2 = TypeUtils.getClassFromMapping("fastjson.parser.deny");
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "aq*/!P", (Type) null, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = hashMap0.put("3x", "3x");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("3x", (String) null);
      assertEquals("3x", string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(string1);
      
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("3x");
      assertEquals("3x", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      String string2 = treeMap0.compute("sPSjH!Ao'&[2TE(0!YL", biFunction0);
      assertEquals(0, treeMap0.size());
      assertNull(string2);
      
      String string3 = treeMap0.put(".>'5+A)i%k->s", "5");
      assertEquals(1, treeMap0.size());
      assertNull(string3);
      
      SortedMap<String, String> sortedMap0 = treeMap0.tailMap("mark_context");
      assertEquals(1, treeMap0.size());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(sortedMap0);
      assertEquals(1, treeMap0.size());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class [C", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      
      Class<?> class3 = TypeUtils.getClass((Type) class2);
      assertFalse(class3.equals((Object)class1));
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class [C", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class3.isAnnotation());
      assertEquals(1041, class3.getModifiers());
      assertTrue(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertEquals("class [C", class3.toString());
      assertFalse(class3.isPrimitive());
      assertNotSame(class1, class3);
      assertNotSame(class3, class1);
      assertNotNull(class3);
      
      Locale locale0 = TypeUtils.toLocale("LE");
      assertEquals("le", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("le", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "LE");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread0, "LE");
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[n", classLoader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNotNull(noSuchFieldError0);
      
      String string0 = TypeUtils.decapitalize("T;RS$");
      assertEquals("t;RS$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement(")*quh8Jh", "[I", "com.alibaba.fastjson.serializer.ReferenceCodec", 16);
      assertEquals("com.alibaba.fastjson.serializer.ReferenceCodec", stackTraceElement0.getFileName());
      assertEquals("[I", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(16, stackTraceElement0.getLineNumber());
      assertEquals(")*quh8Jh", stackTraceElement0.getClassName());
      assertEquals(")*quh8Jh.[I(com.alibaba.fastjson.serializer.ReferenceCodec:16)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("D/|L-sum+8?^", "fastjson.parser.autoTypeAccept", "com.alibaba.fastjson.serializer.ReferenceCodec", 3546);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("com.alibaba.fastjson.serializer.ReferenceCodec", stackTraceElement1.getFileName());
      assertEquals(3546, stackTraceElement1.getLineNumber());
      assertEquals("D/|L-sum+8?^", stackTraceElement1.getClassName());
      assertEquals("D/|L-sum+8?^.fastjson.parser.autoTypeAccept(com.alibaba.fastjson.serializer.ReferenceCodec:3546)", stackTraceElement1.toString());
      assertEquals("fastjson.parser.autoTypeAccept", stackTraceElement1.getMethodName());
      assertNotNull(stackTraceElement1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<RenderingHints.Key> class0 = RenderingHints.Key.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      NavigableSet<String> navigableSet0 = treeMap0.navigableKeySet();
      assertEquals(0, treeMap0.size());
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertNotNull(navigableSet0);
      
      Class<MockDate> class1 = MockDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) treeMap0, false);
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Time time0 = new Time(0L);
      assertEquals("00:00:00", time0.toString());
      assertNotNull(time0);
      
      java.util.Date date0 = TypeUtils.castToDate(time0);
      assertEquals("00:00:00", time0.toString());
      assertEquals("00:00:00", date0.toString());
      assertSame(time0, date0);
      assertSame(date0, time0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      assertEquals(0, treeMap1.size());
      assertNotNull(treeMap1);
      
      Class<RenderingHints> class1 = RenderingHints.class;
      Class<DateFormatSymbols> class2 = DateFormatSymbols.class;
      Field field0 = ParserConfig.getFieldFromCache("create", treeMap1);
      assertEquals(0, treeMap1.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("ytve", class2, class1, class2, (Field) null, 29, 37, 2354);
      assertEquals(2354, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(37, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("ytve", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      assertEquals(2354, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(37, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("ytve", fieldInfo0.toString());
      assertNull(beanContext0.getFormat());
      assertEquals(37, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertEquals("ytve", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNotNull(beanContext0);
      
      Field field1 = beanContext0.getField();
      assertEquals(2354, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(37, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("ytve", fieldInfo0.toString());
      assertNull(beanContext0.getFormat());
      assertEquals(37, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertEquals("ytve", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(field1);
      
      Field field2 = treeMap1.put("ytve", (Field) null);
      assertEquals(1, treeMap1.size());
      assertNull(field2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, true, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertEquals(1, treeMap1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, treeMap0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("us[B==M]'.^G");
      assertEquals("us[B==M]'.^G", illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError: us[B==M]'.^G", illegalAccessError0.toString());
      assertNotNull(illegalAccessError0);
      
      IllegalAccessError illegalAccessError1 = new IllegalAccessError();
      assertFalse(illegalAccessError1.equals((Object)illegalAccessError0));
      assertNull(illegalAccessError1.getMessage());
      assertEquals("java.lang.IllegalAccessError", illegalAccessError1.toString());
      assertNotNull(illegalAccessError1);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Point point0 = new Point(29, 29);
      assertEquals(29, point0.x);
      assertEquals(29, point0.y);
      assertEquals(29.0, point0.getX(), 0.01);
      assertEquals(29.0, point0.getY(), 0.01);
      assertNotNull(point0);
      
      Point point1 = new Point(point0);
      assertEquals(29, point0.x);
      assertEquals(29, point0.y);
      assertEquals(29, point1.x);
      assertEquals(29, point1.y);
      assertTrue(point1.equals((Object)point0));
      assertEquals(29.0, point0.getX(), 0.01);
      assertEquals(29.0, point0.getY(), 0.01);
      assertEquals(29.0, point1.getX(), 0.01);
      assertEquals(29.0, point1.getY(), 0.01);
      assertNotNull(point1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(treeMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {ytve=null}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean1 = TypeUtils.isNumber("+X");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      TreeSet<NoSuchFieldError> treeSet0 = new TreeSet<NoSuchFieldError>();
      assertNotNull(treeSet0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeSupport", false);
      String string0 = "getClass";
      classLoader0.setPackageAssertionStatus("getClass", true);
      Class<?> class1 = TypeUtils.loadClass("+X", classLoader0);
      assertNull(class1);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat> identityHashMap0 = new java.util.IdentityHashMap<MockSimpleDateFormat, SimpleDateFormat>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      Class<Character> class2 = Character.TYPE;
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("char", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("ha");
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ha", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("ha", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Class<Point> class4 = Point.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class4);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class5 = javaBeanSerializer0.getType();
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertEquals("class java.awt.Point", class5.toString());
      assertNotNull(class5);
      
      int int0 = (-1153344663);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.autoTypeSupport", "isiterator", (-1153344663), sQLRecoverableException0);
      assertEquals((-1153344663), sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: fastjson.parser.autoTypeSupport", sQLTimeoutException0.toString());
      assertEquals("fastjson.parser.autoTypeSupport", sQLTimeoutException0.getMessage());
      assertEquals("isiterator", sQLTimeoutException0.getSQLState());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ha", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("ha", sQLRecoverableException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (Type) class4, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      long long0 = TypeUtils.fnv1a_64("&sVW_0J\b@Q|zI");
      assertEquals(8631389974462232644L, long0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put("o", "gethashCode");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("aA1J}=!");
      assertEquals("aA1J}=!", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "O;yCu");
      assertEquals("aA1J}=!", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((Runnable) null, "o");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Class<?> class1 = TypeUtils.loadClass("O;yCu", classLoader1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread1, mockThread0);
      assertNull(class1);
      
      Locale locale0 = new Locale("WriteBigDecimalAsPlain");
      assertEquals("writebigdecimalasplain", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("writebigdecimalasplain", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("writebigdecimalasplain", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("writebigdecimalasplain", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNotNull(noSuchFieldError0);
      
      Boolean boolean1 = Boolean.valueOf("getgetCalendarType");
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Long long0 = new Long((-1370L));
      assertEquals((-1370L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("p2L((/W7T6_BxOQB]");
      assertNull(long1);
      
      int int0 = Long.compare((-1370L), (-1370L));
      assertEquals(0, int0);
      
      long long2 = Long.max((-1370L), (-1370L));
      assertEquals((-1370L), long2);
      
      Byte byte0 = TypeUtils.castToByte(long0);
      assertEquals((byte) (-90), (byte)byte0);
      assertTrue(long0.equals((Object)long2));
      assertNotNull(byte0);
  }
}
