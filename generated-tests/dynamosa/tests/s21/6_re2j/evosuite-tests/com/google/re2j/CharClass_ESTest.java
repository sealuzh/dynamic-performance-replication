/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 09:25:12 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1114111;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 64;
      intArray0[3] = (-2162);
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1114111, 0, 64, (-2162), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 1114111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 91;
      intArray0[1] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {91, 32, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[5][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 91;
      intArray2[1] = 91;
      CharClass charClass1 = charClass0.appendLiteral(32, 32);
      assertArrayEquals(new int[] {91, 32, 0, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertArrayEquals(new int[] {91, 32, 0, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray2);
      assertArrayEquals(new int[] {91, 32, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {91, 91, 0, 0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 3488);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      CharClass charClass4 = new CharClass();
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass4);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass4));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.negateClass();
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertEquals(0, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass4));
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = (-2049);
      String string0 = CharClass.charClassToString(intArray0, (-2049));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[3][4];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int int1 = 70;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 12307;
      intArray0[1] = 1668;
      intArray0[2] = (-2009);
      intArray0[3] = 3995;
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {12307, 1668, (-2009), 3995}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange((-2009), 3016);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {12307, 1668, (-2009), 3995}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass3);
      
      String string0 = charClass2.toString();
      assertEquals("[0x3013-0x684 0xfffff827-0xf9b 0x3013-0x684]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(string0);
      
      String string1 = charClass1.toString();
      assertArrayEquals(new int[] {12307, 1668, (-2009), 3995}, intArray0);
      assertEquals("[0x3013-0x684 0xfffff827-0xf9b 0x3013-0x684]", string1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertEquals(4, intArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 1228);
      assertArrayEquals(new int[] {12307, 1668, (-2009), 3995}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {12307, 1668, (-2009), 3995}, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1668;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray2, 1668);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 31;
      intArray0[2] = 66639;
      intArray0[3] = 32;
      intArray0[4] = 4;
      intArray0[5] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(153, (-4813));
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 66639);
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass5);
      
      String string0 = charClass5.toString();
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertEquals("[0x0-0x1f 0x1044f-0x20 0x0-0x10ffff 0x99-0xffffed33]", string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 4685;
      intArray0[1] = (-116);
      intArray0[2] = 0;
      intArray0[3] = 608;
      intArray0[4] = (-2780);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {4685, (-116), 0, 608, (-2780)}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(4685, 0);
      assertArrayEquals(new int[] {4685, (-116), 0, 608, (-2780)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[7][9];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray1, (-2780));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int int0 = 1117;
      int int1 = 32;
      CharClass charClass2 = charClass1.appendFoldedRange(1117, 32);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {1117, 32}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {1117, 32}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(1117, 32);
      assertArrayEquals(new int[] {1117, 32}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {1117, 32, 1117, 32, 1117, 32}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      CharClass charClass5 = charClass0.appendLiteral(32, 93);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 91;
      intArray0[0] = 91;
      int int1 = 32;
      intArray0[1] = 32;
      int int2 = (-425);
      intArray0[2] = (-425);
      int int3 = (-3111);
      intArray0[3] = (-3111);
      int int4 = 2271;
      intArray0[4] = 2271;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {91, 32, (-425), (-3111), 2271}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1637;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1637, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 1637, 0, 0, 0, 1637, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(32, 1117);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(1117, 32);
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      
      int[] intArray1 = charClass2.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertEquals(434, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      CharClass charClass5 = charClass0.appendLiteral(32, 93);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.appendClass(intArray0);
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass7);
      
      String string0 = CharClass.charClassToString(intArray1, 93);
      assertEquals("[0x20-0x45d 0x212a-0x212b 0x1e9e 0xe0-0xe5 0xc0-0xc5 0x212b 0xe6-0xf8 0xc6-0xd6 0xd8-0xde 0xf9-0x176 0x176-0x17f 0x53 0x73 0x180-0x181 0x243 0x253-0x254 0x182-0x18e 0x256-0x257 0x1dd 0x18f-0x190 0x259 0x25b 0x191-0x194 0x260 0x263 0x195-0x196 0x1f6 0x268-0x269 0x197-0x19c 0x23d 0x26f 0x19d-0x19e 0x272 0x220 0x19f-0x1a6 0x275 0x280 0x1a7-0x1ae 0x283 0x288 0x1af-0x1b7 0x28a-0x28b 0x292 0x1b8-0x1dd 0x1f7 0x18e 0x1de-0x1f7]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertEquals(434, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(string0);
      
      int[][] intArray2 = new int[8][6];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray0;
      CharClass charClass8 = new CharClass(intArray0);
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass8.appendNegatedClass(intArray1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass3);
      assertNotSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass8);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(434, intArray1.length);
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass3));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass9);
      
      CharClass charClass10 = charClass3.appendClassWithSign(intArray1, 1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertNotSame(charClass10, charClass8);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass9);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass8);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass9);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(434, intArray1.length);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass10.equals((Object)charClass8));
      assertFalse(charClass10.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass3.equals((Object)charClass8));
      assertFalse(charClass3.equals((Object)charClass9));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass10);
      
      String string1 = charClass10.toString();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertNotSame(charClass10, charClass8);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass9);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass8);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass9);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(434, intArray1.length);
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass10.equals((Object)charClass8));
      assertFalse(charClass10.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass3.equals((Object)charClass8));
      assertFalse(charClass3.equals((Object)charClass9));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 6753;
      intArray0[1] = 0;
      intArray0[2] = 153;
      intArray0[3] = (-1910);
      intArray0[4] = 1755;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {6753, 0, 153, (-1910), 1755}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-1910), 0);
      assertArrayEquals(new int[] {6753, 0, 153, (-1910), 1755}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-1910);
      intArray2[1] = (-1910);
      intArray2[2] = (-1910);
      intArray2[3] = 1755;
      intArray2[4] = 153;
      intArray2[5] = 6753;
      intArray2[6] = 153;
      intArray2[7] = (-1910);
      intArray2[8] = 6753;
      intArray1[3] = intArray2;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray1, (-394));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1637;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1637, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {1637, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertArrayEquals(new int[] {1637, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertArrayEquals(new int[] {1637, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1757;
      intArray0[1] = 1404;
      intArray0[2] = 1308;
      intArray0[3] = 1174;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1757, 1404, 1308, 1174}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 1174;
      intArray2[1] = 1174;
      intArray2[2] = 1;
      intArray1[5] = intArray2;
      intArray1[6] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {1757, 1404, 1308, 1174}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendRange(8490, (-25));
      assertArrayEquals(new int[] {1757, 1404, 1308, 1174}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      
      String string0 = charClass0.toString();
      assertArrayEquals(new int[] {1757, 1404, 1308, 1174}, intArray0);
      assertEquals("[0x6dd-0x57c 0x51c-0x496 0x496 0x212a-0xffffffe7]", string0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 31;
      intArray0[2] = 66639;
      intArray0[3] = 32;
      intArray0[4] = 4;
      intArray0[5] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(153, (-4813));
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[1][7];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendLiteral(4, 4);
      assertArrayEquals(new int[] {0, 31, 66639, 32, 4, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      
      int[] intArray2 = null;
      // Undeclared exception!
      try { 
        charClass3.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(66639, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(0, 32);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 32}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 32}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendRange(8209, 440);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 32, 8209, 440}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      CharClass charClass4 = charClass3.appendLiteral(8209, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 32}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass6);
      
      String string0 = CharClass.charClassToString(intArray0, (-2519));
      assertArrayEquals(new int[] {0, 32}, intArray0);
      assertEquals("[]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(string0);
      
      CharClass charClass7 = charClass4.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertNotNull(charClass7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 675;
      intArray0[1] = 0;
      intArray0[2] = 3112;
      intArray0[3] = 0;
      intArray0[4] = (-1909);
      intArray0[5] = 0;
      int int0 = 91;
      intArray0[6] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {675, 0, 3112, 0, (-1909), 0, 91}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1909), (-2393));
      assertArrayEquals(new int[] {675, 0, 3112, 0, (-1909), 0, 91}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      int int0 = 1308;
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 66640;
      intArray0[1] = 0;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-1662);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      CharClass charClass1 = charClass0.appendLiteral(66640, 0);
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(3, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 640;
      intArray0[1] = 66640;
      intArray0[2] = 91;
      intArray0[3] = (-1448);
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {640, 66640, 91, (-1448), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(968, 0);
      assertArrayEquals(new int[] {640, 66640, 91, (-1448), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      CharClass charClass4 = new CharClass();
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass4));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass3.appendClassWithSign(intArray1, 65);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass3.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass4));
      assertNotNull(charClass6);
      
      String string0 = charClass4.toString();
      assertEquals("[]", string0);
      assertNotSame(charClass4, charClass5);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass6);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass2);
      assertFalse(charClass4.equals((Object)charClass5));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass6));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 66639;
      intArray0[4] = 4;
      intArray0[5] = 66639;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 4, 66639}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 4, 66639}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 4, 66639}, intArray0);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 0, 66639, 0, 4, 66639}, intArray0);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 66639;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(0, 8071);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendClassWithSign(intArray0, (-587));
      assertArrayEquals(new int[] {0, 0, 66639, 0, 0, 0}, intArray0);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {1, 1114111}, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      CharClass charClass3 = charClass2.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1212;
      intArray0[1] = 0;
      intArray0[2] = 1690;
      intArray0[3] = 1774;
      intArray0[4] = (-1513);
      intArray0[5] = 76;
      intArray0[6] = 1839;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 91;
      intArray0[2] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 91, 91, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      CharClass charClass2 = charClass0.appendTableWithSign(intArray0, 490);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendTableWithSign(intArray0, (-337));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendLiteral((-2), (-2));
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendLiteral((-2), 2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, 2373);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1757;
      intArray0[1] = 1404;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1757, 1404, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(495, (-825));
      assertArrayEquals(new int[] {1757, 1404, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {1757, 1404, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[][] intArray0 = new int[0][5];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1747, (-723));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendTable(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-80));
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[5][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(0, (-758));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[0];
      CharClass charClass4 = charClass3.appendClass(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendRange(0, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendClassWithSign(intArray1, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass0.appendLiteral(0, (-2623));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass4.appendTableWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass7.appendLiteral(107, (-2623));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertNotNull(charClass9);
      
      String string0 = charClass9.toString();
      assertEquals("[0x0 0x6b 0x212a 0x4b]", string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertNotNull(string0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass10 = charClass4.appendFoldedClass(intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass10);
      
      CharClass charClass11 = charClass10.negateClass();
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass9);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass11);
      
      int[][] intArray3 = new int[0][7];
      assertFalse(intArray3.equals((Object)intArray0));
      
      CharClass charClass12 = charClass2.appendTableWithSign(intArray3, 0);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(charClass12);
      
      CharClass charClass13 = charClass12.negateClass();
      assertNotSame(intArray3, intArray0);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass10);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass13);
      assertSame(charClass12, charClass10);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass9);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass5);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(charClass13);
      
      CharClass charClass14 = charClass11.appendRange((-208), 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass10);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass13);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass6);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass13);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass12);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass13);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass14);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass9);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass14);
      
      CharClass charClass15 = charClass7.appendRange(22, 22);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass10);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass10);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass14);
      assertSame(charClass7, charClass15);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass13);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass10);
      assertNotNull(charClass15);
      
      CharClass charClass16 = charClass11.appendNegatedTable(intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass10);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass16);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass16);
      assertSame(charClass3, charClass15);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass13);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass1);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass6);
      assertSame(charClass16, charClass13);
      assertSame(charClass16, charClass12);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass10);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass7);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass8);
      assertSame(charClass16, charClass9);
      assertSame(charClass16, charClass0);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass15);
      assertSame(charClass4, charClass16);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass6);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass15);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass16);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass13);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass12);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass13);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass16);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass14);
      assertSame(charClass11, charClass15);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass9);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass16);
      
      CharClass charClass17 = charClass14.negateClass();
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass17);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass10);
      assertSame(charClass14, charClass15);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass17);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass16);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass17);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass16);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass16);
      assertSame(charClass3, charClass15);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass17);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass13);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass17, charClass9);
      assertSame(charClass17, charClass16);
      assertSame(charClass17, charClass0);
      assertSame(charClass17, charClass10);
      assertSame(charClass17, charClass12);
      assertSame(charClass17, charClass11);
      assertSame(charClass17, charClass2);
      assertSame(charClass17, charClass13);
      assertSame(charClass17, charClass6);
      assertSame(charClass17, charClass5);
      assertSame(charClass17, charClass15);
      assertSame(charClass17, charClass8);
      assertSame(charClass17, charClass1);
      assertSame(charClass17, charClass3);
      assertSame(charClass17, charClass4);
      assertSame(charClass17, charClass14);
      assertSame(charClass17, charClass7);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass15);
      assertSame(charClass4, charClass16);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass17);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass6);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass15);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass16);
      assertSame(charClass10, charClass17);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass13);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass12);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass13);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass16);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass14);
      assertSame(charClass11, charClass15);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass17);
      assertSame(charClass11, charClass9);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass17);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-321);
      intArray0[1] = 0;
      intArray0[2] = 180;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-321), 0, 180}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, (-321));
      assertArrayEquals(new int[] {(-321), 0, 180}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-803);
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {(-803), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      intArray0[2] = 32;
      intArray0[3] = 1254;
      intArray0[4] = (-2452);
      intArray0[5] = (-4017);
      intArray0[6] = (-2895);
      intArray0[7] = 0;
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-803), 0, 32, 1254, (-2452), (-4017), (-2895), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendRange(0, (-2452));
      assertArrayEquals(new int[] {(-803), 0, 32, 1254, (-2452), (-4017), (-2895), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.negateClass();
      assertArrayEquals(new int[] {(-803), 0, 32, 1254, (-2452), (-4017), (-2895), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      
      String string0 = charClass3.toString();
      assertArrayEquals(new int[] {(-803), 0, 32, 1254, (-2452), (-4017), (-2895), 0}, intArray0);
      assertEquals("[0xfffff4b1-0xffffffff 0xfffff66d-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      
      int[][] intArray1 = new int[9][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = (-2895);
      intArray2[2] = 0;
      intArray2[3] = 1161;
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass5 = charClass2.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {(-803), 0, 32, 1254, (-2452), (-4017), (-2895), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 66640;
      intArray0[1] = 0;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-1662);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray1);
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1662), 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass1, charClass0);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass1);
      
      int[][] intArray2 = new int[5][8];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray1;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray2);
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1662), 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendTableWithSign(intArray2, (-2170));
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1662), 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(0, (-1662));
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1662), 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendLiteral(66640, 0);
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1662), 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendFoldedRange(0, 181);
      assertArrayEquals(new int[] {66640, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1662), 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray1 = charClass0.toArray();
      assertArrayEquals(new int[] {1, 1114111}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[0];
      CharClass charClass4 = charClass3.appendClass(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendRange(0, 0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendClassWithSign(intArray1, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      
      String string0 = CharClass.charClassToString(intArray1, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals("[]", string0);
      assertEquals(0, intArray1.length);
      assertNotNull(string0);
      
      CharClass charClass7 = charClass0.appendLiteral(0, (-2623));
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass4.appendTableWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass7.appendLiteral(107, (-2623));
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertNotNull(charClass9);
      
      String string1 = charClass0.toString();
      assertEquals("[0x0 0x6b 0x212a 0x4b]", string1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[][] intArray2 = new int[0][7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass10 = charClass2.appendTableWithSign(intArray2, 0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass10);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass10);
      
      CharClass charClass11 = charClass10.negateClass();
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass10);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass11);
      
      CharClass charClass12 = charClass11.appendNegatedTable(intArray0);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass10);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass9);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(charClass12);
      
      CharClass charClass13 = charClass3.appendRange((-208), 0);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass12);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass13);
      assertNotNull(charClass13);
      
      CharClass charClass14 = charClass7.appendRange(22, 22);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass12);
      assertSame(charClass7, charClass13);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass14);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass3);
      assertNotNull(charClass14);
      
      CharClass charClass15 = charClass5.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass15);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass12);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass15);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass14);
      assertSame(charClass5, charClass12);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass15);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass14);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass13);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass15);
      
      CharClass charClass16 = charClass13.negateClass();
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass16);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass15);
      assertSame(charClass13, charClass16);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass14);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass16);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass15);
      assertSame(charClass3, charClass16);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass14);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass10);
      assertSame(charClass16, charClass7);
      assertSame(charClass16, charClass8);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass0);
      assertSame(charClass16, charClass1);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass13);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass6);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass9);
      assertSame(charClass16, charClass12);
      assertNotNull(charClass16);
      
      CharClass charClass17 = charClass8.cleanClass();
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass17);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass16);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass17);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass16);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass10);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass17);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass15);
      assertSame(charClass3, charClass16);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass14);
      assertSame(charClass17, charClass2);
      assertSame(charClass17, charClass8);
      assertSame(charClass17, charClass15);
      assertSame(charClass17, charClass9);
      assertSame(charClass17, charClass12);
      assertSame(charClass17, charClass16);
      assertSame(charClass17, charClass14);
      assertSame(charClass17, charClass7);
      assertSame(charClass17, charClass0);
      assertSame(charClass17, charClass3);
      assertSame(charClass17, charClass1);
      assertSame(charClass17, charClass13);
      assertSame(charClass17, charClass4);
      assertSame(charClass17, charClass6);
      assertSame(charClass17, charClass11);
      assertSame(charClass17, charClass5);
      assertSame(charClass17, charClass10);
      assertSame(charClass4, charClass17);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass16);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass15);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass13);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass17);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass15);
      assertSame(charClass8, charClass16);
      assertSame(charClass8, charClass14);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass17);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-2780);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1637, 1637);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 4685;
      intArray0[1] = 4685;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {4685, 4685, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4685;
      intArray1[1] = 4685;
      intArray1[2] = 4685;
      intArray1[3] = 4685;
      intArray1[4] = 4685;
      intArray1[5] = 4685;
      intArray1[6] = 4685;
      intArray1[7] = 10088;
      intArray1[8] = 4685;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1637;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1637, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertArrayEquals(new int[] {0, 1636, 1, 1114111, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral((-3688), 1793);
      assertArrayEquals(new int[] {0, 1636, 1, 1114111, (-3688), (-3688), 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      int[] intArray1 = charClass2.toArray();
      assertArrayEquals(new int[] {0, 1636, 1, 1114111, (-3688), (-3688), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1636, 1, 1114111, (-3688), (-3688)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      CharClass charClass3 = charClass0.appendLiteral((-1964), 1114112);
      assertArrayEquals(new int[] {0, 1636, 1, 1114111, (-3688), (-3688), (-1964), (-1964)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.negateClass();
      assertArrayEquals(new int[] {(-3687), (-1965), (-1963), 1114111, (-3688), (-3688), (-1964), (-1964)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {(-3688), (-1965), (-1964), 1114111, (-3688), (-3688), (-1964), (-1964)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass3.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-3688), (-1965), (-3687), 1114111, (-3688), (-3688), (-1964), (-1964)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass6.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {(-3688), (-1965), (-3688), 1114111, (-3688), (-3688), (-1964), (-1964)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass7);
      
      int[][] intArray2 = new int[0][0];
      CharClass charClass8 = charClass1.appendNegatedTable(intArray2);
      assertArrayEquals(new int[] {(-3688), (-1965), (-3688), 1114111, (-3688), (-3688), (-1964), (-1964)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass3.appendTableWithSign(intArray2, 119860);
      assertArrayEquals(new int[] {(-3688), (-1965), (-3688), 1114111, (-3688), (-3688), (-1964), (-1964)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(charClass9);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-436);
      intArray0[2] = 64;
      intArray0[3] = 91;
      intArray0[4] = (-501);
      intArray0[5] = (-62);
      intArray0[6] = 0;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, (-436), 64, 91, (-501), (-62), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 91;
      intArray2[1] = (-501);
      intArray2[2] = 91;
      intArray2[3] = 64;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertArrayEquals(new int[] {0, (-436), 64, 91, (-501), (-62), 0, 0}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertArrayEquals(new int[] {(-435), 63, (-61), (-1), 1, 1114111, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendRange(91, (-436));
      assertArrayEquals(new int[] {(-435), 63, (-61), (-1), 1, 1114111, 91, (-436)}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendLiteral(0, (-435));
      assertArrayEquals(new int[] {(-435), 63, (-61), (-1), 0, 1114111, 91, (-436)}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1757;
      intArray0[1] = 1404;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1757, 1404, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1, 65);
      assertArrayEquals(new int[] {1757, 1404, 0, 65}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {1757, 1404, 0, 65}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass3 = charClass1.appendTableWithSign(intArray1, 1757);
      assertArrayEquals(new int[] {1757, 1404, 0, 65}, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1672;
      int int1 = 1114111;
      // Undeclared exception!
      charClass0.appendFoldedRange(1672, 1114111);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1637;
      intArray0[1] = 1810;
      intArray0[0] = 1476;
      intArray0[3] = (-2181);
      intArray0[4] = 0;
      intArray0[5] = (-3715);
      intArray0[6] = 42912;
      intArray0[7] = 11500;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1476, 1810, 0, (-2181), 0, (-3715), 42912, 11500}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, (-2181), 0, (-3715), 1476, 1810, 42912, 11500}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertArrayEquals(new int[] {0, (-2181), 0, (-3715), 1476, 1810, 42912, 11500}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, (-2181), 0, (-3715), 1476, 1810, 42912, 11500}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-2181);
      intArray2[1] = 1114112;
      intArray2[2] = 1637;
      intArray2[3] = 1810;
      intArray2[4] = 42912;
      intArray2[5] = 1637;
      intArray2[6] = (-2181);
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 0;
      intArray0[2] = 66639;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[2][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 0, 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 7935);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-480);
      intArray0[1] = 0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertArrayEquals(new int[] {(-480), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      String string0 = charClass0.toString();
      assertEquals("[0x1-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      assertNotNull(string0);
      
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(0, (-758));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[0];
      CharClass charClass4 = charClass3.appendClass(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendRange(0, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendClassWithSign(intArray1, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass0.appendLiteral(0, (-2623));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass4.appendTableWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass7.appendLiteral(107, (-2623));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass1);
      assertNotNull(charClass9);
      
      String string0 = charClass9.toString();
      assertEquals("[0x0 0x6b 0x212a 0x4b]", string0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass1);
      assertNotNull(string0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass10 = charClass4.appendFoldedClass(intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass10);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass4);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass10);
      
      int[][] intArray3 = new int[0][7];
      assertFalse(intArray3.equals((Object)intArray0));
      
      CharClass charClass11 = charClass2.appendTableWithSign(intArray3, 0);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass10);
      assertNotSame(intArray3, intArray0);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(charClass11);
      
      CharClass charClass12 = charClass11.negateClass();
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass6);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass9);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray3, intArray0);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(charClass12);
      
      CharClass charClass13 = charClass1.appendFoldedRange((-394), 0);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass9);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertNotNull(charClass13);
      
      CharClass charClass14 = charClass11.appendLiteral((-758), (-758));
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass14);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass13);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass4);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertNotSame(intArray3, intArray0);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(charClass14);
      
      CharClass charClass15 = charClass9.appendFoldedRange((-394), 10);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass9);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass6);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass1);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass15);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass14);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass13);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass8);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass13);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass12);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass14);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass15);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass10);
      assertNotNull(charClass15);
      
      CharClass charClass16 = charClass14.appendNegatedClass(intArray2);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass11, charClass15);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass16);
      assertSame(charClass11, charClass14);
      assertSame(charClass11, charClass12);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass13);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass16);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass9);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass16);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass15);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass4);
      assertSame(charClass2, charClass16);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass15);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass10);
      assertSame(charClass16, charClass3);
      assertSame(charClass16, charClass7);
      assertSame(charClass16, charClass8);
      assertSame(charClass16, charClass14);
      assertSame(charClass16, charClass15);
      assertSame(charClass16, charClass1);
      assertSame(charClass16, charClass10);
      assertSame(charClass16, charClass9);
      assertSame(charClass16, charClass13);
      assertSame(charClass16, charClass2);
      assertSame(charClass16, charClass4);
      assertSame(charClass16, charClass5);
      assertSame(charClass16, charClass11);
      assertSame(charClass16, charClass6);
      assertSame(charClass16, charClass0);
      assertSame(charClass16, charClass12);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(charClass16);
      
      int[] intArray4 = null;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 1114111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[][] intArray0 = new int[0][5];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(1747, (-723));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendTableWithSign(intArray0, (-2191));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass2.negateClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 43043;
      intArray0[1] = 93;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-688);
      intArray0[6] = 64;
      intArray0[7] = 164;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {43043, 93, 0, 0, 0, (-688), 64, 164}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      assertArrayEquals(new int[] {43043, 93, 0, 0, 0, (-688), 64, 164}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertArrayEquals(new int[] {43043, 93, 0, 0, 0, (-688), 64, 164}, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendRange((-3974), 0);
      assertArrayEquals(new int[] {43043, 93, 0, 0, (-3974), 0, 64, 164}, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertArrayEquals(new int[] {43043, 93, 0, 0, (-3974), 0, 64, 164}, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass4);
      
      int[] intArray2 = charClass4.toArray();
      assertArrayEquals(new int[] {43043, 93, 0, 0, (-3974), 0, 64, 164}, intArray0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertEquals(8, intArray0.length);
      assertEquals(14, intArray2.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharGroup charGroup0 = null;
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-3860), 0);
      assertArrayEquals(new int[] {(-3860), 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-3860);
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = (-3860);
      intArray1[4] = intArray2;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      int int0 = (-758);
      CharClass charClass2 = charClass0.appendLiteral(0, (-758));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[0];
      CharClass charClass4 = charClass3.appendClass(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendRange(0, 0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendClassWithSign(intArray1, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass0.appendLiteral(0, (-2623));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass4.appendTableWithSign(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass7.appendLiteral(107, (-2623));
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertNotNull(charClass9);
      
      String string0 = charClass9.toString();
      assertEquals("[0x0 0x6b 0x212a 0x4b]", string0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertNotNull(string0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      CharClass charClass10 = charClass4.appendFoldedClass(intArray2);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass5);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass10);
      
      CharClass charClass11 = charClass10.negateClass();
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass10);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass5);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass11);
      
      int[][] intArray3 = new int[0][7];
      assertFalse(intArray3.equals((Object)intArray0));
      
      CharClass charClass12 = charClass2.appendTableWithSign(intArray3, 0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass2);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(charClass12);
      
      CharClass charClass13 = charClass12.negateClass();
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass13);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass2);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass3);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray3.length);
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(charClass13);
      
      CharClass charClass14 = charClass10.appendTable(intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertNotSame(intArray0, intArray3);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass12);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass9);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass4, charClass14);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass9);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass14);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass13);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(charClass14);
      
      // Undeclared exception!
      try { 
        charClass14.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1637;
      intArray0[1] = 1810;
      intArray0[2] = 1476;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1637, 1810, 1476, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {1637, 1810, 1476, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertArrayEquals(new int[] {1637, 1810, 1476, 0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 0;
      intArray0[2] = 66639;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 66639, 0, 0, 0}, intArray0);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(6, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0, 66639, 0, 0, 0}, intArray0);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2731;
      intArray0[1] = 0;
      intArray0[2] = (-2091);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2731, 0, (-2091)}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(32, 1117);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(1117, 32);
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass3.appendRange(32, 1117);
      assertArrayEquals(new int[] {32, 1117}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass1.cleanClass();
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass0.negateClass();
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertNotNull(charClass7);
      
      int[][] intArray1 = new int[8][9];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(2739, (-3245));
      assertArrayEquals(new int[] {0}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[3][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(12, 8071);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = new CharClass();
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, (-587));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      
      int[] intArray1 = charClass1.toArray();
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertEquals(0, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendLiteral(2376, 2376);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass3);
      assertNotSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 31;
      intArray0[2] = 66639;
      intArray0[4] = 4;
      intArray0[5] = 66639;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 31, 66639, 0, 4, 66639}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertArrayEquals(new int[] {0, 31, 66639, 0, 0, 66639}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendLiteral(66639, (-255));
      assertArrayEquals(new int[] {0, 31, 66639, 0, 0, 66639}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 0);
      assertArrayEquals(new int[] {0, 31, 66639, 0, 0, 66639}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(64310, 66639);
      assertArrayEquals(new int[] {0, 31, 66639, 0, 0, 66639}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass4);
      
      // Undeclared exception!
      try { 
        charClass4.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendFoldedRange(1308, 55);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertEquals(5, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass2.appendFoldedRange(1308, 66640);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendRange(43638, 32);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray1 = charClass3.toArray();
      assertArrayEquals(new int[] {43638, 32}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      CharClass charClass4 = charClass3.appendLiteral(1114111, 93);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass1.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass2.appendClass(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {43638, 32}, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charClass6);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-857);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(4213, (-857));
      CharClass charClass2 = charClass1.cleanClass();
      charClass2.appendFoldedRange(386, 64);
      charClass1.appendLiteral(2, 0);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 119964);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 415;
      intArray0[1] = 415;
      intArray0[2] = 65;
      intArray0[3] = 1683;
      intArray0[4] = (-137);
      intArray0[5] = (-2802);
      intArray0[6] = (-3395);
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[1];
      intArray2[0] = 65;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][0];
      charClass0.appendNegatedTable(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      CharClass charClass2 = charClass1.negateClass();
      int[] intArray1 = new int[0];
      CharClass charClass3 = charClass2.appendClass(intArray1);
      CharClass charClass4 = charClass2.appendRange(0, 0);
      charClass0.appendClassWithSign(intArray1, 0);
      CharClass charClass5 = charClass0.appendLiteral(0, (-2623));
      CharClass charClass6 = charClass3.appendTableWithSign(intArray0, 0);
      charClass5.appendLiteral(107, (-2623));
      charClass0.toString();
      int[] intArray2 = new int[0];
      int[][] intArray3 = new int[0][7];
      CharClass charClass7 = charClass1.appendTableWithSign(intArray3, 0);
      charClass7.negateClass();
      CharClass charClass8 = charClass2.appendRange((-208), 0);
      charClass5.appendRange(22, 22);
      charClass4.appendNegatedTable(intArray0);
      charClass8.negateClass();
      CharClass charClass9 = charClass6.cleanClass();
      assertSame(charClass9, charClass6);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int int0 = 1117;
      int int1 = 32;
      CharClass charClass2 = charClass1.appendRange(32, 1117);
      int[] intArray0 = charClass0.toArray();
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      charClass3.appendRange(1117, 32);
      int[] intArray1 = charClass2.toArray();
      CharClass charClass4 = charClass0.appendLiteral(32, 93);
      CharClass charClass5 = charClass4.negateClass();
      CharClass charClass6 = charClass5.appendClass(intArray0);
      charClass6.cleanClass();
      CharClass.charClassToString(intArray1, 93);
      charClass0.appendRange(32, 2753);
      int[][] intArray2 = new int[8][6];
      intArray2[0] = intArray0;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray0;
      intArray2[4] = intArray1;
      intArray2[5] = intArray0;
      intArray2[6] = intArray1;
      intArray2[7] = intArray1;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2314);
      intArray0[2] = (-3118);
      intArray0[3] = 655;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.appendClass(intArray0);
      int[][] intArray1 = new int[9][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = (-1536);
      intArray2[2] = (-2314);
      intArray2[3] = (-1);
      intArray1[7] = intArray2;
      intArray1[8] = intArray0;
      CharClass charClass4 = charClass3.appendTable(intArray1);
      CharClass charClass5 = charClass4.appendRange(0, 0);
      charClass5.toString();
      assertArrayEquals(new int[] {0, (-2314), (-3118), 655, (-3118), 75}, intArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 1308;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      charClass0.appendFoldedRange(1174, 2620);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[5];
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendLiteral(2739, (-3245));
      int[][] intArray1 = new int[3][1];
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 0;
      intArray0[2] = 66639;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(0, 8071);
      CharClass charClass2 = new CharClass();
      charClass1.negateClass();
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass3 = charClass1.appendTable(intArray1);
      assertNotSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendLiteral(1637, 1637);
      int[][] intArray1 = new int[3][2];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      charClass0.appendLiteral(2756, (-2780));
      CharClass charClass1 = charClass0.negateClass();
      // Undeclared exception!
      try { 
        charClass1.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 31;
      intArray0[2] = 66639;
      intArray0[4] = 4;
      intArray0[5] = 66639;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendLiteral(66639, (-255));
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      charClass2.appendFoldedClass(intArray0);
      charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.cleanClass();
      int[] intArray0 = charClass0.toArray();
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      charClass0.appendRange((-4812), 1834);
      CharClass charClass2 = new CharClass();
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-4812));
      charClass3.appendLiteral(32, 1834);
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      charClass1.toArray();
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendLiteral(1823, 1823);
      assertSame(charClass0, charClass3);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1637;
      intArray0[1] = 1810;
      intArray0[2] = 1476;
      intArray0[3] = (-2181);
      intArray0[4] = 0;
      intArray0[5] = (-3715);
      intArray0[6] = 42912;
      intArray0[7] = 11500;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendClass(intArray0);
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = (-2181);
      intArray2[1] = 1640;
      intArray2[2] = 1637;
      intArray2[3] = 1810;
      intArray2[4] = 42912;
      intArray2[5] = 1637;
      intArray2[6] = (-2181);
      intArray2[7] = 1476;
      intArray2[8] = 11500;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      charClass3.appendTable(intArray1);
      assertArrayEquals(new int[] {0, (-3715), 1476, (-2181), 1637, 1810, 42912, 11500}, intArray0);
  }
}
