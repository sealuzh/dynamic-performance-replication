/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:34:31 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParser_ESTest extends JavaParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DX!F");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ReferenceType();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 119;
      try { 
        javaParser0.FieldDeclaration(119);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: !
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AnnotationTypeBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("}z{H");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(0);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(" a[m(y/;l^ce9uaEp");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = javaParser0.Modifiers();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, int0);
      
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: a
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SystemInUtil.addInputLine("'s5UeG_$&GJy+|");
      JavaParser javaParser0 = new JavaParser("Java Parser Vesion 1.1:  Usage is one of:");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"5\" (53), after : \"\\'s\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      stringReader0.close();
      try { 
        javaParser0.InclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = new Token();
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParser0.token = token0;
      assertNull(token0.toString());
      assertNull(javaParser0.token.toString());
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValueArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "H+O)cD>B#p;>]gnJo,";
      JavaParser javaParser0 = new JavaParser("H+O)cD>B#p;>]gnJo,");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ImplementsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.UnaryExpressionNotPlusMinus();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cn)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O}Sg4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 95, 97);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.InclusiveOrExpression();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("ConditionalOrExpression");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimarySuffix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SystemInUtil.addInputLine("(");
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: (
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: =
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("{rQ85+.i");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: +
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      int int0 = (-1823);
      boolean boolean0 = javaParser_ModifierSet0.isVolatile((-1823));
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        javaParser0.FieldDeclaration(8);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C)`;k><K_2");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.Type();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SystemInUtil.addInputLine("'s5eG_$&GJy+|");
      JavaParser javaParser0 = new JavaParser("Java Parser Version 1.1:  Usage is one of:");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"5\" (53), after : \"\\'s\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile(0);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("vvw9H{JC");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("RG");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeBound();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-77), (byte)99, (byte)116, (byte)67, (byte)10, (byte) (-1), (byte)121}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-77), (byte)99, (byte)116, (byte)67, (byte)10, (byte) (-1), (byte)121}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParser0.EnumBody();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fxa|*]^PJ[8\"I``]p");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ForUpdate();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "";
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Sy>");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp(2611);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertFalse(boolean0);
      
      javaParser0.disable_tracing();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isFinal(1);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "\\u";
      StringReader stringReader0 = new StringReader(string0);
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Invalid escape character at line 1 column 2.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("A class cannot extend more than one other class");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStrictfp((-1951));
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertTrue(boolean0);
      
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fG0EFz.+z\"z-rYn");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ShiftExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 7.  Encountered: .
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot implement other interfaces");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      try { 
        javaParser0.AssignmentOperator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("R)de");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getToken(87);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isProtected(92);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("A class cannot extend more than one other cass");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.VariableDeclaratorId();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".  Encountered: ");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "VF .g-jh,D@JXP(FYE");
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(".  Encountered: ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.TypeParameter();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = null;
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.StatementExpressionList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParser0.token = token0;
      assertNull(token0.toString());
      assertNull(javaParser0.token.toString());
      
      // Undeclared exception!
      try { 
        javaParser0.NameList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("R2Ny]f_c5p5Kpe=*");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBody(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("{O`fc<0y?eS5UCk|");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FieldDeclaration((-259));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("An interface cannot implement other interfaces");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)34, (byte)0, (byte) (-96), (byte) (-23), (byte)0, (byte)83, (byte)36}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      javaParser0.ReInit((InputStream) byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)34, (byte)0, (byte) (-96), (byte) (-23), (byte)0, (byte)83, (byte)36}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("A class cannot extend more than on other class");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Initializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("An interface cannot implement other interfaces");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AssignmentOperator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: An
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)66;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)85, (byte)94, (byte)66}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 53.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      try { 
        javaParser0.Annotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<_/[eXcp#35");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      boolean boolean0 = true;
      try { 
        javaParser0.ClassOrInterfaceBodyDeclaration(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: /
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("eJR&Q./( KD");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.AdditiveExpression();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParser0.token = token0;
      assertNull(token0.toString());
      assertNull(javaParser0.token.toString());
      
      // Undeclared exception!
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("public");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic((-3995));
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertTrue(boolean0);
      
      try { 
        javaParser0.PostfixExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = ". State unchanged.";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ". State unchanged.");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-14);
      byteArray0[0] = (byte) (-14);
      byte byte1 = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-128);
      byte byte2 = (byte)102;
      byteArray0[5] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-55), 43);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-55), (byte) (-54), (byte)97, (byte) (-128), (byte)102}, byteArray0);
      assertEquals(43, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-14), (byte) (-55), (byte) (-54), (byte)97, (byte) (-128), (byte)102}, byteArray0);
      assertEquals(43, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParser0.ImplementsList(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Block();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r-Rq'oRC!");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AndExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"o\" (111), after : \"\\'\\u007f\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C!EI");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ExclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "46,A2VOcn`vA('9.Vf";
      JavaParser.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fxa|*]^PJ[8\"I``]p");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.NameList();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("\"enum\"");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      JavaParser.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      try { 
        javaParser0.ContinueStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)114, (byte)59, (byte)78, (byte)67, (byte)10, (byte) (-70)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)114, (byte)59, (byte)78, (byte)67, (byte)10, (byte) (-70)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 3088);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)114, (byte)59, (byte)78, (byte)67, (byte)10, (byte) (-70)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)114, (byte)59, (byte)78, (byte)67, (byte)10, (byte) (-70)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.NullLiteral();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("M_2QU865");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EnumDeclaration(896);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("!Y");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("O");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("         java JavaParser inputfile");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized(118);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertTrue(boolean0);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Type();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForUpdate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("         java JavaParser inputfile");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      JavaParser javaParser2 = new JavaParser(javaParser0.token_source);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser2.lookingAhead);
      assertNotNull(javaParser2);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertFalse(javaParser2.equals((Object)javaParser0));
      assertFalse(javaParser2.equals((Object)javaParser1));
      
      try { 
        javaParser2.MemberValueArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("</identifier>");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: <
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`@O%+*'0Xn'!U~3s(");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("root");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Expression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'L=W9^");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"=\" (61), after : \"\\'L\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("R2Ny]f_c5p5Kpe=*");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("R2Ny]f_c5p5Kpe=*");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser("]&@I ");
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser1.ExtendsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Bf^w*3w72M");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser1.Annotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Parse error at line ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("final");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PreDecrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("zVg [2rA@i*n`l8?Z<f");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader(")V{;4_^ch4wy%Q6Q>");
      assertNotNull(stringReader0);
      
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";4R{-3El~");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.BlockStatement();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: 4
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.VariableInitializer();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("'^p}r~.u");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.StatementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("/n}2@a=V");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.DefaultValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: y
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("tuwn0");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser("tuwn0");
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        JavaParser.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.AllocationExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("`U.");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AdditiveExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclaration(3721);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 101, 101);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParser0.ShiftExpression();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(153, javaCharStream0.getBeginColumn());
      assertEquals(153, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(153, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("3[>]");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)98;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)75, (byte)103, (byte) (-96), (byte)122, (byte)87, (byte)52, (byte)85, (byte)98}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("3[>]");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("4,(y7jh=h9uQ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConditionalOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = ", column ";
      StringReader stringReader0 = new StringReader(", column ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ,
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isNative(512);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.VariableDeclarator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Fxa|*R#]^P[8I``]p");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParser0.ReInit(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient((-3830));
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertTrue(boolean0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Rvd&");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isAbstract(94);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 87, 23, 256);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 4096);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4096. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("do\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.column = (-2997);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser("do\"");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaCharStream0.inBuf = 0;
      try { 
        javaParser0.AnnotationTypeDeclaration((-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-14);
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)9, (byte) (-14)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Block();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimitiveType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Rvd&");
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)97, (byte)35, (byte) (-60), (byte)52, (byte) (-92), (byte)49, (byte) (-61), (byte)25}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)97, (byte)35, (byte) (-60), (byte)52, (byte) (-92), (byte)49, (byte) (-61), (byte)25}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("e");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("A class cannot extend more than one other class");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FpeQwlDYZ617XE");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.VariableDeclaratorId();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("F[p*x{");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser("v2qU;kx");
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SystemInUtil.addInputLine("DI}FQq.");
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.RUNSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: DI
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("A class cannot extend more than one other class");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Java Parser Version 1.1:  Encountered errors during parse.");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.TypeArgument();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.MemberSelector();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 6.  Encountered: Parser
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParser0.token_source = javaParserTokenManager0;
      // Undeclared exception!
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ImportDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("lp");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(1327);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "?bb";
      StringReader stringReader0 = new StringReader("?bb");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(", column ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParser0.ReInit(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      
      javaParser0.enable_tracing();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Fxa|*R#]^P[8I``]p");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Reader reader0 = null;
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ThrowStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = null;
      StringReader stringReader0 = new StringReader("!ar#Pwp/T;C\"rr*h6%D");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(";");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      assertNotNull(sequenceInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 103, 103, 103);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader0 = new StringReader("Cy>ZjWi-w>jJZBVn@");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: Cy
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      SystemInUtil.addInputLine("");
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Rvd&");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.IfStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("d*O?wr`8");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("~|o9kw+/fpsf/A");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration((-1570));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeArguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")V7hrnu3cFK");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(".  Encountered: ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ClassOrInterfaceBody(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PreIncrementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SingleMemberAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("?.lHW8AIf/:[*dv9");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ReInit((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      
      JavaParser javaParser1 = new JavaParser("?.lHW8AIf/:[*dv9");
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(", column ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot implement other interfaces");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = 0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      File file0 = MockFile.createTempFile("=O~k8!Q^0HFI3", "=O~k8!Q^0HFI3");
      assertNotNull(file0);
      assertEquals("/tmp/=O~k8!Q^0HFI30=O~k8!Q^0HFI3", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("=O~k8!Q^0HFI30=O~k8!Q^0HFI3", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertNotNull(javaParser_ModifierSet0);
      
      try { 
        javaParser0.NameList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(".  Encountered: ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PackageDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Reader reader0 = null;
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 99, 256, 16);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.WhileStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("R2Ny]f_c5p5Kpe=*");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("lEv");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-162), (byte)85);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)85}, byteArray0);
      assertEquals(85, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-162), 75);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)85}, byteArray0);
      assertEquals(85, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)85}, byteArray0);
      assertEquals(85, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte)85}, byteArray0);
      assertEquals(85, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isSynchronized((-193));
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
      
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("]}jJBK9Wn.kGn");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&#");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      int int0 = stringReader0.read();
      assertEquals(38, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        javaParser0.MethodDeclarator();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot implement other interfaces");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*lshft");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaParser0.ConditionalAndExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: *
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.LocalVariableDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.IfStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PrimarySuffix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EmptyStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArrayInitializer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "HNcE?[wr5a W%.n");
      assertTrue(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isNative(512);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: HNcE
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FormalParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.token = javaParser0.token;
      assertNull(javaParser0.token.toString());
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isTransient(2);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParser0.token = token0;
      assertNull(token0.toString());
      assertNull(javaParser0.token.toString());
      
      // Undeclared exception!
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")4ORsxdknUeeZK-4J<");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: )
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Fxa|*]^PJ[8\"I``]p");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PostfixExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)58;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-102);
      byteArray0[7] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte) (-67), (byte)58, (byte)0, (byte) (-20), (byte) (-102), (byte)96}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte) (-67), (byte)58, (byte)0, (byte) (-20), (byte) (-102), (byte)96}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rd");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertEquals("", token0.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isSynchronized(0);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Rvd&");
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.TryStatement();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.InstanceOfExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ShiftExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      javaParser1.token = null;
      // Undeclared exception!
      try { 
        javaParser1.EnumDeclaration((-1397));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("(RHf56.afl^IC'@`CT");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser((Reader) null);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser1.ReferenceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot implement other interfaces");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParser0.token_source = javaParserTokenManager0;
      // Undeclared exception!
      try { 
        javaParser0.RSIGNEDSHIFT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("E)'%|!/E!oc5i");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        javaParser0.dump(mockPrintWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-85), (byte) (-124), (byte) (-124)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-85), (byte) (-124), (byte) (-124)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(bufferedInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-85), (byte) (-124), (byte) (-124)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParser0.ReferenceType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0019\" (25), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile(0);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      String string0 = "com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet";
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotNull(javaParser_ModifierSet1);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean1 = javaParser_ModifierSet0.isAbstract(256);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotSame(javaParser_ModifierSet0, javaParser_ModifierSet1);
      assertFalse(javaParser_ModifierSet0.equals((Object)javaParser_ModifierSet1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = javaParser_ModifierSet1.isPrivate((-2982));
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        javaParser0.ImplementsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchLabel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "An interface cannot implement other interfaces";
      JavaParser javaParser0 = new JavaParser("An interface cannot implement other interfaces");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser("");
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser0.dump((Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ForUpdate();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("kU9H j?");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration(109);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SystemInUtil.addInputLine("com.soops.CEN4010.JMCA.JParser.JavaParser");
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.getToken((-1229));
      assertFalse(javaParser0.lookingAhead);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ImportDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.CastExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vgcTnT {HaOkcm>");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.AssertStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: vgcTnT
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("!q^A0Y**}R\"<3$={R");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.UnaryExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("M-LlZAk3)3i");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("l~OXANB%Kz%9b");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExtendsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.BlockStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("SynchronizedStatement");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration(77);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(64);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertFalse(boolean0);
      
      String string0 = "com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet";
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertNotNull(javaParser_ModifierSet1);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration(16);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SwitchStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      Token token0 = javaParser1.getNextToken();
      assertFalse(javaParser0.lookingAhead);
      assertFalse(javaParser1.lookingAhead);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotSame(javaParser0, javaParser1);
      assertNotSame(javaParser1, javaParser0);
      assertNotNull(token0);
      assertFalse(javaParser0.equals((Object)javaParser1));
      assertFalse(javaParser1.equals((Object)javaParser0));
      assertEquals("u", token0.toString());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'm';
      charArray0[2] = '\'';
      charArray0[3] = ' ';
      charArray0[4] = '%';
      charArray0[5] = '`';
      charArray0[6] = '6';
      charArray0[7] = '%';
      charArray0[8] = 'E';
      try { 
        stringReader0.read(charArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rvd&");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Rvd&");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isPublic(64);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean0);
      
      String string0 = "com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet";
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet1 = new JavaParser.ModifierSet();
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet1);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      
      boolean boolean1 = javaParser_ModifierSet0.isAbstract(256);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotSame(javaParser_ModifierSet0, javaParser_ModifierSet1);
      assertFalse(javaParser_ModifierSet0.equals((Object)javaParser_ModifierSet1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = javaParser_ModifierSet1.isPrivate((-3003));
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotSame(javaParser_ModifierSet1, javaParser_ModifierSet0);
      assertFalse(javaParser_ModifierSet1.equals((Object)javaParser_ModifierSet0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      try { 
        javaParser0.ImplementsList(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      StringReader stringReader0 = new StringReader("Y(P=0+");
      assertNotNull(stringReader0);
      
      JavaParser javaParser1 = new JavaParser(stringReader0);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser1.EnumConstant();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = JavaParser.ModifierSet.removeModifier(2071, 2071);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)25, 1536);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)25, (byte)1, (byte)106, (byte)0, (byte)47}, byteArray0);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertNotNull(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)25, (byte)1, (byte)106, (byte)0, (byte)47}, byteArray0);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(dataInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)103, (byte)25, (byte)1, (byte)106, (byte)0, (byte)47}, byteArray0);
      assertEquals((-19), byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParser0.AnnotationTypeMemberDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.LabeledStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.InclusiveOrExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.CompilationUnit();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.Statement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"do\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.column = (-2997);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaCharStream0.inBuf = 0;
      try { 
        javaParser0.AnnotationTypeDeclaration(3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 0, column -2996.  Encountered: \"do\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser("");
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser0.ClassOrInterfaceType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("A class cannot extend more than one other class");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isFinal(61);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Fxa|*]^PJ[8\"I``]p");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EnumBody();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+PL_");
      assertNotNull(stringReader0);
      
      stringReader0.mark(88);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.MemberValue();
      assertFalse(javaParser0.lookingAhead);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KQ\"iQ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ExplicitConstructorInvocation();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\\\"iQ\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+3})\"kboM.@6&2'|lI");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: +
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OR");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParser javaParser0 = new JavaParser("OR");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      SystemInUtil.addInputLine("OR");
      javaParser0.lookingAhead = false;
      javaParser0.PostfixExpression();
      assertFalse(javaParser0.lookingAhead);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 3.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)74, (byte) (-3), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)74, (byte) (-3), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      try { 
        javaParser0.ClassOrInterfaceDeclaration((byte)0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0007");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-70), (byte)43, (byte)39, (byte) (-116), (byte) (-47), (byte)57, (byte)81}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(byteArrayInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-70), (byte)43, (byte)39, (byte) (-116), (byte) (-47), (byte)57, (byte)81}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParser0.ForInit();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser(".  Encountered: ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = javaParser0.jj_nt;
      assertNull(token0);
      
      javaParser0.token = null;
      // Undeclared exception!
      try { 
        javaParser0.EnumConstant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D&*5SQ");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.CompilationUnit();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: D
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("?A");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration((-156));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser javaParser1 = new JavaParser((String) null);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser0.EnumDeclaration(42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot implement other interfaces");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParser0.token_source = javaParserTokenManager0;
      // Undeclared exception!
      try { 
        javaParser0.MarkerAnnotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.FormalParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A.~#");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.DoStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: A
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UnaryExpressionNotPlusMinus");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.ExclusiveOrExpression();
      assertFalse(javaParser0.lookingAhead);
      
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 27.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParser javaParser0 = new JavaParser("lh%tgm!/u#1!0ydfFc");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.NormalAnnotation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ForStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePairs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CJhY-}7Ac");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.BooleanLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: CJhY
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("An interface cannot implement other interfaces");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParser0.token_source = javaParserTokenManager0;
      javaParserTokenManager0.jjnewStateCnt = 0;
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser1.lookingAhead);
      assertNotNull(javaParser1);
      assertFalse(javaParser1.equals((Object)javaParser0));
      
      // Undeclared exception!
      try { 
        javaParser1.Block();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Type();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      // Undeclared exception!
      try { 
        javaParser0.TypeArgument();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      SystemInUtil.addInputLine("\"+\"");
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.WildcardBounds();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: \"+\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)77;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-105), (byte) (-78), (byte) (-1), (byte)77}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean1 = javaParser_ModifierSet0.isProtected(35);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.JavaParser$ModifierSet");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.CastLookahead();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      StringReader stringReader0 = new StringReader("toe')'9q)0[-SJH");
      assertNotNull(stringReader0);
      
      int int0 = 103;
      SystemInUtil.addInputLine("toe')'9q)0[-SJH");
      stringReader0.mark(103);
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MemberValuePair();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: ')'
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "Parse error at line ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParser javaParser0 = new JavaParser("Parse error at line ");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.StatementExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("e");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.EqualityExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ExclusiveOrExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParser javaParser0 = new JavaParser("ZXRop6l\"c<U)");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.RelationalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s#o}c-Bk]");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.ResultType();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.Literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Rvd&");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      JavaParser javaParser0 = new JavaParser("Rvd&");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeParameters();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 6
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((Reader) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParser0.token = token0;
      assertNull(token0.toString());
      assertNull(javaParser0.token.toString());
      
      // Undeclared exception!
      try { 
        javaParser0.BreakStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((JavaParserTokenManager) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      // Undeclared exception!
      try { 
        javaParser0.StatementExpression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("|Nk8z");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isStatic(83);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1), (-3593));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, byteArray0.length);
      
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, byteArray0.length);
      
      javaParser0.MultiplicativeExpression();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParser0.lookingAhead);
      assertArrayEquals(new byte[] {(byte)97}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-3593), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals((-3593), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-3593), javaCharStream0.getColumn());
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      JavaParser.ModifierSet javaParser_ModifierSet0 = new JavaParser.ModifierSet();
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertNotNull(javaParser_ModifierSet0);
      
      boolean boolean0 = javaParser_ModifierSet0.isVolatile((-263));
      assertEquals(1, JavaParser.ModifierSet.PUBLIC);
      assertEquals(64, JavaParser.ModifierSet.SYNCHRONIZED);
      assertEquals(512, JavaParser.ModifierSet.VOLATILE);
      assertEquals(8, JavaParser.ModifierSet.ABSTRACT);
      assertEquals(128, JavaParser.ModifierSet.NATIVE);
      assertEquals(2, JavaParser.ModifierSet.PROTECTED);
      assertEquals(16, JavaParser.ModifierSet.STATIC);
      assertEquals(4096, JavaParser.ModifierSet.STRICTFP);
      assertEquals(32, JavaParser.ModifierSet.FINAL);
      assertEquals(256, JavaParser.ModifierSet.TRANSIENT);
      assertEquals(4, JavaParser.ModifierSet.PRIVATE);
      assertTrue(boolean0);
      
      try { 
        javaParser0.NullLiteral();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MultiplicativeExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("@");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimaryPrefix();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZZ8}lp;ovA}zb.#mw0m");
      assertNotNull(stringReader0);
      
      JavaParser javaParser0 = new JavaParser(stringReader0);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      javaParser0.MemberValue();
      assertFalse(javaParser0.lookingAhead);
      
      StringReader stringReader1 = new StringReader("ZZ8}lp;ovA}zb.#mw0m");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParser0.ReInit((Reader) stringReader1);
      assertFalse(javaParser0.lookingAhead);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParser0.ResultType();
      assertFalse(javaParser0.lookingAhead);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ArgumentList();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("P");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.PrimitiveType();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.ConstructorDeclaration();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.Arguments();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      SystemInUtil.addInputLine("kU9H j?");
      JavaParser javaParser0 = new JavaParser("kU9H j?");
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.MethodDeclaration(109);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 7.  Encountered: ?
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      assertFalse(javaParser0.lookingAhead);
      assertNotNull(javaParser0);
      
      try { 
        javaParser0.TypeParameter();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }
}
