/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 23:09:13 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<Map<Integer, String>, String>> hashMap0 = new HashMap<String, Map<Map<Integer, String>, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, String>(hashMap0, class0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Map<Integer, String>, String> hashMap2 = new HashMap<Map<Integer, String>, String>();
      hashMap2.put(hashMap1, "=@");
      hashMap0.put("L", hashMap2);
      doubleKeyMap0.remove("L", (Map<Integer, String>) hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Object, Map<String, String>>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, Map<String, String>>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      DoubleKeyMap<Integer, String, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Integer, String>>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<HashMap<Object, Object>, Object, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Object, Map<String, String>>(hashMap0);
      Map<Object, Map<String, String>> map1 = doubleKeyMap1.remove(hashMap1);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Integer, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, Integer>, String>();
      Integer integer0 = new Integer((-1));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put(integer0, hashMap0, "vJ>Q^Jp1#i+%.");
      String string0 = doubleKeyMap0.put(integer0, hashMap0, "0F68");
      assertEquals("vJ>Q^Jp1#i+%.", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, Integer>>();
      DoubleKeyMap<HashMap<String, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Integer>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      DoubleKeyMap<Integer, String, Map<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Map<String, Integer>>();
      Map<String, Integer> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      Map<String, Integer> map1 = doubleKeyMap0.get(hashMap1);
      assertSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Map<Object, Map<Integer, String>>, HashMap<String, Object>>> hashMap0 = new HashMap<String, Map<Map<Object, Map<Integer, String>>, HashMap<String, Object>>>();
      DoubleKeyMap<String, Map<Object, Map<Integer, String>>, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Map<Integer, String>>, HashMap<String, Object>>(hashMap0);
      HashMap<Object, Map<Integer, String>> hashMap1 = new HashMap<Object, Map<Integer, String>>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      doubleKeyMap0.put("N[RMu", (Map<Object, Map<Integer, String>>) hashMap1, hashMap2);
      Map<Map<Object, Map<Integer, String>>, HashMap<String, Object>> map0 = doubleKeyMap0.get("N[RMu");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Map<Integer, Integer>> hashMap0 = new HashMap<Integer, Map<Integer, Integer>>();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>(hashMap0);
      Integer integer0 = new Integer((-309));
      Integer integer1 = doubleKeyMap0.remove(integer0, (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Integer, String>>();
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      Map<Integer, String> map0 = doubleKeyMap0.remove((Object) integer0, object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>(class0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = doubleKeyMap0.remove((Integer) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<Object, HashMap<Object, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, String>, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Map<Map<Integer, String>, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, String>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, String>, String, Object>(map0, class0);
      Map<String, Object> map1 = doubleKeyMap1.remove((Map<Integer, String>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<HashMap<Object, String>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(map0, class0);
      Map<Object, Object> map1 = doubleKeyMap0.remove((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Integer, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Integer, Map<Integer, String>>>();
      Map<HashMap<Object, Object>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(map0);
      Map<Integer, String> map1 = doubleKeyMap1.newMap();
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Map<Map<Integer, String>, Map<String, Object>> map2 = doubleKeyMap2.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap3 = new DoubleKeyMap<Integer, String, String>();
      Map<Object, Map<Object, Object>> map3 = doubleKeyMap3.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap4 = new DoubleKeyMap<Object, Object, Object>(map3, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap4.put((Object) map1, (Object) map2, (Object) doubleKeyMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<HashMap<Object, String>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(map0, class0);
      Map<String, Map<Integer, Object>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>(map1);
      Object object0 = doubleKeyMap2.put("", (Integer) null, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Map<Object, Map<Object, Map<Integer, String>>>> hashMap0 = new HashMap<String, Map<Object, Map<Object, Map<Integer, String>>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<Object, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Object, Map<Integer, String>>>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((String) null, object0, (Map<Object, Map<Integer, String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, String, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Integer, String>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>();
      Map<Integer, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put((String) null, "'Z/5G2%1h+iMG w", map0);
      Map<String, Map<Integer, String>> map1 = doubleKeyMap0.remove((String) null);
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>(class0);
      Integer integer0 = new Integer((-1));
      Integer integer1 = doubleKeyMap0.get(integer0, (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, Map<Map<Integer, String>, Object>> hashMap1 = new HashMap<Integer, Map<Map<Integer, String>, Object>>();
      DoubleKeyMap<Integer, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, String>, Object>(hashMap1);
      Object object0 = doubleKeyMap0.get((Integer) null, (Map<Integer, String>) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>((Map<Integer, Map<Object, String>>) null);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null, class0);
      String string0 = doubleKeyMap2.get((Object) doubleKeyMap0, (Object) doubleKeyMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      Map<String, Object> map1 = doubleKeyMap1.get((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      HashMap<Object, Map<HashMap<Map<Integer, String>, String>, String>> hashMap0 = new HashMap<Object, Map<HashMap<Map<Integer, String>, String>, String>>();
      DoubleKeyMap<Object, HashMap<Map<Integer, String>, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Map<Integer, String>, String>, String>(hashMap0);
      Map<HashMap<Map<Integer, String>, String>, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) map0, (Object) class0, (Object) map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>((Map<Integer, Map<Integer, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Object) integer0, "cAp&sF", "cAp&sF");
      String string0 = doubleKeyMap0.remove((Object) integer0, "9");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-190));
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", integer0, (Object) null);
      doubleKeyMap0.get("us.codecraft.webmagic.utils.DoubleKeyMap", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
