/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:59:23 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.linear.GaussianSolver;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GaussianSolver_ESTest extends GaussianSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      SparseVector sparseVector0 = SparseVector.zero(0, 0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      GaussianSolver gaussianSolver0 = null;
      try {
        gaussianSolver0 = new GaussianSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(19, 19, 19);
      GaussianSolver gaussianSolver0 = new GaussianSolver(rowMajorSparseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(19);
      // Undeclared exception!
      try { 
        gaussianSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can't be solved.
         //
         verifyException("org.la4j.linear.GaussianSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(13);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      SparseVector.zero(13, 13);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      gaussianSolver0.solve(denseVector0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(13, 2031.1151880830214);
      assertEquals(13, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(13);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      int int0 = 594;
      SparseVector.zero(594, 594);
      GaussianSolver gaussianSolver0 = new GaussianSolver(matrix0);
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(13, 0.0768752770705784);
      Matrix matrix1 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      gaussianSolver0.a = (Matrix) rowMajorSparseMatrix0;
      DenseMatrix.diagonal(594, 2077.950191251606);
      SparseVector.zero(13, 594);
      GaussianSolver gaussianSolver1 = new GaussianSolver(matrix1);
      // Undeclared exception!
      try { 
        gaussianSolver1.solve(denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(13);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseVector0.toDiagonalMatrix();
      SparseVector.zero(13, 13);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[2] = (double) 13;
      doubleArray1[4] = (double) 13;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 13;
      doubleArray2[1] = (double) 13;
      doubleArray2[2] = (double) 13;
      doubleArray2[4] = (double) 13;
      doubleArray2[5] = (double) 13;
      doubleArray2[6] = (double) 13;
      doubleArray2[7] = (double) 13;
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.from2DArray(doubleArray0);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cRSMatrix0, (DenseMatrix) basic2DMatrix0);
      GaussianSolver gaussianSolver0 = new GaussianSolver(basic2DMatrix1);
      BasicVector basicVector0 = (BasicVector)gaussianSolver0.solve(denseVector0);
      gaussianSolver0.solve(basicVector0);
      boolean boolean0 = gaussianSolver0.applicableTo(basic2DMatrix1);
      assertTrue(boolean0);
  }
}
