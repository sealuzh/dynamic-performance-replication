/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:07:09 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]t^&48wo1\" c [y";
      stringArray0[1] = "]T'}";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      stringArray0[2] = "[";
      findWithCapabilities0.listOptions();
      stringArray0[3] = "P3\"(k[emN-`^^5";
      stringArray0[4] = "";
      stringArray0[5] = "~2q 4)ye!S'~ enaz]";
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Superclass = "[";
      stringArray0[6] = "`F09H(^pL";
      stringArray0[7] = "-binary-atts";
      findWithCapabilities0.getOptions();
      stringArray0[8] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setFilename("@=J3AQE4k/Y+qLG3:");
      assertEquals("@=J3AQE4k/Y+qLG3:", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      capabilities0.disableAllAttributeDependencies();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      capabilities1.clone();
      capabilities1.capabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getFilename();
      findWithCapabilities1.getFilename();
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ")K$Vt";
      stringArray0[2] = "";
      stringArray0[3] = "@6 I@q";
      stringArray0[4] = "-not-missing-class-values";
      stringArray0[5] = " class that didn't match the criteria:\n";
      stringArray0[6] = "[_s]C3RIv--psJx.v";
      stringArray0[7] = "";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.find();
      assertEquals(10, vector1.capacity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "last";
      stringArray0[1] = "\tSkipped properties.\n\t(default: capabilities,options)";
      stringArray0[2] = "\tMust handle missing class values.";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "problem found!\n\tFirst set: ";
      stringArray0[6] = "";
      stringArray0[7] = "";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "%e~tkAp@";
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.setClassIndex("%e~tkAp@");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      capabilities0.enableAllClassDependencies();
      findWithCapabilities0.m_Misses = vector1;
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      // Undeclared exception!
      try { 
        vector1.subList((-850), (-1981));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -850
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      hashtable0.clear();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      vector0.add("d\"ns\u0001bW");
      vector0.add(") *l^*gT;|ZM");
      hashtable0.put("=bb", vector0);
      findWithCapabilities0.m_Filename = ") *l^*gT;|ZM";
      ClassDiscovery.m_Cache = hashtable0;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ") *l^*gT;|ZM";
      stringArray0[1] = ") *l^*gT;|ZM";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.listOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities1.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      assertEquals(1, capabilities1.getMinimumNumberInstances());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-relational-date");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Properties properties0 = Capabilities.PROPERTIES;
      Capabilities.PROPERTIES = properties0;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.m_AttributeTest = false;
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      capabilities2.or(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities2);
      findWithCapabilities0.getOptions();
      Capabilities capabilities3 = findWithCapabilities0.getCapabilities();
      capabilities3.or(capabilities1);
      findWithCapabilities0.setCapabilities(capabilities3);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector1 = findWithCapabilities2.m_Packages;
      findWithCapabilities1.m_Misses = vector1;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "^EdMdV;";
      stringArray0[1] = ".{";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities4.listOptions();
      findWithCapabilities3.getOptions();
      String[] stringArray1 = new String[9];
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities3.find();
      String[] stringArray2 = findWithCapabilities0.getOptions();
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector1 = findWithCapabilities2.m_Packages;
      findWithCapabilities1.m_Misses = vector1;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "h#!K\"t?DNXD";
      stringArray0[1] = "3";
      stringArray0[2] = "ignored";
      stringArray0[3] = "L-g\"&^w!O";
      stringArray0[4] = "    // always predicts label '";
      stringArray0[5] = "-no-class";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-superclass";
      stringArray0[1] = "-superclass";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "mkf=iW|NQhj>(Ft](";
      stringArray0[1] = "{V~<Pt";
      stringArray0[2] = "%-9iACr";
      stringArray0[3] = "z";
      stringArray0[4] = "@bO#YpN!";
      stringArray0[5] = "epfYn^)8y.|<M";
      stringArray0[6] = "-superclass";
      stringArray0[7] = "5Iw_Nqo";
      stringArray0[8] = "]dJ9.IWDn'u;jS";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-superclass");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-superclass";
      stringArray0[1] = "-superclass";
      FindWithCapabilities.main(stringArray0);
  }
}
