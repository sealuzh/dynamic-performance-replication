/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:49:32 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("KQ;y~]tcP=ql");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KQ;y~]tcP=ql'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("fstore");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fstore'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.accessToString(250, true);
      assertEquals("private static final volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.classOrInterface(250);
      assertEquals("class", string0);
      
      int int0 = Utility.setBit((-1577), (-1577));
      assertEquals((-1577), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.convertString(" (");
      assertEquals(" (", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.compactClassName("Only element values of type array can be built with this ctor - type specified: ");
      assertEquals("Only element values of type array can be built with this ctor - type specified: ", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)75;
      String string0 = Utility.classOrInterface((byte)75);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("class", "class", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("E$taqD", false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("45 27 61 71 44", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.fillup("org.apache.commons.io.filefilter.DelegateFileFilter", (-3090), true, ' ');
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.fillup("\t", 192, false, '5');
      assertEquals("55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555\t", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("E$taqD", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("E$taqD", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      String string0 = Utility.classOrInterface((byte) (-73));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.getSignature("ireturn");
      assertEquals("Lireturn;", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.L^.:Wk!;{nX7";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("java.lang.L^.:Wk!;{nX7", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "putfield";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("putfield", stringArray0);
      try { 
        Utility.typeOfSignature("vN`iQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vN`iQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.getSignature("G,!:#|zI7#P[/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Ou$";
      objectArray0[1] = (Object) "Ou$";
      objectArray0[2] = (Object) "Ou$";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("Ou$, Ou$, Ou$", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("Ou$, Ou$, Ou$");
      assertEquals("LOu$,;", string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.getSignature("lshl");
      assertEquals("Llshl;", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "lshl";
      objectArray0[1] = (Object) "Llshl;";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{lshl, Llshl;}", string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Zdd");
      assertEquals((byte)4, byte0);
      
      int int0 = Utility.clearBit(3481, (byte)4);
      assertEquals(3465, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature(" [");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type:  [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Utility.typeOfSignature("]E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "P8!%\\r<5]-|lK4*<?c";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("P8!%\r<5]-|lK4*<?c", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P8!%\r<5]-|lK4*<?c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.typeOfSignature("Zdd");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.decode("o@e.';$92hq", false);
      String string0 = Utility.convertString("o@e.';$92hq");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)114;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, 6704, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-121), true);
      assertEquals("0:    i2d\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = Utility.clearBit(52, 52);
      assertEquals(52, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-3759), 59);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.accessToString(65535, true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.typeOfSignature("BuUk<an8Xx#S;U!j^'G");
      try { 
        Utility.methodSignatureArgumentTypes("BuUk<an8Xx#S;U!j^'G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BuUk<an8Xx#S;U!j^'G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.convertString("\n     Method Arguments:");
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(",_/td");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,_/td
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.typeOfSignature("LRF,NPj0*RgR&yez;/3");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.getSignature("E$taqD");
      assertEquals("LE$taqD;", string0);
      
      String string1 = Utility.replace("E$taqD", "LE$taqD;", "LE$taqD;");
      assertEquals("E$taqD", string1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Ou$", false);
      assertArrayEquals(new byte[] {(byte)79, (byte)117}, byteArray0);
      
      String string0 = Utility.getSignature("Ou$");
      assertEquals("LOu$;", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", "putstatic", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short short0 = Utility.searchOpcode("getfield");
      assertEquals((short)180, short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = Utility.getSignature("lshl");
      assertEquals("Llshl;", string0);
      
      String string1 = Utility.methodSignatureReturnType("Llshl;");
      assertEquals("lshl", string1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)76;
      byteArray0[3] = (byte)48;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("93 4c 00 30", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte)76, false);
      assertEquals("0:    i2s\n1:    astore_1\n2:    nop\n3:    faload\n", string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)82, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-93);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), 194, false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    dup_x2\n1:    if_icmpgt\t\t#1\n4:    nop\n5:    nop\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dup_x2
         // 1:    if_icmpgt\t\t#1
         // 4:    nop
         // 5:    nop
         // 6:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("invokestatic", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-422), 14, false);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("0~g2'6um=_dUC;1c>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0~g2'6um=_dUC;1c>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("77 00 00", string0);
      
      String string1 = Utility.getSignature("77 00 00");
      assertEquals("L77;", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "!/[3K";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("!/[3K", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[3K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.decode(" NS$WN>ma /|zNY:0", false);
      try { 
        Utility.typeOfSignature("/<{`<%d:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /<{`<%d:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z");
      assertEquals("boolean", string0);
      
      short short0 = Utility.searchOpcode("boolean");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("StackMaHTable");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature("PsP[7,l4>2?iCq3_V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PsP[7,l4>2?iCq3_V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)76;
      byteArray0[3] = (byte)55;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte)76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2s
         // 1:    astore_1
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-34), (int) (byte) (-118), true);
      try { 
        Utility.methodSignatureArgumentTypes("0:    l2d\n1:    l2d\n2:    nop\n3:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    l2d
         // 1:    l2d
         // 2:    nop
         // 3:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("i$rdiv", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)37, (byte)100, (byte)105, (byte)118}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YwBx&,'8JV@prbyRXS";
      stringArray0[1] = "YwBx&,'8JV@prbyRXS";
      stringArray0[2] = "YwBx&,'8JV@prbyRXS";
      stringArray0[3] = "YwBx&,'8JV@prbyRXS";
      stringArray0[4] = "YwBx&,'8JV@prbyRXS";
      stringArray0[5] = "YwBx&,'8JV@prbyRXS";
      Utility.methodTypeToSignature("YwBx&,'8JV@prbyRXS", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("YwBx&,'8JV@prbyRXS", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YwBx&,'8JV@prbyRXS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.fillup("['uiv/-", 3381, false, '<');
      Utility.compactClassName("GH4m8O9", false);
      try { 
        Utility.typeOfSignature("GH4m8O9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GH4m8O9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = Utility.getSignature("boolean");
      assertEquals("Z", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",PT";
      stringArray0[1] = ",PT";
      stringArray0[2] = ",PT";
      stringArray0[3] = ",PT";
      stringArray0[4] = ",PT";
      stringArray0[5] = ",PT";
      String string0 = Utility.methodTypeToSignature(",PT", stringArray0);
      assertEquals("(L,PT;L,PT;L,PT;L,PT;L,PT;L,PT;)L,PT;", string0);
      
      String string1 = Utility.signatureToString("D", false);
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.typeOfSignature("Visiting non-standard PMGClass object");
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lha
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: `");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.methodSignatureReturnType("Invalid signature: `");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-/F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -/F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.typeOfSignature("The array of prefixes must not be null");
      try { 
        Utility.methodSignatureReturnType("The array of prefixes must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of prefixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.printArray((Object[]) null, false, true);
      String string0 = "AI,/";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("AI,/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AI,/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105), false);
      assertEquals("0:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.convertString("\n     Method Arguments:");
      try { 
        Utility.methodSignatureReturnType("GIph}B,1lb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GIph}B,1lb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OZCg}B^m:ZzP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OZCg}B^m:ZzP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte byte0 = Utility.typeOfSignature("FULL");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.getSignature("PR/W S!a7t)");
      assertEquals("LPR/W;", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.getSignature("Me");
      try { 
        Utility.methodSignatureReturnType("Me");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Me'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      try { 
        Utility.typeOfSignature("UI`a^4Oi 7!{rBS$s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UI`a^4Oi 7!{rBS$s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6#x\"Z)Ve9nSI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6#x\"Z)Ve9nSI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      // Undeclared exception!
      try { 
        Utility.getSignature("8cdFY-[}E[6NV$}g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[}E[6NV$}g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@/bpa:KEfnIXV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @/bpa:KEfnIXV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte byte0 = Constants.ITEM_NewObject;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[2] = (byte)8;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-95), (int) (byte) (-95), false);
      Utility.getSignature("0:    if_icmplt\t\t#8\n");
      try { 
        Utility.methodSignatureArgumentTypes("L0:;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L0:;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byte byte0 = Utility.typeOfSignature("D#\"Z)Ve9nSI");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "?>...";
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      String string0 = "*2(Jxar2QsY;F$";
      try { 
        Utility.typeOfSignature("*2(Jxar2QsY;F$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2(Jxar2QsY;F$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "L}z}|k8'Im<&d;V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L}z}|k8'Im<&d;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L}z}|k8'Im<&d;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("BNn]\"GDXj\"}*18LE");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("WzfIefb5I", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte) (-108), false);
      assertEquals("0:    nop\n1:    lcmp\n2:    lcmp\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("QqD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QqD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, (int) (byte) (-99), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (-3520), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-26);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), (int) (byte) (-126), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ixor
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.isSet(2432, 2432);
      try { 
        Utility.typeOfSignature("(GCpE%*c*.sG/Oq7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (GCpE%*c*.sG/Oq7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.accessToString((-2370));
      try { 
        Utility.typeOfSignature("=k[r5>:TE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =k[r5>:TE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, (int) (byte)127, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1075), (int) (byte) (-108), true);
      assertEquals("0:    fload_2\n1:    lcmp\n2:    lcmp\n3:    lcmp\n", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 917, (int) (byte) (-81), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "K=";
      Utility.getSignature("K=");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (-878), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("UU$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4198), (-4198), true);
      assertEquals("0:    castore\n1:    castore\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = Utility.isSet(2432, 2432);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("TA{[P1kd@8o'x);S");
      assertEquals((byte)14, byte0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("TA{[P1kd@8o'x);S", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("0e 0e 0e 0e 0e", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)2;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2606), (int) (byte)93, false);
      assertEquals("0:    dup2_x1\n1:    dconst_1\n2:    aload_1\n3:    <illegal opcode>\n4:    iconst_m1\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.fillup("}G+a)bo", 675, false, 'T');
      assertEquals}G+a)bo", string0);
      
      Utility.getSignature("");
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-79);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)5;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)5, false);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E$taqD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E$taqD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)34;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2673), 74, true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray1 = new byte[5];
      byteArray0[6] = (byte) (-122);
      byteArray1[1] = (byte) (-121);
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte)126;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-121), 85, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "private";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("private");
      try { 
        Utility.typeOfSignature("0YC}pw{82f7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0YC}pw{82f7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String string1 = "Q";
      String string2 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-78);
      Utility.methodSignatureReturnType("[JFmOdK");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.methodSignatureReturnType("<BWI9)Op./+>,G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Op./+>,G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "monitorexit";
      Utility.decode("monitorexit", false);
      String string1 = "+>[[0r*";
      try { 
        Utility.typeOfSignature("+>[[0r*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >[[0r*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("3z_WhR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3z_WhR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" NS$WN>ma /|zNY:0", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-1), (-1), true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)77;
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)77, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, (int) (byte) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, 39, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.getSignature("sUCADM/");
      Pattern.quote("LsUCADM/;");
      Utility.decode("zN(lY$%Q*}idc)\"", false);
      Utility.convertString("zN(lY$%Q*}idc)\"");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-71);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, 236, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte) (-71), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), 1278, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 97, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = Utility.decode(" NS$WN>ma /|zNY:0", false);
      Utility.encode(byteArray0, false);
      Utility.methodSignatureReturnType("Code(max_stack = ");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.typeOfSignature("E$taqD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E$taqD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[3] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, 197, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.fillup("L}z}|k8'Im<&d;V", 92, true, '?');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-104);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4198), (int) (byte)21, true);
      Utility.encode(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "13[HwFW%KY";
      try { 
        Utility.typeOfSignature("13[HwFW%KY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 13[HwFW%KY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.getSignature(";5NLzR!KNG\"");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2048, (int) (byte) (-99), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      try { 
        Utility.methodSignatureReturnType("Hfn,K0@/%80>%X1!Q5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hfn,K0@/%80>%X1!Q5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-56);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-522), 156);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fmul
         // 1:    aload_1
         // 2:    fstore\t\t%12
         // 4:    iload_3
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("7SS,|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7SS,|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\t\t#", false);
      Utility.accessToString((-2741), false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2741), (-639), false);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("cbP4u~,");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte)31, true);
      try { 
        Utility.methodSignatureArgumentTypes("%G-o<)s-?]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %G-o<)s-?]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-929), (-1508), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("E$taqD", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 654, 3594, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, (int) (byte)22, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-125);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)89;
      try { 
        Utility.typeOfSignature("X-:*(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X-:*(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.typeOfSignature("Cdd");
      Utility.compactClassName("newarray");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-60), (-147), true);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfSignature("KT<`%**{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KT<`%**{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "(string_index = ";
      try { 
        Utility.typeOfSignature("MO.$!)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MO.$!)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.getSignature("dastore");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-89);
      byteArray0[3] = (byte)45;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3057, false);
      Utility.getSignature("dastore");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.convertString("\n     Method Arguments:");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-51), (int) (byte) (-77), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ireturn
         // 1:    ior
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-17);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)78, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)19;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-556), (int) (byte)19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)72;
      objectArray0[0] = (Object) (byte)37;
      byteArray0[3] = (byte) (-61);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)72, 170);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, (int) (byte) (-61), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ablesitch", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 664, 664, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 181, (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (-2049), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-25);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2998), (-2998), false);
      try { 
        Utility.methodSignatureReturnType("0:    dup_x1\n1:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dup_x1
         // 1:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte)47, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "void";
      stringArray0[1] = "V";
      stringArray0[2] = "void";
      stringArray0[3] = "HXW";
      stringArray0[4] = "V";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.isSet(2432, 2432);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4709), 2432, true);
      Utility.getSignature("yEtPY!+?H");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte)47, true);
      byte[] byteArray1 = Utility.decode("0:    dcmpl\n1:    laload\n2:    laload\n3:    nop\n4:    nop\n5:    nop\n", false);
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-99), (int) (byte) (-105), false);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      Utility.searchOpcode("private");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3, (int) (byte)43, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      Utility.searchOpcode("private");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-73), 3, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte) (-124), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.getSignature("ey");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ey";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1292, 1243, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-159), (int) (byte) (-103), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "W;G[O";
      try { 
        Utility.typeOfSignature("W;G[O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W;G[O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.typeOfSignature("[USv-fdq#vc,");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Utility.getSignature("dastore");
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-89);
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte) (-89), false);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte byte0 = Constants.T_FLOAT;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("$G$G$G$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $G$G$G$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "Hj#%:5t'V\\";
      try { 
        Utility.typeOfSignature("Hj#%:5t'V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hj#%:5t'V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1183, (-73), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("o@e.';$92hq", false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1283), (-1393), false);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      Utility.encode(byteArray0, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (-4008), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2621), (int) (byte)20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[0] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, (int) (byte)111, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (byte)96, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-119);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-119), (int) (byte) (-119), false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-119), false);
      byte byte0 = ElementValue.CLASS;
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.getSignature("sUCADM/");
      Pattern.quote("LsUCADM/;");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)17;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("2Lbb[b$`=j,YeX|h=");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, 165, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)73, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, (int) (byte)119, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      String string0 = ")zOOv*%9gJry,0I";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-126);
      Utility.encode(byteArray0, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1867), (int) (byte)30, false);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-52);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, 188, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, (int) (byte)60, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("CV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(string_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `string_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.getSignature("%K=");
      try { 
        Utility.typeOfSignature("%K=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %K=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("vg z}pYy&,Q.wP=xEX[", 675, false, 'H');
      Utility.getSignature("ey");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), (-2217), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-66);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte)33, true);
      Utility.getSignature("<init>");
      try { 
        Utility.methodSignatureArgumentTypes("dup_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "jyi]gwCr,*";
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 229, (int) (byte)70, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)111;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)111, false);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-10);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte) (-102), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (int) (byte)98, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "' hj>&BTYt;2@jza";
      try { 
        Utility.typeOfSignature("' hj>&BTYt;2@jza");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ' hj>&BTYt;2@jza
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)86;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1011, 4642, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&(lz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &(lz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";Q_F^{'B(I(fs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Q_F^{'B(I(fs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)65;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)65;
      try { 
        Utility.typeOfMethodSignature("(Unknown attribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Unknown attribute 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-220), (int) (byte)41, false);
      Utility.isSet((-220), (-220));
      Utility.toHexString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      Utility.decode("multianewarray", false);
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)72;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)72;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)103, true);
      try { 
        Utility.typeOfSignature("if_icmplt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmplt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = object0;
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('p');
      Utility.compactClassName("{java.lang.Object@3f9fad8d, java.lang.Object@3f9fad8d, java.lang.Object@40fa46a, java.lang.Object@3f9fad8d, java.lang.Object@20358e3d, java.lang.Object@3f9fad8d}", "", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{java.lang.Object@3f9fad8d, java.lang.Object@3f9fad8d, java.lang.Object@40fa46a, java.lang.Object@3f9fad8d, java.lang.Object@20358e3d, java.lang.Object@3f9fad8d}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{java.lang.Object@3f9fad8d, java.lang.Object@3f9fad8d, java.lang.Object@40fa46a, java.lang.Object@3f9fad8d, java.lang.Object@20358e3d, java.lang.Object@3f9fad8d}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1716, (int) (byte)121, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-113);
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), (int) (byte) (-113), false);
      byte byte0 = ElementValue.CLASS;
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, true);
      String string0 = "Sensitive";
      try { 
        Utility.typeOfSignature("4cIk=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4cIk=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte) (-76), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    lconst_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      try { 
        Utility.typeOfSignature("!ae KI)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ae KI)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), (int) (byte) (-84), true);
      try { 
        Utility.typeOfMethodSignature("CONSTANT_Methodref");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: CONSTANT_Methodref
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-94);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte) (-94), true);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-75);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), (int) (byte)9, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Locale.getISOLanguages();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 110, (int) (byte)35, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, (int) (byte) (-63));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 1278, true);
      Utility.format(1278, 1278, true, ' ');
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)127;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte) (-82), false);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-126);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-23), 65, false);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.convertString("\n     Method Arguments:");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nd%81HRn[4ex|~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nd%81HRn[4ex|~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), (int) (byte) (-102), false);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, (int) (byte)67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#ozW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #ozW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.replace("aaload", "aaload", (String) null);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, (-2095), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte byte0 = Constants.ITEM_NewObject;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ")";
      Utility.printArray(objectArray0, false, true);
      String string0 = "6#\"Z)\\Ve'9n-SI";
      try { 
        Utility.typeOfSignature("\")\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \")\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WzfIefb5I");
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      Utility.getSignature("WzfIefb5I");
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (byte)89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8l{\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8l{\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, 118, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-115);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)110, (int) (byte) (-115), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)121;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), (int) (byte) (-15), true);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "E$taqD\\";
      Utility.decode("E$taqD", false);
      Utility.accessToString(654, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), 173, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)105;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-486), 42, false);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.convertString("Z8h41");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-69);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte)80, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.getSignature("sUCADM/");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (int) (byte) (-108), false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-87), false);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)25;
      Utility.accessToString((int) (byte)25, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "im#<~[|GNQ/eq";
      try { 
        Utility.methodSignatureArgumentTypes("im#<~[|GNQ/eq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: im#<~[|GNQ/eq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.decode("E$taqD", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-171), (int) (byte)52, true);
      byte byte0 = ElementValue.CLASS;
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-113);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-617), (-73), true);
      Utility.equals(byteArray0, byteArray0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)111;
      byteArray0[4] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1139, (int) (byte)111, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (byte)89, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      Utility.codeToString(byteArray0, constantPool0, (-1741), (-1741), false);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-67), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N[U_T2V(<q)?1mr<U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N[U_T2V(<q)?1mr<U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), (int) (byte) (-76), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 153, (int) (byte)79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)27, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, 817, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1191), 180, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9f1F_wB.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9f1F_wB.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-85);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4315), 584, false);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(start_pc = ", "U]x\"'M6sa%];;ua", "lcmp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `start_pc = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 654, (-1560), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      try { 
        Utility.typeOfSignature(".{{B:*uUKjE|s`?C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .{{B:*uUKjE|s`?C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte) (-127), false);
      Utility.convertString("ret");
      Utility.searchOpcode("The filter must not be null");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 199, (int) (byte)66, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 336, (int) (byte) (-110), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.typeOfSignature("S?[}acZ0Q_ic");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2930), (int) (byte) (-2), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lconst_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      try { 
        Utility.decode("b+b$fa?", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("o@e.A;$9ghq", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte) (-73), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RV+zBo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RV+zBo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      Utility.replace("20Iq}R", "20Iq}R", "20Iq}R");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)35;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte) (-99);
      byteArray1[5] = (byte)19;
      byteArray1[6] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Locale.getISOLanguages();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)91;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2629), 2901, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, 20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-53);
      byteArray0[8] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (int) (byte) (-124), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-26);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-26), (int) (byte) (-126), true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (int) (byte) (-68), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), 232, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    nop\n1:    dcmpg\n2:    dcmpg\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n", "if_icmpeq", "if_icmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    dcmpg
         // 2:    dcmpg
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         // 11:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.typeOfSignature("Zdd");
      Utility.typeOfSignature("Zdd");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4256), (-4256), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 223, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Utility.typeOfSignature("J5JUytW7L59FyN");
      byte byte0 = Constants.T_REFERENCE;
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.methodSignatureReturnType("F6Dn(gJ");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.accessToString(154, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 154, (int) (byte)42, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5r,aY[!sR1(=ogoY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5r,aY[!sR1(=ogoY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (int) (byte) (-90), true);
      Utility.compactClassName("Invalid byte tag in constant pool: ");
      Utility.compactClassName("0:    if_acmpne\t\t#0\n3:    nop\n4:    nop\n5:    nop\n", ", ", false);
      Utility.isJavaIdentifierPart('=');
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)78;
      try { 
        Utility.methodSignatureReturnType("U0Jm-8g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U0Jm-8g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 39, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifnull");
      byteArray0[0] = (byte) (-120);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 161, 161, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte) (-96);
      byteArray0[3] = (byte) (-86);
      byteArray0[8] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1393), (-1283), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    impdep2
         // 2:    impdep2
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Utility.getSignature("sUCADM/");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)50;
      Utility.codeToString(byteArray0, (ConstantPool) null, 2, 170, true);
  }
}
