/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:51:20 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(class0);
      doubleKeyMap0.remove((Object) class0);
      Integer integer0 = new Integer(253);
      doubleKeyMap1.put((Object) doubleKeyMap0, (Object) integer0, integer0);
      Integer integer1 = new Integer((-4142));
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) integer1, (Map<Object, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      doubleKeyMap0.remove((Object) "WRWWL", "WRWWL");
      doubleKeyMap0.put((Object) null, "", (Object) "WRWWL");
      doubleKeyMap0.put((Object) null, "XYu:", (Object) "XYu:");
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap1.newMap();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<Integer, Integer>> hashMap1 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap1);
      Map<Integer, Map<Object, Map<String, Integer>>> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.remove((Object) map0, integer0);
      DoubleKeyMap<Integer, Object, Map<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Map<String, Integer>>(map0, class0);
      Integer integer1 = new Integer((-699));
      doubleKeyMap1.get(integer1, (Object) "");
      DoubleKeyMap<String, Integer, String> doubleKeyMap2 = new DoubleKeyMap<String, Integer, String>();
      doubleKeyMap2.remove("", integer1);
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      doubleKeyMap3.remove((Object) hashMap2, "");
      DoubleKeyMap<String, Object, Integer> doubleKeyMap4 = new DoubleKeyMap<String, Object, Integer>();
      DoubleKeyMap<Object, String, String> doubleKeyMap5 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap4.newMap();
      Map<String, Map<Object, Object>> map1 = doubleKeyMap5.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap6 = new DoubleKeyMap<String, Object, Object>(map1);
      Map<Object, Integer> map2 = doubleKeyMap6.newMap();
      doubleKeyMap4.put("", (Object) map2, (Integer) null);
      doubleKeyMap4.put("wrong proto type map ", (Object) "wrong proto type map ", integer1);
      doubleKeyMap4.remove("", (Object) hashMap1);
      DoubleKeyMap<String, String, String> doubleKeyMap7 = new DoubleKeyMap<String, String, String>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap8 = null;
      try {
        doubleKeyMap8 = new DoubleKeyMap<Integer, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      HashMap<Object, Map<Integer, Integer>> hashMap1 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(hashMap1);
      Map<Integer, Map<Object, Map<String, Integer>>> map0 = doubleKeyMap1.newMap();
      Integer integer0 = new Integer(0);
      doubleKeyMap1.remove((Object) map0, integer0);
      DoubleKeyMap<Integer, Object, Map<String, Integer>> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Map<String, Integer>>(map0, class0);
      Integer integer1 = new Integer((-699));
      doubleKeyMap2.get(integer1, (Object) "");
      DoubleKeyMap<String, Integer, String> doubleKeyMap3 = new DoubleKeyMap<String, Integer, String>();
      doubleKeyMap3.remove("", integer1);
      DoubleKeyMap<Object, String, Object> doubleKeyMap4 = new DoubleKeyMap<Object, String, Object>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      doubleKeyMap4.remove((Object) hashMap2, "");
      DoubleKeyMap<String, Object, Integer> doubleKeyMap5 = new DoubleKeyMap<String, Object, Integer>();
      DoubleKeyMap<Object, String, String> doubleKeyMap6 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap5.newMap();
      doubleKeyMap6.newMap();
      doubleKeyMap6.newMap();
      HashMap<String, Map<Object, Object>> hashMap3 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap7 = new DoubleKeyMap<String, Object, Object>(hashMap3);
      doubleKeyMap7.newMap();
      Integer integer2 = new Integer(0);
      doubleKeyMap5.put("", (Object) null, integer2);
      Integer integer3 = new Integer((-745));
      doubleKeyMap5.put("vdmO\"sa-f{>]Y%5[=A!", (Object) integer3, integer3);
      doubleKeyMap5.remove("vdmO\"sa-f{>]Y%5[=A!", (Object) "wrong proto type map ");
      DoubleKeyMap<String, String, String> doubleKeyMap8 = new DoubleKeyMap<String, String, String>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap9 = null;
      try {
        doubleKeyMap9 = new DoubleKeyMap<Integer, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 0;
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>(0);
      Integer integer0 = new Integer(0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.get(integer1, "z*Z9h$`|N8J4 m0SA");
      HashMap<Object, Map<Object, Integer>> hashMap2 = new HashMap<Object, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap2, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.newMap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
