/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 13:45:26 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Map<Object, String>, Map<String, Object>> hashMap0 = new HashMap<Map<Object, String>, Map<String, Object>>();
      DoubleKeyMap<Map<Object, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, Object>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap0.put(hashMap1, hashMap2);
      Map<String, Object> map0 = doubleKeyMap0.remove((Map<Object, String>) hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DoubleKeyMap<HashMap<Integer, String>, HashMap<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, HashMap<Integer, String>, Integer>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      doubleKeyMap0.put(hashMap0, hashMap0, integer0);
      Map<HashMap<Integer, String>, Integer> map0 = doubleKeyMap0.remove(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, String, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, Map<Object, String>>();
      DoubleKeyMap<Object, Integer, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Object, String>>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put(map0, "", (Map<Object, String>) hashMap0);
      Map<String, Map<Object, String>> map1 = doubleKeyMap0.get((Map<Object, String>) hashMap0);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Map<Integer, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Object, String>>>();
      DoubleKeyMap<Object, Integer, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Object, String>>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap2 = doubleKeyMap0.remove((Object) hashMap1, (Integer) null);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>();
      String string0 = doubleKeyMap1.remove("", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap0.remove((Object) null, (Map<String, Object>) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      HashMap<Object, Map<Integer, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Object, String>>>();
      DoubleKeyMap<Object, Integer, HashMap<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, HashMap<Object, String>>(hashMap0);
      Integer integer0 = new Integer(0);
      HashMap<Object, String> hashMap1 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Map<HashMap<Object, String>, Map<Object, Map<Integer, Object>>>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<HashMap<Object, String>, Map<Object, Map<Integer, Object>>>, Integer>();
      Map<HashMap<Object, String>, Map<Object, Map<Integer, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, String>, Object, Map<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Map<Integer, Object>>(map0);
      Map<Object, Map<Integer, Object>> map1 = doubleKeyMap1.remove((HashMap<Object, String>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Integer, String>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Integer, String> map0 = doubleKeyMap0.put("", (Object) hashMap0, (Map<Integer, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      HashMap<Map<Object, String>, Map<String, Object>> hashMap0 = new HashMap<Map<Object, String>, Map<String, Object>>();
      DoubleKeyMap<Map<Object, String>, String, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Object, String>, String, Object>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap1.put((Map<Object, String>) hashMap1, ">s5J", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, String>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, String>, Map<Object, String>>();
      Map<Integer, Map<Object, Map<Object, String>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Map<Object, String>>(map0, class0);
      Integer integer0 = new Integer((-1463));
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(integer0, (Object) doubleKeyMap0, (Map<Object, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<Object, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, Integer>(hashMap0);
      Map<Integer, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>(map0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Integer) null, (String) null, "n WgV !sBvp(I=P8YhN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<Object, String>, Map<Map<Object, String>, Integer>> hashMap0 = new HashMap<Map<Object, String>, Map<Map<Object, String>, Integer>>(0);
      DoubleKeyMap<Map<Object, String>, Map<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Map<Object, String>, Integer>(hashMap0);
      Map<HashMap<String, Map<Object, String>>, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<String, Map<Object, String>>, String, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Map<Object, String>>, String, String>(map0);
      HashMap<String, Map<Object, String>> hashMap1 = new HashMap<String, Map<Object, String>>();
      String string0 = doubleKeyMap1.get(hashMap1, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(3196);
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.get(integer0, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<Object, Map<HashMap<Object, Map<Object, String>>, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Object, Map<Object, String>>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Map<Object, String>>, Integer>(map0);
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Integer, Integer>(hashMap0, class0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get((HashMap<String, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Map<String, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Map<Object, String>, Map<String, Object>> hashMap0 = new HashMap<Map<Object, String>, Map<String, Object>>();
      DoubleKeyMap<Map<Object, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, Object>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap2.put("[sJ4&sJ<9oY", "i3h,UJ: _m(s9G{");
      hashMap0.put(hashMap1, hashMap2);
      doubleKeyMap0.remove((Map<Object, String>) hashMap1, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Object>, Object>>();
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(hashMap0);
      HashMap<HashMap<String, Object>, Object> hashMap1 = new HashMap<HashMap<String, Object>, Object>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap0.put("", hashMap1);
      Object object0 = doubleKeyMap0.put("", hashMap2, (Object) "jwf6U5p[v{sHR?f2");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Map<Map<Object, String>, Integer>> hashMap0 = new HashMap<String, Map<Map<Object, String>, Integer>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      String string0 = doubleKeyMap0.get((String) null, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Integer, Map<Object, String>>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Integer, Map<Object, String>>>();
      DoubleKeyMap<HashMap<Object, String>, Integer, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, Map<Object, String>>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Integer, Map<String, String>> hashMap2 = new HashMap<Integer, Map<String, String>>();
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>(hashMap2);
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      Integer integer0 = new Integer((-630));
      Map<Object, String> map1 = doubleKeyMap0.get(hashMap1, integer0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Map<Object, String>, Map<String, Object>> hashMap0 = new HashMap<Map<Object, String>, Map<String, Object>>();
      DoubleKeyMap<Map<Object, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, Object>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap0.put(hashMap1, hashMap2);
      doubleKeyMap0.remove((Map<Object, String>) hashMap1, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }
}
