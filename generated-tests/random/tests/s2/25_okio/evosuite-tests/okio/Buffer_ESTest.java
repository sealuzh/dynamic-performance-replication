/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 10:48:25 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.List;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Pipe pipe0 = new Pipe(1186L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShortLe(15);
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.encodeUtf8("x*$] ");
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteStringArray0[0];
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertFalse(buffer0.exhausted());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("", charset0);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.writeAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.writableSegment(3);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(2720L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe(2720L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      long long0 = buffer_UnsafeCursor0.buffer.size();
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Pipe pipe0 = new Pipe(1765L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong(1765L);
      assertFalse(buffer0.exhausted());
      
      String string0 = buffer0.readUtf8();
      assertEquals("6e5", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(9223372036854775807L);
      assertFalse(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("7fffffffffffffff", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Pipe pipe0 = new Pipe(1772L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeDecimalLong((-1133L));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 101, 101);
      buffer1.readFrom((InputStream) byteArrayInputStream0);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.buffer.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLong(0L);
      buffer1.readByteArray();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(421L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer.writeDecimalLong(421L);
      byte[] byteArray0 = new byte[0];
      int int0 = buffer0.read(byteArray0);
      assertEquals(3L, buffer0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha256(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      boolean boolean0 = realBufferedSink0.buffer.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Pipe pipe0 = new Pipe(1155L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShortLe(15);
      boolean boolean0 = buffer0.exhausted();
      assertEquals(2L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8L-V;M-zpgU ", true);
      buffer0.writeUtf8("@q6@:6(${e");
      buffer0.copyTo((OutputStream) mockFileOutputStream0, 0L, 0L);
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(65280L);
      Buffer buffer1 = buffer0.buffer();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.buffer();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("{(@{.-g)IYZ12Wu(", (-1), 1492);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("Y|?/^j<H$n!", charset0);
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeLongLe((-1));
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Pipe pipe0 = new Pipe(608L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer.writeIntLe(22);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (int) (byte)114, (-1910));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=114 byteCount=-1910
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(2370L);
      Buffer buffer0 = pipe0.buffer;
      ByteString byteString0 = ByteString.EMPTY;
      Buffer buffer1 = buffer0.write(byteString0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      buffer0.readFully(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer0, (-2371L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString((-4110L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-4110
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      byte[] byteArray0 = new byte[4];
      int int0 = buffer_UnsafeCursor0.buffer.read(byteArray0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = buffer0.rangeEquals(1000L, byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = realBufferedSink0.buffer.indexOfElement((ByteString) null, 32L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(3946L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long0 = buffer0.indexOfElement(byteString0, 1000000L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = ByteString.encodeUtf8("IR8(zU=");
      long long0 = realBufferedSource0.buffer.indexOfElement(byteString0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), long0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Pipe pipe0 = new Pipe(1186L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.readString((long) (byte)15, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=15
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2029);
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteArray(1422L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1422
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        buffer0.read(byteArray0, (int) (byte)100, (int) (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=100 byteCount=7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.rangeEquals(1095216660480L, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.getByte(32L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=32 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      boolean boolean0 = buffer0.rangeEquals((-1148L), byteString0, 511, (-1589));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      long long0 = buffer0.indexOfElement(byteString0, 65536L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-50), (long) (byte) (-50), (long) (byte) (-50));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-50 toIndex=-50
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      // Undeclared exception!
      try { 
        buffer0.write(realBufferedSink0.buffer, (-697L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-697
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        buffer0.write(byteArray0, (-2300), 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=-2300 byteCount=127
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.skip((-28L));
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(1186L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(0L, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer_UnsafeCursor0.buffer, (-1L), (-550L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-550
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8L-V;M-zpgU ", true);
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockFileOutputStream0, 0L, 0L);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.size();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUtf8(100000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=100000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(65536L);
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.close();
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertFalse(buffer_UnsafeCursor1.readWrite);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.resizeBuffer((-1617L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1617
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((byte)18);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(21L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      
      buffer_UnsafeCursor0.resizeBuffer(21L);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeByte(106);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertFalse(buffer0.exhausted());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Pipe pipe0 = new Pipe(2153L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong(2153L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.next();
      assertFalse(buffer0.exhausted());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      int int0 = buffer_UnsafeCursor1.seek((-1));
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
      assertEquals((-1), int0);
      assertFalse(buffer_UnsafeCursor1.readWrite);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(16L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(805L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=805 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Pipe pipe0 = new Pipe(21L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-3150L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-3150 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Pipe pipe0 = new Pipe(2153L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      assertNotSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Pipe pipe0 = new Pipe(1186L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShortLe(15);
      buffer0.clone();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong(100);
      buffer0.hashCode();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      boolean boolean0 = realBufferedSink0.buffer.equals(buffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64("");
      boolean boolean0 = buffer0.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      GzipSink gzipSink0 = new GzipSink(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[9];
      realBufferedSink0.writeIntLe(6);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.hmacSha1(byteString0);
      assertFalse(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShort((-1006));
      buffer0.md5();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Pipe pipe0 = new Pipe(887L);
      Buffer buffer0 = pipe0.buffer;
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(65280L);
      buffer1.segmentSizes();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Pipe pipe0 = new Pipe(1186L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShortLe(15);
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.encodeUtf8("x*$] ");
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      ByteString byteString1 = new ByteString(byteArray0);
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(1, int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Pipe pipe0 = new Pipe(4441L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = buffer0.rangeEquals(4441L, byteString0, 1610612736, (-2145338308));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = buffer0.rangeEquals((long) (byte)0, byteString0, (int) (byte) (-55), (-1779));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Pipe pipe0 = new Pipe(32L);
      Buffer buffer0 = pipe0.buffer;
      boolean boolean0 = buffer0.rangeEquals(32L, (ByteString) null, 1731, 8192);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Pipe pipe0 = new Pipe(416L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.buffer.writeHexadecimalUnsignedLong(416L);
      ByteString byteString0 = ByteString.decodeBase64("");
      long long0 = realBufferedSource0.buffer.indexOfElement(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      ByteString byteString0 = ByteString.encodeUtf8("IR8(zU=");
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-343));
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(969);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      buffer1.indexOf(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (long) (byte) (-58));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, 1000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Pipe pipe0 = new Pipe(1765L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)51;
      buffer0.write(byteArray0);
      long long0 = buffer0.indexOf((byte)51);
      assertFalse(buffer0.exhausted());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Pipe pipe0 = new Pipe(1594L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[4];
      buffer0.write(byteArray0);
      buffer0.indexOf((byte)110, 1594L);
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      long long0 = realBufferedSource0.buffer.indexOf((byte) (-90), 8L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Pipe pipe0 = new Pipe(1042L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-9), 1042L, 9L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=1042 toIndex=9
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-125), (long) (byte) (-125));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-125 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.size = 10000000L;
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.read(buffer_UnsafeCursor0.buffer, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(94);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(1101L);
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer1.readAll(bufferedSink0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 8192L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Pipe pipe0 = new Pipe(15L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeHexadecimalUnsignedLong(0L);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(9223372036854775807L);
      assertEquals(19L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(10000000000L);
      assertEquals(11L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(280375465082880L);
      assertEquals(15L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Pipe pipe0 = new Pipe(421L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer.writeDecimalLong(421L);
      ByteString byteString0 = realBufferedSource0.buffer.snapshot();
      long long0 = realBufferedSource0.buffer.indexOf(byteString0, 421L);
      assertEquals(3, byteString0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((byte)97);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      long long0 = buffer0.indexOfElement(byteString0, 1772L);
      assertEquals(2L, buffer0.size());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(1000000000L);
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha256(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      try { 
        realBufferedSink0.buffer.write((Source) buffer0, 873L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = (Buffer)realBufferedSource0.buffer.write((Source) buffer0, 0L);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeByte(106);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      assertFalse(buffer0.exhausted());
      
      realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null, (-2280), (-3061));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeString("Unexpected code point: ", 2454, 2454, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2454 > 23
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(5L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("SHA-1", 2147218297, 6, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 6 < 2147218297
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("Ot@\"Emf_%CoJG:K,;\"C", (-527), (-2147268877), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -527
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 1512, 1512, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(4969);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(55296);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2147221535);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7ffc001f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Pipe pipe0 = new Pipe(1772L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint((-2147483646));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha512(pipe_PipeSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("", 17, 8192);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 8192 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8("newSize < 0: ", 106, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 106
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeInt(12);
      assertFalse(buffer0.exhausted());
      
      buffer1.clear();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.skip(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      buffer0.writeDecimalLong(1292L);
      buffer0.readFully(byteArray0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer.writeShort(102);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      int int0 = realBufferedSource0.buffer.readUtf8CodePoint();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) (byte)36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=35 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(16711680L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-7L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-7
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((-333L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -333
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = buffer0.readAll(realBufferedSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer0, 65280L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Pipe pipe0 = new Pipe(1186L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShortLe(15);
      assertFalse(buffer0.exhausted());
      
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = ByteString.encodeUtf8("x*$] ");
      byteStringArray0[0] = byteString0;
      buffer1.readShort();
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Pipe pipe0 = new Pipe(2185L);
      Buffer buffer0 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.selectPrefix(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      ByteString[] byteStringArray0 = new ByteString[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer1.select(options0);
      assertFalse(buffer0.exhausted());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Pipe pipe0 = new Pipe(2370L);
      Buffer buffer0 = pipe0.buffer;
      ByteString[] byteStringArray0 = new ByteString[5];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeDecimalLong(8192L);
      assertEquals(4L, buffer0.size());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(33170L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Pipe pipe0 = new Pipe(2185L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeInt(12);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = new Pipe(887L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      byte[] byteArray0 = new byte[2];
      buffer0.write(byteArray0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2L);
      assertEquals(1L, buffer0.size());
      
      long long0 = buffer1.readDecimalLong();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(10000000L);
      assertEquals(8L, buffer0.size());
      
      long long0 = buffer1.readLongLe();
      assertEquals(3472328296227680305L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeUtf8("=5Nx)f*+kt2?<3Bf");
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      long long0 = realBufferedSink0.buffer.readLong();
      assertEquals(4410517688076872235L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong((-447L));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(16L, buffer1.size());
      
      int int0 = realBufferedSource0.buffer.readIntLe();
      assertEquals(1717986918, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(416L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(416L);
      short short0 = buffer0.readShortLe();
      assertEquals(1L, buffer0.size());
      assertEquals((short)24881, short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(2790L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      assertEquals(7L, buffer0.size());
      assertEquals(65533, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(9223372036854775807L);
      byte byte0 = buffer1.readByte();
      assertFalse(buffer0.exhausted());
      assertEquals((byte)55, byte0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Pipe pipe0 = new Pipe(1772L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 101, 101);
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Pipe pipe0 = new Pipe(1200L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)54, 65);
      try { 
        realBufferedSource0.buffer.readFrom((InputStream) byteArrayInputStream0, 100000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readFrom((InputStream) null, (-447L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -447
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0, 0L);
      assertSame(buffer0, buffer1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Pipe pipe0 = new Pipe(899L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeTo((OutputStream) null, 899L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeUtf8("=5Nx)f*+kt2?<3Bf");
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict(4410532902172452394L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=16 content=3d354e7829662a2b6b74323f3c334266\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, (-1225L), (-1225L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeInt(2021161080);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer1.copyTo(outputStream0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, 514L, 514L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      boolean boolean0 = realBufferedSink0.buffer.request((-3447L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.request(15L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.require(15L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require(0L);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.write(byteString0);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      boolean boolean0 = inflaterSource0.refill();
      assertFalse(inflater0.needsInput());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Pipe pipe0 = new Pipe(2720L);
      Buffer buffer0 = pipe0.buffer;
      InputStream inputStream0 = buffer0.inputStream();
      // Undeclared exception!
      buffer0.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Charset charset0 = Charset.defaultCharset();
      buffer_UnsafeCursor0.buffer.readString(charset0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Pipe pipe0 = new Pipe(416L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.buffer.flush();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      deflaterSink0.close();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOf((byte) (-121), 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(969);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      long long0 = buffer0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(3);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha1(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("okio.HashingSink", charset0);
      realBufferedSink0.buffer.readFully(buffer0, (long) 3);
      assertEquals(3L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      HashingSink hashingSink0 = HashingSink.sha256(deflaterSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Pipe pipe0 = new Pipe(2720L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLongLe(2720L);
      File file0 = MockFile.createTempFile("aRG 0+m:K?", "aRG 0+m:K?");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      buffer1.writeTo((OutputStream) bufferedOutputStream0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = buffer0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.snapshot();
      long long0 = buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      String string0 = buffer0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Pipe pipe0 = new Pipe(1616L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor0.buffer.sha256();
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Timeout timeout0 = hashingSource0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("@q6@:6(${e");
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x40
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha1();
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString(16L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=16
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(97);
      assertEquals(2L, buffer0.size());
      
      String string0 = buffer1.readUtf8Line();
      assertEquals("\u0000a", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1492);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.buffer.outputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      buffer_UnsafeCursor1.buffer.copyTo(outputStream0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Pipe pipe0 = new Pipe(3588L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = (Buffer)buffer0.emit();
      assertEquals(0L, buffer1.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = buffer0.sha1();
      boolean boolean0 = buffer_UnsafeCursor0.buffer.rangeEquals((long) (-1), byteString0);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(boolean0);
      assertTrue(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }
}
