/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:05:50 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.typeOfSignature("BO_#8PA{V5IWbM#8[");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)8);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[2] = (byte)49;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("$3d$A1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $3d$A1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.accessToString(40);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "static synchronized";
      objectArray0[1] = (Object) "static synchronized";
      objectArray0[2] = (Object) "static synchronized";
      objectArray0[3] = (Object) "static synchronized";
      objectArray0[4] = (Object) "static synchronized";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -43
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "HUUR^sA]2;%m(85";
      Utility.compactClassName("HUUR^sA]2;%m(85");
      try { 
        Utility.typeOfSignature("HUUR^sA]2;%m(85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HUUR^sA]2;%m(85
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte)70;
      byteArray0[7] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)0, (byte) (-100));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.accessToString(76);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.methodSignatureReturnType("D{");
      try { 
        Utility.typeOfMethodSignature("7n3h01l-S!|E/L+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7n3h01l-S!|E/L+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.compactClassName("N#Q(;hE", "SAME_LOCALS_1_STACK", false);
      Utility.format(173, 125, true, '~');
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)7;
      Utility.encode(byteArray0, false);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("5p *dg)l[d/D+1FB!\u0002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5p *dg)l[d/D+1FB!\u0002
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)62;
      byteArray0[0] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readInt();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("_uxI5xQ[x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.classOrInterface(127);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[0] = (byte)96;
      byteArray0[2] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V=;LX+asgwZSQ");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&)]XDTB`3,\"N2A8O#", "Illegal type: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^@;M|f");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3220, 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lam<97^UIx0[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lam<97^UIx0[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058), (-2058));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.copy();
      ConstantClass constantClass0 = new ConstantClass((-2058));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[5];
      constantMethodHandle1.clone();
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      Utility.codeToString(byteArray0, constantPool0, (-1273), (-2058));
      String string0 = Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte) (-79);
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte) (-33);
      byteArray1[7] = (byte)37;
      byteArray1[8] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(5);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.copy();
      ConstantClass constantClass0 = new ConstantClass(5);
      ConstantDouble constantDouble2 = new ConstantDouble((-1651.5018793686124));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble2;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)21;
      Utility.replace("=sZv(-", "org.apache.bcel.classfile.Utility", (String) null);
      try { 
        Utility.typeOfSignature("=sZv(-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =sZv(-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)76;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.copy();
      constantArray0[0] = (Constant) constantDouble0;
      ConstantClass constantClass0 = new ConstantClass((byte)32);
      constantArray0[1] = (Constant) constantClass0;
      ConstantDouble constantDouble2 = new ConstantDouble(0.0);
      constantArray0[2] = (Constant) constantDouble2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("if_icmpgt\t\t#-23645", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)125);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.accessToString(172);
      assertEquals("protected static synchronized transient", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(14);
      Constant constant0 = constantDouble0.copy();
      ConstantClass constantClass0 = new ConstantClass(14);
      ConstantDouble constantDouble1 = new ConstantDouble(14);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble1;
      constantArray0[2] = constant0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1497);
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.compactClassName("swap");
      assertEquals("swap", string0);
      
      String string1 = Utility.getSignature("org.apache.bcel.util.ClassPathRepository");
      assertEquals("Lorg/apache/bcel/util/ClassPathRepository;", string1);
      
      byte byte0 = Utility.typeOfSignature("Z+Zk,vJ>hU L+SD");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.signatureToString("CONSTANT_NameAndType");
      Utility.isSet(0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)37;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("char", "Y)8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Y)8\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("ixor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ixor'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)102;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.compactClassName("HUUR^sA]2;%m(85");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-76));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-174), 3926);
      assertEquals("0:    arraylength\n1:    dstore_1\n2:    arraylength\n3:    fastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-chGZ|>De";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.printArray((Object[]) stringArray0);
      String[] stringArray1 = Locale.getISOLanguages();
      assertEquals(188, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GgK0lU$t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GgK0lU$t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "@2g!itGf\\";
      try { 
        Utility.typeOfSignature("@2g!itGf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @2g!itGf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 10, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      ConstantDouble constantDouble0 = new ConstantDouble(1436.0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-58), (-1057), byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureToString("ifnull\t\t#0", "ifnull\t\t#0", "ifnull\t\t#0", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull\t\t#0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)46;
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("if_icmpge\t\t#11777", string0);
      
      String string1 = Utility.getSignature("invokevirtual");
      assertEquals("Linvokevirtual;", string1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("M&YWaU=7f-8X>)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M&YWaU=7f-8X>)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-79);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0rcxG_4oTy^`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0rcxG_4oTy^`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.replace("", "t}V1!rN]", (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-51);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.accessToString(126);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((byte) (-77));
      byteSequence0.reset();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -98
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.fillup("voiXd", 5, true, 'l');
      assertEquals("voiXd", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readInt();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("GgK0lU$t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GgK0lU$t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("b1 82", string0);
      
      String string1 = Utility.getSignature("return");
      assertEquals("Lreturn;", string1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-58), 165);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-740), 287);
      constantArray0[4] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = constantPool1.copy();
      String string0 = Utility.codeToString(byteSequence1, constantPool2, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      String string0 = ")\t";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4410), (-4410));
      try { 
        Utility.methodSignatureReturnType(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)42;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-1.0));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("aload_0", string0);
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "1LcyP";
      String string1 = "getConstantString called with illegal tag ";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getConstantString called with illegal tag ");
      String string2 = ".NNTtr];v!2wt&9jIC";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "201\"#n;");
      try { 
        Utility.methodSignatureToString("1LcyP", "getConstantString called with illegal tag ", ".NNTtr];v!2wt&9jIC", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1LcyP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.convertString("dstore_3");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("OPWXq'It_ZF", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OPWXq'It_ZF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)75;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)75);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType0;
      constantArray0[3] = (Constant) constantMethodType0;
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantLong constantLong0 = new ConstantLong((-802L));
      constantArray0[6] = (Constant) constantLong0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1610, 63);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[7] = (Constant) constantInterfaceMethodref1;
      constantArray0[8] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.compactClassName("RuntimeVisibleAnnotations");
      Utility.getSignature("Mj");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readInt();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S8.4CT");
      assertEquals("short", string0);
      
      try { 
        Utility.methodSignatureReturnType("pW", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `pW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("%atm@Qo$?t5 Lo9ggq", "n!U$p:Q>S1", "%atm@Qo$?t5 Lo9ggq");
      assertEquals("%atm@Qo$?t5 Lo9ggq", string0);
      
      String string1 = Utility.classOrInterface((-3892));
      assertEquals("class", string1);
      
      byte[] byteArray0 = Utility.decode("%atm@Qo$?t5 Lo9ggq", false);
      assertEquals(17, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeVisibleAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "interface";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-35);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.format(1406, (-1970500644), false, 'z');
      assertEquals("1406", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)75;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-38);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-83);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), (int) (byte)105);
      try { 
        Utility.methodSignatureReturnType("0:    i2l\n1:    astore_0\n2:    <illegal opcode>\n3:    lmul\n4:    iconst_3\n5:    lreturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    i2l
         // 1:    astore_0
         // 2:    <illegal opcode>
         // 3:    lmul
         // 4:    iconst_3
         // 5:    lreturn
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)82;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$7bM$BW$cc$fcR", string0);
      
      String string1 = Utility.methodTypeToSignature("$7bM$BW$cc$fcR", (String[]) null);
      assertEquals("()L$7bM$BW$cc$fcR;", string1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "379N g$vSY$ rl";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.replace("_Jx\"}xQ[6", "_Jx\"}xQ[6", "_Jx\"}xQ[6");
      Utility.classOrInterface(6);
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Utility.classOrInterface(9963);
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "interface";
      stringArray0[1] = "interface";
      stringArray0[2] = "f2d";
      stringArray0[3] = "f2d";
      stringArray0[4] = "interface";
      stringArray0[5] = "f2d";
      stringArray0[6] = "f2d";
      String string1 = Utility.methodTypeToSignature("interface", stringArray0);
      assertEquals("(Linterface;Linterface;Lf2d;Lf2d;Linterface;Lf2d;Lf2d;)Linterface;", string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "bU`?g{Os";
      Utility.compactClassName("bU`?g{Os");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-97));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-97));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)42, (byte)42);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      File file0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "bU`?g{Os");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("--4)L0t5r&:OROS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L0t5r&:OROS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.replace("YX%Oi^%", "YX%Oi^%", "YX%Oi^%");
      assertEquals("YX%Oi^%", string0);
      
      boolean boolean0 = Utility.isSet(65, (-1664));
      boolean boolean1 = Utility.isJavaIdentifierPart('<');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PW'IQt_U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PW'IQt_U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.compactClassName("j@701zV%", "j@701zV%", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)122;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)46;
      ConstantClass constantClass0 = new ConstantClass(395);
      ConstantUtf8.getCachedInstance("nDeo(:SHT`<,xM: i:");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("nop");
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      try { 
        Utility.typeOfSignature(";V1}OIX]U9wZIas");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;V1}OIX]U9wZIas
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)74;
      ConstantClass constantClass0 = new ConstantClass((byte)106);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)74);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)74);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1572), 226);
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.decode("0", false);
      Locale locale0 = Locale.JAPAN;
      int int0 = 93;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ", npairs = ";
      Utility.compactClassName("Q{c'[<Hx?5co:|", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("Y*X%Oi^%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y*X%Oi^%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      Utility.searchOpcode("dreturn");
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), 356, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dreturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)46;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-94), 91);
      assertEquals("0:    nop\n1:    jsr_w\t\t#2049792931\n6:    dup2\n7:    iaload\n", string0);
      
      String string1 = Utility.format(255, 255, true, 'N');
      assertEquals("255NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string1);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte) (-106);
      byteArray1[4] = (byte)45;
      String string2 = Utility.encode(byteArray1, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.classOrInterface(5);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\'');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)3;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-9), (int) (byte) (-68), true);
      assertEquals("0:    aload_1\n1:    newarray\t\t<<illegal type>>\n", string0);
      
      Utility.getSignature("0:    aload_1\n1:    newarray\t\t<<illegal type>>\n");
      try { 
        Utility.methodSignatureArgumentTypes("j@*ZvcZ>Rm l>]S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: j@*ZvcZ>Rm l>]S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q{W16Vh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q{W16Vh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.replace("[$.',;TTJ-M%*^", "[$.',;TTJ-M%*^", "[$.',;TTJ-M%*^");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "+ej", "[$.',;TTJ-M%*^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)124;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.isJavaIdentifierPart('&');
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = Utility.setBit((-2386), (-2386));
      assertEquals((-2386), int0);
      
      Utility.fillup("p&T$p", 2519, false, '3');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "p&T$p";
      objectArray0[1] = (Object) "p&T$p";
      objectArray0[2] = (Object) "p&T$p";
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("p&T$p, p&T$p, p&T$p", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 45, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-391), 185, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ireturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ireturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[z61X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [z61X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.convertString("invokedynamic");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("~ea(h9Jhe+Nrfd+{`kf", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~ea(h9Jhe+Nrfd+{`kf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058), (-2058));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.copy();
      ConstantClass constantClass0 = new ConstantClass((-2058));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ua", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ua'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.convertString("dstore_3");
      String string0 = "M&YWaU=7f-8X>)";
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 61500. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(14);
      Constant constant0 = constantDouble0.copy();
      ConstantClass constantClass0 = new ConstantClass(14);
      ConstantDouble constantDouble1 = new ConstantDouble(14);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble1;
      constantArray0[2] = constant0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1497);
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.compactClassName("swap");
      assertEquals("swap", string0);
      
      String string1 = Utility.getSignature("org.apache.bcel.util.ClassPathRepository");
      assertEquals("Lorg/apache/bcel/util/ClassPathRepository;", string1);
      
      byte byte0 = Utility.typeOfSignature("Z+Zk,vJ>hU L+SD");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.replace("java.lang.P{22Z;E", "public st", ")fOp ZgOm");
      int int0 = 9963;
      Utility.classOrInterface(9963);
      // Undeclared exception!
      try { 
        Utility.decode("4g$7(4k,x", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("}7gDAjNf#S_", "V", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.searchOpcode("Illegally nested brackets:");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      Utility.compactClassName("2O/", false);
      Utility.convertString("Illegally nested brackets:");
      Utility.setBit((short) (-1), (short) (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.methodSignatureReturnType("JK[l(b{I6;DZ{B ", true);
      Utility.setBit(1230, (byte) (-74));
      try { 
        Utility.methodSignatureArgumentTypes("ret", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)46;
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 53, true, 'A');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%u?}`<6zY?DP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %u?}`<6zY?DP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.classOrInterface(5);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("_3N2/.!%:", "WuGf", "_3N2/.!%:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _3N2/.!%:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.replace("_ux\"}xQ[6", "_ux\"}xQ[6", "_ux\"}xQ[6");
      String string0 = Utility.format(288, 3415, true, 'n');
      Utility.decode("1gcY1c9'1", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "1gcY1c9'1";
      objectArray0[1] = (Object) "_ux\"}xQ[6";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "_ux\"}xQ[6";
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) "_ux\"}xQ[6";
      objectArray0[6] = (Object) "_ux\"}xQ[6";
      objectArray0[7] = (Object) "_ux\"}xQ[6";
      objectArray0[8] = (Object) "_ux\"}xQ[6";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      String string0 = "dreturn";
      Utility.searchOpcode("dreturn");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2416, (-3480));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Utility.isJavaIdentifierPart(',');
      String string0 = "dload_0";
      try { 
        Utility.methodSignatureArgumentTypes("dload_0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readInt();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.replace("p@UZ]rDy\"", "p@UZ]rDy\"", "p@UZ]rDy\"");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)67;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("\"Z(W_FFu&~H#4t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"Z(W_FFu&~H#4t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = Utility.compactClassName("j@701zV%", "j@701zV%", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)46;
      ConstantClass constantClass0 = new ConstantClass(395);
      ConstantUtf8.getCachedInstance("nDeo(:SHT`<,xM: i:");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = Utility.compactClassName("PAW/'It_UF");
      assertEquals("PAW.'It_UF", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('+');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-113);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("2a 47 8b 81 82 21 4c 00 8f", string1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("fload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fload_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.methodSignatureReturnType("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("HUUR^sA]2;%m(85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HUUR^sA]2;%m(85'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("VZ$F@v@JNPI{s*#X`", "wide", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VZ$F@v@JNPI{s*#X`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.accessToString(2700, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("protected static transient interface strictfp", "protected static transient interface strictfp", "protected static transient interface strictfp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected static transient interface strictfp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.compactClassName("java.lang.b%\"@>nmbxD.1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dload_3");
      try { 
        Utility.methodSignatureToString("byte", "dload_3", "java.lang.b%\"@>nmbxD.1", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("!2-z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2-z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.format((byte) (-16), (byte) (-89), true, '_');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 251, (int) (byte)2, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("uLE^/W 93b~Lr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `uLE^/W 93b~Lr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.signatureToString("Bw4Z,i");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.methodSignatureReturnType("S8.4CT");
      Utility.signatureToString("S8.4CT");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.convertString("dstore_3");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte)62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockFile mockFile0 = new MockFile("isub");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "isub";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, "}&QEBH~$%KyCGOg`Uwk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(45);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-85);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$3a$ab", string0);
      
      byte byte0 = Utility.typeOfSignature("Invalid class name ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte)70;
      byteArray0[7] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)0, (byte) (-100));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(5);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.setBytes(5);
      constantDouble1.copy();
      ConstantClass constantClass0 = new ConstantClass(5);
      ConstantDouble constantDouble2 = new ConstantDouble((-1651.5018793686124));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble2;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("");
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = Utility.convertString("dstoe_3");
      String string1 = Utility.accessToString((-4283));
      assertEquals("public protected volatile native interface abstract strictfp annotation enum", string1);
      
      int int0 = Utility.clearBit((-544), (-4283));
      assertEquals((-576), int0);
      
      String string2 = Utility.replace("dstoe_3", "o/DluEI~KM!\\", "public protected volatile native interface abstract strictfp annotation enum");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.fillup("exGx;9qp63xxB", 220, false, 'G');
      assertEquals("GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGexGx;9qp63xxB", string3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      MockFile mockFile0 = new MockFile("\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "m.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // m.
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)74;
      byteArray0[3] = (byte) (-110);
      String string0 = Utility.compactClassName("monitorenter", "ifle", true);
      assertEquals("monitorenter", string0);
      
      String string1 = Utility.convertString("n?dVk8$E3C$+ME<");
      assertEquals("n?dVk8$E3C$+ME<", string1);
      
      String string2 = Utility.methodTypeToSignature("monitorenter", (String[]) null);
      assertEquals("()Lmonitorenter;", string2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.typeOfSignature("BO_#8PA{V5IWbM#8[");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), 2288);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Zg*]`");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[$.',;TTJ-M%*^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$.',;TTJ-M%*^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-84);
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.convertString("invokedynamic");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      ConstantPool constantPool2 = constantPool1.copy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool2, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.accessToString(1305);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 1305, 1637);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-61);
      Utility.encode(byteArray0, false);
      Utility.clearBit(60, (byte) (-61));
      try { 
        Utility.decode("$ba$c3$A$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpeq\t\t#83", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Utility.format(0, 911, true, '6');
      assertEqualsstring0);
      
      String string1 = Utility.classOrInterface(1613);
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      Utility.searchOpcode("dreturn");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (short)175, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X%Oi^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X%Oi^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "dstore_3";
      Utility.convertString("dstore_3");
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("9bI5)\"[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9bI5)\"[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Utility.replace(")fOp ZgOm", ")fOp ZgOm", ")fOp ZgOm");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.searchOpcode("kq!}NT]");
      Utility.isSet((short) (-1), 77);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[4];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedOutputStream0.connect(pipedInputStream0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)54;
      pipedOutputStream0.write(byteArray0);
      Utility.encode(byteArray0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.commons.io.filefilter.DelegateFileFilter", (String) null, "kq!}NT]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.DelegateFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[4] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload\t\t%0", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("19 00 92 00 50 92 e4", string1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, false);
      int int0 = Utility.setBit((byte)62, 135);
      assertEquals(190, int0);
      
      byte[] byteArray1 = Utility.decode("$A$A$A$A$A$A$A", false);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.signatureToString("CRM", true);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.signatureToString("J", false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-104), (int) (byte) (-104), true);
      try { 
        Utility.typeOfSignature("0:    iload_2\n1:    dcmpg\n2:    nop\n3:    dcmpg\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    iload_2
         // 1:    dcmpg
         // 2:    nop
         // 3:    dcmpg
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)16;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("YX%Oi^%");
      Constant constant0 = constantUtf8_0.copy();
      constantArray0[0] = constant0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)51);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)20, 60, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-10);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-93);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-93);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.filefilter.AndFileFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.AndFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.typeOfSignature("Lam<97^UIx0[");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "(s`", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'";
      stringArray0[1] = "'";
      stringArray0[2] = "'";
      String string0 = Utility.methodTypeToSignature("'", stringArray0);
      assertEquals("(L';L';L';)L';", string0);
      
      String string1 = Utility.compactClassName("'", "'", false);
      assertEquals("'", string1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.compactClassName("Lkq!}nt];V");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, 95, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)46;
      byteArray0[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "379N g$vSY$ rl";
      String string0 = Utility.methodTypeToSignature("379N g$vSY$ rl", stringArray0);
      assertEquals("(L379N;)L379N;", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        Utility.typeOfSignature(". _n9@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: . _n9@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Xhgp!P;yox");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xhgp!P;yox'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058), (-2058));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.copy();
      ConstantClass constantClass0 = new ConstantClass((-2058));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), true, 'w');
      Utility.convertString("M&YWaU=7f-8X>)");
      String string0 = Utility.fillup("dstore_3", 1965, false, 'w');
      try { 
        Utility.methodSignatureArgumentTypes(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwdstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-26);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fload\t\t%198", string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      String string0 = Utility.fillup("4_h>", 5, false, '{');
      assertEquals("{4_h>", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = Constants.OPCODE_NAMES;
      Utility.compactClassName("7R;>El,iuX");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)54;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("28 fb 4d 36", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `28 fb 4d 36'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)83;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_acmpeq\t\t#31059", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte) (-84), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)36;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("%atm@Qo$?t5 Lo9ggq", "n!U$p:Q>S1", "%atm@Qo$?t5 Lo9ggq");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("1vC!O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1vC!O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(95, true);
      assertEquals("public private protected static final volatile", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.compactClassName("_ux\"}xQ[}\"6");
      assertEquals("_ux\"}xQ[}\"6", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.accessToString(23);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-27);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fconst_0", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble0.copy();
      ConstantClass constantClass0 = new ConstantClass(4183);
      ConstantDouble constantDouble2 = new ConstantDouble(0.0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4183);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3220, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("irem", string0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)86);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)86);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)33;
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("f5<%i;[EXf}~m#");
      Utility.decode("f5<%i;[EXf}~m#", false);
      Utility.getSignature(",");
      // Undeclared exception!
      Utility.replace("Y?YqzE#SP*[->#o\"C'", "", "f5<%i;[EXf}~m#");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.compactClassName("&)]XDTB`3,\"N2A8O#");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("&)]XDTB`3,\"N2A8O#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&)]XDTB`3,\"N2A8O#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Utility.getSignature("<yD{8d.");
      assertEquals("L<yD{8d/;", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Utility.compactClassName("HUUR^sA]2;%(85");
      assertEquals("HUUR^sA]2;%(85", string0);
      
      String string1 = Utility.signatureToString("F`_Wy)^^`S<3", true);
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = Utility.isSet(821, 821);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      
      int int0 = Utility.setBit(821, (-616));
      assertEquals(16778037, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-31);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#-7692", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("9f e1 f4 fc be e1 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("tEy\"J7T8[[k2jhqm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[k2jhqm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte) (-119);
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("bc} FRVC~");
      // Undeclared exception!
      try { 
        Utility.signatureToString("N%gM4:sS3m3-~f", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N%gM4:sS3m3-~f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wuQX%v]v&;7Pep^}";
      stringArray0[1] = "bastore";
      stringArray0[2] = "wuQX%v]v&;7Pep^}";
      stringArray0[3] = "wuQX%v]v&;7Pep^}";
      stringArray0[4] = "wuQX%v]v&;7Pep^}";
      stringArray0[5] = "wuQX%v]v&;7Pep^}";
      stringArray0[6] = "wuQX%v]v&;7Pep^}";
      stringArray0[7] = "kq!}nt]";
      String string0 = Utility.methodTypeToSignature("wuQX%v]v&;7Pep^}", stringArray0);
      assertEquals("(LwuQX%v]v&;7Pep^};Lbastore;LwuQX%v]v&;7Pep^};LwuQX%v]v&;7Pep^};LwuQX%v]v&;7Pep^};LwuQX%v]v&;7Pep^};LwuQX%v]v&;7Pep^};Lkq!}nt];)LwuQX%v]v&;7Pep^};", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("irem", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "irem";
      stringArray0[1] = "java.lang.String";
      stringArray0[2] = " not found";
      String string1 = Utility.methodTypeToSignature("irem", stringArray0);
      assertEquals("(Lirem;Ljava/lang/String;Lnot;)Lirem;", string1);
      
      String string2 = Utility.methodSignatureToString("(Lirem;Ljava/lang/String;Lnot;)Lirem;", "java.lang.String", "java.lang.String", true);
      assertEquals("java.lang.String irem java.lang.String(irem arg1, String arg2, not arg3)", string2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.getSignature("t}zbI(7vt");
      assertEquals("Lt}zbI(7vt;", string0);
      
      String string1 = Utility.accessToString(0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(5);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.copy();
      ConstantClass constantClass0 = new ConstantClass(5);
      ConstantDouble constantDouble2 = new ConstantDouble((-1651.5018793686124));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble2;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.classOrInterface(5);
      assertEquals("class", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool1, false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("k)>Ag^H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k)>Ag^H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte) (-7);
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      String string0 = "6";
      try { 
        Utility.methodSignatureArgumentTypes("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.compactClassName("The array of suffixes must not be null");
      // Undeclared exception!
      try { 
        Utility.signatureToString("The array of suffixes must not be null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The array of suffixes must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JLC:=27S,WB> nDE");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.compactClassName("ekc", "V", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-73), (byte) (-73));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 6071. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(106);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-68);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)117;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte) (-35);
      byteArray1[2] = (byte)110;
      byteArray1[3] = (byte)90;
      Utility.equals(byteArray0, byteArray1);
      String string0 = "iload_2";
      Utility.convertString("iload_2");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)106, (int) (byte)106, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";V1}OIX]U9wZIas");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;V1}OIX]U9wZIas
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("Lkq!}nt];V");
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)91;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-780), (int) (byte)41, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("j@701z%", "j@701z%", true);
      Utility.compactClassName("xm}`e$R<sO");
      String string0 = "org.apache.bcel.classfile.ConstantClass";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "xm}`e$R<sO", "org.apache.bcel.classfile.ConstantClass");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte)42;
      byteArray1[5] = (byte)80;
      byteArray1[6] = (byte)33;
      byteArray1[7] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("&)]XDTB`3,\"N2A8O#", "&)]XDTB`3,\"N2A8O#", "&)]XDTB`3,\"N2A8O#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &)]XDTB`3,\"N2A8O#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058), (-2058));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.copy();
      ConstantClass constantClass0 = new ConstantClass((-2058));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)91, (-3995));
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantMethodType0;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xmdo69t;X,0U0^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xmdo69t;X,0U0^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iinc\t\t%132\t-124", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "N2{oYNKo:8 a.#hX";
      try { 
        Utility.typeOfSignature("N2{oYNKo:8 a.#hX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N2{oYNKo:8 a.#hX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.compactClassName("j@701zV%", "j@701zV%", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)46;
      ConstantClass constantClass0 = new ConstantClass(395);
      ConstantUtf8.getCachedInstance("nDeo(:SHT`<,xM: i:");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("ishl");
      Utility.getSignature("noA{Lc]~tO_/ A-_Y");
      try { 
        Utility.typeOfSignature("ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, (-1994689017), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1215, 120, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString(", low = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, low = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readDouble();
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("U0xOk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U0xOk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-126);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), 103, true);
      assertEquals("0:    return\n1:    ixor\n", string0);
      
      String string1 = Utility.convertString(")fOp ZgOm");
      assertEquals(")fOp ZgOm", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.compactClassName("ekc", "V", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)84;
      byteArray0[8] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)20, (byte) (-87));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      byteSequence1.close();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)59, (byte) (-46));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, (-115), false);
      try { 
        Utility.typeOfSignature("8:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = ", high = ";
      stringArray0[1] = ", high = ";
      Utility.methodTypeToSignature(", high = ", stringArray0);
      int int0 = (-1);
      Utility.clearBit((-1), (-1));
      MockPrintStream mockPrintStream0 = new MockPrintStream("(L,;L,;)L,;");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) ", high = ", 11, 76);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("L,;V", false);
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)10;
      byteArray0[3] = (byte)105;
      byteArray0[8] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 27106. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("goto\t\t#-21853", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 77, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = Utility.fillup("M&q2b=^@iGazj(V", 222, true, '(');
      assertEquals("M&q2b=^@iGazj(V(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)86);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)86);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.convertString("\t");
      assertEquals("\t", string0);
      
      String string1 = Utility.getSignature("\t");
      assertEquals("L;", string1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte) (-117);
      byteArray0[7] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)0, (byte) (-100));
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte)72;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("TcSg@'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TcSg@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte) (-26);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1640), (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_acmpeq\t\t#31059
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$KC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $KC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)71;
      byte byte0 = (byte)1;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1482, (-1246));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-780), 45, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(2480.297145366);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3rQBRp?Pw5-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3rQBRp?Pw5-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)77;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifle\t\t#19783", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      int int0 = 5;
      Utility.classOrInterface(5);
      Utility.isJavaIdentifierPart('x');
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("class", false);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, "class");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(" (S7z.G<A16.)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (S7z.G<A16.)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = ")fOp ZgOm";
      Utility.replace("java.lang.P{22Z;E", "public st", ")fOp ZgOm");
      Utility.classOrInterface(9963);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-15);
      int int0 = 549;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 549, (int) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EKC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EKC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokespecial", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokespecial'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058), (-2058));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.copy();
      ConstantClass constantClass0 = new ConstantClass((-2058));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83));
      assertEquals("0:    nop\n1:    lreturn\n2:    f2l\n3:    lreturn\n4:    lreturn\n5:    lreturn\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.classOrInterface((byte)0);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("&)]XDTB`3,\"N2A8O#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &)]XDTB`3,\"N2A8O#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Utility.convertString("GK:vi/U[a2(,+QTJ}|");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "6`#qH@1Jws30mt]", "GK:vi/U[a2(,+QTJ}|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Utility.compactClassName("OXw\"A[am");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("EUUR^sA]2;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EUUR^sA]2;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("S8.4CT");
      Utility.convertString("fconst_1");
      String string1 = Utility.signatureToString("S8.4CT", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte byte0 = (byte)55;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)94, (int) (byte) (-60), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.signatureToString("D", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("putstatic", "\t", "D", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.classOrInterface((byte)32);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("n#-.[!^|b^Ag2dp{_b4", "", true);
      assertEquals("n#-.[!^|b^Ag2dp{_b4", string1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("h", "I1xGpEL_oV?}*M", "h", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.convertString("ds&ore_3");
      Utility.compactClassName("ds&ore_3");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "9bI5)\"[";
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.replace(")fOp ZgOm", ")fOp ZgOm", ")fOp ZgOm");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)63;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(287, 287);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("d2l", "d2l");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // d2l
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1819), (byte) (-83));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString(90);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(5);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.copy();
      ConstantClass constantClass0 = new ConstantClass(5);
      ConstantDouble constantDouble2 = new ConstantDouble((-1651.5018793686124));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble2;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-70);
      ConstantDouble constantDouble3 = new ConstantDouble((byte) (-77));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "iconst_1";
      objectArray0[1] = (Object) "iconst_1";
      objectArray0[2] = (Object) "iconst_1";
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-113);
      String string0 = Utility.accessToString(0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid signature: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.classOrInterface(0);
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      Utility.encode(byteArray0, true);
      Utility.clearBit(81, 81);
      boolean boolean0 = false;
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Lam<97^UIx0[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lam<97^UIx0[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = Utility.signatureToString("V3|VqS", false);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(5);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.copy();
      ConstantClass constantClass0 = new ConstantClass(5);
      ConstantDouble constantDouble2 = new ConstantDouble((-1651.5018793686124));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble2;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      boolean boolean0 = Utility.isSet((byte) (-1), (byte) (-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("[JB}`");
      assertEquals("long[]", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.LocalVariable", "org.apache.bcel.classfile.LocalVariable", "org.apache.bcel.classfile.LocalVariable");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      Utility.encode(byteArray0, true);
      Utility.replace("6Hk3p6=y", "6zk<FMgT\"f[h2N5", "=sZv(-");
      try { 
        Utility.typeOfSignature("6Hk3p6=y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Hk3p6=y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.isSet(208, 208);
      String string0 = Utility.printArray((Object[]) null, false, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.LocalVariable", "org.apache.bcel.classfile.LocalVariable", "org.apache.bcel.classfile.LocalVariable");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)59;
      String string0 = Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-305), (-29));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Lam<97^UIx0[", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Lam$3c97$5eUIx0$5b", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readBoolean();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ldiv", string1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName("java.lang.PAW.'It_UF", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Utility.isJavaIdentifierPart('w');
      Utility.accessToString(886, true);
      try { 
        Utility.methodSignatureReturnType("private protected final volatile native");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private protected final volatile native'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)0;
      byteArray0[1] = (byte) (-56);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c7$c8$fc$84551$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-4), (-1796));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifnonnull\t\t#-14084", string1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("-f-JtH]|[dr=L0[", "-f-JtH]|[dr=L0[", "?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -f-JtH]|[dr=L0[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Utility.getSignature("float");
      // Undeclared exception!
      try { 
        Utility.signatureToString("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.decode("\r", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\r", "\r", "@F*Nw7.Vf,>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)27;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte) (-53);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)35, false, '');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("*8kZB~.x\u0002_};KKe^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8kZB~.x\u0002_};KKe^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.compactClassName("YX%Oi^%");
      try { 
        Utility.typeOfSignature("YX%Oi^%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YX%Oi^%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload\t\t%146", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = "TkC^yl4J%?UXVH&<P";
      String string1 = "[B{@NbaU~21hFa";
      Utility.replace("jsr_w", "TkC^yl4J%?UXVH&<P", "[B{@NbaU~21hFa");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, (-1372));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)33;
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("dreturn");
      Utility.decode("dreturn", false);
      Utility.convertString(",");
      // Undeclared exception!
      Utility.replace("Y?YqzE#SP*[->#o\"C'", "", "dreturn");
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Utility.compactClassName("j@701zV%", "j@701zV%", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 1200, (int) (byte)32, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)10;
      byteArray1[5] = (byte)64;
      byteArray1[4] = (byte) (-126);
      byteArray1[5] = (byte)64;
      byteArray1[6] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("40 40", string0);
      
      String string1 = Utility.getSignature("40 40");
      assertEquals("L40;", string1);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = Utility.replace("_ux\"}xQ[6", "_ux\"}xQ[6", "_ux\"}xQ[6");
      assertEquals("_ux\"}xQ[6", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)36;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte)126;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte)65;
      byteArray1[5] = (byte)126;
      byteArray1[6] = (byte) (-39);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("GgK0lU$t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GgK0lU$t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), true, '}');
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), 3250, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8362. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YX%Oi^%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YX%Oi^%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      try { 
        Utility.typeOfSignature(") ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ) 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[");
      assertEquals((byte)13, byte0);
      
      String string0 = Utility.compactClassName("[", "[", false);
      assertEquals("[", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("OPAWq/'It_UF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OPAWq/'It_UF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.replace(")fOp ZgOm", ")fOp ZgOm", ")fOp ZgOm");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)6;
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(82, 195);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)89, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("dload\t\t%180");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload\t\t%180
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-68);
      byteArray0[5] = (byte)111;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      byteSequence1.read();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmpne\t\t#63", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.format(181, 2530, false, '(');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = Utility.compactClassName("g6=?", "[7[=p,", true);
      assertEquals("g6=?", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YX%Oi^X%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YX%Oi^X%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("vrVg[XMIH#]2/Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vrVg[XMIH#]2/Z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = Utility.compactClassName("impdep1");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte)98;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)61;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-123);
      Utility.accessToString((int) (byte)6);
      String string0 = "M~p:O[>/V";
      try { 
        Utility.methodSignatureReturnType("M~p:O[>/V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M~p:O[>/V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[0] = (byte) (-98);
      String string0 = "(";
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)77;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-98);
      byteArray1[2] = (byte)71;
      try { 
        Utility.typeOfSignature("RuntimeVis");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVis
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("~EU>y$7ir]zJ)pJ<");
      constantUtf8_0.copy();
      ConstantClass constantClass0 = new ConstantClass(4183);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4183);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("'");
      constantArray0[1] = (Constant) constantUtf8_1;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getInstance("long");
      constantArray0[4] = (Constant) constantUtf8_2;
      constantArray0[5] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[2] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("1d 00 63 00 00 00 00", string0);
      
      String string1 = Utility.replace("1d 00 63 00 00 00 00", "1d 00 63 00 00 00 00", "ta~bleswitch");
      assertEquals("ta~bleswitch", string1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte) (-84), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "fconst_1";
      stringArray0[1] = "fconst_1";
      stringArray0[2] = "fconst_1";
      String string0 = Utility.methodTypeToSignature("fconst_1", stringArray0);
      assertEquals("(Lfconst_1;Lfconst_1;Lfconst_1;)Lfconst_1;", string0);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lfconst_1;Lfconst_1;Lfconst_1;)Lfconst_1;", false);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)86);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte)86;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = Utility.getSignature("S84C");
      assertEquals("LS84C;", string0);
      
      byte byte0 = Utility.typeOfSignature("S84C");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = "9bI5)\"[";
      try { 
        Utility.typeOfSignature("9bI5)\"[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9bI5)\"[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-114));
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(59, (byte) (-114));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant constant0 = constantDouble1.copy();
      constantArray0[0] = constant0;
      ConstantClass constantClass0 = new ConstantClass((byte)57);
      constantArray0[1] = (Constant) constantClass0;
      ConstantDouble constantDouble2 = new ConstantDouble(0.0);
      constantArray0[2] = (Constant) constantDouble2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)117;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte)117, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)31, (-1329), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "+.zAC4+Plj";
      try { 
        Utility.typeOfSignature("+.zAC4+Plj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .zAC4+Plj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DTPNWK", true);
      assertEquals("double", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.convertString("ds&ore_3");
      Utility.convertString("?>...");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte)61;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 178, 175, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CX<4gSH`sd+6_~");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)5;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("05 05 05 05 05 42 05", string0);
      
      String string1 = Utility.fillup("CX<4gSH`sd+6_~", (byte)5, true, '`');
      assertEquals("CX<4gSH`sd+6_~", string1);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)74;
      ConstantClass constantClass0 = new ConstantClass((byte)106);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)74);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)74);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      String string0 = Utility.methodTypeToSignature("PMGClass", (String[]) null);
      assertEquals("()LPMGClass;", string0);
      
      Utility.printArray((Object[]) null);
      String string1 = Utility.fillup("", 84, true, '|');
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", string1);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Utility.convertString("\t");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-99);
      byteArray0[1] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = constantPool1.constantToString((Constant) constantDouble0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-55);
      byte byte0 = (byte)52;
      byteArray0[2] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readUnsignedByte();
      try { 
        Utility.methodSignatureReturnType("astore_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore_1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Utility.getSignature("HUUR^sA]2;%m(85");
      Utility.typeOfSignature("LHUUR^sA]2;%m(85;");
      Utility.clearBit((byte)14, 503);
      Utility.replace("LHUUR^sA]2;%m(85;", "?jWFjW[m8E", "class");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LHUUR^sA]2;%m(85;", "HUUR^sA]2;%m(85", "uc|l", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LHUUR^sA]2;%m(85;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = "Q{W16Vh";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q{W16Vh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q{W16Vh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-2609));
      assertEquals("class", string1);
      
      String string2 = Utility.accessToString((-3006), false);
      assertEquals("private volatile abstract synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)74;
      Utility.clearBit((byte) (-68), 12);
      String string0 = "byte";
      Utility.replace("invokevirtual", "class", "byte");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (byte)74, false, 'G');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Utility.methodSignatureReturnType("S84C");
      Utility.convertString("short");
      try { 
        Utility.methodSignatureToString("Ueq.8?9$U{7o3", "java.lang.", "byte", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ueq.8?9$U{7o3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, (int) (byte)84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifnull\t\t#-20045", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = Utility.compactClassName("j@701zV%", "j@701zV%", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)122;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[3] = (byte)76;
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 7a f2 4c 00 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string0 = "[[AgI";
      Utility.decode("[[AgI", false);
      int int0 = 7;
      PipedReader pipedReader0 = new PipedReader(7);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      mockPrintWriter0.println('^');
      Locale locale0 = Locale.JAPAN;
      try { 
        pipedReader0.mark(7);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W^*f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W^*f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Utility.compactClassName("HUUR^sA]2;%m(85");
      try { 
        Utility.typeOfMethodSignature("HUUR^sA]2;%m(85");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HUUR^sA]2;%m(85
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Utility.compactClassName("ar&2|-%Nice^=", false);
      String string0 = "$Y,i(?:Ctk)4epq';";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ar&2|-%Nice^=", "$Y,i(?:Ctk)4epq';", "MmPyK,^~*YsIFo0*U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ar&2|-%Nice^=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-58));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = Utility.signatureToString("S8.4CT");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "short");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) printWriter0;
      mockPrintWriter0.format("java.lang.Integer", objectArray0);
      Object object0 = new Object();
      pipedOutputStream0.flush();
      objectArray0[1] = object0;
      Utility.printArray(printWriter0, objectArray0);
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Utility.compactClassName("ekc", "V", true);
      try { 
        Utility.typeOfSignature("KLs?wg~49[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KLs?wg~49[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      int int0 = Utility.setBit(642, 74);
      assertEquals(1666, int0);
      
      String string0 = Utility.accessToString((-620), true);
      assertEquals("protected final transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)32);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(242, (byte)4);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)4);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.format(12, 12, false, 'U');
      assertEquals("UUUUUUUUUU12", string1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.convertString("dstore_3");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.compactClassName("'b5S^ZSjCX}q$IPJVO");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-43);
      try { 
        Utility.typeOfSignature("'b5S^ZSjCX}q$IPJVO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'b5S^ZSjCX}q$IPJVO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readInt();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = Utility.replace(")fOp ZgOm", ")fOp ZgOm", ")fOp ZgOm");
      assertEquals(")fOp ZgOm", string0);
      
      String string1 = Utility.classOrInterface(9963);
      assertEquals("interface", string1);
      
      byte[] byteArray0 = new byte[0];
      short short0 = Utility.searchOpcode("fstore_3");
      assertEquals((short)70, short0);
      
      Utility.toHexString(byteArray0);
      short short1 = Utility.searchOpcode(")\t");
      assertEquals((short) (-1), short1);
      
      String string2 = Utility.fillup("", (short) (-1), true, '|');
      String string3 = Utility.encode(byteArray0, false);
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Utility.fillup("void", 5, true, 'l');
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.accessToString(801);
      Utility.isSet(801, 801);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-1);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("`", "dcmpg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"dcmpg\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)122;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)46;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      constantNameAndType1.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-94), 91);
      assertEquals("0:    nop\n1:    jsr_w\t\t#2046843811\n6:    dup2\n7:    iaload\n", string0);
      
      String string1 = Utility.format(255, 255, false, 'N');
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN255", string1);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte) (-106);
      byteArray1[4] = (byte)45;
      String string2 = Utility.encode(byteArray1, false);
      assertEquals("$a2$Az$96$z", string2);
      
      byte[] byteArray2 = Utility.decode("$a2$Az$96$z", false);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)0, (byte)122, (byte) (-106), (byte)45}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[2] = (byte)49;
      String string0 = Utility.fillup("Unreachable default case reached!", 163, false, '0');
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Unreachable default case reached!", string0);
      
      String string1 = Utility.compactClassName("", "Bogus", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmplt\t\t#8315", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = Utility.replace("p@UZ]rDy\"", "p@UZ]rDy\"", "p@UZ]rDy\"");
      assertEquals("p@UZ]rDy\"", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("51 51 51", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      int int0 = Utility.setBit((byte)81, 9);
      assertEquals(593, int0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = Utility.compactClassName("impdep1");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)61;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.getSignature("p[r](~Jsir/u");
      assertEquals("[Lp;", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[xp9e", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xp9e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.accessToString((-4283));
      Utility.format((-4283), (-4283), true, 'w');
      Utility.convertString("M&YWaU=7f-8X>)");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)112;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "nop";
      stringArray0[1] = "java.lang.String";
      stringArray0[2] = " not found";
      String string0 = Utility.methodTypeToSignature("nop", stringArray0);
      assertEquals("(Lnop;Ljava/lang/String;Lnot;)Lnop;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lnop;Ljava/lang/String;Lnot;)Lnop;", "java.lang.String", "java.lang.String", true);
      assertEquals("java.lang.String nop java.lang.String(nop arg1, String arg2, not arg3)", string1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = "bc}FRVC";
      Utility.compactClassName("bc}FRVC");
      String string1 = "Pc&kY";
      try { 
        Utility.typeOfSignature("Pc&kY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pc&kY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Utility.compactClassName("Lkq!}nt];V");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)91;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, 95, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = Utility.compactClassName("'b5S^ZSjCX}q$IPJVO");
      assertEquals("'b5S^ZSjCX}q$IPJVO", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)61;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-24), (int) (byte) (-16), true);
      assertEquals("0:    iload_0\n1:    swap\n2:    nop\n3:    fadd\n4:    <illegal opcode>\n5:    istore_1\n6:    <illegal opcode>\n7:    lload\t\t%61\n", string1);
      
      String string2 = Utility.convertString("'b5S^ZSjCX}q$IPJVO");
      assertEquals("\\'b5S^ZSjCX}q$IPJVO", string2);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Utility.isJavaIdentifierPart('z');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)46;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1000), (int) (byte) (-83));
      try { 
        Utility.methodSignatureReturnType("0:    aastore\n1:    lreturn\n2:    lreturn\n3:    iaload\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    aastore
         // 1:    lreturn
         // 2:    lreturn
         // 3:    iaload
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(14);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant constant0 = constantDouble0.copy();
      ConstantClass constantClass0 = new ConstantClass(14);
      ConstantDouble constantDouble2 = new ConstantDouble(14);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble2;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1497);
      constantArray0[5] = (Constant) constantMethodType0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S84C");
      String string1 = Utility.convertString("short");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("Byte code error: ", false);
      assertEquals("byte", string2);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058), (-2058));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.typeOfSignature("BO_#8PA{V5IWbM#8[");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-117);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-204));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.compactClassName("ifge\t\t#2137");
      Utility.getSignature("ret");
      try { 
        Utility.typeOfSignature("ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.typeOfSignature("Lam<97^UIx0[");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Lam<97^UIx0[";
      stringArray0[1] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-t?Lppph9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -t?Lppph9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.typeOfSignature("D");
      Utility.isJavaIdentifierPart('\'');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "D", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Utility.compactClassName("impdep1");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteArray0[0] = (byte)98;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)116;
      byteArray0[7] = (byte)0;
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2, (-906), (LocalVariable[]) null, constantPool1);
      try { 
        Utility.methodSignatureToString("fadd", "impdep1", "Lixor;V", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)41);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifgt\t\t#-23174", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.convertString("M&YWaU=7f-8X>)");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureReturnType("4u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "iconst_1";
      objectArray0[1] = (Object) "iconst_1";
      objectArray0[2] = (Object) "iconst_1";
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-113);
      byteArray0[7] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.accessToString((int) (byte) (-90));
      assertEquals("private protected synchronized transient native interface abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.methodSignatureReturnType("W-s\"].&=<Ypw{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W-s\"].&=<Ypw{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+>@[iz1#K`U+l*: B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >@[iz1#K`U+l*: B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058), (-2058));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.copy();
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[5];
      constantMethodHandle1.clone();
      constantArray0[0] = (Constant) constantMethodHandle1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      String string0 = Utility.signatureToString("SimpleElementValue doesnt know how to write out type ", false);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(55);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte) (-104);
      byteArray0[8] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("sipush\t\t22528", string0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      byteSequence0.read(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",>q1geN2ozUFA:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,>q1geN2ozUFA:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)93, 58, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("0:", "^j?Pj+<xM", "^j?Pj+<xM", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-92), (-595));
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(90, 90);
      constantArray0[5] = (Constant) constantNameAndType0;
      constantArray0[6] = (Constant) constantMethodref0;
      constantArray0[8] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("astore_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `astore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("ITKd7!51*irlx3rF/8", stringArray0);
      assertEquals("()LITKd7!51*irlx3rF/8;", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.signatureToString("PpHwNOWQV]n]TMj", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PpHwNOWQV]n]TMj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = Utility.convertString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = "Invalid number of dimensions: ";
      String string1 = "";
      boolean boolean0 = false;
      Utility.compactClassName("Invalid number of dimensions: ", "", false);
      try { 
        Utility.methodSignatureReturnType("87!Ueau)\"db", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"db'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$JavaReader");
      Utility.classOrInterface(5);
      String string0 = "char";
      // Undeclared exception!
      try { 
        Utility.replace("class", (String) null, "char");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Utility.convertString("dstore_");
      Utility.compactClassName("dstore_");
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-16);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte) (-62);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ifle";
      stringArray0[1] = "ifle";
      stringArray0[2] = "-chGZ6>De";
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(7, 95);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("goto_w\t\t#-1895701164", string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-4);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-4), (int) (byte) (-4), true);
      assertEquals("0:    fmul\n1:    nop\n2:    monitorenter\n3:    <illegal opcode>\n", string0);
      
      String string1 = Utility.convertString("0:    fmul\n1:    nop\n2:    monitorenter\n3:    <illegal opcode>\n");
      assertEquals("0:    fmul\\n1:    nop\\n2:    monitorenter\\n3:    <illegal opcode>\\n", string1);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("Illegal type: ", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("dstore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1244), 98, true);
      Utility.compactClassName("f5");
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "f5";
      objectArray0[2] = (Object) "f5";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "f5";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)61;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockFile mockFile0 = new MockFile("m.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "f5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // f5
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)67, (-2810));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((-5348), 9);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.accessToString((int) (byte)78);
      // Undeclared exception!
      try { 
        Utility.signatureToString("^q_gYow*k7?,U5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `^q_gYow*k7?,U5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("kQ/", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2058), (-2058));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantMethodHandle1.copy();
      ConstantClass constantClass0 = new ConstantClass((-2058));
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)57);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      try { 
        Utility.typeOfSignature("org.apache.bcel.generic.ObjectType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.generic.ObjectType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BO_#8PA{V5IWbM#8[");
      assertEquals((byte)8, byte0);
      
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("-%_K^Cyx=BDF~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -%_K^Cyx=BDF~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-60);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) pipedInputStream0;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-61);
      byteArray0[1] = (byte) (-25);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)9;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-25), (byte)9);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exception");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TCQ4o~Qo");
      assertEquals((byte)14, byte0);
      
      int int0 = Utility.setBit((-234), (-234));
      assertEquals((-234), int0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.getSignature("4C");
      try { 
        Utility.typeOfSignature("4C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.accessToString((int) (byte) (-45), true);
      assertEquals("public private final volatile transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-18);
      byteArray1[1] = (byte) (-18);
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-18);
      byteArray1[4] = (byte) (-18);
      byteArray1[5] = (byte) (-18);
      byteArray1[6] = (byte) (-18);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-105);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = Utility.fillup("<illegal opcode>", (-2788), false, 'j');
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.compactClassName("'b5S^ZSjCX}q$IPJVO");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[8] = (byte)98;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)22;
      byteArray0[8] = (byte)61;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'b5S^ZSjCX}q$IPJVO");
      PrintWriter printWriter0 = mockPrintWriter0.format("double", (Object[]) constantArray0);
      Utility.printArray(printWriter0, (Object[]) constantArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)37);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("3rQBRp?Pw5-");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      Utility.encode(byteArray0, false);
      int int0 = 0;
      Utility.setBit(180, 0);
      Utility.accessToString(180, false);
      Utility.setBit(0, 40);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Utility.replace("B>w8N5$S", "B>w8N5$S", "\"");
      // Undeclared exception!
      try { 
        Utility.signatureToString(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `>\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Utility.clearBit(0, 0);
      String string0 = "isub";
      MockFile mockFile0 = new MockFile("isub");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "pm4;O={V&J}de5P~");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // pm4;O={V&J}de5P~
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)3;
      try { 
        Utility.typeOfSignature("7'N!izqeTKgf&{6P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7'N!izqeTKgf&{6P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("goto\t\t#-17747", string0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant constant0 = constantDouble1.copy();
      constantArray0[0] = constant0;
      ConstantClass constantClass0 = new ConstantClass((byte)57);
      String string0 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("\"CONSTANT_Double[6](bytes = 0.0)\", null, null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.convertString("&)]XDTB`3,\"N2A8O#");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)2;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte)42, false);
      Utility.compactClassName("o=2_7+}j<0vGy", "o=2_7+}j<0vGy", false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)74;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      Utility.fillup("f2l", 0, true, 'C');
      Utility.clearBit((byte)74, 3717);
      Utility.compactClassName("uYWc>Fg}1");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "", "uYWc>Fg}1", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      Utility.accessToString((int) (byte) (-69));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte) (-112);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = Utility.getSignature("Dont call getValueBoolean() on a non BOOLEAN Elemknt_alue");
      assertEquals("LDont;", string0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Utility.compactClassName("");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(2480.297145366);
      String string0 = Utility.replace("R_a_QqOK  u{S2/a", "f2i", "putstatic");
      assertEquals("R_a_QqOK  u{S2/a", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String string1 = Utility.accessToString(444, true);
      assertEquals("protected static final transient native", string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Utility.convertString("dstore_3");
      Utility.convertString("dstore_3");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-282));
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-58);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-58));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(5);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantDouble1.copy();
      ConstantClass constantClass0 = new ConstantClass(5);
      ConstantDouble constantDouble2 = new ConstantDouble((-1651.5018793686124));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantDouble2;
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      String string0 = "dreturn";
      Utility.searchOpcode("dreturn");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = "H";
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)0, (byte)0, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("H", "dreturn", "H", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = "kq!}NT]";
      Utility.searchOpcode("kq!}NT]");
      Utility.isSet((short) (-1), 77);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)54;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Utility.convertString("dstore_3");
      String string0 = Utility.convertString("M&YWaU=7f-8X>)");
      assertEquals("M&YWaU=7f-8X>)", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-16);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("istore_2", string1);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Utility.getSignature("The array of suffixes must not be null");
      Utility.accessToString((-1244), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("byte", "The array of suffixes must not be null", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#i-0n#I'k<4^[X6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #i-0n#I'k<4^[X6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      try { 
        Utility.typeOfSignature("OPWXq'It_F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OPWXq'It_F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)3;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)127;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Cd~;9=*o!v0j2q!?:");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = "w";
      boolean boolean0 = true;
      try { 
        Utility.decode("w", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(2480.297145366);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ki;=5", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ki;=5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }
}
