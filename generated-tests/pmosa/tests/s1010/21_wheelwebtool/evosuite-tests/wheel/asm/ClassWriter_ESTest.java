/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 17:06:14 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      int int0 = Short.SIZE;
      classWriter0.visitSource("java/lang/String", "!E)~;ntQ7N2W@>8r");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(166);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wheel.asm.Type";
      stringArray0[1] = "CDVf-p\"4{!";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 11, "xy,4?D|5t", "CDVf-p\"4{!", "xy,4?D|5t", stringArray0, false, false);
      classWriter0.firstMethod = methodWriter0;
      classWriter0.newDouble(166);
      int int0 = classWriter0.newClass("#w#-6'qw,");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(6);
      classWriter0.toByteArray();
      Item item0 = classWriter0.newDouble((-936.5884201));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-699));
      classWriter0.visitOuterClass("SourceFile", (String) null, (String) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2779);
      String string0 = "";
      int int0 = 0;
      classWriter0.visitInnerClass("", "", "", 7);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit(0, 18, "", "RuntimeInvisibleAnnotations", "Sensitive", stringArray0);
      boolean boolean0 = false;
      classWriter0.visitAnnotation("", false);
      String string1 = null;
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(5254, "RuntimeInvisibleAnnotations", (String) null, "{@||3hiTi]J", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 1713);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("o", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(38);
      classWriter0.visit(38, 38, "/> W1A>ME%QD}+{Ili", "/> W1A>ME%QD}+{Ili", (String) null, (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-1906);
      ClassWriter classWriter0 = new ClassWriter((-1906));
      String string0 = "wheel.asm.ClassWriter";
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanReadFileFilter", "wheel.asm.ClassWriter");
      String string1 = "";
      String string2 = "";
      String[] stringArray0 = new String[2];
      String string3 = "";
      // Undeclared exception!
      try { 
        classWriter0.visit((-1906), 256, "F@VOs,]", "SourceFile", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      classWriter0.toByteArray();
      String[] stringArray0 = new String[0];
      classWriter0.visit(59, 45, "", "", "", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(566);
      classWriter0.visitEnd();
      classWriter0.newNameType("U~+H`+y0)", "U~+H`+y0)");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = ":b|\\_!";
      // Undeclared exception!
      try { 
        classWriter0.visitField(0, (String) null, "R:=/%|V=LN#{gq-L", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(12);
      classWriter0.toByteArray();
      // Undeclared exception!
      try { 
        classWriter0.newMethod("JBY>dckuF#~^-Tx>`", "JBY>dckuF#~^-Tx>`", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.addType("LocalVariableTable");
      assertEquals(1, int0);
      
      Item item0 = classWriter0.newFloat(1);
      classWriter0.visitAnnotation("nk&^vN#lJ_ktyxl", false);
      Item[] itemArray0 = new Item[0];
      classWriter0.typeTable = itemArray0;
      int int1 = classWriter0.newClass("LocalVariableTable");
      assertEquals(4, int1);
      
      Item item1 = classWriter0.newMethodItem("nk&^vN#lJ_ktyxl", "nk&^vN#lJ_ktyxl", "nk&^vN#lJ_ktyxl", true);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1511);
      classWriter0.toByteArray();
      classWriter0.addType("wheel.asm.Frame");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("Y`u <<[jx&jPF", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Y`u <<[jx&jPF
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1511);
      classWriter0.toByteArray();
      Float float0 = new Float(0.0F);
      Item item0 = classWriter0.newConstItem(float0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      String string0 = "s@2H%>I";
      String string1 = null;
      float float0 = (-1064.8995F);
      String string2 = "n)4oPl{>8gR:";
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 0, ",#8g,\"", "40,WMTb<G", "`HOd8upPc<@EBj*i7", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(16777228);
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(fileSystemHandling0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.testdata.FileSystemHandling@524ee825
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2924);
      Type type0 = Type.VOID_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
      
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(99);
      Long long0 = Long.getLong("i/h+b6z hTmGD;J&)", (long) 99);
      classWriter0.threshold = 99;
      Item item0 = classWriter0.newConstItem(long0);
      Type type0 = Type.BYTE_TYPE;
      classWriter0.newConst(type0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%5?.['*+";
      stringArray0[1] = "%5?.['*+";
      classWriter0.visit((-461), 16777215, "%5?.['*+", "%5?.['*+", "%5?.['*+", stringArray0);
      int int0 = classWriter0.newConst("i/h+b6z hTmGD;J&)");
      assertEquals(8, int0);
      
      Item item1 = classWriter0.newMethodItem("%5?.['*+", "/B?9~C=", "i/h+b6z hTmGD;J&)", true);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1854));
      classWriter0.newConst("P$e");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(575);
      classWriter0.visitEnd();
      classWriter0.newLong(1L);
      byte[] byteArray0 = ClassWriter.TYPE;
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2613));
      String string0 = "\"xVJ`:rx";
      classWriter0.invalidFrames = false;
      String string1 = "";
      classWriter0.newNameType("\"xVJ`:rx", "");
      classWriter0.newFieldItem("9.({&3RaTKU{SGRr", "bPD.KB'`=X", "");
      classWriter0.newClassItem("\"xVJ`:rx");
      classWriter0.toByteArray();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1884));
      classWriter0.visitOuterClass("", "", (String) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-1884), (-1369));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2613));
      classWriter0.invalidFrames = false;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "RuntimeInvisibleAnnotations";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "\"xVJ`:rx";
      // Undeclared exception!
      try { 
        classWriter0.visit(825, 3, "RuntimeInvisibleAnnotations", (String) null, "\"xVJ`:rx", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(5);
      int int0 = Frame.BASE_KIND;
      Item item0 = classWriter0.newInteger(2);
      item0.strVal1 = "";
      String[] stringArray0 = new String[0];
      classWriter0.visit(847, 128, "", "B31`,A#", "", stringArray0);
      classWriter0.newMethodItem("EnclosingMethod", "", "", true);
      Item item1 = classWriter0.newMethodItem("", "wheel.asm.ClassWriter", "EnclosingMethod", true);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(99);
      Long long0 = Long.getLong("i/h+b6z hTmGD;J&)", (long) 99);
      Long.getLong("i/h+b6z hTmGD;J&)", long0);
      classWriter0.newConstItem(long0);
      Type type0 = Type.BYTE_TYPE;
      classWriter0.visitInnerClass("'\"-CRuPeKd88Mty/.O ", "i/h+b6z hTmGD;J&)", "i/h+b6z hTmGD;J&)", 6);
      classWriter0.newConst(type0);
      classWriter0.visitInnerClass("'\"-CRuPeKd88Mty/.O ", "i/h+b6z hTmGD;J&)", "'\"-CRuPeKd88Mty/.O ", (-2521));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%5?.['*+";
      stringArray0[1] = "%5?.['*+";
      classWriter0.visit((-461), 16777215, "%5?.['*+", "%5?.['*+", "%5?.['*+", stringArray0);
      classWriter0.newConst("i/h+b6z hTmGD;J&)");
      Item item0 = classWriter0.newMethodItem("%5?.['*+", "/B?9~C=", "i/h+b6z hTmGD;J&)", true);
      classWriter0.visitSource("'\"-CRuPeKd88Mty/.O ", "_}(B`");
      Item item1 = classWriter0.newMethodItem("lM lvcg|!", "", "%5?.['*+", true);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(566);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      int int0 = classWriter0.newConst("java.time.chrono.MinguoDate");
      assertEquals(2, int0);
      
      classWriter0.newFieldItem("nxRQgc2%-I1 e8Dn35", "nxRQgc2%-I1 e8Dn35", "");
      mockMinguoDate0.getMockedClassName();
      Item item0 = classWriter0.newDouble(566);
      assertNotNull(item0);
      
      Item item1 = classWriter0.newConstItem("java.time.chrono.MinguoDate");
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      Item[] itemArray0 = new Item[0];
      classWriter0.typeTable = itemArray0;
      classWriter0.version = 3;
      // Undeclared exception!
      try { 
        classWriter0.addType(" ,M.ngd9-:V");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-735));
      classWriter0.toByteArray();
      Boolean boolean0 = Boolean.TRUE;
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "value ";
      stringArray0[2] = "L";
      stringArray0[3] = "value ";
      stringArray0[4] = "";
      stringArray0[5] = "L";
      classWriter0.visit(40, 40, "", "", "value ", stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      classWriter0.newConst(boolean0);
      Item item0 = classWriter0.newMethodItem("", "Znn)58K", "L", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      classWriter0.toByteArray();
      String string0 = classWriter0.getCommonSuperClass("java/lang/String", "java/lang/String");
      assertEquals("java/lang/String", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      ClassWriter classWriter1 = new ClassWriter(1);
      classWriter1.visitOuterClass("I*{Jw|<NtiR/ e_g", "k#QPF`", (String) null);
      assertNotSame(classWriter1, classWriter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(16777228);
      classWriter0.toByteArray();
      classWriter0.visitSource((String) null, "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(16777228);
      byte[] byteArray0 = classWriter0.toByteArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classWriter0.visitSource("[`ccV19;kq", (String) null);
      byte[] byteArray1 = classWriter0.toByteArray();
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.threshold = 15;
      classWriter0.newFloat(11);
      classWriter0.visitOuterClass("", "/*pkJ^oxPg{O", "=}Rm<Ky~}");
      int int0 = classWriter0.addUninitializedType("/*pkJ^oxPg{O", 693);
      assertEquals(1, int0);
      
      int int1 = classWriter0.newNameType("", "");
      assertEquals(7, int1);
      
      classWriter0.newMethodItem("7B[5lR#", "", "}0G>1`Ig@&", false);
      int int2 = classWriter0.newField("}0G>1`Ig@&", "=}Rm<Ky~}", "wheel.asm.Type");
      assertEquals(16, int2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1606));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.version = (-1606);
      classWriter0.newField("/J]sC43|y6w3_aJQPJ_", "/J]sC43|y6w3_aJQPJ_", "/J]sC43|y6w3_aJQPJ_");
      classWriter0.newField("/J]sC43|y6w3_aJQPJ_", "/J]sC43|y6w3_aJQPJ_", "/J]sC43|y6w3_aJQPJ_");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      classWriter0.version = 4;
      classWriter0.toByteArray();
      classWriter0.newFloat((-1606));
      classWriter0.newFloat((-957.0947F));
      classWriter0.newNameType("Deprecated", "Deprecated");
      classWriter0.visitEnd();
      String string0 = "";
      classWriter0.visitOuterClass("", "", "Deprecated");
      String string1 = "LocalVariableTypeTable";
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("3$Jq9En4L)1@;FTm=");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      Item item0 = new Item(1);
      Item item1 = classWriter0.newDouble(40);
      Item item2 = classWriter0.newDouble(40);
      assertSame(item2, item1);
      assertNotNull(item2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1511);
      Item[] itemArray0 = new Item[6];
      Item item0 = classWriter0.newLong(1511);
      itemArray0[0] = item0;
      Item item1 = new Item(1511, item0);
      itemArray0[1] = item1;
      Item item2 = classWriter0.newLong(0L);
      itemArray0[2] = item2;
      Item item3 = classWriter0.newLong(0L);
      itemArray0[3] = item3;
      Item item4 = classWriter0.newClassItem("");
      itemArray0[4] = item4;
      Item item5 = classWriter0.newFloat((-3955.185F));
      itemArray0[5] = item5;
      classWriter0.typeTable = itemArray0;
      classWriter0.newFloat(1511);
      Item item6 = classWriter0.newDouble(1511);
      assertNotSame(item6, item1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      classWriter0.toByteArray();
      int int0 = classWriter0.addType("");
      int int1 = classWriter0.addType("");
      assertTrue(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-32768));
      Item item0 = classWriter0.newFloat((-32768));
      classWriter0.newFieldItem("Code", "op9N2B ", "v9ZmPxH");
      Item item1 = classWriter0.newFloat((-32768));
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      Item item0 = classWriter0.newClassItem("Deprecated");
      Item item1 = classWriter0.newInteger(13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      classWriter0.newInteger(13);
      Item item2 = classWriter0.newInteger(13);
      assertNotSame(item2, item0);
      assertSame(item2, item1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassWriter classWriter0 = new ClassWriter((-1856));
      classWriter0.getCommonSuperClass("java/lang/String", "java/lang/String");
      classWriter0.visit((-1176), 13, "java/lang/String", "java/lang/String", "java/lang/String", (String[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1856));
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanReadFileFilter", "java/lang/String");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1866));
      int int0 = classWriter0.newMethod("+oe_+hnN>9&d", "", "", true);
      assertEquals(5, int0);
      
      FieldWriter fieldWriter0 = classWriter0.firstField;
      classWriter0.firstField = null;
      int int1 = classWriter0.newMethod("", "", "", true);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1856));
      classWriter0.visit((-1856), (-1856), "HO,3=KkWIsnKuc{l[", ")N|3PY|)Xe<7!zK;.f", "", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(67);
      classWriter0.addUninitializedType("ey", 67);
      classWriter0.addUninitializedType("ey", 67);
      Item item0 = classWriter0.newMethodItem("ey", "double", "<init>", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1881));
      classWriter0.newMethod("", "", "", true);
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
  }
}
