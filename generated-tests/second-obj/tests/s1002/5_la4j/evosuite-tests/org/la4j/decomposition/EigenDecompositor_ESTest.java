/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:49:19 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Spliterator;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1034, 1);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[4] = 3587.241679041;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = (-52.0);
      doubleArray0[6] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[6] = 3587.241679041;
      doubleArray1[2] = 0.2838839068095725;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 0.2838839068095725;
      doubleArray1[8] = (-52.0);
      doubleArray0[6] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[6] = 3587.241679041;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = 3587.241679041;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 0.0;
      doubleArray1[8] = (-52.0);
      doubleArray0[6] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(9, denseMatrix0.columns());
      assertEquals(9, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(9, denseMatrix0.columns());
      assertEquals(9, denseMatrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      assertEquals(9, denseMatrix0.columns());
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, eigenDecompositor0.matrix.columns());
      assertEquals(9, eigenDecompositor0.matrix.rows());
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(9, denseMatrix0.columns());
      assertEquals(9, denseMatrix0.rows());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(8, 8);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[4] = 3587.241679041;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = (-58.13990122056901);
      doubleArray0[5] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(9, denseMatrix0.columns());
      assertEquals(9, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(9, denseMatrix0.columns());
      assertEquals(9, denseMatrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      assertEquals(9, denseMatrix0.columns());
      assertEquals(9, denseMatrix0.rows());
      assertEquals(9, eigenDecompositor0.matrix.columns());
      assertEquals(9, eigenDecompositor0.matrix.rows());
      
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[2] = 0.0;
      doubleArray0[2] = (-3587.241679041);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      MockRandom mockRandom0 = new MockRandom(10);
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(10);
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Spliterator<Double> spliterator0 = denseMatrix0.spliterator();
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(spliterator0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(matrixArray0);
      
      Random.setNextRandom(10);
      Random.setNextRandom((-2005));
      Random.setNextRandom((-2005));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[][] doubleArray0 = new double[11][9];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = 2;
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(2, mockRandom0);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, denseMatrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      DenseMatrix denseMatrix1 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(9, denseMatrix1.columns());
      assertEquals(11, denseMatrix1.rows());
      assertNotNull(denseMatrix1);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertFalse(denseMatrix1.equals((Object)denseMatrix0));
      
      eigenDecompositor0.matrix = (Matrix) denseMatrix1;
      assertEquals(2, denseMatrix0.columns());
      assertEquals(2, denseMatrix0.rows());
      assertEquals(9, denseMatrix1.columns());
      assertEquals(11, denseMatrix1.rows());
      assertEquals(9, eigenDecompositor0.matrix.columns());
      assertEquals(11, eigenDecompositor0.matrix.rows());
      
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }
}
