/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:02:19 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[2] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[4] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.read(byteArray0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter((-1679));
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 47, 609);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45977
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter((-1679));
      ClassReader classReader1 = new ClassReader(classReader0.b, 609, 1817);
      classReader1.getSuperName();
      classReader0.getSuperName();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader1.readConst(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(classReader0, 3933);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("@3q{Yj");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      classReader0.getClassName();
      classReader0.getClassName();
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(4);
      ClassReader classReader1 = new ClassReader(classReader0.b, 609, 1654);
      ClassWriter classWriter1 = null;
      try {
        classWriter1 = new ClassWriter(classReader1, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      ClassWriter classWriter0 = new ClassWriter(492);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      classReader1.getSuperName();
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'a';
      charArray0[3] = 'o';
      charArray0[4] = '0';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      // Undeclared exception!
      try { 
        classReader0.readConst(21, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      ClassReader classReader1 = new ClassReader(classReader0.b);
      char[] charArray0 = new char[4];
      charArray0[1] = 's';
      classReader0.getItem(1);
      classReader1.readShort(609);
      char[] charArray1 = new char[1];
      charArray1[0] = 'x';
      // Undeclared exception!
      try { 
        classReader1.readUTF8(185, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(609, classReader0.header);
      
      classReader0.getClassName();
      String string0 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string0);
      
      classReader0.getSuperName();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      classReader0.getSuperName();
      short short0 = classReader0.readShort(40);
      assertEquals((short)8457, short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(30);
      Attribute attribute0 = new Attribute("");
      classWriter0.newUTF8("X7`)jH!R4sfD#0uyO\"");
      classReader0.accept((ClassVisitor) classWriter0, (-1679));
      String string0 = classWriter0.thisName;
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, (-1627), (-1878));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      classReader0.getClassName();
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassWriter classWriter1 = new ClassWriter((-1679));
      classReader0.accept((ClassVisitor) classWriter1, 2052);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("LocalVariableTable");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      String string0 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string0);
      
      String string1 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string1);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string1);
      
      ClassWriter classWriter0 = new ClassWriter((-1679));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(609, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(609, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(stringArray0);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      long long0 = classReader0.readLong(2);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals((-4990551337076850648L), long0);
      assertNotSame(classReader0, classReader1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      String string0 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string0);
      
      String string1 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string1);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string1);
      
      ClassWriter classWriter0 = new ClassWriter((-1679));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Attribute attribute0 = new Attribute("org/apache/commons/io/filefilter/HiddenFileFilter");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      int int0 = classReader0.getAccess();
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(33, int0);
      assertNotSame(classReader0, classReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      
      String string0 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string0);
      
      String string1 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string1);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string1);
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 609, (-1593));
      assertEquals(33, classReader0.getAccess());
      assertEquals(2560, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(622, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader1.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(2560, classReader1.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(622, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(boolean1);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      classReader0.accept((ClassVisitor) classWriter0, (-3191));
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classReader0, classReader1);
      
      String string2 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string2);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string2);
      assertNotSame(classReader0, classReader1);
      
      String string3 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string3);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string3);
      assertNotSame(classReader0, classReader1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = 'o';
      // Undeclared exception!
      try { 
        classReader0.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(609, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      
      String string0 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(609, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string0);
      
      int int0 = 5;
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = '#';
      charArray0[2] = '@';
      charArray0[3] = '#';
      charArray0[4] = 'W';
      charArray0[5] = '<';
      charArray0[6] = ' ';
      // Undeclared exception!
      try { 
        classReader0.readConst(5, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(492);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 4);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      classReader0.accept((ClassVisitor) classWriter1, 1);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(609, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classWriter1, classWriter0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      // Undeclared exception!
      try { 
        classReader0.readClass(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47806
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      classReader1.accept((ClassVisitor) classWriter0, 1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '?';
      charArray0[2] = 'b';
      // Undeclared exception!
      try { 
        classReader0.readConst(21, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      int int0 = classWriter0.newClass("getSuperName");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(2, int0);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader0.header);
      assertNotNull(stringArray0);
      assertNotSame(classReader0, classReader1);
      
      classReader1.accept((ClassVisitor) classWriter0, 2);
      ClassReader classReader2 = new ClassReader(classReader0.b, (-1871), 1);
      classReader2.getInterfaces();
      classReader0.getAccess();
      classReader2.readLong(classReader0.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      char char0 = 'T';
      classReader0.accept((ClassVisitor) classWriter0, 8);
      int int0 = 59;
      ClassWriter classWriter1 = new ClassWriter(classReader0, int0);
      classReader0.accept((ClassVisitor) classWriter0, classReader0.EXPAND_FRAMES);
      int int1 = (-265);
      char[] charArray0 = new char[3];
      charArray0[0] = char0;
      charArray0[1] = char0;
      classReader0.readConst(int1, charArray0);
      classReader0.getSuperName();
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(inputStream0);
      ClassReader classReader1 = new ClassReader(bufferedInputStream0);
      classReader1.readShort(classReader0.EXPAND_FRAMES);
      classReader0.readShort(classReader0.EXPAND_FRAMES);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      String string0 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string0);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string0);
      
      String string1 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string1);
      assertEquals("org/apache/commons/io/filefilter/HiddenFileFilter", string1);
      
      ClassWriter classWriter0 = new ClassWriter(1421);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, (-797));
      assertEquals(33, classReader0.getAccess());
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter1 = new ClassWriter(classReader0, 59);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      classReader0.accept((ClassVisitor) classWriter0, 1646);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotSame(classWriter0, classWriter1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = ')';
      charArray0[4] = '>';
      charArray0[5] = ';';
      Type type0 = (Type)classReader0.readConst(9, charArray0);
      assertArrayEquals(new char[] {')', 'x', 'J', ')', '>', ';'}, charArray0);
      assertEquals(33, classReader0.getAccess());
      assertEquals(10, type0.getSort());
      assertEquals(1, type0.getDimensions());
      assertEquals(1, type0.getSize());
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(5, Type.INT);
      assertEquals(7, Type.LONG);
      assertEquals(10, Type.OBJECT);
      assertEquals(1, Type.BOOLEAN);
      assertEquals(8, Type.DOUBLE);
      assertEquals(6, Type.FLOAT);
      assertEquals(0, Type.VOID);
      assertEquals(3, Type.BYTE);
      assertEquals(2, Type.CHAR);
      assertEquals(4, Type.SHORT);
      assertEquals(9, Type.ARRAY);
      assertNotNull(type0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      String string2 = classReader1.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(609, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(609, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string2);
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string2);
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
          assertEquals(33, classReader0.getAccess());
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertNotNull(classReader0);
          
          ClassWriter classWriter0 = new ClassWriter(8);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertNotNull(classWriter0);
          
          ClassReader classReader1 = new ClassReader(classReader0.b);
          assertEquals(33, classReader0.getAccess());
          assertEquals(33, classReader1.getAccess());
          assertFalse(classReader1.equals((Object)classReader0));
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8070, classReader1.header);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertNotNull(classReader1);
          
          char[] charArray0 = new char[3];
          charArray0[0] = '{';
          charArray0[1] = '?';
          ClassWriter classWriter1 = new ClassWriter(classReader0, (-1820));
          assertEquals(33, classReader0.getAccess());
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classWriter1.equals((Object)classWriter0));
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertNotNull(classWriter1);
          
          classReader0.accept((ClassVisitor) classWriter1, 2304);
          assertEquals(33, classReader0.getAccess());
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classWriter1.equals((Object)classWriter0));
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertNotSame(classReader0, classReader1);
          assertNotSame(classWriter1, classWriter0);
          
          // Undeclared exception!
          try { 
            classReader1.readConst(21, charArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 3
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      classReader1.accept((ClassVisitor) classWriter0, 8070);
      ClassWriter classWriter1 = new ClassWriter(classReader1, 8);
      classReader1.accept((ClassVisitor) classWriter1, 492);
      char[] charArray0 = null;
      classReader0.readUTF8(492, (char[]) null);
      classReader0.readConst(classReader1.SKIP_CODE, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 92, 404);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52168
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      int int0 = 12;
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        classReader0.readUTF8(827, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wheel.asm.ClassReader");
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      int int0 = 21;
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '{';
      ClassWriter classWriter1 = new ClassWriter(classReader0, 4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        classReader0.readUTF8(6, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
