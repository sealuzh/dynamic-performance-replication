/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:37:40 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("O(&n_P3&R.C7k", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("h\"Gg@0h]?lexy,4?D|5", (ClassLoader) aSMClassLoader0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C,L6+");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTimeoutException: C,L6+
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("Yl");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable: Yl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.loadClass("kotlin.ranges.ClosedFloatRange");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      linkedHashMap0.remove((Object) null, (Object) "kotlin.ranges.ClosedFloatRange");
      linkedHashMap0.remove((Object) list0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        linkedHashMap0.merge("kotlin.ranges.ClosedFloatRange", (String) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("F", "F");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      MockThread.getAllStackTraces();
      Integer integer0 = new Integer(3875);
      TypeUtils.castToDate(integer0);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Method> class0 = Method.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      TypeUtils.unwrapOptional(class0);
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<TimeZone> class0 = TimeZone.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@9b
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.decapitalize(")/");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(")/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getCollectionItemType(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<StackTraceElement> class1 = StackTraceElement.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<PropertyNamingStrategy> class2 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class2, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("true", "true");
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      SecurityException securityException0 = new SecurityException();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("true");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      TypeUtils.isProxy(class0);
      Class<MockDate> class1 = MockDate.class;
      TypeUtils.isProxy(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      SecurityException securityException0 = new SecurityException();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.isNumber("H4.&O8V]Hm}Y");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) parameterizedTypeImpl0, propertyNamingStrategy0);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      TypeUtils.getSerializeFeatures(class1);
      ParserConfig.getGlobalInstance();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<String> class0 = String.class;
      TypeUtils.getSerializeFeatures(class0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)22;
      AtomicInteger atomicInteger0 = new AtomicInteger((byte)22);
      atomicInteger0.set(1697);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<Jdk8DateCodec> class2 = Jdk8DateCodec.class;
      TypeUtils.buildBeanInfo(class2, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.decapitalize((String) null);
      System.setCurrentTimeMillis(86L);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      weakHashMap0.getOrDefault(propertyNamingStrategy0, "_GUrVP}Sg}Vb");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      TypeUtils.decapitalize("java.nio.file.Paths");
      System.setCurrentTimeMillis(125L);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.getParserFeatures(class0);
      Class<Method> class1 = Method.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      TypeUtils.clearClassMapping();
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("true", "2ZbLqRies2rq1w6X");
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig parserConfig0 = new ParserConfig();
      parserConfig0.getDeserializer((Type) null);
      Class<MockDate> class0 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "Ljava.util.concurrent.ConcurrentSkipListSet", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      NumberFormatException numberFormatException0 = new NumberFormatException();
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      TypeUtils.toLocale("\"rO");
      NumberFormatException numberFormatException1 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava.util.concurrent.ConcurrentSkipListSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.castToInt((Object) null);
      Long long0 = new Long(1L);
      TypeUtils.castToBoolean((Object) null);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.getCollectionItemClass((Type) null);
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.setClassAssertionStatus("eel|>", true);
      classLoader0.getParent();
      TypeUtils.loadClass("", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("eel|>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"eel|>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.loadClass("org.apache.ibatis.javassist.util.proxy.ProxyObject", (ClassLoader) null, true);
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.fnv1a_64("");
      byte[] byteArray0 = TypeUtils.castToBytes("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.fnv1a_64("Ljava/lang/reflect/Type;");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Ljava/lang/reflect/Type;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Ljava/lang/reflect/Type;
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("%c!Z9^dzW", identityHashMap0);
      TypeUtils.getClass((Type) class0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      MockDate mockDate0 = new MockDate(196L);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : Thu Jan 01 00:00:00 GMT 1970
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.isKotlin(class0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TypeUtils.isKotlin(class1);
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      TypeUtils.isProxy(class2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("hcVWVcm:O", "hcVWVcm:O", "Ljava.util.concurrent.ConcurrentSkipListSet", (-1954));
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : hcVWVcm:O.hcVWVcm:O(Ljava.util.concurrent.ConcurrentSkipListSet)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isGenericParamType(class0);
      ConcurrentHashMap<SQLSyntaxErrorException, IllegalMonitorStateException> concurrentHashMap0 = new ConcurrentHashMap<SQLSyntaxErrorException, IllegalMonitorStateException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(concurrentHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      System.setCurrentTimeMillis((-1L));
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      String string0 = "o";
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) pageAttributes0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.unwrapOptional(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getKoltinConstructorParameters(class0);
      TreeSet<PropertyProcessableDeserializer> treeSet0 = new TreeSet<PropertyProcessableDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.isKotlin(class0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Double> class1 = Double.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, weakHashMap0);
      javaBeanSerializer0.getType();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils typeUtils0 = new TypeUtils();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.isProxy(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig parserConfig0 = new ParserConfig();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("fastjson.parser.deny", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeNotPresentException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.TypeNotPresentException: Type fastjson.parser.deny not present
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.castToBigInteger((Object) null);
      Class<Character> class0 = Character.class;
      TypeUtils.isPath(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      HashMap<StackTraceElementDeserializer, OptionalCodec> hashMap0 = new HashMap<StackTraceElementDeserializer, OptionalCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.keySet();
      Class<Dimension> class1 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy1);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      javaBeanSerializer0.getType();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.awt.Dimension
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.decapitalize("");
      TypeUtils.castToShort("");
      TypeUtils.getClassFromMapping("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.toLocale("");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("w840Q?VcFmQ0o");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("GenericTp");
      TypeUtils typeUtils0 = new TypeUtils();
      JSONObject jSONObject0 = new JSONObject(true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.loadClass("b%F");
      TypeUtils.getClass((Type) class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.castToByte((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToLong((Object) null);
      InterruptedException interruptedException0 = new InterruptedException("b%F");
      BreakIterator breakIterator0 = BreakIterator.getSentenceInstance();
      Locale locale0 = Locale.ITALY;
      BreakIterator.getSentenceInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(breakIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : [checksum=0xcba403eb]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Boolean> class0 = Boolean.TYPE;
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONObject0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.loadClass("java.awt.Font");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.decapitalize("boolean");
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError((String) null);
      TypeUtils.toLocale("@!&&]ZL");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("org.springframework.cglib.proxy.Factory");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      boolean boolean0 = TypeUtils.isNumber("H4.&O8V]Hm}Y");
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) parameterizedTypeImpl0, (PropertyNamingStrategy) null);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      MockThread.getAllStackTraces();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = TypeUtils.fnv1a_64_lower("eID]d,iz4koUgA9Dd{M");
      assertEquals(912607352901271429L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TreeMap<SQLInvalidAuthorizationSpecException, Method> treeMap0 = new TreeMap<SQLInvalidAuthorizationSpecException, Method>();
      defaultJSONParser0.setContext((Object) mockDateFormat0, (Object) treeMap0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Function<String, Field> function0 = (Function<String, Field>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyString());
      hashMap0.computeIfAbsent("Ljava.awt.Point", function0);
      ParserConfig.getFieldFromCache("vOB6", hashMap0);
      Class<VerifyError> class0 = VerifyError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isHibernateInitialized("Ljava.awt.Point");
      HttpCookie httpCookie0 = new HttpCookie("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.awt.Point");
      TypeUtils.fnv1a_64_lower("ha");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("vOB6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"vOB6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(type0);
      TypeUtils.unwrapOptional(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.decapitalize((String) null);
      System.setCurrentTimeMillis(125L);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(6821);
      atomicInteger0.set(6821);
      atomicInteger0.getAndIncrement();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MessageFormat> class1 = MessageFormat.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.decapitalize((String) null);
      System.setCurrentTimeMillis(1486L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.fnv1a_64_lower("N~sUnAS>=a'");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      TypeUtils.loadClass("islongValue", (ClassLoader) aSMDeserializerFactory0.classLoader);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("g}o=\"Dv=^XiKw%qq");
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(collator0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<MockDate> class1 = MockDate.class;
      TypeUtils.loadClass("W3`Ci*H'iP-u&");
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      Long long0 = new Long((-1L));
      TypeUtils.castToByte(long0);
      InterruptedException interruptedException0 = new InterruptedException("-ew");
      BreakIterator.getSentenceInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class2, (Map<String, String>) null, propertyNamingStrategy0);
      assertEquals("class org.evosuite.runtime.mock.java.util.MockDate", class2.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(6821);
      assertNotNull(atomicInteger0);
      assertEquals((byte) (-91), atomicInteger0.byteValue());
      assertEquals(6821.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(6821, atomicInteger0.get());
      assertEquals("6821", atomicInteger0.toString());
      assertEquals((short)6821, atomicInteger0.shortValue());
      assertEquals(6821.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(6821, atomicInteger0.intValue());
      assertEquals(6821L, atomicInteger0.longValue());
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertEquals("double", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertEquals("class java.text.SimpleDateFormat", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      Class<Boolean> class3 = Boolean.TYPE;
      assertNotNull(class3);
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isAnnotation());
      
      JSONObject jSONObject0 = new JSONObject();
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      boolean boolean3 = Boolean.getBoolean("fastjson.parser.autoTypeAccept");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      boolean boolean1 = TypeUtils.isKotlin(class1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class2 = TypeUtils.loadClass("b%F");
      assertNull(class2);
      
      Class<?> class3 = TypeUtils.getClass((Type) class0);
      assertNotNull(class3);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.sql.SQLFeatureNotSupportedException", class3.toString());
      assertEquals(1, class3.getModifiers());
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      InterruptedException interruptedException0 = new InterruptedException("b%F");
      assertNotNull(interruptedException0);
      assertEquals("java.lang.InterruptedException: b%F", interruptedException0.toString());
      assertEquals("b%F", interruptedException0.getMessage());
      
      ThreadGroup threadGroup0 = new ThreadGroup("b%F");
      assertNotNull(threadGroup0);
      assertEquals("b%F", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread("PHTLKFD%X");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      assertEquals("b%F", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      MockThread mockThread2 = new MockThread(mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(mockThread2);
      assertEquals("b%F", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotNull(classLoader0);
      assertEquals("b%F", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      assertEquals("b%F", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("b%F", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      Class<Short> class4 = Short.TYPE;
      assertNotNull(class4);
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isEnum());
      assertFalse(class4.isArray());
      assertFalse(class4.isInterface());
      assertEquals(1041, class4.getModifiers());
      assertEquals("short", class4.toString());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) interruptedException0, (Type) class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.InterruptedException: b%F
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory2);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Float> class0 = Float.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      PageAttributes pageAttributes0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig1);
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNull(pageAttributes0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      long long0 = TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeSupport");
      assertEquals(1461384724327545714L, long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray1);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      String[] stringArray2 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray2);
      
      long long0 = TypeUtils.fnv1a_64(")Z");
      assertEquals(566727908469702746L, long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("javax.xml.datatype.XMLGregorianCalendar");
      assertFalse(long1 == long0);
      assertEquals((-2969273025837522563L), long1);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      long long2 = TypeUtils.fnv1a_64("/Date(");
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(7251870155070044038L, long2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      System.setCurrentTimeMillis(315L);
      Class<?> class0 = TypeUtils.loadClass("kotlin.ranges.ClosedFloatRange", (ClassLoader) null, true);
      assertNull(class0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      assertNotNull(bufferCapabilities_FlipContents0);
      
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      assertNotNull(bufferCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(bufferCapabilities0.isPageFlipping());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(bufferCapabilities0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.awt.BufferCapabilities@60f5c858
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Field field0 = ParserConfig.getFieldFromCache("4K!C", identityHashMap0);
      assertNull(field0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Field field1 = ParserConfig.getFieldFromCache("4K!C", identityHashMap0);
      assertNull(field1);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Field field2 = ParserConfig.getFieldFromCache("4K!C", identityHashMap0);
      assertNull(field2);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      Long long0 = TypeUtils.castToLong("");
      assertNull(long0);
      
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      assertNotNull(breakIterator0);
      
      Short short0 = TypeUtils.castToShort("");
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory2);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Float> class0 = Float.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Class<JSONObject> class1 = JSONObject.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class1, type0, (PropertyNamingStrategy) null);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      // Undeclared exception!
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
        fail("Expecting exception: VerifyError");
      
      } catch(VerifyError e) {
         //
         // (class: com/alibaba/fastjson/parser/deserializer/FastjsonASMDeserializer_1_JSONObject, method: deserialze signature: (Lcom/alibaba/fastjson/parser/DefaultJSONParser;Ljava/lang/reflect/Type;Ljava/lang/Object;I)Ljava/lang/Object;) Incompatible object argument for function call
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"3Gg0h]?ley,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory2);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      Class<?> class0 = TypeUtils.getClassFromMapping("h\"3Gg0h]?ley,4?D|5");
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("JNwHb)<x1");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("JNwHb)<x1");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class<NoSuchFieldException> class2 = NoSuchFieldException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      TreeMap<DateFormatSymbols, HttpCookie> treeMap0 = new TreeMap<DateFormatSymbols, HttpCookie>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      NoSuchFieldException noSuchFieldException0 = TypeUtils.cast((Object) treeMap0, class2, parserConfig0);
      assertNotNull(noSuchFieldException0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(0, treeMap0.size());
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNull(noSuchFieldException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Properties> class0 = Properties.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("4K!C", identityHashMap0);
      assertNull(field0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Field field1 = ParserConfig.getFieldFromCache("4K!C", identityHashMap0);
      assertNull(field1);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Field field2 = ParserConfig.getFieldFromCache(" ,(", linkedHashMap0);
      assertNull(field2);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      
      Class<StackTraceElement> class2 = StackTraceElement.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray0);
      
      Class<?> class3 = TypeUtils.getClassFromMapping("t");
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.utilconcurrent.ConcurrentSkipistSet");
      assertNull(class0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "2ZbLqRies2rq1w6X", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 2ZbLqRies2rq1w6X
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis(8838294710098435315L);
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("eel|>", "listContext");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      JSONType jSONType0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1, treeMap0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<?> class1 = TypeUtils.loadClass("J", classLoader0);
      assertSame(classLoader0, classLoader1);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("listContext");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"listContext\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      Class<Boolean> class0 = Boolean.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) batchUpdateException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotSame(class2, class1);
      assertFalse(class2.equals((Object)class1));
      assertNotNull(class2);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertEquals("class [Z", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Class<StackTraceElement> class3 = StackTraceElement.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray0);
      
      Class<PropertyNamingStrategy> class4 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class4, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      String string0 = "Qz-rx4\\ &%";
      BiConsumer<Object, Field> biConsumer0 = (BiConsumer<Object, Field>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      assertNotNull(optionalCodec0);
      assertEquals(12, optionalCodec0.getFastMatchToken());
      
      Double double0 = new Double(0.75);
      assertNotNull(double0);
      assertEquals(0.75, (double)double0, 0.01);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      
      long long0 = TypeUtils.fnv1a_64_lower("nZ`_`g0sYOZz3gZK");
      assertEquals((-1960392956502352458L), long0);
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, (-1632802221), (-1632802221));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("true", "true");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNotNull(hashtable1);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread("[double");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      
      mockThread1.run();
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      
      Field field0 = ParserConfig.getFieldFromCache("[double", hashtable1);
      assertNotSame(hashtable1, hashtable0);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNull(field0);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      LinkedHashSet<IllegalArgumentException> linkedHashSet0 = new LinkedHashSet<IllegalArgumentException>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      TreeMap<SQLInvalidAuthorizationSpecException, Method> treeMap0 = new TreeMap<SQLInvalidAuthorizationSpecException, Method>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockDateFormat0, (Object) treeMap0);
      assertNotNull(parseContext0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals(0, treeMap0.size());
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Field field0 = ParserConfig.getFieldFromCache("vOB6", hashMap0);
      assertNull(field0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Class<VerifyError> class1 = VerifyError.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("Ljava.awt.Point");
      assertTrue(boolean0);
      
      HttpCookie httpCookie0 = new HttpCookie("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.awt.Point");
      assertNotNull(httpCookie0);
      assertNull(httpCookie0.getPath());
      assertFalse(httpCookie0.getDiscard());
      assertNull(httpCookie0.getComment());
      assertEquals(1, httpCookie0.getVersion());
      assertNull(httpCookie0.getDomain());
      assertEquals("Ljava.awt.Point", httpCookie0.getValue());
      assertNull(httpCookie0.getPortlist());
      assertFalse(httpCookie0.getSecure());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", httpCookie0.getName());
      assertFalse(httpCookie0.hasExpired());
      assertFalse(httpCookie0.isHttpOnly());
      assertNull(httpCookie0.getCommentURL());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet=\"Ljava.awt.Point\"", httpCookie0.toString());
      assertEquals((-1L), httpCookie0.getMaxAge());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(httpCookie0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrentConcurrentSkipListSet");
      assertNull(class0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      TreeMap<SQLInvalidAuthorizationSpecException, Method> treeMap0 = new TreeMap<SQLInvalidAuthorizationSpecException, Method>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      assertNotNull(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      long long0 = TypeUtils.fnv1a_64_lower(".000000000");
      assertEquals((-2936808215823527149L), long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("Ljava.util.concurrentConcurrentSkipListSet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("%c!Z9^dzW", identityHashMap0);
      assertNull(field0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Field field1 = ParserConfig.getFieldFromCache("Ljava.awt.Point", identityHashMap0);
      assertNull(field1);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Field field2 = ParserConfig.getFieldFromCache("%c!Z9^dzW", identityHashMap0);
      assertNull(field2);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "4K!C", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("(Ljava/util/Collection;C)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (Ljava/util/Collection;C)V
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      Class<Object> class1 = Object.class;
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      long long0 = TypeUtils.fnv1a_64("signers");
      assertEquals((-671369715193247616L), long0);
      
      long long1 = TypeUtils.fnv1a_64_lower(")yV");
      assertFalse(long1 == long0);
      assertEquals((-13881231479788733L), long1);
      
      Float float0 = new Float((float) (-671369715193247616L));
      assertNotNull(float0);
      assertEquals((-6.713697E17F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<MockDate> class1 = MockDate.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      AtomicInteger atomicInteger0 = new AtomicInteger(3);
      assertNotNull(atomicInteger0);
      assertEquals(3.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("3", atomicInteger0.toString());
      assertEquals((byte)3, atomicInteger0.byteValue());
      assertEquals(3, atomicInteger0.intValue());
      assertEquals(3, atomicInteger0.get());
      assertEquals(3.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(3L, atomicInteger0.longValue());
      assertEquals((short)3, atomicInteger0.shortValue());
      
      AtomicInteger atomicInteger1 = new AtomicInteger(3);
      assertFalse(atomicInteger1.equals((Object)atomicInteger0));
      assertNotNull(atomicInteger1);
      assertEquals((short)3, atomicInteger1.shortValue());
      assertEquals(3.0F, atomicInteger1.floatValue(), 0.01F);
      assertEquals(3, atomicInteger1.get());
      assertEquals("3", atomicInteger1.toString());
      assertEquals(3, atomicInteger1.intValue());
      assertEquals(3.0, atomicInteger1.doubleValue(), 0.01);
      assertEquals((byte)3, atomicInteger1.byteValue());
      assertEquals(3L, atomicInteger1.longValue());
      
      Long long0 = TypeUtils.castToLong(atomicInteger1);
      assertNotSame(atomicInteger1, atomicInteger0);
      assertFalse(atomicInteger1.equals((Object)atomicInteger0));
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      assertEquals((short)3, atomicInteger1.shortValue());
      assertEquals(3.0F, atomicInteger1.floatValue(), 0.01F);
      assertEquals(3, atomicInteger1.get());
      assertEquals("3", atomicInteger1.toString());
      assertEquals(3, atomicInteger1.intValue());
      assertEquals(3.0, atomicInteger1.doubleValue(), 0.01);
      assertEquals((byte)3, atomicInteger1.byteValue());
      assertEquals(3L, atomicInteger1.longValue());
      
      long long1 = TypeUtils.fnv1a_64_lower("gettoString");
      assertEquals(6750929220365991227L, long1);
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertNotNull(instantiationException0);
      assertNull(instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      
      InstantiationError instantiationError0 = new InstantiationError();
      assertNotNull(instantiationError0);
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      TreeMap<SQLInvalidAuthorizationSpecException, Method> treeMap0 = new TreeMap<SQLInvalidAuthorizationSpecException, Method>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = numberFormatException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      InternalError internalError0 = new InternalError();
      assertNotNull(internalError0);
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("{e*:,", internalError0);
      assertNotNull(typeNotPresentException0);
      assertNull(internalError0.getMessage());
      assertEquals("java.lang.InternalError", internalError0.toString());
      assertEquals("{e*:,", typeNotPresentException0.typeName());
      assertEquals("Type {e*:, not present", typeNotPresentException0.getMessage());
      assertEquals("java.lang.TypeNotPresentException: Type {e*:, not present", typeNotPresentException0.toString());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      long long0 = TypeUtils.fnv1a_64_lower("+F:qo<Onj*]");
      assertEquals((-8627541223959899662L), long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(typeNotPresentException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.TypeNotPresentException: Type {e*:, not present
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("h\"Gg@0h]?lexy,4?D|5");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread("h\"Gg@0h]?lexy,4?D|5");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Class<JSONObject> class0 = JSONObject.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[0];
      Type type1 = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      LinkageError linkageError0 = new LinkageError();
      assertNotNull(linkageError0);
      assertEquals("java.lang.LinkageError", linkageError0.toString());
      assertNull(linkageError0.getMessage());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(classLoader2);
      
      classLoader2.setDefaultAssertionStatus(false);
      assertSame(classLoader2, classLoader1);
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, (Type) null);
      assertFalse(parameterizedTypeImpl1.equals((Object)parameterizedTypeImpl0));
      assertNotNull(parameterizedTypeImpl1);
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      assertNotNull(stackTraceElementDeserializer0);
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeUtils0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertEquals(1, class0.getModifiers());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
      
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Field field0 = null;
      boolean boolean1 = identityHashMap0.replace("toL", (Field) null, (Field) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Field field1 = ParserConfig.getFieldFromCache("vOB6", identityHashMap0);
      assertNull(field1);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized((Object) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie(",^", "vOB6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal cookie name
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = TypeUtils.isNumber("H4.&O8V]Hm}Y");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertNotNull(aSMDeserializerFactory2);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.clearDeserializers();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(28, map1.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMDeserializerFactory0.classLoader, (Type) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<DecimalFormat> class0 = DecimalFormat.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<Locale> class1 = Locale.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "kotlin.Metadata";
      Locale locale0 = TypeUtils.toLocale("kotlin.Metadata");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kotlin.metadata", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kotlin.metadata", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      long long0 = TypeUtils.fnv1a_64_lower("s-tgOm>F");
      assertEquals((-7483009773463040409L), long0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("RG{p");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: RG{p", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("RG{p", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      assertNotNull(optionalCodec0);
      assertEquals(12, optionalCodec0.getFastMatchToken());
      
      Double double0 = new Double((-7483009773463040409L));
      assertNotNull(double0);
      assertEquals((-7.48300977346304E18), (double)double0, 0.01);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(aSMClassLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.util.ASMClassLoader@1dfd3b61
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      ConcurrentHashMap<SQLDataException, InterruptedException> concurrentHashMap0 = new ConcurrentHashMap<SQLDataException, InterruptedException>(2);
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      
      InterruptedException interruptedException0 = new InterruptedException("\u0000.:yFf!Cf!;9pf");
      assertNotNull(interruptedException0);
      assertEquals("java.lang.InterruptedException: \u0000.:yFf!Cf!;9pf", interruptedException0.toString());
      assertEquals("\u0000.:yFf!Cf!;9pf", interruptedException0.getMessage());
      
      InterruptedException interruptedException1 = concurrentHashMap0.putIfAbsent(sQLDataException0, interruptedException0);
      assertNull(interruptedException1);
      assertFalse(concurrentHashMap0.isEmpty());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals("java.lang.InterruptedException: \u0000.:yFf!Cf!;9pf", interruptedException0.toString());
      assertEquals("\u0000.:yFf!Cf!;9pf", interruptedException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {java.sql.SQLDataException=java.lang.InterruptedException: \u0000.:yFf!Cf!;9pf}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setPackageAssertionStatus("not support type : ", true);
      Class<?> class0 = TypeUtils.loadClass("getMetaClass", classLoader0, false);
      assertNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      Point point0 = new Point((-1880563153), 3678080);
      assertNotNull(point0);
      assertEquals(3678080, point0.y);
      assertEquals((-1880563153), point0.x);
      assertEquals((-1.880563153E9), point0.getX(), 0.01);
      assertEquals(3678080.0, point0.getY(), 0.01);
      
      Point point1 = new Point(point0);
      assertTrue(point1.equals((Object)point0));
      assertNotNull(point1);
      assertEquals(3678080, point0.y);
      assertEquals((-1880563153), point0.x);
      assertEquals((-1880563153), point1.x);
      assertEquals(3678080, point1.y);
      assertEquals((-1.880563153E9), point0.getX(), 0.01);
      assertEquals(3678080.0, point0.getY(), 0.01);
      assertEquals(3678080.0, point1.getY(), 0.01);
      assertEquals((-1.880563153E9), point1.getX(), 0.01);
      
      Rectangle rectangle0 = new Rectangle(point1);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertNotNull(rectangle0);
      assertEquals(3678080, point0.y);
      assertEquals((-1880563153), point0.x);
      assertEquals((-1880563153), point1.x);
      assertEquals(3678080, point1.y);
      assertEquals(3678080, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals((-1880563153), rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals((-1.880563153E9), point0.getX(), 0.01);
      assertEquals(3678080.0, point0.getY(), 0.01);
      assertEquals(3678080.0, point1.getY(), 0.01);
      assertEquals((-1.880563153E9), point1.getX(), 0.01);
      assertEquals((-1.880563153E9), rectangle0.getCenterX(), 0.01);
      assertEquals(0.0, rectangle0.getWidth(), 0.01);
      assertEquals((-1.880563153E9), rectangle0.getMinX(), 0.01);
      assertEquals(3678080.0, rectangle0.getY(), 0.01);
      assertEquals((-1.880563153E9), rectangle0.getMaxX(), 0.01);
      assertEquals(3678080.0, rectangle0.getMaxY(), 0.01);
      assertEquals((-1.880563153E9), rectangle0.getX(), 0.01);
      assertEquals(3678080.0, rectangle0.getMinY(), 0.01);
      assertTrue(rectangle0.isEmpty());
      assertEquals(3678080.0, rectangle0.getCenterY(), 0.01);
      assertEquals(0.0, rectangle0.getHeight(), 0.01);
      
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[.S XD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
      
      MockThread mockThread0 = new MockThread("");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread("");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotNull(mockThread1);
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("C,L6+");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: C,L6+", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("C,L6+", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNotNull(interruptedException0);
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertNull(interruptedException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Object> class1 = Object.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class2 = Properties.class;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(classArray0, class1, class1);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) defaultJSONParser0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.parser.DefaultJSONParser, create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)30;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)30, (byte) (-51), (byte)30, (byte)95, (byte)30}, byteArray0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("Ljava.awt.Point");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create");
      assertFalse(boolean0);
      
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      String[] stringArray0 = new String[0];
      dateFormatSymbols0.setShortMonths(stringArray0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("NOT_BETWEEN", (String) null);
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      JSONType jSONType0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy1);
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertNotNull(list0);
      assertEquals(1, treeMap0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<?> class3 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet;", classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotSame(class3, class1);
      assertFalse(class3.equals((Object)class1));
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.util.concurrent.ConcurrentSkipListSet", class3.toString());
      assertFalse(class3.isEnum());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("Ljava.util.concurrent.ConcurrentSkipListSet;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.util.concurrent.ConcurrentSkipListSet;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      TreeMap<SQLInvalidAuthorizationSpecException, Method> treeMap0 = new TreeMap<SQLInvalidAuthorizationSpecException, Method>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Field> class1 = Field.class;
      String[] stringArray0 = new String[7];
      stringArray0[1] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[2] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[3] = "Ljava.awt.Point";
      stringArray0[4] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      stringArray0[5] = "Ljava.awt.Point";
      stringArray0[6] = "Ljava.util.concurrent.ConcurrentSkipListSet";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class2 = javaBeanSerializer0.getType();
      assertNotNull(class2);
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.reflect.Field", class2.toString());
      assertFalse(class2.isArray());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) null);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      MockThread mockThread0 = new MockThread("4K!C");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("4K!C", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      assertNotNull(optionalCodec0);
      assertEquals(12, optionalCodec0.getFastMatchToken());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Locale locale0 = TypeUtils.toLocale("\"}O");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("\"}o", locale0.getLanguage());
      assertEquals("\"}o", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("\"}o", locale0.toString());
      
      NumberFormatException numberFormatException1 = new NumberFormatException();
      assertFalse(numberFormatException1.equals((Object)numberFormatException0));
      assertNotNull(numberFormatException1);
      assertNull(numberFormatException1.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException1.toString());
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      Class<NumberFormatException> class1 = NumberFormatException.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      Class<Short> class3 = Short.class;
      int int0 = TypeUtils.getParserFeatures(class3);
      assertEquals(0, int0);
      
      long long1 = TypeUtils.fnv1a_64_lower("{e*:,");
      assertEquals((-8238509223355519181L), long1);
      
      boolean boolean0 = TypeUtils.isNumber("4K!C");
      assertFalse(boolean0);
      
      Class<JavaBeanDeserializer> class4 = JavaBeanDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class4, (Map<String, String>) treeMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "Ljava.awt.Point";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      String string1 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string2 = treeMap0.put("true", "2ZbLqRies2rq1w6X");
      assertNull(string2);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Double> class0 = Double.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      assertNotNull(javaBeanSerializer0);
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<InternalError>[] classArray0 = (Class<InternalError>[]) Array.newInstance(Class.class, 2);
      Class<InternalError> class2 = InternalError.class;
      classArray0[0] = class2;
      Class<InternalError> class3 = InternalError.class;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      Class<Boolean> class4 = Boolean.TYPE;
      assertNotNull(class4);
      assertEquals("boolean", class4.toString());
      assertFalse(class4.isAnnotation());
      assertTrue(class4.isPrimitive());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class3, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.lang.InternalError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      Class<Object> class1 = Object.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(classArray0, class1, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLIntegrityConstraintViolationException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@e1cb6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class1 = Properties.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      LinkedHashMap<NumberDeserializer, NoSuchFieldException> linkedHashMap0 = new LinkedHashMap<NumberDeserializer, NoSuchFieldException>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      BiConsumer<NumberDeserializer, Exception> biConsumer0 = (BiConsumer<NumberDeserializer, Exception>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.forEach(biConsumer0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(linkedHashMap0);
      assertNull(bigDecimal0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("4p");
      assertEquals(571464604563089609L, long0);
      
      Class<Properties> class0 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.Properties", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertFalse(class2.equals((Object)class1));
      assertNotNull(class2);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.Properties", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotSame(class1, class2);
      assertFalse(class1.equals((Object)class2));
      assertNotNull(class3);
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.Properties", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.util.Properties", class3.toString());
      
      Class<Byte> class4 = Byte.TYPE;
      assertNotNull(class4);
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertEquals("byte", class4.toString());
      assertFalse(class4.isSynthetic());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class4).when(genericArrayType0).getGenericComponentType();
      Class class5 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotSame(class5, class3);
      assertFalse(class5.equals((Object)class3));
      assertNotNull(class5);
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertEquals("byte", class4.toString());
      assertFalse(class4.isSynthetic());
      assertEquals("class [B", class5.toString());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals(1041, class5.getModifiers());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isInterface());
      assertFalse(class5.isAnnotation());
      assertTrue(class5.isArray());
      
      Class<ChronoLocalDate> class6 = ChronoLocalDate.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class6);
      assertNull(stringArray0);
      
      JavaBeanSerializer javaBeanSerializer0 = null;
      try {
        javaBeanSerializer0 = new JavaBeanSerializer(class4, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean0 = TypeUtils.isNumber("H4.&O8V]Hm}Y");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMDeserializerFactory1.classLoader);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory2);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      parserConfig0.clearDeserializers();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) parameterizedTypeImpl0, (PropertyNamingStrategy) null);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory2);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      Map<String, String> map1 = ZoneId.SHORT_IDS;
      assertNotNull(map1);
      assertEquals(28, map1.size());
      assertFalse(map1.isEmpty());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMClassLoader0, (Type) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Object> class1 = Object.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 1);
      Class<Properties> class2 = Properties.class;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(classArray0, class1, class1);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) defaultJSONParser0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.parser.DefaultJSONParser, create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ljava.util.concurrent.ConcurrentSkipListSet", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("/");
      assertNotNull(string0);
      assertEquals("/", string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      Class<Object> class2 = Object.class;
      Class<Object> class3 = Object.class;
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class4 = Properties.class;
      classArray0[0] = class4;
      Class<Properties> class5 = Properties.class;
      classArray0[1] = class5;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(classArray0, class2, class3);
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Collection collection0 = TypeUtils.createCollection(class1);
      assertSame(class1, class3);
      assertSame(class1, class2);
      assertNotNull(collection0);
      
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.util.concurrent.ConcurrentSkipListSet", "rm.DZ<aG4'", 13);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ljava.util.concurrent.ConcurrentSkipListSet", sQLFeatureNotSupportedException0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("rm.DZ<aG4'", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(13, sQLFeatureNotSupportedException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.sql.SQLFeatureNotSupportedException: Ljava.util.concurrent.ConcurrentSkipListSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-47);
      Class<?> class0 = TypeUtils.loadClass("+cRHK");
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Properties> class1 = Properties.class;
      parserConfig0.initJavaBeanDeserializers((Class<?>[]) null);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Type type0 = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class1, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "+cRHK", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      Short short0 = new Short((short)35);
      assertNotNull(short0);
      assertEquals((short)35, (short)short0);
      
      Time time0 = TypeUtils.castToSqlTime(short0);
      assertNotNull(time0);
      assertEquals("00:00:00", time0.toString());
      
      String string0 = "[C";
      Locale locale0 = TypeUtils.toLocale("[C");
      assertNotNull(locale0);
      assertEquals("[c", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("[c", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      String string1 = "Ljava.awt.Point";
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("Ljava.awt.Point");
      assertNotNull(mockIllegalArgumentException0);
      
      RuleBasedCollator ruleBasedCollator0 = (RuleBasedCollator)Collator.getInstance();
      assertNotNull(ruleBasedCollator0);
      assertEquals(0, ruleBasedCollator0.getDecomposition());
      assertEquals("='\u200B'=\u200C=\u200D=\u200E=\u200F=\u0000 =\u0001 =\u0002 =\u0003 =\u0004=\u0005 =\u0006 =\u0007 =\b ='\t'='\u000B' =\u000E=\u000F ='\u0010' =\u0011 =\u0012 =\u0013=\u0014 =\u0015 =\u0016 =\u0017 =\u0018=\u0019 =\u001A =\u001B =\u001C =\u001D=\u001E =\u001F ==\u0080 =\u0081 =\u0082 =\u0083 =\u0084 =\u0085=\u0086 =\u0087 =\u0088 =\u0089 =\u008A =\u008B=\u008C =\u008D =\u008E =\u008F =\u0090 =\u0091=\u0092 =\u0093 =\u0094 =\u0095 =\u0096 =\u0097=\u0098 =\u0099 =\u009A =\u009B =\u009C =\u009D=\u009E =\u009F;' ';'\u00A0';'\u2000';'\u2001';'\u2002';'\u2003';'\u2004';'\u2005';'\u2006';'\u2007';'\u2008';'\u2009';'\u200A';'\u3000';'\uFEFF';'\r' ;'\t' ;'\n';'\f';'\u000B';\u0301;\u0300;\u0306;\u0302;\u030C;\u030A;\u030D;\u0308;\u030B;\u0303;\u0307;\u0304;\u0337;\u0327;\u0328;\u0323;\u0332;\u0305;\u0309;\u030E;\u030F;\u0310;\u0311;\u0312;\u0313;\u0314;\u0315;\u0316;\u0317;\u0318;\u0319;\u031A;\u031B;\u031C;\u031D;\u031E;\u031F;\u0320;\u0321;\u0322;\u0324;\u0325;\u0326;\u0329;\u032A;\u032B;\u032C;\u032D;\u032E;\u032F;\u0330;\u0331;\u0333;\u0334;\u0335;\u0336;\u0338;\u0339;\u033A;\u033B;\u033C;\u033D;\u033E;\u033F;\u0342;\u0344;\u0345;\u0360;\u0361;\u0483;\u0484;\u0485;\u0486;\u20D0;\u20D1;\u20D2;\u20D3;\u20D4;\u20D5;\u20D6;\u20D7;\u20D8;\u20D9;\u20DA;\u20DB;\u20DC;\u20DD;\u20DE;\u20DF;\u20E0;\u20E1,'-';\u00AD;\u2010;\u2011;\u2012;\u2013;\u2014;\u2015;\u2212<'_'<\u00AF<','<';'<':'<'!'<\u00A1<'?'<\u00BF<'/'<'.'<\u00B4<'`'<'^'<\u00A8<'~'<\u00B7<\u00B8<'''<'\"'<\u00AB<\u00BB<'('<')'<'['<']'<'{'<'}'<\u00A7<\u00B6<\u00A9<\u00AE<'@'<\u00A4<\u0E3F<\u00A2<\u20A1<\u20A2<'$'<\u20AB<\u20AC<\u20A3<\u20A4<\u20A5<\u20A6<\u20A7<\u00A3<\u20A8<\u20AA<\u20A9<\u00A5<'*'<'\\'<'&'<'#'<'%'<'+'<\u00B1<\u00F7<\u00D7<'<'<'='<'>'<\u00AC<'|'<\u00A6<\u00B0<\u00B5<0<1<2<3<4<5<6<7<8<9<\u00BC<\u00BD<\u00BE<a,A<b,B<c,C<d,D<\u00F0,\u00D0<e,E<f,F<g,G<h,H<i,I<j,J<k,K<l,L<m,M<n,N<o,O<p,P<q,Q<r,R<s, S & SS,\u00DF<t,T& TH, \u00DE &TH, \u00FE <u,U<v,V<w,W<x,X<y,Y<z,Z&AE,\u00C6&AE,\u00E6&OE,\u0152&OE,\u0153", ruleBasedCollator0.getRules());
      assertEquals(2, ruleBasedCollator0.getStrength());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass(";Ljava/lang/reflect/Type;Ljava/lang/Object;)Ljava/lang/Object;");
      assertNull(class0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      TreeMap<SQLInvalidAuthorizationSpecException, Method> treeMap0 = new TreeMap<SQLInvalidAuthorizationSpecException, Method>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      HttpCookie httpCookie0 = new HttpCookie("K^LiY[b_eD^1#H^+{", "3M1J");
      assertNotNull(httpCookie0);
      assertNull(httpCookie0.getPortlist());
      assertFalse(httpCookie0.getSecure());
      assertEquals("K^LiY[b_eD^1#H^+{", httpCookie0.getName());
      assertFalse(httpCookie0.hasExpired());
      assertNull(httpCookie0.getCommentURL());
      assertNull(httpCookie0.getPath());
      assertFalse(httpCookie0.getDiscard());
      assertEquals("3M1J", httpCookie0.getValue());
      assertNull(httpCookie0.getComment());
      assertEquals((-1L), httpCookie0.getMaxAge());
      assertNull(httpCookie0.getDomain());
      assertEquals(1, httpCookie0.getVersion());
      assertFalse(httpCookie0.isHttpOnly());
      assertEquals("K^LiY[b_eD^1#H^+{=\"3M1J\"", httpCookie0.toString());
      
      String string0 = TypeUtils.castToString("3M1J");
      assertNotNull(string0);
      
      long long0 = TypeUtils.fnv1a_64("org.hibernate.Hibernate");
      assertEquals(4535901455746218809L, long0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException((String) null);
      assertNotNull(illegalMonitorStateException0);
      assertNull(illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertNotNull(mapDeserializer0);
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("N~sUnAS>=a'");
      assertEquals((-677488141645823828L), long0);
      
      Class<Properties> class0 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.Properties", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertFalse(class2.equals((Object)class1));
      assertNotNull(class2);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.Properties", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertNull(type0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.util.Properties", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Class<JSONPDeserializer> class3 = JSONPDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray0);
      
      long long1 = new Long((-677488141645823828L));
      assertTrue(long1 == long0);
      assertEquals((-677488141645823828L), long1);
      
      long long2 = TypeUtils.fnv1a_64_lower("kSZ");
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(4461735830430936787L, long2);
      
      Float float0 = new Float((float) 1727);
      assertNotNull(float0);
      assertEquals(1727.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = ",H%?Df.Uc>U-";
      Class<?> class1 = TypeUtils.loadClass(",H%?Df.Uc>U-");
      assertNull(class1);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string1 = treeMap0.put("weekdays", "AL[)$d<<");
      assertNull(string1);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Boolean> class2 = Boolean.TYPE;
      assertNotNull(class2);
      assertEquals("boolean", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fmL");
      assertFalse(boolean0);
      
      Class<StackTraceElement> class0 = StackTraceElement.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("com.alibaba.fastjson.JSONPath$Operator", classLoader0);
      assertNotNull(class1);
      assertEquals(16408, class1.getModifiers());
      assertEquals("class com.alibaba.fastjson.JSONPath$Operator", class1.toString());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("Ljava.awt.Point", identityHashMap0);
      assertNull(field0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Field field1 = ParserConfig.getFieldFromCache("4K!C", identityHashMap0);
      assertNull(field1);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Field field2 = ParserConfig.getFieldFromCache("rfv'P&+S", identityHashMap0);
      assertNull(field2);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.clearDeserializers();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) class0);
      assertNotNull(objectDeserializer0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(2, objectDeserializer0.getFastMatchToken());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) objectDeserializer0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.serializer.LongCodec@e0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<EnumDeserializer>[] classArray0 = (Class<EnumDeserializer>[]) Array.newInstance(Class.class, 3);
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      classArray0[0] = class1;
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = numberFormatException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("Ljava.awt.Point", numberFormatException0);
      assertNotNull(typeNotPresentException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertEquals("Type Ljava.awt.Point not present", typeNotPresentException0.getMessage());
      assertEquals("Ljava.awt.Point", typeNotPresentException0.typeName());
      assertEquals("java.lang.TypeNotPresentException: Type Ljava.awt.Point not present", typeNotPresentException0.toString());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      long long0 = TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeSupport");
      assertEquals(1461384724327545714L, long0);
      
      DataTruncation dataTruncation0 = new DataTruncation(1, true, false, 1, 30, typeNotPresentException0);
      assertNotNull(dataTruncation0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertEquals("Type Ljava.awt.Point not present", typeNotPresentException0.getMessage());
      assertEquals("Ljava.awt.Point", typeNotPresentException0.typeName());
      assertEquals("java.lang.TypeNotPresentException: Type Ljava.awt.Point not present", typeNotPresentException0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertEquals("Type Ljava.awt.Point not present", typeNotPresentException0.getMessage());
      assertEquals("Ljava.awt.Point", typeNotPresentException0.typeName());
      assertEquals("java.lang.TypeNotPresentException: Type Ljava.awt.Point not present", typeNotPresentException0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      String string0 = linkedHashMap0.put("x?nD~!<O}4^ho/", "_EQPVho_sPy");
      assertNull(string0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      
      Class<Long> class1 = Long.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toJdbc");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertNull(calendar0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("Unknown", jSONReaderScanner0.tokenName());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("_EQPVho_sPy");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      assertNotNull(treeMap1);
      assertEquals(0, treeMap1.size());
      
      Field field0 = ParserConfig.getFieldFromCache("Ljava.util.concurrent.ConcurrentSkipListMap", treeMap1);
      assertNull(field0);
      assertEquals(0, treeMap1.size());
      
      Field field1 = ParserConfig.getFieldFromCache("L", treeMap1);
      assertNull(field1);
      assertEquals(0, treeMap1.size());
      
      Field field2 = ParserConfig.getFieldFromCache("tu", treeMap1);
      assertNull(field2);
      assertEquals(0, treeMap1.size());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      java.util.IdentityHashMap<DecimalFormat, DecimalFormat> identityHashMap0 = new java.util.IdentityHashMap<DecimalFormat, DecimalFormat>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertNotNull(gridBagConstraints0);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.ipady);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) gridBagConstraints0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.GridBagConstraints@7bc2c92c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      TreeMap<SQLInvalidAuthorizationSpecException, Method> treeMap0 = new TreeMap<SQLInvalidAuthorizationSpecException, Method>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      JSONPDeserializer jSONPDeserializer0 = TypeUtils.cast((Object) null, class1, parserConfig0);
      assertNull(jSONPDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      
      String string0 = TypeUtils.castToString(imageCapabilities0);
      assertNotNull(string0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      
      long long0 = TypeUtils.fnv1a_64("org.apache.ibatis.javassist.util.proxy.ProxyObject");
      assertEquals(211339709948662370L, long0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("U@");
      assertNotNull(illegalMonitorStateException0);
      assertEquals("U@", illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException: U@", illegalMonitorStateException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava.util.concurrent.ConcurrentSkipListSet\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      String string0 = "_EQPVho_sPy";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_EQPVho_sPy");
      assertFalse(boolean0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = Float.max(Float.POSITIVE_INFINITY, 0.0F);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      Short short0 = TypeUtils.castToShort(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("true", "fg[/LI~+<]lvM$+");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class0, (Type) null, propertyNamingStrategy0);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      Class<?> class1 = JavaBeanInfo.getBuilderClass((JSONType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      TreeMap treeMap1 = (TreeMap)TypeUtils.castToJavaBean((Object) treeMap0, class2);
      assertNotNull(treeMap1);
      assertEquals(1, treeMap0.size());
      assertEquals(1, treeMap1.size());
      
      Hashtable<InternalError, PropertyNamingStrategy> hashtable1 = new Hashtable<InternalError, PropertyNamingStrategy>();
      assertNotNull(hashtable1);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(">Nk2}_D_2IP");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: >Nk2}_D_2IP", sQLTimeoutException0.toString());
      assertEquals(">Nk2}_D_2IP", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("byteValue");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("byteValue", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: byteValue", sQLIntegrityConstraintViolationException0.toString());
      
      Throwable[] throwableArray0 = sQLIntegrityConstraintViolationException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("byteValue", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: byteValue", sQLIntegrityConstraintViolationException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-100722682));
      assertNotNull(atomicInteger0);
      assertEquals((-1.00722682E8), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-100722682L), atomicInteger0.longValue());
      assertEquals((short)6150, atomicInteger0.shortValue());
      assertEquals((-100722682), atomicInteger0.get());
      assertEquals((-100722682), atomicInteger0.intValue());
      assertEquals("-100722682", atomicInteger0.toString());
      assertEquals((byte)6, atomicInteger0.byteValue());
      assertEquals((-1.0072268E8F), atomicInteger0.floatValue(), 0.01F);
      
      int int0 = atomicInteger0.getAndIncrement();
      assertEquals((-100722682), int0);
      assertEquals((-1.00722681E8), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-100722681), atomicInteger0.intValue());
      assertEquals((-100722681L), atomicInteger0.longValue());
      assertEquals((short)6151, atomicInteger0.shortValue());
      assertEquals((-100722681), atomicInteger0.get());
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals("-100722681", atomicInteger0.toString());
      assertEquals((-1.0072268E8F), atomicInteger0.floatValue(), 0.01F);
      
      Boolean boolean0 = TypeUtils.castToBoolean(atomicInteger0);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals((-1.00722681E8), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-100722681), atomicInteger0.intValue());
      assertEquals((-100722681L), atomicInteger0.longValue());
      assertEquals((short)6151, atomicInteger0.shortValue());
      assertEquals((-100722681), atomicInteger0.get());
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals("-100722681", atomicInteger0.toString());
      assertEquals((-1.0072268E8F), atomicInteger0.floatValue(), 0.01F);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      mockThread0.run();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Field field0 = ParserConfig.getFieldFromCache("[", hashtable0);
      assertNull(field0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      LinkedHashSet<IllegalArgumentException> linkedHashSet0 = new LinkedHashSet<IllegalArgumentException>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.JSONPath$Operator", classLoader0);
      assertNotNull(class0);
      assertEquals("class com.alibaba.fastjson.JSONPath$Operator", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isSynthetic());
      assertEquals(16408, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertEquals((-1.00722681E8), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-100722681), atomicInteger0.intValue());
      assertEquals((-100722681L), atomicInteger0.longValue());
      assertEquals((short)6151, atomicInteger0.shortValue());
      assertEquals((-100722681), atomicInteger0.get());
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals("-100722681", atomicInteger0.toString());
      assertEquals((-1.0072268E8F), atomicInteger0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      Class<Properties> class1 = Properties.class;
      classArray0[0] = class1;
      Class<?> class2 = TypeUtils.loadClass("Ljava.awt.Point", (ClassLoader) aSMClassLoader0);
      assertNull(class2);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Integer integer0 = TypeUtils.castToInt(double0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("LjaVva.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      Boolean boolean0 = new Boolean("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      long long0 = TypeUtils.fnv1a_64("list_item");
      assertEquals((-442547612217393039L), long0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("Ydt  x5n");
      assertNotNull(illegalMonitorStateException0);
      assertEquals("Ydt  x5n", illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException: Ydt  x5n", illegalMonitorStateException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.util.concurrent.ConcurrentSkipListSet", illegalMonitorStateException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("Ydt  x5n", illegalMonitorStateException0.getMessage());
      assertEquals("java.lang.IllegalMonitorStateException: Ydt  x5n", illegalMonitorStateException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ljava.util.concurrent.ConcurrentSkipListSet", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      long long1 = TypeUtils.fnv1a_64_lower("r<AcMgM0");
      assertFalse(long1 == long0);
      assertEquals(6670572585272939446L, long1);
      
      Random.setNextRandom(3600000);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Point");
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Properties> class1 = Properties.class;
      classArray0[0] = class1;
      Class<Properties> class2 = Properties.class;
      classArray0[1] = class2;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("6mmMlOY9|`05KM");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("6mmMlOY9|`05KM", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 6mmMlOY9|`05KM", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      Throwable[] throwableArray0 = sQLIntegrityConstraintViolationException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("6mmMlOY9|`05KM", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 6mmMlOY9|`05KM", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fastjson.parser.autoTypeAccept", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("6mmMlOY9|`05KM", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 6mmMlOY9|`05KM", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: fastjson.parser.autoTypeAccept", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-521), 2, 0, (-889275714), (-521));
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-521,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-889275714,HOUR_OF_DAY=-889275714,MINUTE=-521,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      java.sql.Date date0 = TypeUtils.castToSqlDate(mockGregorianCalendar0);
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-521,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-889275714,HOUR_OF_DAY=-889275714,MINUTE=-521,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.awt.Point");
      assertEquals((-5733317832858507079L), long0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.text.MockDateFormat@63def880
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      String string0 = treeMap0.put("true", "fg[/LI~+<]lvM$+");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class0, (Type) null, propertyNamingStrategy0);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      Class<?> class1 = JavaBeanInfo.getBuilderClass((JSONType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      TreeMap treeMap1 = (TreeMap)TypeUtils.castToJavaBean((Object) treeMap0, class2);
      assertNotNull(treeMap1);
      assertEquals(1, treeMap0.size());
      assertEquals(1, treeMap1.size());
      
      Hashtable<InternalError, PropertyNamingStrategy> hashtable1 = new Hashtable<InternalError, PropertyNamingStrategy>();
      assertNotNull(hashtable1);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(">Nk2}_D_2IP");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: >Nk2}_D_2IP", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(">Nk2}_D_2IP", sQLTimeoutException0.getMessage());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("byteValue");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: byteValue", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("byteValue", sQLIntegrityConstraintViolationException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("true", (Throwable) null);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: true", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("true", sQLFeatureNotSupportedException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : in
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-100722682));
      assertNotNull(atomicInteger0);
      assertEquals((-1.00722682E8), atomicInteger0.doubleValue(), 0.01);
      assertEquals("-100722682", atomicInteger0.toString());
      assertEquals((-100722682), atomicInteger0.intValue());
      assertEquals((byte)6, atomicInteger0.byteValue());
      assertEquals((-100722682), atomicInteger0.get());
      assertEquals((-1.0072268E8F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((short)6150, atomicInteger0.shortValue());
      assertEquals((-100722682L), atomicInteger0.longValue());
      
      int int0 = atomicInteger0.getAndIncrement();
      assertEquals((-100722682), int0);
      assertEquals((-1.00722681E8), atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals((-1.0072268E8F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-100722681), atomicInteger0.intValue());
      assertEquals("-100722681", atomicInteger0.toString());
      assertEquals((short)6151, atomicInteger0.shortValue());
      assertEquals((-100722681), atomicInteger0.get());
      assertEquals((-100722681L), atomicInteger0.longValue());
      
      Boolean boolean0 = TypeUtils.castToBoolean(atomicInteger0);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals((-1.00722681E8), atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)7, atomicInteger0.byteValue());
      assertEquals((-1.0072268E8F), atomicInteger0.floatValue(), 0.01F);
      assertEquals((-100722681), atomicInteger0.intValue());
      assertEquals("-100722681", atomicInteger0.toString());
      assertEquals((short)6151, atomicInteger0.shortValue());
      assertEquals((-100722681), atomicInteger0.get());
      assertEquals((-100722681L), atomicInteger0.longValue());
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      mockThread0.run();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      LinkedHashSet<IllegalArgumentException> linkedHashSet0 = new LinkedHashSet<IllegalArgumentException>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.JSONPath$Operator", classLoader0);
      assertNotNull(class0);
      assertEquals("class com.alibaba.fastjson.JSONPath$Operator", class0.toString());
      assertEquals(16408, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      
      DataTruncation dataTruncation0 = new DataTruncation((-100722682), true, false, (-100722682), 122);
      assertNotNull(dataTruncation0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONPath$Operator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class0 = TypeUtils.getClassFromMapping("getConstructors");
      assertNull(class0);
      
      boolean boolean2 = TypeUtils.isKotlin((Class) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      long long0 = TypeUtils.fnv1a_64("getConstructors");
      assertEquals(5290351439632455178L, long0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      boolean boolean3 = TypeUtils.isGenericParamType((Type) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Class<PropertyProcessableDeserializer> class2 = PropertyProcessableDeserializer.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      TypeUtils.clearClassMapping();
      Class<BitSet> class3 = BitSet.class;
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class3, class4);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("true", "fg[/LI~+<]lvM$+");
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      String string1 = weakHashMap0.getOrDefault("true", "com.alibaba.fastjson.serializer.ToStringSerializer");
      assertNotNull(string1);
      assertEquals("fg[/LI~+<]lvM$+", string1);
      
      String string2 = "";
      String string3 = weakHashMap0.put("[float", "");
      assertNull(string3);
      
      String string4 = weakHashMap0.get("com.alibaba.fastjson.serializer.ToStringSerializer");
      assertNull(string4);
      
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      
      String string5 = ")Pl1?l{7)ma";
      Class<?> class1 = TypeUtils.loadClass(")");
      assertNull(class1);
      
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.getDeserializer((Type) class0);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      
      Class<MockDate> class2 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) objectDeserializer0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ljava.awt.Point");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Properties>[] classArray0 = (Class<Properties>[]) Array.newInstance(Class.class, 2);
      classArray0[1] = classArray0[0];
      LinkageError linkageError0 = new LinkageError();
      assertNotNull(linkageError0);
      assertNull(linkageError0.getMessage());
      assertEquals("java.lang.LinkageError", linkageError0.toString());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("tE[kity1+#", linkageError0);
      assertNotNull(typeNotPresentException0);
      assertNull(linkageError0.getMessage());
      assertEquals("java.lang.LinkageError", linkageError0.toString());
      assertEquals("tE[kity1+#", typeNotPresentException0.typeName());
      assertEquals("java.lang.TypeNotPresentException: Type tE[kity1+# not present", typeNotPresentException0.toString());
      assertEquals("Type tE[kity1+# not present", typeNotPresentException0.getMessage());
      
      Class<Byte> class1 = Byte.TYPE;
      assertNotNull(class1);
      assertEquals("byte", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeNotPresentException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.TypeNotPresentException: Type tE[kity1+# not present
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      boolean boolean0 = TypeUtils.isKotlin((Class) null);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      assertNotNull(javaBeanSerializer0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory((ClassLoader) null);
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory2);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("fastjson.parser.deny", "fastjson.parser.autoTypeSupport", "fastjson.parser.autoTypeAccept", (-3602));
      assertNotNull(stackTraceElement0);
      assertEquals((-3602), stackTraceElement0.getLineNumber());
      assertEquals("fastjson.parser.autoTypeSupport", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("fastjson.parser.autoTypeAccept", stackTraceElement0.getFileName());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getClassName());
      assertEquals("fastjson.parser.deny.fastjson.parser.autoTypeSupport(fastjson.parser.autoTypeAccept)", stackTraceElement0.toString());
      
      Class<?> class2 = TypeUtils.loadClass("fastjson.parser.autoTypeAccept", (ClassLoader) aSMDeserializerFactory1.classLoader, false);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory2);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertNull(class2);
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      aSMDeserializerFactory2.classLoader.setPackageAssertionStatus("fastjson.parser.autoTypeSupport", true);
      assertNotSame(aSMDeserializerFactory2, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory2, aSMDeserializerFactory0);
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("getTimeInMillis");
      assertNotNull(illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException: getTimeInMillis", illegalMonitorStateException0.toString());
      assertEquals("getTimeInMillis", illegalMonitorStateException0.getMessage());
      
      DataTruncation dataTruncation0 = new DataTruncation((-1970976428), false, false, 29, (-1970976428), illegalMonitorStateException0);
      assertNotNull(dataTruncation0);
      assertEquals("java.lang.IllegalMonitorStateException: getTimeInMillis", illegalMonitorStateException0.toString());
      assertEquals("getTimeInMillis", illegalMonitorStateException0.getMessage());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
