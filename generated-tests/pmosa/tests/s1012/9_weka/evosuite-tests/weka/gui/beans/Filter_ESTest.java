/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 22:57:45 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Checkbox;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.event.ContainerListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.beans.EventSetDescriptor;
import java.beans.PropertyChangeListener;
import java.beans.beancontext.BeanContextChildSupport;
import java.beans.beancontext.BeanContextSupport;
import java.util.Locale;
import javax.swing.JComponent;
import javax.swing.plaf.synth.SynthOptionPaneUI;
import javax.swing.text.AttributeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.AbstractAssociator;
import weka.associations.Apriori;
import weka.associations.FPGrowth;
import weka.associations.FilteredAssociator;
import weka.core.BinarySparseInstance;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("C{5y-0bqp]");
      filter0.stop();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("C{5y-0bqp]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Logger logger0 = saver0.m_logger;
      filter0.setLog((Logger) null);
      filter0.addTestSetListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-1), (-1), 0, (-1));
      trainingSetEvent0.m_maxSetNumber = (-1196);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.useDefaultVisual();
      filter0.useDefaultVisual();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.addTrainingSetListener(appender0);
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, 0, 0);
      testSetEvent0.m_testSet = null;
      filter0.acceptTestSet(testSetEvent0);
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      filter0.stop();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("RvE&rcmu~+");
      assertFalse(boolean0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      BeanVisual beanVisual0 = filter0.getVisual();
      filter0.getWrappedAlgorithm();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      beanVisual0.repaint(0, 0, 0, 1066);
      Locale locale0 = Locale.FRANCE;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener2 = AWTEventMulticaster.remove(containerListener0, containerListener1);
      locale0.getDisplayScript();
      ContainerListener containerListener3 = AWTEventMulticaster.add(containerListener2, containerListener2);
      classAssigner0.removeContainerListener(containerListener3);
      JComponent.setDefaultLocale(locale0);
      filter0.removeInstanceListener(classAssigner0);
      boolean boolean0 = filter0.connectionAllowed("J@R1\"1@7OgDhwE5G");
      assertTrue(boolean0);
      
      filter0.setVisual(beanVisual0);
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setSize((-38), (-231));
      boolean boolean0 = filter0.connectionAllowed("lGk8D])`9'`=498");
      boolean boolean1 = filter0.eventGeneratable("-,6OS]xD.,6SI");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = "HZWsp'=#H>~s";
      filter0.eventGeneratable("HZWsp'=#H>~s");
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("HZWsp'=#H>~s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener1);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add(inputMethodListener2, inputMethodListener2);
      filter0.removeInputMethodListener(inputMethodListener3);
      Sorter sorter0 = new Sorter();
      Cursor cursor0 = Cursor.getDefaultCursor();
      sorter0.setCursor(cursor0);
      sorter0.isPaintingTile();
      filter0.removeDataSourceListener(sorter0);
      filter0.removeTrainingSetListener(sorter0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      crossValidationFoldMaker0.validate();
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      filter0.isBusy();
      filter0.stop();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      TestSetEvent testSetEvent0 = new TestSetEvent(attributeSummarizer0, (Instances) null, 0, 0);
      filter0.acceptTestSet(testSetEvent0);
      Add add0 = substringLabeler0.m_addFilter;
      // Undeclared exception!
      try { 
        filter0.setFilter((weka.filters.Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification("KRvWQ/-DNXXl#S,vofv", "KRvWQ/-DNXXl#S,vofv");
      boolean boolean0 = filter0.eventGeneratable("KRvWQ/-DNXXl#S,vofv");
      assertFalse(boolean0);
      
      Classifier classifier0 = new Classifier();
      filter0.addInstanceListener(classifier0);
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      filter0.useDefaultVisual();
      filter0.removeInstanceListener(classifier0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("ials");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ials not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      filter0.invalidate();
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      filter0.addNotify();
      filter0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      filter0.stop();
      filter0.getVisual();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.acceptInstance(instanceEvent0);
      filter0.setCustomName("@,<l3?C_p>s");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      MetaBean metaBean0 = new MetaBean();
      filter0.connectionNotification("HZWsp'=#H>~s", metaBean0);
      filter0.enumerateRequests();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.setFilter(stratifiedRemoveFolds0);
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFocusListeners();
      filter0.globalInfo();
      BeanVisual beanVisual0 = filter0.getVisual();
      filter0.useDefaultVisual();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      beanVisual0.removeContainerListener((ContainerListener) null);
      filter0.addConfigurationListener(configurationListener0);
      Loader loader0 = new Loader();
      BeanContextSupport beanContextSupport0 = new BeanContextSupport();
      loader0.m_bcSupport = (BeanContextChildSupport) beanContextSupport0;
      loader0.getHierarchyBoundsListeners();
      loader0.getStructure("J. E. Dennis and R. B. Schnabel");
      ManhattanDistance manhattanDistance0 = new ManhattanDistance((Instances) null);
      filter0.disconnectionNotification("weka/gui/beans/icons/", manhattanDistance0);
      filter0.getCustomName();
      filter0.getCustomName();
      TextViewer textViewer0 = new TextViewer();
      filter0.removeTestSetListener(textViewer0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.connectionNotification("ioiW8#ZY*!UBe?&(", nominalToBinary0);
      filter0.stop();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.setWrappedAlgorithm(stratifiedRemoveFolds0);
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      filter0.connectionNotification("ioiW8#ZY*!UBe?&(", "ioiW8#ZY*!UBe?&(");
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.stop();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      filter0.addDataSourceListener(trainingSetMaker0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("ioiW8#ZY*!UBe?&(", instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(instanceEvent0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesNoClass();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, 1302, 1302);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.connectionNotification("ioiW8#ZY*!UBe?&(", nominalToBinary0);
      boolean boolean0 = filter0.eventGeneratable("ioiW8#ZY*!UBe?&(");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, instances0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(costBenefitAnalysis0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.disconnectionNotification(".bsi", scatterPlotMatrix0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(instanceEvent0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.connectionNotification("ioiW8#ZY*!UBe?&(", nominalToBinary0);
      filter0.connectionNotification("ioiW8#ZY*!UBe?&(", "ioiW8#ZY*!UBe?&(");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      filter0.connectionNotification("ioiW8#ZY*!UBe?&(", classifierPerformanceEvaluator0);
      boolean boolean0 = filter0.eventGeneratable("ioiW8#ZY*!UBe?&(");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Clusterer clusterer0 = new Clusterer();
      filter0.connectionNotification("ioiW58#ZY*!UBe?&(", clusterer0);
      boolean boolean0 = filter0.eventGeneratable("ioiW58#ZY*!UBe?&(");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0);
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.addTestSetListener(classifier0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(testSetEvent0, instances0, 1000, 1, 194, 1000);
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.addTestSetListener(classifier0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      GraphViewer graphViewer0 = new GraphViewer();
      CoverTree coverTree0 = new CoverTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        coverTree0.kNearestNeighbours(binarySparseInstance0, (-375));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("ioi#rY*,UBe(", "ioi#rY*,UBe(");
      Thread thread0 = MockThread.currentThread();
      filter0.m_filterThread = thread0;
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      filter0.setComponentOrientation(componentOrientation0);
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}{T@{^(O");
      Filter filter0 = new Filter();
      ThreadGroup threadGroup0 = new ThreadGroup("}{T@{^(O");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "}{T@{^(O", 465L);
      filter0.m_filterThread = (Thread) mockThread0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      filter0.getPropertyChangeListeners();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getAncestorListeners();
      filter0.addTrainingSetListener(classAssigner0);
      filter0.addTestSetListener(classAssigner0);
      filter0.addDataSourceListener(classAssigner0);
      filter0.getWrappedAlgorithm();
      filter0.removeInstanceListener(classAssigner0);
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.connectionNotification("instance", saver0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getVetoableChangeListeners();
      filter0.addInstanceListener(filter0);
      filter0.firePropertyChange("p6rU.lsr", '>', '>');
      filter0.getCustomName();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p6rU.lsr");
      Checkbox checkbox0 = null;
      try {
        checkbox0 = new Checkbox();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      SynthOptionPaneUI synthOptionPaneUI0 = new SynthOptionPaneUI();
      SynthOptionPaneUI.createUI(associator0);
      associator0.addPropertyChangeListener("J<", (PropertyChangeListener) synthOptionPaneUI0);
      associator0.firePropertyChange("J<", (byte)0, (byte)0);
      BeanVisual beanVisual0 = associator0.getVisual();
      filter0.setVisual(beanVisual0);
      filter0.removeDataSourceListener((DataSourceListener) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.disconnectionNotification("Vn@F}5W:=[{\"r3k!", beanVisual0);
      filter0.addDataSourceListener(associator0);
      filter0.removeInstanceListener((InstanceListener) null);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(instances0, instances0);
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "   * filters a single row\n");
      filter0.setFilter(multiFilter0);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      appender0.getVetoableChangeListeners();
      filter0.acceptInstance(instanceEvent0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.removeTestSetListener(appender0);
      filter0.stop();
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      logPanel0.putClientProperty(multiFilter0, filter0);
      filter0.setFilter(multiFilter0);
      filter0.setLog(logPanel0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus((-1));
      filter0.acceptInstance(instanceEvent0);
      GraphViewer graphViewer0 = new GraphViewer();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      classAssigner0.addInputMethodListener((InputMethodListener) null);
      DataSetEvent dataSetEvent0 = new DataSetEvent(graphViewer0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Filter filter0 = new Filter();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      filter0.setFilter(stratifiedRemoveFolds0);
      filter0.setLog(logPanel0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("StratifiedRemoveFolds", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      logPanel0.putClientProperty(multiFilter0, filter0);
      filter0.setFilter(multiFilter0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus((-1));
      filter0.acceptInstance(instanceEvent0);
      GraphViewer graphViewer0 = new GraphViewer();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = filter0.eventGeneratable("NA7h^Vu4eT=O%sJ*u");
      assertEquals("MultiFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = new Filter();
      filter0.setFilter(multiFilter0);
      Sorter sorter0 = new Sorter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Logger logger0 = sorter0.m_log;
      filter0.setLog((Logger) null);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      InstanceEvent instanceEvent1 = flowByExpression0.m_ie;
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }
}
