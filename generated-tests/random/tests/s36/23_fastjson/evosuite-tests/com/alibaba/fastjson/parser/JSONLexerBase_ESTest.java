/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:58:18 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.StringReader;
import java.util.Collection;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'x';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 39);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~XWj%");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3M,[tS-wM");
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('i');
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("scan false error");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1644);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('K');
      assertEquals(1644, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}+&l=&Y-BW*]5X5");
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new");
      jSONScanner0.close();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2376);
      jSONReaderScanner0.token = 1359;
      int int0 = jSONReaderScanner0.token();
      assertEquals(1359, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4");
      jSONReaderScanner0.stringVal();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8+q ", (-3045));
      String string0 = jSONScanner0.scanString('y');
      assertNotNull(string0);
      assertEquals((-3045), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.putChar(';');
      String string0 = jSONScanner0.numberString();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("n", string0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.next();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 91);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[8];
      jSONScanner0.matchField2(charArray0);
      assertEquals(91, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set", 177);
      jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(177, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2376);
      jSONReaderScanner0.subString(1359, 1359);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L<'Pn9E6vBOq@|", 29);
      jSONReaderScanner0.scanUUID('2');
      assertEquals(29, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new", 74);
      int int0 = jSONScanner0.scanType((String) null);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(74, jSONScanner0.getFeatures());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256, 119);
      jSONReaderScanner0.scanInt('!');
      assertEquals(119, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8+q ", (-3045));
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-3045), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9KEcTS0&Xv");
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 4);
      jSONScanner0.scanDecimal('4');
      assertEquals(4, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set", 177);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('%');
      assertEquals(177, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanBoolean(']');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ", 125);
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('7');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27, 27);
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"JF(iE`R=R0YE", 95);
      Object[] objectArray0 = new Object[8];
      jSONReaderScanner0.lexError("NaN", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D:<?{;EZtSH;IOa#", (-1073));
      boolean boolean0 = jSONReaderScanner0.isEnabled((-2379), (-2379));
      assertTrue(boolean0);
      assertEquals((-1073), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 281);
      jSONReaderScanner0.indexOf('R', 1307);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set", 177);
      jSONReaderScanner0.charAt(39);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(177, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-2), 58);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zvFb?UfK {/|", (-24));
      jSONReaderScanner0.bp = 4096;
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 1792);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8+q ", (-3045));
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120);
      jSONReaderScanner0.charAt(120);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      jSONReaderScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nan", (-1382));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-1382));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" a", 518);
      jSONReaderScanner0.isBlankInput();
      assertEquals(518, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace(':');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isBlankInput();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("72l}x_a?*VB$", 116);
      jSONScanner0.scanNumber();
      assertEquals('l', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9KEcTS0&Xv");
      jSONReaderScanner0.info();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error");
      SymbolTable symbolTable0 = new SymbolTable(1558);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      long long0 = jSONScanner0.longValue();
      assertEquals(603296L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error");
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new");
      jSONScanner0.scanNumber();
      assertEquals('r', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SpS^ue0;#bLhnk%");
      jSONScanner0.scanNumber();
      assertEquals('p', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256, 119);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55, 569);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{0'.d.", 822);
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(822, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 4);
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(4, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = JSONLexerBase.readString(charArray0, 4);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken((-2973));
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextIdent();
      boolean boolean0 = jSONScanner0.scanBoolean(']');
      assertEquals(7, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 91);
      jSONScanner0.scanFalse();
      assertEquals(91, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteEnumUsingName");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanNullOrNew();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 256, 119);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" a", 518);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('^');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3324);
      jSONReaderScanner0.scanUUID('M');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{0'.d.", 822);
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 591, 591);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nan", (-1382));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('e');
      assertEquals((-1382), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 125);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('h');
      assertEquals(125, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4096);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 's';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4096);
      jSONReaderScanner0.scanDate('6');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52429, 52429);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('d');
      assertEquals(52429, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("scan false error");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1644);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120, 120);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27, 27);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41, 41);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(41, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9KEcTS0&Xv");
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3M,[tS-wM");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      char[] charArray0 = new char[1];
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D:<?{;EZtSH;IOa#", (-1073));
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{0'.d.", 822);
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mgtau#k");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9)YCx");
      jSONScanner0.scanDecimal(']');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A6Z5z>u *", 118);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanDecimal('Z');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3M,[tS-wM");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('c');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"JF(iE`R=R0YE", 95);
      jSONReaderScanner0.scanDouble('V');
      assertEquals(95, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      double double0 = jSONReaderScanner0.scanDouble('5');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3578, 3578);
      float float0 = jSONReaderScanner0.scanFloat('n');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(3578, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9KEcTS0&Xv");
      jSONReaderScanner0.scanFloat('m');
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('5');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8+q ", (-3045));
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{0'.d.", 822);
      char[] charArray0 = new char[7];
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8+q ", (-3045));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('8');
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D:<?{;EZtSH;IOa#", (-1073));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('N');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("72l}x_a?*VB$", 116);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('');
      assertEquals(72L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, 16);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('T');
      assertEquals(16, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 115);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char", 2461);
      char[] charArray0 = new char[1];
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set", 177);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(177, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Jcw.\"B");
      char[] charArray0 = new char[8];
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52429, 52429);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ysEl!uBx^4O.;UI<", 50);
      int int0 = jSONReaderScanner0.scanInt('W');
      assertEquals(0, int0);
      assertEquals(50, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1721, 93);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0l+,L3{H=#+].qK");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mgtau#k");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3324);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55, 569);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%GG?F", (-1031));
      jSONScanner0.scanStringArray((Collection<String>) null, '%');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{0'.d.", 822);
      char[] charArray0 = new char[7];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zvFb?UfK {/|", (-24));
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char", 2461);
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanStringArray(collection0, 'Q');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9KEcTS0&Xv");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1352, 1352);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(47);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '!');
      assertEquals(1352, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 58);
      char[] charArray0 = new char[8];
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 281);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('.');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yyyy-MM-dd HH:mm:ss", 760);
      char[] charArray0 = new char[4];
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1352, 1352);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-m1f.i%usal#Z$A*p", 1);
      char[] charArray0 = new char[6];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(boolean0);
      assertEquals(1, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{0'.d.", 822);
      int int0 = jSONReaderScanner0.scanType("{0'.d.");
      assertEquals(822, jSONReaderScanner0.getFeatures());
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xl");
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", (-5399));
      jSONScanner0.scanIdent();
      int int0 = jSONScanner0.intValue();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(4098, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[4] = '\\';
      charArray0[5] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 10);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : ^
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 10);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[4] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 10);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-m1f.i%usal#Z$A*p", 1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8z");
      jSONScanner0.nextToken(16);
      assertEquals('z', jSONScanner0.getCurrent());
      
      String string0 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals("z", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'Z';
      charArray0[2] = '_';
      charArray0[3] = '9';
      charArray0[4] = 'V';
      charArray0[5] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1721, 93);
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(93);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VhHhB{k$<!l", 304);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '<');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91);
      SymbolTable symbolTable0 = new SymbolTable(91);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'f');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error");
      SymbolTable symbolTable0 = new SymbolTable(1558);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      jSONScanner0.scanSymbol(symbolTable0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"JF(iE`R=R0YE", 95);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ygc");
      boolean boolean0 = jSONScanner0.isEnabled(32, 32);
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ysEl!uBx^4O.;UI<", 50);
      boolean boolean0 = jSONReaderScanner0.isEnabled(1407, Integer.MIN_VALUE);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(50, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1721, 93);
      boolean boolean0 = jSONReaderScanner0.isEnabled(22, 22);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(93, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".=:6M +Kg>S;98uc");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : .pos 0, json : .=:6M +Kg>S;98uc
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D:<?{;EZtSH;IOa#", (-1073));
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONReaderScanner0.config(feature0, true);
      assertEquals((-1073), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nan", 9);
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      jSONScanner0.config(feature0, false);
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L<'Pn9E6vBOq@|", 29);
      jSONReaderScanner0.np = 29;
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(29, jSONReaderScanner0.getFeatures());
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.", 1840);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.integerValue();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("%GG?F", (-1031));
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_+n(O_!&{eX2}RPX", (-5639));
      jSONReaderScanner0.nextIdent();
      assertEquals('+', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, 16);
      jSONReaderScanner0.nextToken(16);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new");
      jSONReaderScanner0.nextToken(12);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3324);
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 126);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{0'.d.", 822);
      jSONReaderScanner0.nextToken((-2504));
      assertEquals(12, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed string : ", (-752));
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-752));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nan", 9);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny", 1406);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1406);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", (-752));
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 115, 115);
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-m1f.i%usal#Z$A*p", 1);
      jSONReaderScanner0.nextToken(1);
      assertEquals('m', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      jSONScanner0.nextToken((-1));
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("53t)2JKOo46PhyOqxd", (-483));
      jSONScanner0.scanIdent();
      jSONScanner0.nextIdent();
      assertEquals('2', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 2118066063);
      jSONScanner0.nextIdent();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9KEcTS0&Xv");
      jSONReaderScanner0.nextToken();
      assertEquals(2, jSONReaderScanner0.token());
      
      float float0 = jSONReaderScanner0.floatValue();
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Jcw.\"B");
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(2550);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : .
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}+&l=&Y-BW*]5X5");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("72l}x_a?*VB$", 116);
      int int0 = jSONScanner0.token();
      assertEquals(116, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zc", 55296);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = jSONScanner0.pos();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$ref", (-84));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - $, info : pos 0, json : $ref
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D:<?{;EZtSH;IOa#", (-1073));
      jSONReaderScanner0.getLocale();
      assertEquals((-1073), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9KEcTS0&Xv");
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ", 125);
      TimeZone timeZone0 = TimeZone.getTimeZone("unclosed string : ");
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals(125, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"JF(iE`R=R0YE", 95);
      jSONReaderScanner0.setToken(95);
      assertEquals(95, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 23, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      jSONScanner0.getTimeZone();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}+&l=&Y-BW*]5X5");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('}', char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 4);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : pos 0, json : \u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4096, 4096);
      jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(4096, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4, 4);
      jSONScanner0.resetStringPosition();
      assertEquals(4, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4");
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("4", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Jcw.\"B");
      Locale locale0 = Locale.JAPAN;
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4096, 4096);
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(4096, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Jcw.\"B");
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(989, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1196);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertNull(string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }
}
