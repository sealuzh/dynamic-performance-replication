/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 12:42:26 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.StringReader;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = '3';
      charArray0[2] = '\"';
      charArray0[3] = 'Q';
      charArray0[4] = '*';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.token = 120;
      jSONReaderScanner0.stringDefaultValue = "fastjson.parser.deny";
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanUUID('^');
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[*zDl");
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = 'b';
      jSONScanner0.locale = null;
      charArray0[2] = '-';
      charArray0[3] = '\'';
      charArray0[4] = 'U';
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) jSONScanner0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "[*zDl";
      objectArray0[4] = (Object) "[*zDl";
      objectArray0[5] = (Object) '-';
      Object object0 = new Object();
      objectArray0[6] = object0;
      jSONScanner0.lexError("S", objectArray0);
      charArray0[5] = '6';
      jSONScanner0.nextIdent();
      charArray0[6] = 'N';
      charArray0[7] = 'H';
      jSONScanner0.scanFieldStringArray(charArray0, 60, (SymbolTable) null);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char char0 = 'q';
      jSONScanner0.scanLong('q');
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 'q';
      jSONScanner0.nextToken();
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      SymbolTable symbolTable0 = new SymbolTable(59);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 3, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102, 102);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanUUID('*');
      Feature feature0 = Feature.SupportNonPublicField;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "G";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G", (-5788));
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'p';
      charArray0[3] = 'q';
      charArray0[4] = '[';
      charArray0[5] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 73);
      jSONReaderScanner0.scanInt('q');
      jSONReaderScanner0.charAt(73);
      Locale locale0 = Locale.ENGLISH;
      jSONReaderScanner0.locale = locale0;
      jSONReaderScanner0.scanType("m,|J0vtV)H");
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('a');
      char[] charArray0 = new char[3];
      jSONScanner0.scanISO8601DateIfMatch(true);
      charArray0[0] = 'e';
      jSONScanner0.scanDouble('e');
      charArray0[1] = 'e';
      charArray0[2] = ']';
      int int0 = 100;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 100);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = '`';
      charArray0[2] = 'm';
      charArray0[3] = 'h';
      charArray0[4] = 'y';
      charArray0[5] = 'D';
      int int0 = 55;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55);
      jSONReaderScanner0.putChar('@');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. `
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ", 44);
      jSONScanner0.close();
      Class<Object> class0 = Object.class;
      jSONScanner0.nextToken(87);
      char char0 = 'e';
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'e');
      // Undeclared exception!
      try { 
        jSONScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20, 20);
      jSONReaderScanner0.scanFieldDate(charArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "'4sZM";
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) "'4sZM";
      objectArray0[3] = (Object) jSONReaderScanner0;
      objectArray0[4] = (Object) jSONReaderScanner0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "'4sZM";
      objectArray0[7] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("'4sZM", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 108);
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = 'G';
      charArray0[2] = 'n';
      charArray0[3] = '1';
      charArray0[4] = '%';
      jSONScanner0.scanDecimal('u');
      Calendar calendar0 = MockCalendar.getInstance();
      jSONScanner0.calendar = calendar0;
      charArray0[5] = 'n';
      charArray0[6] = 'j';
      charArray0[7] = '>';
      jSONScanner0.scanFieldSymbol(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92);
      jSONReaderScanner0.isEOF();
      jSONScanner0.getCalendar();
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanUUID('G');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1), 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0Za");
      SymbolTable symbolTable0 = new SymbolTable(23);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'W');
      jSONScanner0.scanBoolean('r');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{[^$hWhGd=6");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 't';
      charArray0[3] = '.';
      charArray0[4] = '_';
      charArray0[5] = ']';
      charArray0[6] = 'T';
      charArray0[7] = 'B';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "nK%vSc?$";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nK%vSc?$");
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'z';
      jSONReaderScanner0.scanLong('H');
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u`pW2!Wp]% ]", 1643);
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONScanner0.config(feature0, false);
      char[] charArray0 = new char[8];
      jSONScanner0.setToken(1643);
      charArray0[0] = 'v';
      charArray0[1] = 'd';
      charArray0[2] = 'e';
      charArray0[3] = 'Z';
      charArray0[4] = 'g';
      charArray0[5] = 'r';
      charArray0[6] = 'x';
      charArray0[7] = '+';
      jSONScanner0.scanFieldSymbol(charArray0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      SymbolTable symbolTable0 = new SymbolTable(83);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n:m");
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanDouble('m');
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6wqf\"Z@/", 71);
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanLong('');
      charArray0[0] = '8';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = ')';
      charArray0[2] = '@';
      int int0 = 44;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('7');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'i';
      charArray0[2] = '=';
      charArray0[3] = 'y';
      int int0 = (-1723143001);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 653, (-1723143001));
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "d";
      JSONScanner jSONScanner0 = new JSONScanner("d", 72);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S");
      jSONScanner0.isRef();
      jSONScanner0.nextToken((-2330));
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = '#';
      charArray0[2] = 'l';
      charArray0[3] = 'Y';
      charArray0[4] = '3';
      charArray0[5] = 'I';
      char[] charArray1 = new char[3];
      charArray1[0] = '3';
      charArray1[1] = 'C';
      charArray1[2] = 'I';
      jSONScanner0.scanFieldDouble(charArray1);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanUUID('I');
      // Undeclared exception!
      try { 
        jSONScanner0.subString(2396, 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = 'I';
      charArray0[2] = '.';
      charArray0[3] = 'h';
      charArray0[4] = '%';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1377, 0);
      boolean boolean0 = jSONReaderScanner0.isEnabled(1377, 0);
      assertFalse(boolean0);
      
      float float0 = jSONReaderScanner0.scanFloat('B');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONReaderScanner0.getFeatures());
      
      boolean boolean1 = JSONScanner.checkDate('W', '%', 'W', '`', 'X', '|', 3, (-1226));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = 'P';
      charArray0[2] = 'u';
      charArray0[3] = 'z';
      charArray0[4] = '0';
      charArray0[5] = '4';
      charArray0[6] = '[';
      charArray0[7] = 'J';
      JSONScanner.charArrayCompare("0Za", 110, charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 329, 110);
      Calendar calendar0 = MockCalendar.getInstance();
      jSONReaderScanner0.calendar = calendar0;
      jSONReaderScanner0.token = 110;
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 87);
      jSONReaderScanner0.scanBoolean('\u0000');
      int int0 = 2858;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0Za");
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.scanLong('F');
      jSONScanner0.matchStat = 5091;
      jSONScanner0.eofPos = 5091;
      jSONScanner0.scanIdent();
      jSONScanner0.scanDouble('Y');
      jSONScanner0.isEOF();
      jSONScanner0.resetStringPosition();
      jSONScanner0.setToken(5091);
      assertTrue(jSONScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("me@:Fh%%y", (-1));
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'F';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanNumber();
      assertEquals((-1), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero", 115);
      char[] charArray0 = new char[3];
      jSONReaderScanner0.scanFieldLong(charArray0);
      charArray0[0] = 'k';
      int int0 = 45;
      jSONReaderScanner0.setToken(45);
      charArray0[1] = ']';
      charArray0[2] = '(';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.nextToken((-130));
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      JSONScanner jSONScanner0 = new JSONScanner("illegal state, textLength is zero", (-1725629740));
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.stringDefaultValue();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(115);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 45, 1278);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 56320;
      JSONScanner jSONScanner0 = new JSONScanner("\u0000", 56320);
      jSONScanner0.scanIdent();
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'X';
      jSONScanner0.matchField2(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanInt('E');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-504), (-504));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -504
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|uTpp|VL}");
      jSONReaderScanner0.next();
      Locale locale0 = Locale.GERMAN;
      jSONReaderScanner0.locale = locale0;
      Locale locale1 = jSONReaderScanner0.getLocale();
      locale1.toLanguageTag();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.setLocale(locale1);
      char[] charArray1 = new char[1];
      jSONReaderScanner0.scanFieldUUID(charArray1);
      charArray1[0] = 'u';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanIdent();
      char[] charArray2 = new char[6];
      charArray2[0] = 'u';
      charArray2[1] = 'u';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-1619));
      Feature feature0 = Feature.SupportAutoType;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.matchStat();
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '&';
      charArray0[2] = 'V';
      charArray0[3] = ' ';
      charArray0[4] = '<';
      charArray0[5] = 'Q';
      charArray0[6] = '1';
      charArray0[7] = 'Y';
      charArray0[8] = 'e';
      int int0 = 624;
      SymbolTable symbolTable0 = new SymbolTable(78);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 624, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 95);
      jSONReaderScanner0.np = 95;
      jSONReaderScanner0.nextToken(95);
      jSONReaderScanner0.bp = 95;
      jSONReaderScanner0.subString(95, 95);
      jSONReaderScanner0.scanBoolean('!');
      jSONReaderScanner0.scanType("undefined");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('?');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ? - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("toString", (-285));
      int int0 = (-228);
      char[] charArray0 = new char[1];
      charArray0[0] = '%';
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "0T/#A[]`ct)neTpV3f";
      int int0 = 16;
      JSONScanner jSONScanner0 = new JSONScanner("0T/#A[]`ct)neTpV3f", 16);
      jSONScanner0.scanFloat('z');
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0Za%RT", 3028);
      jSONScanner0.scanIdent();
      jSONScanner0.isBlankInput();
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'b';
      charArray0[0] = 'b';
      int int0 = 87;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 87);
      jSONReaderScanner0.scanBoolean('@');
      int int1 = 2858;
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = '\'';
      charArray0[2] = 'V';
      charArray0[3] = 'z';
      charArray0[4] = '8';
      charArray0[5] = 'p';
      charArray0[6] = '8';
      int int0 = 1912;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1912, 1912);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.indexOf('W', 117);
      // Undeclared exception!
      jSONReaderScanner0.nextIdent();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":|cj");
      char[] charArray0 = new char[3];
      char char0 = 'D';
      charArray0[0] = 'D';
      charArray0[1] = 'r';
      int int0 = 2387;
      jSONReaderScanner0.sub_chars(3109, 2387);
      char char1 = '`';
      charArray0[2] = '`';
      jSONReaderScanner0.matchField(charArray0);
      char char2 = '@';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanBoolean('@');
      jSONReaderScanner0.stringDefaultValue = "tB}JmX3,,\"j^r(W3H:";
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = '$';
      charArray0[2] = 'm';
      charArray0[3] = 'J';
      charArray0[4] = '2';
      charArray0[5] = '\"';
      charArray0[6] = '|';
      charArray0[7] = 'k';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 65);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanString();
      jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("[");
      jSONScanner0.scanUUID(':');
      jSONScanner0.stringVal();
      jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char char0 = '3';
      JSONLexerBase.isWhitespace('3');
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      int int0 = 8;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8);
      int int1 = 67;
      jSONReaderScanner0.eofPos = 67;
      jSONReaderScanner0.scanDate('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 'D';
      charArray0[2] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("j$s&<b{_");
      jSONScanner0.scanDouble('V');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'n';
      charArray0[2] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1612, 127);
      jSONReaderScanner0.next();
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(58);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'n');
      jSONReaderScanner0.isEnabled(46, (-500));
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = '8';
      charArray0[2] = 't';
      charArray0[3] = ' ';
      charArray0[4] = '9';
      charArray0[5] = '6';
      charArray0[6] = 'B';
      charArray0[7] = '6';
      charArray0[8] = 'r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.scanNumber();
      assertEquals('t', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V17H,VO5X*Zvw)");
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      jSONReaderScanner0.sub_chars(1, 1);
      charArray0[1] = '.';
      charArray0[2] = '\'';
      charArray0[3] = 'L';
      jSONReaderScanner0.nextToken((-445));
      charArray0[4] = 'g';
      charArray0[5] = '7';
      charArray0[6] = '}';
      charArray0[7] = 'R';
      charArray0[8] = '.';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(436);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 1, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 85, 85);
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '|');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.setToken(85);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 91, (-872));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('a');
      char[] charArray0 = new char[3];
      jSONScanner0.scanISO8601DateIfMatch(true);
      charArray0[0] = 'e';
      jSONScanner0.scanDouble('e');
      charArray0[1] = ')';
      charArray0[2] = ']';
      int int0 = 100;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 100);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(89, charArray0, 89, (-1077));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\" E_g9$4_r5");
      jSONScanner0.isEnabled(1639);
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = 'A';
      charArray0[2] = 'v';
      charArray0[3] = '@';
      int int0 = 2105;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2105, 2105);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanDouble('r');
      jSONReaderScanner0.scanFieldLong(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'A';
      charArray1[1] = 'v';
      charArray1[2] = 'v';
      charArray1[3] = '@';
      charArray1[4] = '/';
      charArray1[5] = 'v';
      charArray1[6] = 'A';
      charArray1[7] = 'v';
      charArray1[8] = 'v';
      jSONReaderScanner0.scanFieldLong(charArray1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2072, "apO7", (-2), 2072, (-2), (-2), (-2), 3060, (-1131), (-139602267), 422);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",apO7>");
      jSONReaderScanner0.scanLong('z');
      jSONReaderScanner0.scanFloat('m');
      jSONReaderScanner0.scanBoolean('Z');
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.sub_chars(99, 99);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.resetStringPosition();
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", info : ");
      int int0 = 452;
      char char0 = '3';
      jSONReaderScanner0.scanDate('3');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(452);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[V[G", 837);
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = 'p';
      charArray0[2] = 'J';
      charArray0[3] = '(';
      charArray0[4] = '}';
      charArray0[5] = '1';
      jSONScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = '=';
      jSONScanner0.scanFieldDate(charArray1);
      jSONScanner0.scanDecimal('*');
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = '}';
      char[] charArray0 = new char[7];
      jSONScanner0.scanFieldString(charArray0);
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      jSONScanner0.scanFieldBigInteger(charArray0);
      charArray0[4] = '}';
      charArray0[5] = 'L';
      charArray0[6] = '}';
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = null;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '+');
      jSONReaderScanner0.hasSpecial = false;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G]&JDX={-K-3}y1");
      jSONReaderScanner0.resetStringPosition();
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      jSONReaderScanner0.nextIdent();
      charArray0[1] = ')';
      charArray0[2] = '=';
      charArray0[3] = 'd';
      jSONReaderScanner0.np = 48;
      charArray0[4] = 'j';
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[5] = 'b';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("G]&JDX={-K-3}y1", (-2), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteClassName", (-8394));
      jSONReaderScanner0.getCalendar();
      assertEquals((-8394), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 9;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      jSONReaderScanner0.setToken(13);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanDecimal('\u001A');
      JSONScanner jSONScanner0 = new JSONScanner("rmJ", (-1));
      jSONScanner0.scanDouble('\u001A');
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'R');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lKYQb]|Wv9*E0");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      int int0 = 21;
      char[] charArray1 = new char[4];
      charArray1[0] = '[';
      charArray1[1] = 'e';
      charArray1[2] = 's';
      charArray1[3] = '+';
      jSONReaderScanner0.scanFieldFloat(charArray1);
      SymbolTable symbolTable0 = new SymbolTable(21);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("Set", 0, 21, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state, textLength is zero");
      SymbolTable symbolTable0 = new SymbolTable(170);
      jSONScanner0.scanSymbol(symbolTable0);
      SymbolTable symbolTable1 = new SymbolTable(2);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(2, 170, 170, symbolTable1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'Y';
      int int0 = 1278;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1278);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 'i';
      charArray0[0] = 'i';
      charArray0[1] = 'j';
      int int0 = 103;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 418, 103);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      char char1 = '2';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. i
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "/@&t-zcr4b)+";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/@&t-zcr4b)+");
      jSONReaderScanner0.info();
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      SymbolTable symbolTable0 = new SymbolTable(34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 34, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = '5';
      charArray0[2] = '\\';
      charArray0[3] = '?';
      char char0 = 'g';
      charArray0[4] = 'g';
      charArray0[5] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '5';
      charArray0[2] = '8';
      charArray0[3] = ',';
      charArray0[4] = 'A';
      int int0 = 170;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 170);
      jSONReaderScanner0.setToken(170);
      jSONReaderScanner0.scanFieldString(charArray0);
      int int1 = 1054;
      jSONReaderScanner0.sub_chars(1597, 1054);
      jSONReaderScanner0.features = 1054;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanDouble('1');
      jSONReaderScanner0.scanUUID(',');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.isBlankInput();
      assertEquals(22, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("731Z-");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanType("731Z-");
      char char0 = ']';
      jSONScanner0.scanString('o');
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = '9';
      charArray0[5] = '9';
      jSONScanner0.scanISO8601DateIfMatch();
      charArray0[6] = 'u';
      charArray0[7] = ')';
      jSONScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone(')', ')', '?', ']', '9');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '-';
      charArray0[2] = 'q';
      char char0 = '(';
      charArray0[3] = '(';
      charArray0[4] = 'W';
      charArray0[5] = '`';
      charArray0[6] = 'S';
      charArray0[7] = '1';
      int int0 = 128;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 128, 128);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "null";
      int int0 = 1269;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 1269);
      char[] charArray0 = new char[2];
      char char0 = '$';
      charArray0[0] = '$';
      char char1 = '\\';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArray0[1] = '\\';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "true";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.eofPos = 3127;
      jSONReaderScanner0.nextToken(84);
      jSONReaderScanner0.matchStat = 999;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 83, 700);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ny");
      jSONScanner0.getFeatures();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":.k");
      char char0 = 'E';
      jSONReaderScanner0.scanLong('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 117);
      jSONScanner0.pos = 117;
      char[] charArray0 = new char[7];
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONScanner0.config(feature0, true);
      charArray0[0] = 'w';
      charArray0[1] = 'T';
      charArray0[2] = 'G';
      charArray0[3] = '^';
      charArray0[4] = '?';
      charArray0[5] = 'D';
      charArray0[6] = 'G';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'f');
      jSONScanner0.scanNumber();
      jSONScanner0.scanBoolean('n');
      jSONScanner0.putChar('n');
      jSONScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      int int0 = (-1426);
      JSONScanner jSONScanner0 = new JSONScanner("", (-1426));
      jSONScanner0.getCurrent();
      Locale locale0 = new Locale("oracle.sql.DATE");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = 'c';
      jSONScanner0.bp = 102;
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      timeZone0.setID("");
      timeZone0.setID("false");
      timeZone0.observesDaylightTime();
      jSONScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      jSONScanner0.nextToken((-3398));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uYr?JwzT");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'u';
      charArray0[2] = '`';
      charArray0[3] = 'B';
      charArray0[4] = '*';
      charArray0[5] = 'J';
      charArray0[6] = 'o';
      jSONScanner0.scanFieldBoolean(charArray0);
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", info : ");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.features = 5059;
      jSONReaderScanner0.info();
      jSONReaderScanner0.getLocale();
      jSONReaderScanner0.isBlankInput();
      stringReader0.skip(5059);
      jSONReaderScanner0.matchStat();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("trim");
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      charArray0[1] = 'N';
      char char0 = '[';
      charArray0[2] = '[';
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-x5ag");
      SymbolTable symbolTable0 = new SymbolTable(363);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "*EqDh\\D\\a\"eYv\"))";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*EqDhDa\"eYv\"))");
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = null;
      int int0 = 57;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9?uedH|r9kHn]=?Se>");
      jSONReaderScanner0.bytesValue();
      char char0 = 'j';
      jSONReaderScanner0.scanUUID('j');
      jSONReaderScanner0.longValue();
      int int0 = 3471;
      jSONReaderScanner0.subString(3471, 3471);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.nextToken(3471);
      JSONScanner jSONScanner0 = new JSONScanner("", 3471);
      char[] charArray0 = new char[4];
      jSONScanner0.scanDate('V');
      charArray0[0] = 'j';
      jSONScanner0.scanDouble('j');
      charArray0[1] = '9';
      charArray0[2] = 'j';
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '0';
      charArray0[2] = 'M';
      charArray0[3] = 'n';
      charArray0[4] = 'Y';
      charArray0[5] = 'B';
      charArray0[6] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDate('l');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.sub_chars(84, 829);
      jSONReaderScanner0.nextToken(829);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = '[';
      charArray0[2] = 'D';
      charArray0[3] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 82);
      jSONReaderScanner0.sp = 82;
      jSONReaderScanner0.scanInt('3');
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('D');
      JSONScanner jSONScanner0 = new JSONScanner("true", 0);
      jSONScanner0.scanDouble('N');
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(9(R_0!F:`");
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = '?';
      charArray0[3] = 'X';
      charArray0[4] = ':';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.putChar(':');
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      jSONReaderScanner0.scanDate('y');
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.subString(3688, 3332);
      JSONScanner jSONScanner0 = new JSONScanner("not close json text, token : ", 3332);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('y', 'y', 'y', 'y', '_');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UseObjectArray");
      jSONReaderScanner0.setLocale((Locale) null);
      char char0 = 'Y';
      int int0 = 770;
      jSONReaderScanner0.indexOf('Y', 770);
      jSONReaderScanner0.matchStat();
      JSONScanner jSONScanner0 = new JSONScanner("UseObjectArray");
      jSONScanner0.scanFloat('Y');
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      jSONScanner0.scanFieldString(charArray0);
      char char1 = '$';
      char char2 = '`';
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('Y', 'z', '$', 'z', '`', 'z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "/@&t-zcr4b)+";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/@&t-zcr4b)+");
      jSONReaderScanner0.info();
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      jSONReaderScanner0.info();
      charArray0[1] = '[';
      charArray0[2] = '%';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error : ", 4);
      jSONScanner0.nextToken(4);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sNC2*fQXrjQk*-0hk=K");
      char char0 = '}';
      char[] charArray0 = new char[7];
      jSONScanner0.scanFieldString(charArray0);
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      jSONScanner0.scanFieldBigInteger(charArray0);
      charArray0[4] = '}';
      charArray0[5] = 'L';
      charArray0[6] = '}';
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 56);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanType("");
      jSONReaderScanner0.scanDecimal('(');
      int int0 = 56;
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.features = 20;
      int int1 = 161;
      jSONReaderScanner0.subString(56, 161);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '*';
      charArray0[2] = ' ';
      charArray0[3] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 324);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '4';
      charArray0[2] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 82);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      jSONReaderScanner0.scanStringArray(list0, '?');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char char0 = 'c';
      JSONLexerBase.isWhitespace('c');
      JSONScanner jSONScanner0 = new JSONScanner("Zrw4ro[#e8pvnf8J R");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = 'l';
      charArray0[2] = 'R';
      charArray0[3] = '|';
      charArray0[4] = ',';
      charArray0[5] = 'v';
      charArray0[6] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34, 648);
      SymbolTable symbolTable0 = new SymbolTable(523);
      jSONReaderScanner0.addSymbol(523, 2269, 109, symbolTable0);
      jSONReaderScanner0.setLocale((Locale) null);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 84, 109);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TreeSet");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-573));
      boolean boolean0 = jSONReaderScanner0.isEnabled(120);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals((-573), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = 'N';
      charArray0[2] = 'y';
      char char0 = 'A';
      charArray0[3] = 'A';
      charArray0[4] = '~';
      charArray0[5] = '@';
      charArray0[6] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      jSONReaderScanner0.nextToken();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V17H,VO5X*Zvw)");
      char[] charArray0 = new char[9];
      jSONReaderScanner0.isRef();
      charArray0[0] = 'D';
      charArray0[1] = '.';
      charArray0[2] = '\'';
      charArray0[4] = 'g';
      charArray0[5] = '7';
      charArray0[6] = '}';
      charArray0[7] = 'R';
      charArray0[8] = '.';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(436);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - , info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".s!ofn^v~ILR");
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '3';
      JSONLexerBase.readString(charArray0, 0);
      charArray0[2] = ']';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = ';';
      charArray0[6] = 'z';
      charArray0[7] = 'K';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.pos();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", 0);
      char[] charArray1 = new char[1];
      charArray1[0] = 'Y';
      jSONScanner0.scanFieldString(charArray1);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<V:R:}");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = ';';
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[2] = 'U';
      charArray0[3] = 'b';
      charArray0[4] = 'e';
      charArray0[5] = '\\';
      charArray0[6] = '~';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.token = (-1092642933);
      charArray0[7] = '~';
      jSONScanner0.tokenName();
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanISO8601DateIfMatch();
      int int0 = 98;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V17H,VO5X*Zvw)");
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = '.';
      charArray0[2] = '\'';
      charArray0[3] = 'L';
      charArray0[4] = 'g';
      charArray0[5] = '7';
      charArray0[6] = '}';
      charArray0[7] = 'R';
      charArray0[8] = '.';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(436);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - , info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 68;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AutoCloseSource");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 123);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.subString(78, 78);
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'q';
      boolean boolean0 = JSONScanner.charArrayCompare("undefined", 0, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3816);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. +
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ");
      int int0 = (-503);
      jSONScanner0.token = (-503);
      char char0 = 'b';
      jSONScanner0.scanDate('b');
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'r';
      charArray0[2] = '(';
      charArray0[3] = 'l';
      charArray0[4] = ';';
      charArray0[5] = '=';
      charArray0[6] = '4';
      charArray0[7] = 'v';
      charArray0[8] = '/';
      jSONScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = ':';
      charArray0[2] = 'n';
      charArray0[3] = 'h';
      charArray0[4] = 'N';
      charArray0[5] = 's';
      charArray0[6] = '7';
      charArray0[7] = '2';
      int int0 = 2;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2, 433);
      jSONReaderScanner0.resetStringPosition();
      SymbolTable symbolTable0 = new SymbolTable(2);
      symbolTable0.addSymbol("=k_s'MuE6;", 0, 2, 1388);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-1), 2, 433);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = '^';
      charArray0[2] = 'Y';
      charArray0[3] = '%';
      charArray0[4] = 'x';
      charArray0[5] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '|';
      charArray0[2] = 'p';
      charArray0[3] = 'q';
      charArray0[4] = '[';
      charArray0[5] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      jSONReaderScanner0.scanInt('X');
      Locale locale0 = Locale.ENGLISH;
      jSONReaderScanner0.locale = locale0;
      int int0 = jSONReaderScanner0.scanType(",|J0vtV)H");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[4];
      char char0 = 'G';
      charArray0[0] = 'G';
      char char1 = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'r';
      char char2 = 'i';
      charArray0[3] = 'i';
      jSONScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 562);
      char char0 = 'Y';
      jSONReaderScanner0.scanUUID('Y');
      Feature feature0 = Feature.IgnoreAutoType;
      jSONReaderScanner0.config(feature0, false);
      SymbolTable symbolTable0 = new SymbolTable(562);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("type not match. ");
      jSONScanner0.stringDefaultValue = "type not match. ";
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("OlAV!nVQk^", (-352));
      jSONReaderScanner0.features = 89;
      jSONReaderScanner0.np = (-352);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFloat('c');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "oIgdR)Lp";
      JSONScanner jSONScanner0 = new JSONScanner("oIgdR)Lp");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      int int0 = 5;
      jSONScanner0.matchField(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(5);
      int int1 = 3213;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("java.time.Duration", (-1075), (-1144), 34, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sNC2*fQXrjQk*-0hk=K", (-1906));
      char char0 = '}';
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = 'L';
      charArray0[6] = '}';
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 56);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanType("");
      jSONReaderScanner0.scanDecimal('(');
      int int0 = 56;
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.features = 20;
      int int1 = 161;
      jSONReaderScanner0.subString(56, 161);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = 'T';
      charArray0[2] = 'z';
      charArray0[3] = '\'';
      charArray0[4] = 'm';
      charArray0[5] = '`';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      boolean boolean0 = jSONReaderScanner0.isEnabled(102, (-1));
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 16);
      char[] charArray0 = new char[9];
      charArray0[0] = ';';
      charArray0[1] = 's';
      charArray0[2] = '}';
      jSONReaderScanner0.pos = (-2137);
      charArray0[3] = 'n';
      jSONReaderScanner0.setToken(16);
      charArray0[4] = '4';
      char char0 = 'i';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sdoh,?  d0m5r0");
      jSONReaderScanner0.scanDouble(';');
      jSONReaderScanner0.lexError("sdoh,?  d0m5r0", (Object[]) null);
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'K';
      charArray0[2] = '&';
      charArray0[3] = 'o';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 39, 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('%');
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("QuoteFieldNames");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '6';
      charArray0[2] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, 42);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - {, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("", 48);
      jSONScanner0.pos = 48;
      int int0 = 26;
      jSONScanner0.bp = 26;
      jSONScanner0.features = 48;
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner0.tokenName();
      jSONScanner0.config(feature0, true);
      jSONScanner0.config(feature0, false);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      Locale locale0 = Locale.KOREA;
      Locale.setDefault(locale0);
      Locale.getISOCountries();
      timeZone0.getOffset((long) 0);
      timeZone0.getDisplayName(true, 0, locale0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'k';
      charArray0[2] = '<';
      charArray0[3] = 'R';
      charArray0[4] = 'f';
      charArray0[5] = '`';
      char char0 = 'L';
      charArray0[6] = 'L';
      charArray0[7] = '>';
      charArray0[8] = 'K';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", name ", 666);
      jSONScanner0.next();
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 'P';
      objectArray0[2] = (Object) jSONScanner0;
      objectArray0[3] = (Object) ", name ";
      jSONScanner0.lexError(", name ", objectArray0);
      charArray0[1] = '';
      charArray0[2] = '.';
      charArray0[3] = ' ';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2064);
      jSONReaderScanner0.token = 2064;
      jSONReaderScanner0.scanFloat('H');
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.next();
      jSONReaderScanner0.sub_chars(2064, 2064);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'V';
      charArray0[2] = 'O';
      charArray0[3] = ';';
      charArray0[4] = '[';
      charArray0[5] = '\\';
      charArray0[6] = 't';
      charArray0[7] = 'r';
      int int0 = 0;
      int int1 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.eofPos = 0;
      jSONScanner0.putChar('j');
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanLong('q');
      jSONScanner0.scanDecimal('O');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('O', 'V', 's');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^ZW)h}|m>eHh", (-469));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match \" - ^, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '<';
      charArray0[2] = 'b';
      charArray0[3] = '=';
      charArray0[4] = '<';
      charArray0[5] = '}';
      charArray0[6] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.parallelStream();
      jSONReaderScanner0.token = 863;
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONLexerBase.isWhitespace('b');
      jSONReaderScanner0.scanDate('q');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 78);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = 'D';
      charArray0[0] = 'D';
      char char1 = ']';
      charArray0[1] = ']';
      charArray0[2] = '';
      charArray0[3] = 'J';
      char char2 = ',';
      charArray0[4] = ',';
      char char3 = '/';
      charArray0[5] = '/';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 101, (-406));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 7);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.nextToken(7);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'J';
      charArray0[2] = '3';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-849));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2406);
      jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i&J@/D!U", 84);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      jSONScanner0.matchStat = 84;
      jSONScanner0.scanStringArray(set0, ']');
      StringReader stringReader0 = new StringReader("i&J@/D!U");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 24);
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = 'A';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.scanInt('u');
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1), 1307);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6");
      jSONScanner0.bytesValue();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = 'd';
      charArray0[2] = 'Q';
      charArray0[3] = '#';
      charArray0[4] = '_';
      charArray0[5] = 'Q';
      charArray0[6] = 'x';
      charArray0[7] = 'p';
      charArray0[8] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24180);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }
}
