/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:02:24 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-1.0), (-1.0), (-1541.906469));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      dormandPrince54Integrator0.clearEventHandlers();
      doubleArray0[2] = 0.0;
      dormandPrince54Integrator0.scalRelativeTolerance = 0.0;
      dormandPrince54Integrator0.vecRelativeTolerance = doubleArray0;
      double double0 = dormandPrince54Integrator0.getMaxGrowth();
      assertEquals(10.0, double0, 0.01);
      
      double double1 = dormandPrince54Integrator0.getMinReduction();
      assertEquals(0.2, double1, 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1652.445), (-1652.445), (-1652.445), (-1652.445));
      dormandPrince54Integrator0.scalAbsoluteTolerance = (-1652.445);
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations((-1772));
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      dormandPrince54Integrator0.getMaxGrowth();
      double double0 = dormandPrince54Integrator0.getSafety();
      assertEquals(0.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(338.2, 338.2, 338.2, 338.2);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(93).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, 0.0, 10.0, 10.0);
      dormandPrince54Integrator1.clearStepHandlers();
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator1.integrate(expandableStatefulODE1, 338.2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 1.0, 1.0, 1.0);
      dormandPrince54Integrator0.scalAbsoluteTolerance = 1.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(10.0);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 0.0, doubleArray0, doubleArray0);
      expandableStatefulODE0.getTotalDimension();
      dormandPrince54Integrator0.clearStepHandlers();
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1.0, (-1590.5), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      dormandPrince54Integrator1.integrate(expandableStatefulODE1, 1.0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(10.0, 10.0, 1.0, (-3.726946038150935E-291));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3.726946038150935E-291);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-853.0), 0, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      dormandPrince54Integrator1.estimateError(doubleArray1, doubleArray0, doubleArray0, 10.0);
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 10.0);
      dormandPrince54Integrator0.getOrder();
      assertEquals(8, dormandPrince54Integrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-151.467588070448));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(356.20405, (-151.467588070448), (-1806.64864988), (-1590.5));
      double[][] doubleArray0 = new double[0][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 10.0;
      dormandPrince54Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, (-1590.5));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(338.2, (-151.467588070448), (-151.467588070448), 4.4216561713555547E276);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 4.1422578754033235E-279);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 1.0, 1.0, 1.0);
      dormandPrince54Integrator0.scalAbsoluteTolerance = 1.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(10.0);
      double double0 = 1.0;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearEventHandlers();
      expandableStatefulODE0.getTotalDimension();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setSafety((-1590.5));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(4.1422578754033235E-279, (-1590.5), doubleArray0, doubleArray0);
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 455.32929706, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(10.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(356.20405, (-1646.914549584), 338.2, (-3972.45515));
      double[][] doubleArray0 = new double[0][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1590.5);
      dormandPrince54Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, 338.2);
      expandableStatefulODE0.computeDerivatives((-1590.5), doubleArray1, doubleArray1);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(356.20405, (-1590.5), 0.2, (-151.467588070448));
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-151.467588070448));
  }
}
