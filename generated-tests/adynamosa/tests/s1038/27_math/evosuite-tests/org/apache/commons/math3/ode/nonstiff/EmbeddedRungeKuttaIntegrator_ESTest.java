/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 13:58:50 GMT 2019
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(42).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(10.0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(42, 42, 0.10291612148284912, 893.189);
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.10291612148284912);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, (-103.6958), doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.2, 232.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3275.15577), (-0.55), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction((-3275.15577));
      dormandPrince54Integrator0.clearEventHandlers();
      double[][] doubleArray1 = new double[9][9];
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 2845.2196941026;
      doubleArray2[1] = (-3275.15577);
      doubleArray2[2] = 343.20470523297;
      doubleArray2[3] = (-1.7658271111516935E-8);
      doubleArray2[4] = 343.20470523297;
      doubleArray2[5] = (-1888.8873);
      doubleArray2[6] = (-3275.15577);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      dormandPrince54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 343.20470523297);
      dormandPrince54Integrator0.getMinReduction();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 10.0;
      expandableStatefulODE0.setTime(10.0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(344).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      double double1 = (-571.454);
      double double2 = 5199.112584976876;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5199.112584976876, (-571.454), 1834.2985390056479, 10.0);
      double double3 = 3537.43541;
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 3537.43541);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-3275.15577));
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      double double0 = 1520.5245469;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3275.15577), 1.0, 1520.5245469, 1834.2985390056479);
      double double1 = 0.0;
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3275.15577), (-3275.15577), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-3275.15577));
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      highamHall54Integrator0.integrate(expandableStatefulODE0, (double) 0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(10.0, (-3275.15577), doubleArray0, doubleArray0);
      highamHall54Integrator0.getMinReduction();
      assertEquals(8, highamHall54Integrator0.getEvaluations());
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 1.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-273.6625755);
      doubleArray0[1] = 0.23556607961654663;
      doubleArray0[2] = 0.23556607961654663;
      doubleArray0[3] = (-273.6625755);
      doubleArray0[4] = 0.23556607961654663;
      doubleArray0[5] = (-273.6625755);
      doubleArray0[6] = 0.23556607961654663;
      doubleArray0[7] = 0.23556607961654663;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-273.6625755), 0.23556607961654663, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.mainSetDimension = 0;
      highamHall54Integrator0.getMaxGrowth();
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      
      highamHall54Integrator0.setSafety(0.0);
      double[][] doubleArray1 = new double[9][3];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.23556607961654663;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 10.0;
      doubleArray2[4] = (-273.6625755);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 0.23556607961654663);
      double double0 = highamHall54Integrator0.getSafety();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-3275.15577);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3275.15577), (-3275.15577), doubleArray0, doubleArray0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double double1 = (-3384.935303310076);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3384.935303310076), 0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setSafety(5.4203784018566126E-8);
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      dormandPrince853Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, (-3275.15577));
      dormandPrince853Integrator0.setMaxGrowth((-3275.15577));
      double double2 = 0.0;
      double double3 = 10.0;
      dormandPrince853Integrator0.setStepSizeControl(10.0, 0.0, 10.0, (-3876.7290405141));
      dormandPrince853Integrator0.getMaxGrowth();
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double4 = 5.966298125808066E-72;
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 5.966298125808066E-72);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 2188.07756214;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.2, 2188.07756214, 0.2, 2188.07756214);
      double double1 = 0.0;
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      double double2 = 0.0;
      dormandPrince853Integrator0.getMaxGrowth();
      dormandPrince853Integrator0.getOrder();
      double[] doubleArray0 = null;
      DormandPrince54Integrator dormandPrince54Integrator0 = null;
      try {
        dormandPrince54Integrator0 = new DormandPrince54Integrator(8, 2188.07756214, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[7];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0, 0.0, doubleArray1, doubleArray2);
      highamHall54Integrator0.setMinReduction((-55.72314));
      assertEquals((-55.72314), highamHall54Integrator0.getMinReduction(), 0.01);
      
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-55.72314);
      doubleArray3[1] = (-1747.91496702);
      doubleArray3[2] = 0.05970507860183716;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (-55.72314);
      doubleArray3[6] = (-3275.15577);
      doubleArray3[7] = 773.323;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1747.91496702), (-55.72314), doubleArray3, doubleArray3);
      dormandPrince54Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray3, (-1.0));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 10.0, doubleArray1, doubleArray1);
      dormandPrince853Integrator0.getOrder();
      dormandPrince54Integrator0.getOrder();
      double double0 = dormandPrince853Integrator0.getSafety();
      assertEquals(0.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1423.983138758784), (-1423.983138758784), doubleArray0, doubleArray0);
      highamHall54Integrator0.setSafety((-1324));
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      highamHall54Integrator0.scalRelativeTolerance = (double) (-1324);
      highamHall54Integrator0.getMinReduction();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getSafety();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1324), 10.0, 1.0, 1160.5082579535);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1324.0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 2188.07756214;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.2, 2188.07756214, 0.2, 2188.07756214);
      double double1 = 0.0;
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = 0.0;
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 2188.07756214;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.2, 2188.07756214, 0.2, 2188.07756214);
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1155).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.setMinReduction(0.0);
      dormandPrince853Integrator0.getSafety();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryStateDot((-1651));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 218.27653;
      doubleArray0[1] = 0.9;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 218.27653;
      doubleArray0[4] = 218.27653;
      doubleArray0[5] = 0.9;
      doubleArray0[6] = 0.9;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.9, 218.27653, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 218.27653);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.9, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.resetInternalState();
      dormandPrince853Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, (-1705.85));
      dormandPrince853Integrator0.getOrder();
      highamHall54Integrator0.setMaxGrowth((-1223.57));
      highamHall54Integrator0.setSafety((-1339.38));
      dormandPrince853Integrator0.clearEventHandlers();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 2188.07756214;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.2, 2188.07756214, 0.2, 2188.07756214);
      double double1 = 0.0;
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = 0.0;
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-3275.15577);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3275.15577), (-3275.15577), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-3275.15577));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1149.6586548154928), (-1149.6586548154928), 0.0, 0.0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setMaxGrowth((-2.9646587857612632E-8));
      assertEquals((-2.9646587857612632E-8), highamHall54Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2254.0, 0.3877306580543518, 0.0, 0.0);
      dormandPrince853Integrator0.getSafety();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2254.0;
      doubleArray0[1] = 0.9;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2512.788243468);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      dormandPrince853Integrator0.vecAbsoluteTolerance = doubleArray0;
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setSafety(5.4203784018566126E-8);
      double[][] doubleArray1 = new double[1][8];
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.9;
      doubleArray2[1] = 0.3877306580543518;
      doubleArray1[0] = doubleArray2;
      dormandPrince853Integrator0.estimateError(doubleArray1, doubleArray2, doubleArray2, 0.9);
      dormandPrince853Integrator0.setMaxGrowth(5.4203784018566126E-8);
      dormandPrince853Integrator0.setStepSizeControl(5.4203784018566126E-8, 0.0, 0.0, (-1134.825731008345));
      dormandPrince853Integrator0.getMaxGrowth();
      dormandPrince853Integrator0.getOrder();
      assertEquals(5.4203784018566126E-8, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = (-2962.1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-707.00680567271);
      doubleArray0[1] = (-707.00680567271);
      doubleArray0[2] = (-707.00680567271);
      double double1 = 1050.1;
      doubleArray0[3] = 1050.1;
      doubleArray0[4] = (-2552.979359);
      doubleArray0[5] = (-707.00680567271);
      doubleArray0[6] = (-707.00680567271);
      doubleArray0[7] = (-2962.1);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2962.1), (-707.00680567271), doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      highamHall54Integrator0.getStepHandlers();
      StepNormalizer stepNormalizer0 = new StepNormalizer((-510.888817), fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getSafety();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 52.2;
      double double1 = 0.5657354593276978;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1788.95445912, 52.2, 0.5657354593276978, 52.2);
      dormandPrince853Integrator0.getOrder();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, 1788.95445912);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-988.91), 0.0, 534.49643);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.vecAbsoluteTolerance = doubleArray0;
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 534.49643);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      dormandPrince54Integrator0.setMinReduction(2.591270923614502);
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 343.20470523297);
      dormandPrince54Integrator0.getMinReduction();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-273.6625755);
      doubleArray0[1] = 0.23556607961654663;
      doubleArray0[2] = 0.23556607961654663;
      doubleArray0[3] = (-273.6625755);
      doubleArray0[4] = 0.23556607961654663;
      doubleArray0[5] = (-273.6625755);
      doubleArray0[6] = 0.23556607961654663;
      doubleArray0[7] = 0.23556607961654663;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-273.6625755), 0.23556607961654663, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.mainSetDimension = 0;
      highamHall54Integrator0.getMaxGrowth();
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      
      highamHall54Integrator0.setSafety(0.0);
      double[][] doubleArray1 = new double[9][3];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.23556607961654663;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 10.0;
      doubleArray2[4] = (-273.6625755);
      doubleArray2[5] = 10.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, 0.23556607961654663);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
  }
}
