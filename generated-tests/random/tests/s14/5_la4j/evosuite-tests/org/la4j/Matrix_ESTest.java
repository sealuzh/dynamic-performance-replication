/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 23:01:14 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceKroneckerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(0, 0.0);
      matrix0.swapColumns(0, 0);
      matrix0.getColumn(0);
      matrix0.blankOfShape(0, 37);
      // Undeclared exception!
      try { 
        NumberFormat.getPercentInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      double double0 = denseMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      
      Matrix matrix0 = denseMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 1 rows and 1 cols at 0, 0 from a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 9;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 9;
      Matrix matrix0 = Matrix.from1DArray(9, 2, doubleArray0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        matrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DenseMatrix.diagonal(16, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 305;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(305);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 305;
      doubleArray1[1] = (double) 305;
      doubleArray1[2] = (double) 305;
      doubleArray1[3] = (-390.0288012429);
      doubleArray0[0] = doubleArray1;
      SparseMatrix sparseMatrix1 = SparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) sparseMatrix1, 305, 151, 151, 151, 8, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 305, 151
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1346;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1346, 1346);
      SparseVector sparseVector0 = SparseVector.zero(1346, 1346);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      int int1 = (-531);
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 426, 1346, (-531), 1510, 1346, 1510);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -531, 1510
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      SparseVector sparseVector0 = SparseVector.zero(2317, 14);
      columnMajorSparseMatrix0.multiply((double) 2317);
      sparseVector0.min();
      Matrix.identity(14);
      Matrix matrix0 = columnMajorSparseMatrix0.add((Matrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.swapColumns((-1537), (-3712));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1536
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 4;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      matrix0.transpose();
      int int1 = (-1908874352);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) (-1908874352);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-1908874352), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-845.0);
      doubleArray0[2] = 1280.1733;
      doubleArray0[3] = (-1011.2751);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.232595164407831E-28;
      doubleArray0[6] = 1.1102230246251565E-14;
      doubleArray0[7] = 7.771561172376096E-14;
      doubleArray0[8] = 1.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      int int0 = matrix0.rank();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(18, 0);
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null, 0, 3, 34, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 0, 3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(32, 32);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.removeLastColumn();
      assertFalse(matrix1.equals((Object)denseMatrix0));
      
      boolean boolean0 = matrix0.equals((Matrix) denseMatrix0, (-0.4375));
      assertTrue(boolean0);
      
      matrix0.shuffle();
      assertTrue(denseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      cRSMatrix0.swapRows((-2764), (-2764));
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 6;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(6, 6, doubleArray0);
      int int1 = (-2058005161);
      // Undeclared exception!
      try { 
        denseMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(2497, 2497);
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2328;
      doubleArray0[1] = (double) 2497;
      doubleArray0[2] = (double) 2497;
      doubleArray0[3] = (double) 2497;
      doubleArray0[4] = (double) 2497;
      doubleArray0[6] = (double) 2497;
      Matrix.from1DArray(2497, 2328, doubleArray0);
      MockRandom mockRandom0 = new MockRandom(736L);
      Vector.random(2328, mockRandom0);
      int[] intArray0 = new int[4];
      Matrix matrix1 = matrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 2497, 1670, 1670, 1737);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2497, 1670
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 1942);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.columns();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1942;
      intArray0[3] = 4615;
      intArray0[4] = 1;
      Integer integer0 = new Integer(4615);
      hashMap0.put((Integer) 1942, integer0);
      intArray0[5] = 1;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(1686);
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      boolean boolean0 = rowMajorSparseMatrix0.equals((Object) double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4277.41;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 4277.41;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 4277.41;
      doubleArray3[1] = 4277.41;
      doubleArray3[2] = (-1882.46374845);
      doubleArray3[3] = 4277.41;
      doubleArray3[4] = 4277.41;
      doubleArray3[5] = 4277.41;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 617.95523327;
      doubleArray4[1] = (-341.3293341875);
      doubleArray4[2] = 4277.41;
      doubleArray4[3] = 4277.41;
      doubleArray4[4] = (-1882.46374845);
      doubleArray4[5] = (-1882.46374845);
      doubleArray4[6] = (-1882.46374845);
      doubleArray4[7] = (-1882.46374845);
      doubleArray4[8] = (-1882.46374845);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-1882.46374845);
      doubleArray5[1] = (-1882.46374845);
      doubleArray5[2] = 617.95523327;
      doubleArray5[3] = 4277.41;
      doubleArray5[4] = (-1536.54825);
      doubleArray0[4] = doubleArray5;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double double0 = denseMatrix0.min();
      assertEquals((-1882.46374845), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(0, 1624, 263.66);
      Matrix matrix1 = matrix0.blankOfColumns(2084);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2084;
      doubleArray0[1] = (double) 2084;
      Matrix matrix2 = Matrix.from1DArray(0, 1624, doubleArray0);
      matrix0.iterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix2.updateColumn(1624, vectorFunction0);
      Vector vector0 = matrix1.toColumnVector();
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("K", decimalFormatSymbols0);
      vector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals(0, vector0.length());
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      matrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix2.eachInColumn(0, vectorProcedure1);
      matrix0.eachInRow(1624, vectorProcedure0);
      vector0.toDenseVector();
      matrix2.setColumn(1624, 2821.125497562);
      Matrix matrix3 = matrix1.rotate();
      matrix2.setColumn(2084, vector0);
      assertEquals(1624, matrix2.columns());
      assertTrue(matrix1.equals((Object)matrix3));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4374, 37, 37);
      sparseMatrix0.swapRows(1406, 7);
      // Undeclared exception!
      sparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      linkedList0.removeFirstOccurrence(matrix0);
      Matrix matrix1 = matrix0.transformColumn(32, (VectorFunction) null);
      matrix1.rowMajorIterator();
      matrix0.determinant();
      matrix1.max();
      matrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1, 1);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      MatrixFactory<DenseMatrix> matrixFactory0 = (MatrixFactory<DenseMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.removeLastRow();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.eachNonZeroInColumn(1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      int int0 = 5;
      double double0 = 0.0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(5, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 5;
      Matrix matrix0 = rowMajorSparseMatrix0.removeFirstColumn();
      matrix0.rotate();
      matrix0.min();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.transformColumn(5, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      int int0 = (-757);
      int int1 = (-1879048191);
      // Undeclared exception!
      try { 
        ((Matrix)cRSMatrix0).ensureIndexesAreInBounds((-757), (-1879048191));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-757' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(6);
      SparseVector sparseVector0 = SparseVector.zero(2317, 14);
      columnMajorSparseMatrix0.multiply((double) 2317);
      sparseVector0.min();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertColumn((-3712), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      int int0 = 7;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      matrix0.kroneckerProduct(matrix1);
      MockRandom mockRandom0 = new MockRandom(1655L);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random(7, 7, (-1539.6), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 7;
      Matrix matrix0 = Matrix.constant(7, 7, 7);
      Matrix matrix1 = matrix0.shuffle();
      Matrix matrix2 = matrix0.add((double) 7);
      matrix2.euclideanNorm();
      Matrix matrix3 = matrix1.add(matrix2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 98.0;
      Matrix.from1DArray(260, 7, doubleArray0);
      // Undeclared exception!
      try { 
        matrix3.insert(matrix1, 7, (-770));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 7x-770
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(10, 10);
      SparseVector sparseVector0 = SparseVector.zero(1000, (-3292));
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        denseMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 10x10 does not equal to 1000x1000.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      int int0 = 7;
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 7);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      int int1 = 1697;
      DenseVector denseVector0 = DenseVector.zero(1697);
      // Undeclared exception!
      try { 
        matrix0.multiply((Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 1697 does not equal to 7.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 7.771561172376096E-14;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.5;
      doubleArray1[3] = 883.82913809;
      doubleArray1[4] = 0.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.5;
      doubleArray3[1] = 7.771561172376096E-14;
      doubleArray3[2] = 7.771561172376096E-14;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 7.771561172376096E-14;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 0.5;
      doubleArray5[1] = 7.771561172376096E-14;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 1.0;
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 1.0;
      doubleArray5[7] = (-294.49237664862);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.5;
      doubleArray6[1] = 0.5;
      doubleArray6[2] = 7.771561172376096E-14;
      doubleArray6[3] = 0.5;
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.rotate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1632, 1632, 1632);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.transformRow(0, vectorFunction0);
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfShape(1632, (-2092419963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1632x-2092419963
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Matrix matrix0 = null;
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 30;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(30, 1.2621768465009413E-29);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[1];
      int int1 = 4;
      rowMajorSparseMatrix0.setColumn(4, 1395.96809);
      doubleArray1[0] = (double) 30;
      // Undeclared exception!
      try { 
        DenseMatrix.zero((-3078), 2505);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.constant(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      DenseVector.random(3, mockRandom0);
      denseVector0.is((VectorPredicate) null);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)denseVector0.toRowMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      basic2DMatrix0.foldRows(vectorAccumulator0);
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.insertRow(0, denseVector0);
      basic2DMatrix1.mkString("jev`zY:]1", "jev`zY:]1");
      BasicVector basicVector0 = (BasicVector)denseVector0.toDenseVector();
      basic2DMatrix0.iteratorOfRow(2085);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix1.manhattanNorm();
      basic2DMatrix0.toCSV((NumberFormat) decimalFormat0);
      decimalFormat0.format((long) 0);
      basic2DMatrix0.columns();
      NumberFormat.getInstance();
      basic2DMatrix0.setRow(0, (Vector) basicVector0);
      // Undeclared exception!
      try { 
        ((Matrix)basic2DMatrix0).fail("jev`zY:]1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // jev`zY:]1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(372, 2447, 1487);
      Matrix matrix0 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix0);
      Vector vector0 = Vector.zero(3);
      // Undeclared exception!
      try { 
        matrix0.insertRow(3, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 3. Should be: 372.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 234;
      Matrix matrix0 = Matrix.identity(234);
      // Undeclared exception!
      matrix0.mkString("org.la4j.operation.VectorVectorOperation$2", "org.la4j.operation.VectorVectorOperation$2");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 831.0;
      doubleArray1[2] = (-1434.2);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 831.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-1434.2);
      doubleArray2[5] = 1.0;
      doubleArray2[6] = (-1434.2);
      doubleArray2[7] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.232595164407831E-28;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = (-1434.2);
      doubleArray3[6] = 831.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 831.0;
      doubleArray4[1] = 1.1102230246251565E-14;
      doubleArray4[2] = 831.0;
      doubleArray4[3] = 831.0;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = (-1434.2);
      doubleArray4[6] = (-1434.2);
      doubleArray4[7] = 1.232595164407831E-28;
      doubleArray4[8] = 1.232595164407831E-28;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1.232595164407831E-28;
      doubleArray5[1] = 1.1102230246251565E-14;
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.1102230246251565E-14;
      doubleArray5[4] = 1.1102230246251565E-14;
      doubleArray5[5] = 1.232595164407831E-28;
      doubleArray5[6] = 1.0;
      doubleArray5[7] = 831.0;
      doubleArray5[8] = 1.1102230246251565E-14;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 1232.3917032200143;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = 1.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 1232.3917032200143;
      doubleArray7[1] = 1232.3917032200143;
      doubleArray7[2] = (-1434.2);
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 1.1102230246251565E-14;
      doubleArray7[5] = 0.0;
      doubleArray0[6] = doubleArray7;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.maxInColumn((-759));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-759' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-799.93);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-799.93);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-799.93);
      doubleArray2[3] = (-799.93);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = (-799.93);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-3572.2732);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-799.93);
      doubleArray3[7] = 1.0;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-2839.23266512098);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-799.93);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-3572.2732);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 1.0;
      doubleArray5[6] = 3065.0736406750925;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-799.93);
      doubleArray6[1] = 1.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-799.93);
      doubleArray6[4] = 1.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 1.232595164407831E-28;
      doubleArray0[5] = doubleArray6;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      String string0 = matrix0.mkString(numberFormat0);
      assertEquals("639,889    -1,600\n -1,600   639,889\n   -800         1\n -2,839 2,271,187\n   -800         1\n -1,600   639,889\n", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 32;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(32, mockRandom0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      denseVector0.multiply((double) 32);
      matrix0.columnMajorIterator();
      Matrix matrix1 = matrix0.transpose();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(32);
      inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      MatrixOperation<Matrix> matrixOperation0 = inPlaceCopyMatrixToMatrix0.partiallyApply(columnMajorSparseMatrix0);
      matrix1.apply(matrixOperation0);
      // Undeclared exception!
      matrix1.add((double) 32);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(7, 7);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transformRow(2055, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2055' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1858.073441409;
      doubleArray0[1] = 1065.62237354;
      doubleArray0[2] = 4642.08;
      doubleArray0[3] = 808.628693583698;
      doubleArray0[4] = 2034.1199085900087;
      doubleArray0[5] = 1.232595164407831E-28;
      doubleArray0[6] = (-1.0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      DenseVector denseVector0 = DenseVector.constant(5, 1858.073441409);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(5);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(3487, 1.232595164407831E-28, (Random) mockRandom0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, (-420), 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -420x21
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-523.132732);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1498.418);
      doubleArray1[4] = 1531.86874509;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-3142.6492);
      doubleArray2[2] = (-1498.418);
      doubleArray2[3] = 1531.86874509;
      doubleArray2[4] = 1531.86874509;
      doubleArray2[5] = (-1498.418);
      doubleArray2[6] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1498.418);
      doubleArray3[1] = 1531.86874509;
      doubleArray3[2] = (-523.132732);
      doubleArray3[3] = 1.0;
      doubleArray3[4] = (-523.132732);
      doubleArray3[5] = (-523.132732);
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = (-3142.6492);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.updateRow(434, (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2783);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      // Undeclared exception!
      sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1655.85);
      doubleArray1[1] = (-689.4);
      doubleArray1[2] = 358.0;
      doubleArray1[3] = 1119.7839436678;
      doubleArray1[4] = (-751.18736476333);
      doubleArray1[5] = (-1146.8602947);
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1119.7839436678;
      doubleArray2[1] = (-1146.8602947);
      doubleArray2[2] = 1119.7839436678;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1655.85);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 358.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 358.0;
      doubleArray4[3] = (-1655.85);
      doubleArray4[4] = (-1146.8602947);
      doubleArray4[5] = (-1146.8602947);
      doubleArray4[6] = 358.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-751.18736476333);
      doubleArray5[1] = (-1655.85);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-689.4);
      doubleArray6[2] = (-751.18736476333);
      doubleArray6[3] = (-1655.85);
      doubleArray6[4] = (-689.4);
      doubleArray6[5] = (-1146.8602947);
      doubleArray6[6] = 1119.7839436678;
      doubleArray6[7] = (-689.4);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (-1655.85);
      doubleArray7[1] = 358.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1119.7839436678;
      doubleArray7[4] = (-689.4);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-1655.85);
      doubleArray8[1] = 358.0;
      doubleArray8[2] = (-1655.85);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-689.4);
      doubleArray8[5] = (-1989.161544344);
      doubleArray8[6] = 0.0;
      doubleArray8[7] = (-751.18736476333);
      doubleArray8[8] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      doubleArray9[0] = 358.0;
      doubleArray9[1] = (-1655.85);
      doubleArray9[2] = 1119.7839436678;
      doubleArray9[3] = (-689.4);
      doubleArray9[4] = (-689.4);
      doubleArray9[5] = 358.0;
      doubleArray9[6] = (-1989.161544344);
      doubleArray0[8] = doubleArray9;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.norm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(230, 3212, 1946);
      int int0 = 1309;
      rowMajorSparseMatrix0.copyOfRows(1309);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      // Undeclared exception!
      matrix0.rank();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix matrix0 = Matrix.randomSymmetric(0, mockRandom0);
      Matrix matrix1 = matrix0.add((double) 0);
      Matrix matrix2 = Matrix.randomSymmetric(0, mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix3 = Matrix.zero(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix3.foldColumn(1627, vectorAccumulator0);
      matrix2.update(matrixFunction0);
      matrix1.swapColumns(0, 1020);
      matrix0.minInColumn(1020);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix1.foldRows(vectorAccumulator1);
      matrix1.minInColumn(1020);
      matrix1.eachInColumn((-76), vectorProcedure0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt((-3523), 0, matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2298, 49, (double[]) null);
      DenseMatrix denseMatrix1 = DenseMatrix.constant(2298, 1436, 49);
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) denseMatrix1, 1436, 2298);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 1436 rows and 2298 cols at 0, 0 in a 2298x49 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(2506, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(13, mockRandom0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.shuffle();
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotSame(matrix1, matrix0);
      assertEquals(13, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(0, vectorFunction0);
      matrix0.max();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      numberFormat0.setGroupingUsed(true);
      matrix0.mkString(numberFormat0);
      Matrix matrix1 = Matrix.zero(0, 0);
      matrix1.toMatrixMarket(numberFormat0);
      // Undeclared exception!
      try { 
        matrix0.sliceBottomRight(8, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [8..0][8..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1709);
      SparseMatrix sparseMatrix0 = SparseMatrix.random(9, 1709, 0.0, (Random) mockRandom0);
      sparseMatrix0.trace();
      // Undeclared exception!
      sparseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2076.42344);
      doubleArray1[1] = 1178.02989234;
      doubleArray1[2] = (-966.0);
      doubleArray1[3] = 3610.536554;
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-966.0);
      doubleArray2[1] = 3610.536554;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1178.02989234;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 3610.536554;
      doubleArray2[6] = 1178.02989234;
      doubleArray2[7] = (-966.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2076.42344);
      doubleArray3[2] = 3610.536554;
      doubleArray3[3] = (-2076.42344);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-2076.42344);
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = 3610.536554;
      doubleArray3[8] = 1178.02989234;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 3610.536554;
      doubleArray4[1] = 1178.02989234;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 3610.536554;
      doubleArray4[5] = (-1425.5);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = (-1.0);
      doubleArray4[8] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 1178.02989234;
      doubleArray5[1] = 3610.536554;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-2076.42344);
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (-966.0);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 3610.536554;
      doubleArray6[5] = (-2076.42344);
      doubleArray6[6] = 3610.536554;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = (-2076.42344);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-2076.42344);
      doubleArray7[3] = 3610.536554;
      doubleArray7[4] = (-1425.5);
      doubleArray7[5] = (-966.0);
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.removeRow(1824);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles(7.771561172376096E-14, (double) Integer.MAX_VALUE);
      Matrix matrix0 = Matrix.random(0, Integer.MAX_VALUE, mockRandom0);
      Matrix matrix1 = matrix0.subtract((double) 0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      SparseVector sparseVector0 = SparseVector.zero(1482, (-671));
      DenseVector denseVector0 = DenseVector.unit(2216);
      Vector vector0 = ooPlaceVectorsSubtraction0.apply(sparseVector0, denseVector0);
      // Undeclared exception!
      try { 
        matrix1.insertRow(1482, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 10;
      Matrix matrix0 = Matrix.identity(10);
      matrix0.columnMajorIterator();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      matrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.rank();
      Matrix matrix1 = matrix0.blank();
      denseVector0.sliceLeft(0);
      Matrix matrix2 = matrix0.sliceTopLeft(0, 13);
      assertNotSame(matrix2, matrix0);
      assertTrue(matrix2.equals((Object)matrix1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.964;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1773.26749251);
      doubleArray1[3] = 1870.2041770306382;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1870.2041770306382;
      doubleArray2[2] = (-1773.26749251);
      doubleArray2[3] = 2166.33;
      doubleArray2[4] = (-1773.26749251);
      doubleArray2[5] = (-1773.26749251);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1280.7);
      doubleArray0[1] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(37, 37, (-1773.26749251));
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.hadamardProduct(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 2x4 does not equal to 37x37.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 37;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 37;
      doubleArray0[2] = (double) 37;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(37, 37, doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.trace();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2297.454420169);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1430.361;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1430.361;
      doubleArray2[4] = 1430.361;
      doubleArray2[5] = (-2297.454420169);
      doubleArray2[6] = (-2297.454420169);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-2297.454420169);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1430.361;
      doubleArray3[3] = 1430.361;
      doubleArray3[4] = 1430.361;
      doubleArray3[5] = 1430.361;
      doubleArray3[6] = 1430.361;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-2297.454420169);
      doubleArray4[1] = 1430.361;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = (-2297.454420169);
      doubleArray4[4] = 1430.361;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-2297.454420169);
      doubleArray5[2] = 1430.361;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (-2297.454420169);
      doubleArray5[5] = (-2297.454420169);
      doubleArray5[6] = (-2397.4132639815);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-2297.454420169);
      doubleArray6[1] = (-2297.454420169);
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-2397.4132639815);
      doubleArray7[1] = (-2397.4132639815);
      doubleArray7[2] = 4.9E-324;
      doubleArray7[3] = (-2397.4132639815);
      doubleArray7[4] = (-2297.454420169);
      doubleArray7[5] = (-2397.4132639815);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = (-2297.454420169);
      doubleArray8[1] = 0.0;
      doubleArray8[2] = (-2297.454420169);
      doubleArray8[3] = 0.0;
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      double double0 = matrix0.max();
      assertEquals(1430.361, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      DenseMatrix denseMatrix1 = DenseMatrix.zero(1, 1);
      DenseMatrix denseMatrix2 = DenseMatrix.block(denseMatrix0, denseMatrix1, denseMatrix0, denseMatrix1);
      // Undeclared exception!
      try { 
        denseMatrix0.subtract((Matrix) denseMatrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 1x1 does not equal to 2x2.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 2497;
      Matrix matrix0 = Matrix.unit(2497, 2497);
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2328;
      doubleArray0[1] = (double) 2497;
      doubleArray0[2] = (double) 2497;
      doubleArray0[3] = (double) 2497;
      doubleArray0[4] = (double) 2497;
      doubleArray0[5] = (double) 2328;
      doubleArray0[6] = (double) 2497;
      Matrix.from1DArray(2497, 2328, doubleArray0);
      MockRandom mockRandom0 = new MockRandom(736L);
      Vector.random(2328, mockRandom0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(859, 100.0);
      // Undeclared exception!
      denseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(37, 293, 1916.0948768);
      // Undeclared exception!
      matrix0.divide((-1594.5186574477211));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.columnMajorIterator();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.randomSymmetric(2750, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 983;
      int int1 = 246;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(983, 246);
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceTopLeft(246, (-3449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..246][0..-3449].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 537;
      int int1 = 625;
      Matrix.constant(537, 625, 537);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 48;
      int int1 = 2427;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(48, 2427);
      rowMajorSparseMatrix0.minInColumn(48);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      Matrix.random(708, 708, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2175.82724;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1332.4772224;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-665.722464121);
      doubleArray0[6] = (-583.97);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.setColumn(10, 65.01);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1000, 8);
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        ((Matrix)cRSMatrix0).fail("9>V#enIOoF}ZU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9>V#enIOoF}ZU
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 338);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      // Undeclared exception!
      sparseMatrix0.toString();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(2, 2);
      int int1 = 2;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(2, mockRandom0);
      int int2 = 3613;
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 6, 2, 3613, 2732);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 6, 2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3743.6015243087;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 3743.6015243087;
      doubleArray2[2] = 3743.6015243087;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 3743.6015243087;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 3743.6015243087;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 3743.6015243087;
      doubleArray3[5] = 3743.6015243087;
      doubleArray3[6] = 3743.6015243087;
      doubleArray3[7] = 3743.6015243087;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 3743.6015243087;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.blankOfColumns(7);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(16, (-2581.8837));
      Matrix matrix0 = columnMajorSparseMatrix0.add((-1420.109939939913));
      DenseMatrix denseMatrix0 = DenseMatrix.unit(5, 5);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.blankOfRows((-291));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -291x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 10;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(10, 0.0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      columnMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      int int1 = 17;
      // Undeclared exception!
      try { 
        Matrix.random(17, 17, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2, 9.186049834788869E-45);
      sparseMatrix0.infinityNorm();
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int0 = (-177);
      MockRandom mockRandom0 = new MockRandom();
      sparseMatrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-177), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 1319;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1319, 1319, 1319);
      rowMajorSparseMatrix0.toMatrixMarket();
      rowMajorSparseMatrix0.diagonalProduct();
      int[] intArray0 = new int[3];
      intArray0[0] = 1319;
      Matrix.identity(338);
      intArray0[1] = 1319;
      int int1 = (-1699);
      intArray0[2] = (-1699);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1319' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 924;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(924, 924);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SEIDEL;
      // Undeclared exception!
      try { 
        denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 10;
      MockRandom mockRandom0 = new MockRandom(87L);
      Matrix matrix0 = Matrix.random(10, 10, mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.transform(matrixFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("cf_G+VT[.[");
      // Undeclared exception!
      try { 
        choiceFormat0.getCurrency();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 32;
      DenseVector denseVector0 = DenseVector.unit(32);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      int int1 = (-1525);
      // Undeclared exception!
      try { 
        matrix0.power((-1525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1525.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 264;
      Matrix matrix0 = Matrix.diagonal(264, 264);
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(264, 264, (-52.0));
      // Undeclared exception!
      ooPlaceKroneckerProduct0.applyCommon(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MockRandom mockRandom0 = new MockRandom(429L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(4, 4, mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      denseMatrix0.multiply(7.771561172376096E-14);
      // Undeclared exception!
      try { 
        matrix0.removeRow((-168));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.doubles(14L);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.randomSymmetric(0, 2924.9143553, (Random) mockRandom0);
      RowMajorSparseMatrix.randomSymmetric(0, 100.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(17, 17);
      Matrix matrix0 = sparseMatrix0.copyOfColumns(2161);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale1);
      sparseMatrix0.mkString(numberFormat0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = SparseVector.zero(17);
      MatrixOperation<Vector> matrixOperation0 = ooPlaceVectorByMatrixMultiplication0.partiallyApply(sparseVector0);
      matrix0.apply(matrixOperation0);
      matrix0.max();
      Matrix matrix1 = Matrix.identity(2161);
      assertEquals(0.0, matrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      Matrix matrix0 = Matrix.random(8, 8, mockRandom0);
      SparseVector sparseVector0 = SparseVector.random(8, 0.0, (Random) mockRandom0);
      Matrix matrix1 = sparseVector0.toRowMatrix();
      matrix0.removeFirstRow();
      // Undeclared exception!
      try { 
        matrix0.insert(matrix1, 8, 8, 1877, (-1226), 1877, 1877);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 1877, -1226
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(389, 1000, 2092);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(sparseMatrix0, sparseMatrix0);
      // Undeclared exception!
      matrix0.removeFirstRow();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1068, 1068);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1068, 17);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insert((Matrix) columnMajorSparseMatrix0, 1068, 1068, 9, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 9 rows and 3 cols at 1068, 1068 in a 1068x1068 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new OoPlaceKroneckerProduct();
      int int0 = 5;
      SparseVector sparseVector0 = SparseVector.zero(5);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      Matrix matrix1 = ooPlaceKroneckerProduct0.applyCommon(matrix0, matrix0);
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      matrix1.toMatrixMarket(numberFormat0);
      long long0 = 492L;
      MockRandom mockRandom0 = new MockRandom(492L);
      Matrix matrix2 = Matrix.randomSymmetric(5, mockRandom0);
      // Undeclared exception!
      try { 
        matrix2.getColumn(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(9);
      Matrix matrix0 = columnMajorSparseMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(9, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 933.541232;
      doubleArray0[1] = (-2944.11);
      doubleArray0[2] = (-52.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 2454.23356982;
      doubleArray0[5] = (-1783.1869906);
      doubleArray0[6] = (-2679.4359890638);
      doubleArray0[7] = (-926.517);
      doubleArray0[8] = (-3170.0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      denseVector0.mkString(numberFormat0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.hashCode();
      int int0 = 2407;
      // Undeclared exception!
      try { 
        matrix0.setRow(2407, (Vector) denseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 302;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(302);
      MatrixAccumulator matrixAccumulator0 = null;
      rowMajorSparseMatrix0.blankOfColumns(302);
      // Undeclared exception!
      try { 
        Vector.constant((-2375), 598.2533);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(504, 504);
      // Undeclared exception!
      sparseMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(1);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      matrix0.toColumnVector();
      // Undeclared exception!
      try { 
        matrix0.insertColumn(2246, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1;
      Matrix matrix0 = Matrix.identity(1);
      Matrix matrix1 = matrix0.multiplyByItsTranspose();
      matrix1.rank();
      matrix1.multiply(matrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix1.updateColumn(1, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1.1102230246251565E-14);
      linkedList0.addLast(double0);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.rank();
      matrix0.blank();
      denseVector0.sliceLeft(1);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft(1, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(9, 1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = rowMajorSparseMatrix0.toColumnMajorSparseMatrix();
      assertEquals(9, columnMajorSparseMatrix0.rows());
      assertEquals(1, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-6.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 276.0;
      doubleArray1[3] = 1391.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2751.053906);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1391.0;
      doubleArray2[1] = 276.0;
      doubleArray2[2] = (-2751.053906);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-6.0);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.manhattanNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2378);
      // Undeclared exception!
      columnMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 136;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(136, 136, 136);
      int int1 = 8;
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 8;
      doubleArray2[1] = (double) 136;
      doubleArray2[2] = (double) 118;
      doubleArray2[3] = (double) 136;
      doubleArray2[4] = (double) 118;
      doubleArray2[5] = (-1019.239346784417);
      doubleArray2[6] = (double) 118;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 118;
      doubleArray3[1] = (double) 136;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 136;
      doubleArray4[1] = (-1019.239346784417);
      doubleArray4[2] = (double) 8;
      doubleArray4[3] = (double) 118;
      doubleArray4[4] = (double) 136;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1019.239346784417);
      doubleArray5[1] = (double) 136;
      doubleArray5[2] = (double) 118;
      doubleArray5[3] = (double) 8;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 8;
      doubleArray6[1] = (-1019.239346784417);
      doubleArray6[2] = (double) 8;
      doubleArray6[3] = (double) 8;
      doubleArray0[5] = doubleArray6;
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.updateAt(118, 8, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(719);
      int int0 = 202;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(202, mockRandom0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(719, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 202. Should be: 719.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2898, 2898);
      double double0 = denseMatrix0.maxInRow(1);
      assertEquals(2898.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 1170;
      int int1 = 2;
      Matrix matrix0 = Matrix.zero(1170, 2);
      // Undeclared exception!
      try { 
        matrix0.sum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.identity((-221));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 719;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(719);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.sliceTopLeft((-1472), 719);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1472][0..719].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(5, 5);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_LU;
      MatrixDecompositor matrixDecompositor0 = matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertNotNull(matrixDecompositor0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1279.680648172975;
      doubleArray2[1] = 1.1102230246251565E-14;
      doubleArray2[2] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 1.1102230246251565E-14;
      doubleArray3[2] = 1279.680648172975;
      doubleArray3[3] = 1.1102230246251565E-14;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 1.1102230246251565E-14;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 1.1102230246251565E-14;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = 1279.680648172975;
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = 1279.680648172975;
      doubleArray4[8] = 1279.680648172975;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 1279.680648172975;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-4519.76757847242);
      doubleArray5[3] = 1.1102230246251565E-14;
      doubleArray0[4] = doubleArray5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      double double0 = columnMajorSparseMatrix0.minInRow(8);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(449, (-2887));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 449x-2887
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "jev`zY:]1";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("jev`zY:]1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(5, 5);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      columnMajorSparseMatrix0.columns();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateColumn(7, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(13, mockRandom0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 1519;
      MockRandom mockRandom0 = new MockRandom((-1916L));
      // Undeclared exception!
      Matrix.random(1519, 1519, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-52.0);
      doubleArray1[1] = (-3448.8);
      doubleArray1[2] = 1.1102230246251565E-14;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-3448.8);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 1.1102230246251565E-14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = (-3448.8);
      doubleArray3[3] = 1.1102230246251565E-14;
      doubleArray3[4] = (-3448.8);
      doubleArray3[5] = (-3448.8);
      doubleArray0[2] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(5, denseMatrix0.columns());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      DenseMatrix denseMatrix1 = matrix0.toDenseMatrix();
      assertEquals(5, denseMatrix1.columns());
      assertEquals(3, denseMatrix1.rows());
      assertEquals(3, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DenseMatrix.fromCSV("          ");
      int int0 = (-137);
      int int1 = 7;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-137);
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) (-137);
      doubleArray0[6] = (double) 7;
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((-137), 7, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -137x7
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 2872;
      Matrix matrix0 = Matrix.unit(2872, 2872);
      int int1 = (-484);
      int int2 = 2704;
      // Undeclared exception!
      try { 
        matrix0.set((-484), 2704, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(37, 37);
      // Undeclared exception!
      try { 
        sparseMatrix0.maxInRow(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.constant((-3539), 4, (-3539));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom(367L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      int int1 = 496;
      mockRandom0.nextDouble();
      Matrix matrix0 = denseMatrix0.power(496);
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.setRow(496, 3785.916136);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = (-1787);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1787);
      doubleArray0[1] = (double) (-1787);
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1787), (-1787), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1787x-1787
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(777, 2.0);
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = (double) 777;
      doubleArray2[3] = (double) 777;
      doubleArray2[4] = (double) 777;
      doubleArray2[5] = 2.0;
      doubleArray2[6] = (double) 777;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 777;
      doubleArray3[1] = (double) 777;
      doubleArray3[2] = (double) 777;
      doubleArray3[3] = 2.0;
      doubleArray3[4] = (double) 777;
      doubleArray3[5] = (double) 777;
      doubleArray3[6] = (double) 777;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 777;
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 2.0;
      doubleArray4[3] = (double) 777;
      doubleArray4[4] = (double) 777;
      doubleArray4[5] = 2.0;
      doubleArray4[6] = (double) 777;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (double) 777;
      doubleArray5[2] = (double) 777;
      doubleArray5[3] = (double) 777;
      doubleArray5[4] = (-1.0);
      doubleArray5[5] = (double) 777;
      doubleArray0[4] = doubleArray5;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        denseMatrix0.multiply(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 777 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      int int1 = 5;
      // Undeclared exception!
      try { 
        Matrix.zero(Integer.MAX_VALUE, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      String string0 = "se";
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV("se");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 562.8015;
      doubleArray1[5] = 1677.493570605817;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1677.493570605817;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 562.8015;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-665.09);
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = (-1492);
      int int1 = 1000;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-1492), 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1492x1000
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4, 4);
      Matrix matrix0 = sparseMatrix0.rotate();
      assertEquals(4, matrix0.columns());
      
      Matrix matrix1 = sparseMatrix0.removeFirstColumn();
      assertEquals(3, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1705.1130188963);
      doubleArray1[1] = (-215.1583787735185);
      doubleArray1[2] = (-215.1583787735185);
      doubleArray1[3] = 100.0;
      doubleArray1[4] = (-1442.10316);
      doubleArray1[5] = (-2356.2045655);
      doubleArray1[6] = (-15.7112);
      doubleArray1[7] = 1.1102230246251565E-14;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-2356.2045655);
      doubleArray3[1] = (-215.1583787735185);
      doubleArray3[2] = 100.0;
      doubleArray3[3] = 1.1102230246251565E-14;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1705.1130188963);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-1705.1130188963);
      doubleArray5[1] = 1.1102230246251565E-14;
      doubleArray5[2] = (-1705.1130188963);
      doubleArray5[3] = 100.0;
      doubleArray5[4] = 100.0;
      doubleArray5[5] = (-1442.10316);
      doubleArray5[6] = 1.1102230246251565E-14;
      doubleArray5[7] = 1.1102230246251565E-14;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-1705.1130188963);
      doubleArray6[2] = (-215.1583787735185);
      doubleArray6[3] = (-15.7112);
      doubleArray6[4] = 100.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray3[0] = (-1705.1130188963);
      doubleArray7[1] = 100.0;
      doubleArray7[2] = (-1442.10316);
      doubleArray7[3] = (-215.1583787735185);
      doubleArray7[4] = 1.1102230246251565E-14;
      doubleArray7[5] = (-2356.2045655);
      doubleArray0[6] = doubleArray7;
      DenseMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(17, 17);
      matrix0.setRow(16, 2679.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("+3");
      Matrix matrix1 = matrix0.insert((Matrix) columnMajorSparseMatrix0);
      matrix1.hashCode();
      matrix0.euclideanNorm();
      matrix0.sliceBottomRight(16, 17);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 413;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(413, 413);
      Matrix matrix2 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, denseMatrix0);
      Matrix matrix3 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, columnMajorSparseMatrix0);
      matrix3.transpose();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0, matrix2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(4, 4);
      Matrix matrix0 = sparseMatrix0.rotate();
      sparseMatrix0.toRowVector();
      matrix0.multiplyByItsTranspose();
      matrix0.max();
      // Undeclared exception!
      try { 
        sparseMatrix0.apply((MatrixOperation<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = (-471);
      int int1 = 1;
      MockRandom mockRandom0 = new MockRandom(1L);
      // Undeclared exception!
      try { 
        DenseMatrix.random((-471), 1, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = (-1024);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random((-1024), 1311, (-3721.9103), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SparseMatrix.identity(803);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 228;
      SparseMatrix.diagonal(228, 228);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      ooPlaceVectorsAddition0.partiallyApply(sparseVector0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        SparseVector.random(228, (double) 228, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }
}
