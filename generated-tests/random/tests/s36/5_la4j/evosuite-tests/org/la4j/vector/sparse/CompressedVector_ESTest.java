/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 21:13:00 GMT 2019
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      CompressedVector compressedVector0 = new CompressedVector(3, 3, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1467.5;
      doubleArray0[1] = 9954.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.zero(1672);
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, compressedVector0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(4, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3771, 1667);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)14, (byte) (-69), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[6];
      intArray0[0] = 8;
      CompressedVector compressedVector0 = new CompressedVector(8, 13, doubleArray0, intArray0);
      double double0 = compressedVector0.sum();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1498, 1498);
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.iterator();
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(3, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll((-4383.601628901653));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3771, 1667);
      double double0 = compressedVector0.getOrElse(1667, (-3126.071));
      assertEquals((-3126.071), double0, 0.01);
      assertEquals(3771, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      Vector vector0 = compressedVector0.blankOfLength(1);
      assertEquals(1, vector0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3771, 1667);
      // Undeclared exception!
      try { 
        compressedVector0.set(3771, (-83001.36000000002));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3771' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2249);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(2249, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2249' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 246.5;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -581
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = new CompressedVector(9970, 4, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1523.527468875017);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.add((Vector) compressedVector0);
      assertEquals(0.125, compressedVector1.density(), 0.01);
      assertEquals(0.125, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[6];
      CompressedVector compressedVector0 = new CompressedVector(8, 13, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.shuffle();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 13.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(286, (-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1038.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      int[] intArray0 = new int[2];
      CompressedVector compressedVector0 = new CompressedVector(3, 3, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1523.527468875017);
      doubleArray0[1] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2687);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.set(1, (-1.0));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2571, 2571);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(sparseVector0, compressedVector0);
      assertEquals(2571, sparseVector0.length());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt((-1095));
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3230, 3230);
      compressedVector0.setAll(3230);
      boolean boolean0 = compressedVector0.nonZeroAt(357);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17);
      boolean boolean0 = compressedVector0.nonZeroAt(17);
      assertFalse(boolean0);
      assertEquals(17, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(4802.427987400866);
      linkedList0.add(double0);
      linkedList0.addLast(double0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 715.88861078;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(167.437).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1741), vectorFunction0);
      assertEquals(0.2857142857142857, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = Double.valueOf(4802.427987400866);
      linkedList0.add(double0);
      linkedList0.addLast(double0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      //  // Unstable assertion: assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2571, 2571);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(2571, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[6];
      CompressedVector compressedVector0 = new CompressedVector(8, 13, doubleArray0, intArray0);
      double double0 = compressedVector0.sum();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3771, 1667);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1667);
      assertEquals(3771, compressedVector0.length());
      assertEquals(1667, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-606.1775474);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(1, 7);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1523.527468875017);
      doubleArray0[7] = 1783.859087190111;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(7, (-481));
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 2;
      CompressedVector compressedVector0 = new CompressedVector(2, 2, (double[]) null, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3230, 3230);
      compressedVector0.setAll(3230);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3230, 357);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1921.23653);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-1697), 2291);
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = 1783.859087190111;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(7, (-481));
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(17, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3771, 1667);
      compressedVector0.setAll(654.220517);
      double double0 = compressedVector0.sum();
      assertEquals(3771, compressedVector0.cardinality());
      assertEquals(2467065.569607, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(0.0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1523.527468875017);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.set(0, 2019.0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1622.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft(9939);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '4' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(17);
      double double0 = compressedVector0.getOrElse(2, 1544.0);
      assertEquals(17, compressedVector0.length());
      assertEquals(1544.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(13);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1697));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-1062));
      Long long0 = new Long(0L);
      hashMap0.put(integer0, long0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-3407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(856);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 4090);
      assertEquals(2.4449877750611245E-4, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      CompressedVector compressedVector0 = new CompressedVector(1, 1, doubleArray0, intArray0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(25, byteArray0.length);
      assertEquals(1.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.random(2243, (double) 4558, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector compressedVector0 = CompressedVector.random(237, 1.0, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(237, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(17, (-3204.4), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("W%0OBAGj'PP.J8D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket(":`HBbYf!~q~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }
}
