/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 01:40:07 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer((-578));
      String string0 = doubleKeyMap0.remove(integer0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>();
      Object object0 = doubleKeyMap0.remove((Object) null, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Map<HashMap<String, String>, String>> hashMap0 = new HashMap<Object, Map<HashMap<String, String>, String>>();
      DoubleKeyMap<Object, HashMap<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, String>(hashMap0);
      HashMap<Object, Map<HashMap<Object, String>, Object>> hashMap1 = new HashMap<Object, Map<HashMap<Object, String>, Object>>();
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>(hashMap1);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      Map<Integer, String> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<String, Object>, Object, Map<HashMap<Object, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Object>, Object, Map<HashMap<Object, Object>, Object>>();
      DoubleKeyMap<Object, Integer, Map<HashMap<Object, Object>, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<HashMap<Object, Object>, Object>>();
      Map<Integer, Map<HashMap<Object, Object>, Object>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<HashMap<Object, String>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<Object, String>, Object>>();
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Object) "7]tmke(s5PD`Kd,", hashMap1, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      String string0 = doubleKeyMap0.put("U!THwN5FTuy+qK\"", (Integer) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0);
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap0.put(integer0, (Object) doubleKeyMap1, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(2798);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      doubleKeyMap0.put((String) null, integer0, "NW=S\u0004>35;&v");
      Map<Integer, String> map0 = doubleKeyMap0.remove((String) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      DoubleKeyMap<Object, HashMap<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Object>();
      Object object0 = new Object();
      HashMap<HashMap<Object, Object>, Object> hashMap1 = new HashMap<HashMap<Object, Object>, Object>();
      Object object1 = doubleKeyMap0.put(object0, hashMap0, (Object) hashMap1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      String string0 = doubleKeyMap0.get("", (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<String, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>(map0);
      Integer integer0 = doubleKeyMap1.get((String) null, "");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null);
      Map<Object, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Map<Map<Integer, String>, Map<String, String>>, HashMap<String, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Integer, String>, Map<String, String>>, HashMap<String, Object>, HashMap<Object, Object>>(class0);
      Map<Map<Integer, String>, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Map<Integer, String>, String, String> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, String>, String, String>(map0, class1);
      HashMap<Object, Map<Integer, HashMap<Integer, String>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Integer, String>>>();
      DoubleKeyMap<Object, Integer, HashMap<Integer, String>> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, HashMap<Integer, String>>(hashMap0);
      Map<Integer, HashMap<Integer, String>> map1 = doubleKeyMap2.get((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, Map<String, Map<HashMap<Object, Object>, Object>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<HashMap<Object, Object>, Object>> doubleKeyMap1 = new DoubleKeyMap<String, String, Map<HashMap<Object, Object>, Object>>(map0, class0);
      DoubleKeyMap<Map<HashMap<Object, Object>, Object>, Object, String> doubleKeyMap2 = new DoubleKeyMap<Map<HashMap<Object, Object>, Object>, Object, String>();
      Map<HashMap<Object, Object>, Object> map1 = doubleKeyMap2.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("", "", map1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>((Map<String, Map<Integer, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<HashMap<Object, Object>, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<HashMap<Object, Object>, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0);
      Integer integer0 = new Integer(3654);
      Integer integer1 = new Integer(0);
      doubleKeyMap1.put("sbQ.f%fpKG<mb??O", integer1, "sbQ.f%fpKG<mb??O");
      doubleKeyMap1.remove("sbQ.f%fpKG<mb??O", integer0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0);
      Integer integer0 = new Integer(3654);
      doubleKeyMap1.put("sbQ.f%fpKG<mb??O", integer0, "sbQ.f%fpKG<mb??O");
      String string0 = doubleKeyMap1.put("sbQ.f%fpKG<mb??O", integer0, "sbQ.f%fpKG<mb??O");
      assertEquals("sbQ.f%fpKG<mb??O", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(1984);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>(class0);
      doubleKeyMap0.put("", integer0, "");
      String string0 = doubleKeyMap0.get("", integer0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, Object>(class0);
      Map<HashMap<String, Integer>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<String, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, Integer>, Object, Object>(map0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Object object0 = doubleKeyMap1.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0);
      Integer integer0 = new Integer((-18));
      doubleKeyMap1.put("sbQ.f%fpKG<mb??k", integer0, "sbQ.f%fpKG<mb??k");
      assertEquals(1, map0.size());
      
      doubleKeyMap1.remove("sbQ.f%fpKG<mb??k", integer0);
      assertTrue(map0.isEmpty());
  }
}
