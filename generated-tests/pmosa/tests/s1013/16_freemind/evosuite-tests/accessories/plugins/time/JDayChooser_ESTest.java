/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:12:48 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.sql.Timestamp;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.Vector;
import javax.help.ForwardAction;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JMenuBar;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.SimpleAttributeSet;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.dom.events.DOMKeyEvent;
import org.apache.batik.ext.awt.ColorSpaceHintKey;
import org.apache.batik.ext.awt.color.ICCColorSpaceExt;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemIf;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.darkGray;
      jDayChooser0.decorationBackgroundColor = color0;
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.drawDays();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      jDayChooser0.setAlwaysFireDayProperty(true);
      int int0 = 0;
      jDayChooser0.setAlwaysFireDayProperty(true);
      int int1 = (-499);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 455, 455, 0, 5, 'M', (-499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.getY();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMouseListeners();
      jDayChooser0.setFocus();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2458), false);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.isDecorationBordersVisible();
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getSelectedDay();
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color1);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, 0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      jTable0.getEditorComponent();
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate(31, 228, (-1433), 228, 39);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getMaxSelectableDate();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser0.paintAll(pDFDocumentGraphics2D0);
      jDayChooser1.getWeekdayForeground();
      jDayChooser1.getWeekdayForeground();
      jDayChooser0.setMaxDayCharacters(25);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.lightGray;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 33, 35, 33, 'B');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElemIf elemIf0 = new ElemIf();
      SVGGeneratorContext.createDefault(elemIf0);
      Color color0 = Color.RED;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      System.setCurrentTimeMillis((-222L));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-594), 1258L, 6, 1164, 'A');
      KeyEvent.getExtendedKeyCodeForChar(4);
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 6, (-2278), (-2278), (-2278), 'N');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-2059L), 27, 11, 'f');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.isDayBordersVisible();
      Date date0 = jDayChooser0.getMinSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ForwardAction forwardAction0 = new ForwardAction(locale0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) forwardAction0, (MouseListener) forwardAction0);
      jDayChooser_DecoratorButton0.addMouseListener(mouseListener0);
      JList<Desktop.Action> jList0 = new JList<Desktop.Action>();
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getMaxDayCharacters();
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.setForeground(systemColor0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      AbstractDocument.LeafElement abstractDocument_LeafElement0 = null;
      try {
        abstractDocument_LeafElement0 = defaultStyledDocument0.new LeafElement(element0, simpleAttributeSet0, 0, 0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Illegal cast to MutableAttributeSet
         //
         verifyException("javax.swing.text.AbstractDocument$AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser1.getMaxSelectableDate();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser0.paintAll(pDFDocumentGraphics2D0);
      jDayChooser1.getWeekdayForeground();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      jDayChooser1.setMaxDayCharacters((-4));
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      Locale locale0 = Locale.CHINA;
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.drawWeeks();
      jDayChooser0.addListeners(26);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color color0 = Color.white;
      Locale locale0 = Locale.CHINA;
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 37, 0L, 11, 49, '3');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      Locale locale0 = Locale.CHINA;
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.drawWeeks();
      KeyEvent.getExtendedKeyCodeForChar(4);
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JMenuBar jMenuBar0 = new JMenuBar();
      menuElementArray0[0] = (MenuElement) jMenuBar0;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, (-346), 4, 210, 3068, '<', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-346), false);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser0.paintAll(pDFDocumentGraphics2D0);
      jDayChooser1.getWeekdayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 37, 46, (-3419), '[');
      jDayChooser1.keyPressed(keyEvent0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      Locale locale0 = Locale.CHINA;
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 18, 18, (-1301), 40, '[');
      jDayChooser0.keyPressed(keyEvent0);
      Object object0 = ColorSpaceHintKey.VALUE_COLORSPACE_ALPHA_CONVERT;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 22, "day", 14);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, color0.getBlue());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.JAPANESE;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      JButton jButton0 = new JButton();
      jDayChooser0.setYear(5);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.GREEN;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 26, 6, 6, 3761, 'C');
      int int0 = DOMKeyEvent.DOM_VK_BACK_SPACE;
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser2.initDecorations();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser2.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.RED;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      System.setCurrentTimeMillis(0L);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 26, 6, 6, 3761, 'C');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, 26, 0L, 30, (-219), 'C');
      Color color1 = jDayChooser1.getWeekdayForeground();
      assertEquals((-16754012), color1.getRGB());
      
      jDayChooser1.setMaxDayCharacters(30);
      jDayChooser0.initDecorations();
      SystemColor systemColor0 = SystemColor.desktop;
      jDayChooser1.setSundayForeground(systemColor0);
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.GREEN;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser0.getWeekdayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, (-169L), 33, 35, 'n');
      int int0 = DOMKeyEvent.DOM_VK_BACK_SPACE;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.initDecorations();
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.GREEN;
      Color.getColor("x", color0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale locale0 = Locale.CHINA;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser1.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 10, 10, (-1834), 37, 'F');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser1.setEnabled(false);
      assertEquals(13, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBordersVisible(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BorderLayout borderLayout0 = new BorderLayout();
      jDayChooser_DecoratorButton0.setLayout(borderLayout0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getDay();
      Date date0 = jDayChooser0.getMinSelectableDate();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      jDayChooser0.setCalendar(gregorianCalendar0);
      jYearChooser0.requestFocusInWindow();
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, (-501), false);
      jDayChooser0.focusGained(focusEvent0);
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getLocale();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.drawDays();
      jDayChooser0.setMonth((-501));
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setMaxDayCharacters((-501));
      jDayChooser0.setMaxSelectableDate(date1);
      jDayChooser0.setWeekdayForeground(color0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 164, (-501), 14, 14, 'Y', 317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = DOMKeyEvent.DOM_VK_BACK_SPACE;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      boolean boolean0 = jDayChooser1.isWeekOfYearVisible();
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.GREEN;
      Color color1 = Color.lightGray;
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, (-169L), 33, 33, 'n');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 43, 43, 43, 34, 'R');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 37, 37, 36, 'a');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, (-1829L), 8201, 39, 'e');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(16, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 40, 40, 40, '\u001E');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 40, 40, 40, '\"');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 411, (-268L), 411, 38, 'u');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }
}
