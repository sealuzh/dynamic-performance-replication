/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:51:15 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(0, 1508);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 1508.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      Vector vector0 = compressedVector0.blankOfLength(1613);
      assertEquals(1613, vector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("3");
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(1523, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      compressedVector0.toCSV();
      compressedVector0.setAll(1523);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.update(vectorFunction0);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 72);
      assertEquals(72, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1511, 1511);
      compressedVector0.swapElements(1511, 1511);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1549, 1549);
      compressedVector0.setAll(1549);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 1549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      assertNotNull(compressedVector0);
      assertEquals(1523, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(1523);
      assertEquals(1523, compressedVector0.length());
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.transform(vectorFunction0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1523, compressedVector0.length());
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1523, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, (Integer) null);
      assertNull(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(1636);
      assertNotNull(integer0);
      assertEquals(1636, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, (Integer) null);
      assertNull(integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      int int0 = 2616;
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2616);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(3, (double) 3, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-3512), (double) (-3512), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1352);
      assertNotNull(compressedVector0);
      assertEquals(1352, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(32);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1352, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(32, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-1));
      assertFalse(boolean0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(3, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      assertNotNull(compressedVector0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      compressedVector0.setAll(1.0);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(8, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(8, 79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(1523, 1523);
      assertNotNull(compressedVector1);
      assertEquals(1523, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.blank();
      assertNotNull(compressedVector2);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1523, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(1523, compressedVector2.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      compressedVector0.getOrElse(7, 7);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0, 0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-9), 948);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(5274, (-92));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -92.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1533, 1533);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1533, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(1533);
      assertEquals(1533, compressedVector0.cardinality());
      assertEquals(1533, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(1533, (-2203));
      assertEquals(1533, compressedVector0.cardinality());
      assertEquals(1533, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1549, 1549);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1549, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(1549);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1549, compressedVector0.length());
      assertEquals(1549, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2363), vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1549, compressedVector0.length());
      assertEquals(1549, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(16, 3790);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1527);
      assertNotNull(compressedVector0);
      assertEquals(1527, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(1527);
      assertEquals(1527, compressedVector0.length());
      assertEquals(1527, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = new CompressedVector(1527, 1527);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1527, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      assertNotNull(compressedVector0);
      assertEquals(1523, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(1523, (-40));
      assertEquals(1523, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(102);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(102, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(102, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 801.21336;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {801.21336}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {801.21336}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.length());
      
      compressedVector0.setAll(1523);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      
      double double0 = compressedVector0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1523).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1523, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(1523);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1523, 215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3455, 1549);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3455, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll(3455);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3455, compressedVector0.length());
      assertEquals(3455, compressedVector0.cardinality());
      
      compressedVector0.swapElements(1549, 1620);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3455, compressedVector0.length());
      assertEquals(3455, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Vector vector0 = compressedVector0.add((double) 0);
      assertNotNull(vector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1290, vector0.length());
      
      Integer integer0 = hashMap0.put((Integer) null, (Integer) null);
      assertNull(integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Integer integer1 = new Integer(6);
      assertNotNull(integer1);
      assertEquals(6, (int)integer1);
      
      Integer integer2 = new Integer((-417));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-417), (int)integer2);
      
      Integer integer3 = hashMap0.getOrDefault(compressedVector0, integer2);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-417), (int)integer3);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)5, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-417)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1086, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(6);
      assertFalse(boolean0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(1086);
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(1086, columnMajorSparseMatrix0.cardinality());
      assertEquals(9.208103130755065E-4, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1086, columnMajorSparseMatrix0.rows());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1086, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, columnMajorSparseMatrix0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(1086, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1086, columnMajorSparseMatrix0.cardinality());
      assertEquals(9.208103130755065E-4, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1086, columnMajorSparseMatrix0.rows());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1086, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector0, compressedVector1);
      
      boolean boolean1 = compressedVector0.equals(vector0, (double) 6);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, vector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      compressedVector0.setAll(1086);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(1523);
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.isZeroAt((-2842));
      assertTrue(boolean0);
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2842), 5071);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1523
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Vector vector0 = compressedVector0.add((double) 0);
      assertNotNull(vector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, vector0.length());
      
      Integer integer0 = new Integer(1086);
      assertNotNull(integer0);
      assertEquals(1086, (int)integer0);
      
      Integer integer1 = hashMap0.getOrDefault(vector0, integer0);
      assertNotNull(integer1);
      assertEquals(1086, (int)integer1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1290, vector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)5, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(281.88375230144715).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1086, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertNotNull(string0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertFalse(boolean0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      
      MockRandom mockRandom0 = new MockRandom(2840L);
      assertNotNull(mockRandom0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.identity(906);
      assertNotNull(cCSMatrix0);
      assertEquals(906, cCSMatrix0.columns());
      assertEquals(0.0011037527593818985, cCSMatrix0.density(), 0.01);
      assertEquals(906, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(906, cCSMatrix0.rows());
      
      boolean boolean1 = compressedVector0.equals(vector0, (double) 1086);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, vector0.length());
      
      compressedVector0.setAll(906);
      assertEquals(1290, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1066, 3464);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1549, 1549);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1549, compressedVector0.length());
      
      compressedVector0.setAll(1549);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1549, compressedVector0.cardinality());
      assertEquals(1549, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-25), 1549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1549
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1549, 1549);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1549, compressedVector0.length());
      
      compressedVector0.setAll(1549);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1549, compressedVector0.length());
      assertEquals(1549, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-638), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.length());
      
      compressedVector0.setAll(1523);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      
      String string0 = compressedVector0.toCSV();
      assertNotNull(string0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1523, compressedVector0.cardinality());
      assertEquals(1523, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, (-638));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1290, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.columns());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)5, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      compressedVector0.set(0, 1290);
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(707.21084909).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1290, vectorFunction0);
      assertEquals(0.0015503875968992248, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      
      int int0 = Integer.compareUnsigned(3599, 1);
      assertEquals(1, int0);
      
      Integer integer0 = Integer.getInteger("D}SeBZj'[m");
      assertNull(integer0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(0, 3599);
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Integer integer1 = hashMap0.getOrDefault(double0, (Integer) null);
      assertNull(integer1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0.0015503875968992248, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0.0015503875968992248, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertNotSame(byteArray1, byteArray0);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2083.9979).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction1);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.002325581395348837, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertTrue(boolean0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.002325581395348837, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      
      MockRandom mockRandom0 = new MockRandom(2313L);
      assertNotNull(mockRandom0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)ColumnMajorSparseMatrix.identity(1);
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(1.0, cCSMatrix1.density(), 0.01);
      assertEquals(1, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1, cCSMatrix1.rows());
      assertNotSame(cCSMatrix1, cCSMatrix0);
      
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertNotNull(compressedVector1);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.002325581395348837, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1290, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(compressedVector1, compressedVector0);
      
      boolean boolean1 = compressedVector0.equals((Vector) compressedVector1, 1851.199315647362);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.002325581395348837, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1290, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(compressedVector1, compressedVector0);
      
      org.evosuite.runtime.Random.setNextRandom(10);
      compressedVector0.setAll(473.5516295981);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      
      compressedVector0.swapElements(1, 10);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1290, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)5, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      compressedVector0.set(0, 1290);
      assertEquals(1290, compressedVector0.length());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      int int0 = Integer.compareUnsigned(3599, 1);
      assertEquals(1, int0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(0, 3599);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1290, compressedVector0.length());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      byte[] byteArray1 = compressedVector0.toBinary();
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1290, compressedVector0.length());
      assertEquals(7.751937984496124E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(byteArray1, byteArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1064.8563581359506).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0015503875968992248, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(1);
      assertTrue(boolean0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0015503875968992248, compressedVector0.density(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(2313L);
      assertNotNull(mockRandom0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      CompressedVector compressedVector1 = (CompressedVector)ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0015503875968992248, compressedVector0.density(), 0.01);
      assertEquals(1290, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      boolean boolean1 = compressedVector0.equals((Vector) compressedVector1, 1851.199315647362);
      assertFalse(boolean1 == boolean0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(boolean1);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0015503875968992248, compressedVector0.density(), 0.01);
      assertEquals(1290, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      org.evosuite.runtime.Random.setNextRandom(10);
      compressedVector0.setAll(2313L);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1290, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray1);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1290, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(7.751937984496124E-4, compressedVector2.density(), 0.01);
      assertEquals(1290, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(byteArray1, byteArray0);
      
      compressedVector2.setAll(1);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1290, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1290, compressedVector2.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("row-major");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      assertNotNull(compressedVector0);
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1290, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)5, (byte)10, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      compressedVector0.setAll(1290);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1290, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(1290, compressedVector0.length());
      assertEquals(1289, compressedVector0.cardinality());
      assertEquals(0.9992248062015504, compressedVector0.density(), 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1087;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1087.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1087.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.divide(1087);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {1087.0}, doubleArray0, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1087).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector1.foldNonZero(vectorAccumulator0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1087.0, double0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertArrayEquals(new double[] {1087.0}, doubleArray0, 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.identity(1087);
      assertNotNull(cCSMatrix0);
      assertEquals(1087, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1087, cCSMatrix0.rows());
      assertEquals(1087, cCSMatrix0.columns());
      assertEquals(9.199632014719411E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      CompressedVector compressedVector2 = (CompressedVector)ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector1, (ColumnMajorSparseMatrix) cCSMatrix0);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1087, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1087, cCSMatrix0.rows());
      assertEquals(1087, cCSMatrix0.columns());
      assertEquals(9.199632014719411E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(1087, compressedVector2.length());
      assertEquals(9.199632014719411E-4, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertArrayEquals(new double[] {1087.0}, doubleArray0, 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector2).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector3 = compressedVector0.to(vectorFactory0);
      assertNotNull(compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1087, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1087, cCSMatrix0.rows());
      assertEquals(1087, cCSMatrix0.columns());
      assertEquals(9.199632014719411E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(1087, compressedVector2.length());
      assertEquals(9.199632014719411E-4, compressedVector2.density(), 0.01);
      assertEquals(9.199632014719411E-4, compressedVector3.density(), 0.01);
      assertEquals(1087, compressedVector3.length());
      assertEquals(1, compressedVector3.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertArrayEquals(new double[] {1087.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector4 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector4);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector4.equals((Object)compressedVector0));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector3));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector4.length());
      assertEquals(1, compressedVector4.cardinality());
      assertEquals(1.0, compressedVector4.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotSame(compressedVector4, compressedVector3);
      assertArrayEquals(new double[] {1087.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector5 = (CompressedVector)compressedVector3.copyOfLength(1087);
      assertNotNull(compressedVector5);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector1.equals((Object)compressedVector4));
      assertFalse(compressedVector1.equals((Object)compressedVector3));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector4));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector4));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector5.equals((Object)compressedVector0));
      assertTrue(compressedVector5.equals((Object)compressedVector3));
      assertFalse(compressedVector5.equals((Object)compressedVector1));
      assertFalse(compressedVector5.equals((Object)compressedVector4));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1087, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1087, cCSMatrix0.rows());
      assertEquals(1087, cCSMatrix0.columns());
      assertEquals(9.199632014719411E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(1087, compressedVector2.length());
      assertEquals(9.199632014719411E-4, compressedVector2.density(), 0.01);
      assertEquals(9.199632014719411E-4, compressedVector3.density(), 0.01);
      assertEquals(1087, compressedVector3.length());
      assertEquals(1, compressedVector3.cardinality());
      assertEquals(1, compressedVector5.cardinality());
      assertEquals(9.199632014719411E-4, compressedVector5.density(), 0.01);
      assertEquals(1087, compressedVector5.length());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector5);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector1, compressedVector4);
      assertNotSame(compressedVector1, compressedVector5);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector5);
      assertNotSame(compressedVector2, compressedVector4);
      assertSame(compressedVector2, compressedVector3);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector5);
      assertNotSame(compressedVector3, compressedVector4);
      assertSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector5, compressedVector0);
      assertNotSame(compressedVector5, compressedVector1);
      assertNotSame(compressedVector5, compressedVector3);
      assertNotSame(compressedVector5, compressedVector2);
      assertNotSame(compressedVector5, compressedVector4);
      assertArrayEquals(new double[] {1087.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1290);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      CompressedVector compressedVector1 = CompressedVector.random(1746, (double) 0, (Random) mockRandom1);
      compressedVector0.setAll(1290);
      compressedVector1.swapElements(0, 0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1512);
      compressedVector0.setAll(1512);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-40));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      compressedVector0.setAll(1523);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(1523, 1523);
      // Undeclared exception!
      ooPlaceVectorByMatrixMultiplication0.apply((SparseVector) compressedVector0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 21);
      compressedVector0.toBinary();
      compressedVector0.set(21, 1290);
      compressedVector0.setAll(3057.4301403);
      compressedVector0.nonZeroIterator();
      compressedVector0.setAll(21);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)21).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(21, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      CompressedVector compressedVector1 = CompressedVector.zero(37);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.setAll(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.set(0, 1290);
      compressedVector0.setAll(3057.4301403229265);
      compressedVector0.set(0, 0);
      compressedVector0.nonZeroIterator();
      compressedVector0.swapElements(53, (-1807));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1523, 1523);
      compressedVector0.setAll(1523);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(7, (-638));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(1314, 0);
      compressedVector0.toBinary();
      compressedVector0.set(0, 1314);
      compressedVector0.setAll(3056.7879887213876);
      compressedVector0.set(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      compressedVector0.fold(vectorAccumulator0);
      compressedVector0.nonZeroIterator();
      compressedVector0.setAll(1314);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(53, (-1807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1290);
      compressedVector0.set(0, 1290);
      compressedVector0.swapElements((-1703), 0);
      org.evosuite.runtime.Random.setNextRandom(1272);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1290);
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector1 = CompressedVector.random(1290, (double) 0, (Random) mockRandom0);
      compressedVector1.setAll(858.2071613);
      compressedVector0.swapElements(1290, 0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1290, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2972), 141);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1272, 1272);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-4174));
      Integer integer1 = new Integer((-4174));
      Integer integer2 = new Integer((-4174));
      hashMap0.put(integer2, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1272);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector1 = CompressedVector.random(1290, 1.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)1290, (double)1290, (-1.0), (double)1290).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      compressedVector1.setAll(1.0);
      int int0 = 1074;
      compressedVector0.swapElements(0, 1290);
      compressedVector0.setAll(1.0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("muL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1290, 0);
      compressedVector0.toColumnMatrix();
      compressedVector0.toBinary();
      compressedVector0.set(0, 1290);
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector1 = CompressedVector.zero(0);
      compressedVector1.setAll(1290);
      compressedVector0.swapElements(141, 1074);
      compressedVector0.swapElements(0, 1290);
      // Undeclared exception!
      try { 
        compressedVector1.swapElements(0, 141);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1518, 1517);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
  }
}
