/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:14:50 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      float float0 = rationalNumber0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      float float0 = rationalNumber1.floatValue();
      assertEquals(0, rationalNumber0.numerator);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-3160L), (-3160L));
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-1498), 1162);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1.289", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-1.2891567F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(67L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("67", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(67.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(67.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1", string0);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      int int0 = rationalNumber0.intValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.1474836468755107E9));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals((-2147483647), int0);
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1003.0011143);
      long long0 = rationalNumber0.longValue();
      assertEquals(1003.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1003L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.936315789521359E-4);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals((-1.9362958660083262E-4), rationalNumber1.doubleValue(), 0.01);
      assertEquals(10329, rationalNumber1.divisor);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(678.428571428571);
      assertEquals(4749, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(143.4);
      assertEquals(717, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber1.toString();
      assertEquals("2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.2001237337244675E-8);
      assertEquals(1.2001237279558573E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(83324742, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(19L, 0L);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.060472408833448E-8);
      assertEquals(32674694, rationalNumber0.divisor);
      assertEquals(3.060472425541307E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483671L, (-400L));
      String string0 = rationalNumber0.toString();
      assertEquals("-214748367/40 (-5,368,709.175)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, (-2147483682L));
      assertEquals(2147483614, rationalNumber0.divisor);
      assertEquals(4.656612946803141E-10, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-11L), (-2147483687L));
      assertEquals(5.587935343609464E-9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber.valueOf(0.0);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483660L), 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483660, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(4277, 4277);
      rationalNumber0.negate();
      RationalNumber rationalNumber1 = new RationalNumber(4277, 1642);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0);
      RationalNumber.valueOf(1.0);
      RationalNumber rationalNumber3 = RationalNumber.valueOf(2147483671L);
      assertEquals(Integer.MAX_VALUE, rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod((-3325L), (-4277));
      assertEquals(475, rationalNumber5.numerator);
      
      String string0 = rationalNumber4.toString();
      assertEquals("-1", string0);
      
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(4277, 2147483671L);
      assertEquals(1.9911676441292797E-6, rationalNumber6.doubleValue(), 0.01);
      
      RationalNumber rationalNumber7 = new RationalNumber((-4277), 0);
      String string1 = rationalNumber2.toString();
      assertEquals("1", string1);
      
      String string2 = rationalNumber1.toString();
      assertEquals("4277/1642 (2.605)", string2);
      
      rationalNumber0.negate();
      RationalNumber rationalNumber8 = RationalNumber.valueOf(0);
      assertEquals(1, rationalNumber8.divisor);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }
}
