/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:49:00 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2448);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix.diagonal(3, 25.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 25.0;
      doubleArray0[1] = 4673.021924;
      doubleArray0[2] = (double) 1;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from1DArray(1525, 1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.iteratorOfColumn(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      Random.setNextRandom(2186);
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) (-1318);
      doubleArray1[6] = (double) (-1318);
      doubleArray1[7] = (double) (-1318);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 2186;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 48;
      doubleArray0[1] = (double) 48;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(48, 48, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.blankOfShape((-298), 2157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -298x2157
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(25, 25);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(10);
      cCSMatrix0.minInColumn(10);
      cCSMatrix1.product();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2401);
      // Undeclared exception!
      try { 
        CCSMatrix.random(2401, 1, (-850.7417), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1000, 1000);
      cCSMatrix0.getRow(32);
      cCSMatrix0.getColumn(93);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 1569, doubleArray0);
      Integer integer0 = new Integer(1569);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.update(matrixFunction0);
      ((CCSMatrix) columnMajorSparseMatrix0).nonZeroAt(0, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 0, doubleArray0);
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        ((CCSMatrix) columnMajorSparseMatrix0).nonZeroAt(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(17);
      mockRandom0.nextGaussian();
      mockRandom0.nextBoolean();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3, 2917.868841396);
      cCSMatrix0.min();
      cCSMatrix0.getRow((-3074));
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.slice(3, 3, (-3074), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3..-3074][3..3].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2;
      DenseMatrix.identity(2);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.getRow(2);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(2, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      int int0 = 2089;
      double double0 = 10.4906738998141;
      double double1 = 3429.606;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(63, 3429.606);
      cCSMatrix0.min();
      cCSMatrix0.getRow(2);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromMatrixMarket("fUC");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      int int1 = 1759;
      int int2 = 48;
      int int3 = (-1027);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, int2, int3);
      Matrix matrix1 = cCSMatrix1.multiply(matrix0);
      int int4 = 4;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(int4, vectorFunction0);
      CCSMatrix.block(cCSMatrix1, matrix1, cCSMatrix1, cCSMatrix0);
      int int5 = (-17);
      int int6 = 17;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = double1;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = double0;
      CCSMatrix.from1DArray(int5, int6, doubleArray0);
      int int7 = 14;
      int int8 = 13;
      double double2 = (-2803.9274676610503);
      CCSMatrix.random(int7, int8, double2, (java.util.Random) mockRandom0);
      int int9 = 1949;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int9, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte) (-49);
      byteArray0[2] = (byte)3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-49);
      doubleArray0[1] = 1675.41999691929;
      doubleArray0[2] = (double) (byte) (-49);
      doubleArray0[4] = (double) (byte)3;
      doubleArray0[5] = (-1.0);
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(69, (byte)3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = new Locale("", "", "");
      locale1.stripExtensions();
      Locale locale2 = Locale.ROOT;
      NumberFormat.getInstance(locale2);
      cCSMatrix0.setAll(844.397);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(25, 25);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-5033.5)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroAt(1, (-1016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1016
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1056L);
      mockRandom0.nextBoolean();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, Double.NEGATIVE_INFINITY, (java.util.Random) mockRandom0);
      cCSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((-2493), (-2493));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2493
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      int int1 = 1569;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(0, 1569, doubleArray0);
      Integer integer0 = new Integer(1569);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(5, 5);
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(columnMajorSparseMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2569);
      int int0 = 8;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(796, vectorAccumulator0);
      int int1 = (-345);
      int int2 = 1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 8;
      Matrix matrix0 = Matrix.from1DArray((-345), 1, doubleArray0);
      int int3 = (-593);
      int int4 = 609;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, int2, int4);
      String string0 = "L";
      CCSMatrix cCSMatrix2 = CCSMatrix.fromMatrixMarket(string0);
      Matrix matrix1 = cCSMatrix2.transpose();
      CCSMatrix cCSMatrix3 = CCSMatrix.block(cCSMatrix1, matrix1, cCSMatrix1, matrix0);
      cCSMatrix0.removeFirstRow();
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.foldNonZeroInColumn(int0, vectorAccumulator1);
      VectorAccumulator vectorAccumulator2 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix3.foldNonZeroInRow(int2, vectorAccumulator2);
      int int5 = 32;
      cCSMatrix3.nonZeroAt(int5, int2);
      cCSMatrix2.iteratorOfColumn(int3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(9, 9, 9);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte) (-49);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      cCSMatrix0.rotate();
      cCSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      byte[] byteArray1 = new byte[1];
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Random.setNextRandom((-1163));
      MockRandom mockRandom0 = new MockRandom((-1163));
      // Undeclared exception!
      CCSMatrix.randomSymmetric(1000, 0.8, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      CCSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV(">3K-4eL0h,5Y4p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = (byte)88;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      cCSMatrix0.setAll((byte)3);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.fold(matrixAccumulator0);
      cCSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom(7L);
      CCSMatrix.randomSymmetric(32, 1569.0, (java.util.Random) mockRandom0);
      cCSMatrix0.getRow(byte0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero((int) (byte)88, (int) (byte)3);
      cCSMatrix1.toColumnVector();
      Matrix matrix0 = cCSMatrix0.power(950);
      cCSMatrix0.rank();
      matrix0.shuffle();
      MockRandom mockRandom0 = new MockRandom(950);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.longs(1L);
      MockRandom mockRandom2 = new MockRandom();
      int int0 = 11;
      // Undeclared exception!
      try { 
        CCSMatrix.random(11, Integer.MAX_VALUE, 100.0, (java.util.Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-49);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(17, 30);
      cCSMatrix0.copyOfShape(17, 941);
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte) (-49);
      CCSMatrix.identity(79);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero((int) (byte)88, (int) (byte)88);
      cCSMatrix0.iteratorOfColumn((byte)88);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.setColumn(0, (double) 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int0 = cCSMatrix0.rank();
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(3895);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 7098.759232686328, 0.5, (double)3895).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix2.update(matrixFunction0);
      cCSMatrix0.product();
      MatrixFunction matrixFunction1 = null;
      cCSMatrix0.update(matrixFunction1);
      cCSMatrix1.update(matrixFunction1);
      cCSMatrix0.setAll(int0);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(60, 567);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      CCSMatrix cCSMatrix2 = new CCSMatrix(54, 567, 404);
      // Undeclared exception!
      try { 
        cCSMatrix2.nonZeroAt(5, 2016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2016
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)3;
      byteArray0[2] = (byte)3;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.fromCSV("6");
      ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("6");
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(46, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-12);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.fromCSV("6");
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, sparseVector0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(25, 25, 25);
      int int0 = 36;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2731);
      cCSMatrix1.setRow(25, 3890.4084);
      cCSMatrix0.power(int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, (-194.0));
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow((-305), (-194.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-305' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 4;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.max();
      int int1 = (-305);
      // Undeclared exception!
      try { 
        cCSMatrix0.setRow((-305), (-194.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-305' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1306;
      doubleArray0[1] = (double) 1906;
      doubleArray0[2] = (-966.0);
      doubleArray0[3] = (double) 1306;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1906);
      cCSMatrix0.maxInColumn(1306);
      cCSMatrix0.min();
      cCSMatrix0.copyOfShape(1906, 1306);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1306, 1351.941726);
      cCSMatrix1.select((int[]) null, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)3;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero((int) (byte)3, 1296);
      cCSMatrix0.maxInColumn(17);
      Matrix.zero((byte)3, 289);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(675, 289);
      cCSMatrix1.min();
      cCSMatrix0.copyOfShape(289, (byte)3);
      CCSMatrix.diagonal(2527, 2527);
      CCSMatrix.zero(2, (-1087), 19);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.setAll(0);
      int int0 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 3895;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3895);
      byte byte0 = (byte)0;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3171);
      int int1 = 1089;
      cCSMatrix1.copyOfShape(1437, 1089);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(3895, 1089);
      cCSMatrix1.toColumnVector();
      int int2 = 950;
      cCSMatrix1.copy();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachInRow(int0, vectorProcedure0);
      cCSMatrix1.power(byte0);
      cCSMatrix2.nonZeroAt(int1, int2);
      int int3 = 1623;
      Matrix matrix0 = Matrix.identity(int3);
      Matrix matrix1 = null;
      CCSMatrix.block(matrix0, matrix1, cCSMatrix0, cCSMatrix0);
      int int4 = (-4925);
      double double0 = 103.18914671611543;
      CCSMatrix.diagonal(int4, double0);
      SparseMatrix.identity(int3);
      MatrixFactory<CCSMatrix> matrixFactory1 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.to(matrixFactory1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[0] = (byte) (-49);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      cCSMatrix0.rotate();
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CCSMatrix cCSMatrix1 = cCSMatrix0.to(matrixFactory0);
      cCSMatrix0.removeLastRow();
      cCSMatrix0.copyOfRows(1);
      cCSMatrix1.set((byte)0, (byte)0, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("Sides of blocks are incompatible!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)0);
      CCSMatrix.zero(2, 781);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte) (-49);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      CCSMatrix.zero(3, 1544);
      cCSMatrix0.toBinary();
      cCSMatrix0.power(1);
      CCSMatrix.zero(1544, (int) (byte) (-49));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      mockRandom0.nextBoolean();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1618, 0.0);
      double double0 = new Double(0.0);
      int int0 = (-3074);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) cCSMatrix0, (SparseMatrix) cCSMatrix0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      Matrix.unit(2, 17);
      int int1 = (-1);
      CCSMatrix.zero((-3074), (-1));
      int[] intArray0 = new int[4];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = int1;
      int int2 = 1539;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-16);
      byteArray0[0] = byte0;
      CCSMatrix.fromBinary(byteArray0);
      int int3 = 1537;
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int3, int2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 33;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(33);
      int int1 = 3;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3);
      double double0 = (-624.1758849);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-624.1758849), 16.128811348707856, 16.128811348707856, (double)33, 16.128811348707856).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(100.0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(33, 3, 32);
      cCSMatrix1.min();
      cCSMatrix2.iteratorOrNonZeroColumns();
      int int2 = 907;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.transformRow(907, vectorFunction0);
      cCSMatrix0.setAll(double0);
      int int3 = 2401;
      CCSMatrix cCSMatrix3 = new CCSMatrix(int3, int0);
      int int4 = 1166;
      CCSMatrix cCSMatrix4 = new CCSMatrix(int1, int4, int2);
      int int5 = 3412;
      int int6 = 32;
      cCSMatrix1.slice(int5, int3, int4, int6);
      cCSMatrix4.toBinary();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte) (-49);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(3, 1544);
      cCSMatrix1.toColumnVector();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom(1L);
      int int0 = 246;
      CCSMatrix cCSMatrix1 = CCSMatrix.random(246, 56, (double) 0, (java.util.Random) mockRandom0);
      mockRandom0.doubles();
      CCSMatrix.diagonal((-1649), (-473.17634925785));
      byte[] byteArray0 = cCSMatrix1.toBinary();
      int int1 = 72;
      CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.power(int1);
      CCSMatrix.zero(int0, int1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byte byte0 = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[4] = (byte)127;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(3, 1544);
      cCSMatrix1.toColumnVector();
      java.util.Random random0 = null;
      ColumnMajorSparseMatrix.random(1, 1, (double) 1, (java.util.Random) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) byteArray0[0];
      int int0 = 8;
      double double0 = Double.NEGATIVE_INFINITY;
      CCSMatrix.randomSymmetric(int0, double0, random0);
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix3 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
      int int1 = (-1189);
      cCSMatrix2.nonZeroIteratorOfColumn(int1);
      cCSMatrix3.setAll(byte0);
      cCSMatrix2.minInColumn(byteArray0[0]);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)85;
      byteArray0[2] = (byte)88;
      byteArray0[2] = (byte)88;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)88);
      MockRandom mockRandom0 = new MockRandom(9959L);
      int int0 = 56;
      CCSMatrix.random(1729, 246, (double) 1L, (java.util.Random) mockRandom0);
      mockRandom0.doubles();
      int int1 = 81;
      double double0 = 4.9E-324;
      CCSMatrix.diagonal(int1, double0);
      cCSMatrix0.toBinary();
      CCSMatrix.fromBinary(byteArray0);
      int int2 = 3;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int2);
      cCSMatrix1.power(byteArray0[2]);
      int int3 = 2;
      CCSMatrix.zero(int3, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.setColumn(0, (double) 0);
      CCSMatrix.identity(0);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-3689), (-3689));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3689x-3689
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 17;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(17, 17);
      Integer integer0 = new Integer(17);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(17);
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(17);
      // Undeclared exception!
      try { 
        cCSMatrix1.setRow(17, (-47905.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)88;
      byte byte1 = (byte)3;
      byteArray0[2] = (byte)3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero((int) (byte)88, (int) (byte)3);
      cCSMatrix1.toColumnVector();
      cCSMatrix0.copy();
      cCSMatrix0.nonZeroAt((-1), (byte)0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric((-212), (-3755.991457953453), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -212x-212
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 17;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(17, 17);
      Integer integer0 = new Integer(17);
      int int1 = 0;
      cCSMatrix0.setAll(17);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(17);
      CCSMatrix.identity(0);
      cCSMatrix1.minInColumn(0);
      cCSMatrix1.product();
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInRow(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '23' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(25, 25);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)25, (double)10, (double)10, (double)34, (double)10).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.setAll(10);
      cCSMatrix0.minInColumn(10);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 22;
      CCSMatrix cCSMatrix0 = new CCSMatrix(22, 22, 22);
      Integer integer0 = new Integer(22);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.setAll(22);
      cCSMatrix0.eachInColumn(0, vectorProcedure0);
      int int1 = 2707;
      int int2 = 0;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte byte0 = (byte)88;
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)88, (byte)88, 194);
      int int0 = 4;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(13, vectorProcedure0);
      int int1 = (-578);
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-578));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0);
      cCSMatrix0.setColumn(0, (double) 0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.getRow(0);
      byte byte0 = (byte)118;
      Matrix matrix0 = cCSMatrix1.power((byte)118);
      int[] intArray0 = new int[3];
      intArray0[0] = 8;
      intArray0[2] = 1;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)3;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero((int) (byte)127, 1544);
      cCSMatrix1.toColumnVector();
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
      cCSMatrix2.nonZeroRowMajorIterator();
      cCSMatrix2.setAll(byte0);
      double double0 = (-52.0);
      cCSMatrix0.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(25, 25);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.minInColumn(10);
      cCSMatrix1.product();
      CCSMatrix.identity(25);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(25, 1544);
      cCSMatrix2.toColumnVector();
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix1.setAll(1051.40024499983);
      cCSMatrix1.minInColumn(25);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(25, 25);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(13);
      cCSMatrix1.toDenseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-5033.5), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (double)0, Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      cCSMatrix0.rank();
      Matrix matrix0 = cCSMatrix1.shuffle();
      MockRandom mockRandom0 = new MockRandom(0);
      MockRandom mockRandom1 = new MockRandom();
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      matrix0.mkString(numberFormat0);
      matrix0.setAll((-5033.5));
      matrix0.minInColumn(0);
      CCSMatrix.identity((-3557));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte byte0 = (byte)88;
      int int0 = 194;
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)88, (byte)88, 194);
      int int1 = 3;
      cCSMatrix0.maxInColumn(3);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)88;
      intArray0[1] = (int) (byte)88;
      intArray0[2] = 194;
      intArray0[3] = 3;
      intArray0[4] = 3;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '88' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)88, (byte)88, 194);
      cCSMatrix0.setColumn(3, (double) 3);
      int int0 = (-1879048191);
      CCSMatrix cCSMatrix1 = new CCSMatrix((-1879048191), 2088);
      int int1 = 5;
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix1.eachNonZeroInColumn(int1, vectorProcedure0);
      Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(33);
      int int0 = 3;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3);
      cCSMatrix1.setAll(3);
      cCSMatrix0.eachInColumn(3, (VectorProcedure) null);
      int int1 = (-3151);
      int int2 = 746;
      CCSMatrix.zero(int1, int2);
      int int3 = cCSMatrix1.rank();
      cCSMatrix0.shuffle();
      MockRandom mockRandom0 = new MockRandom();
      int int4 = 1661;
      double double0 = 0.21320071635561047;
      CCSMatrix cCSMatrix2 = CCSMatrix.random(int3, int0, double0, (java.util.Random) mockRandom0);
      Matrix matrix0 = cCSMatrix2.power(int4);
      int int5 = 16;
      CCSMatrix cCSMatrix3 = new CCSMatrix(int4, int5);
      int int6 = 4;
      int int7 = 43;
      double double1 = (-2494.37538006);
      cCSMatrix3.set(int6, int7, double1);
      int int8 = 31;
      CCSMatrix cCSMatrix4 = CCSMatrix.zero(int5, int8);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix3, matrix0);
      int int9 = 9;
      VectorAccumulator vectorAccumulator0 = null;
      cCSMatrix4.foldNonZeroInColumn(int9, vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)3);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero((int) (byte)88, (int) (byte)3);
      cCSMatrix1.toColumnVector();
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.copy();
      CCSMatrix cCSMatrix3 = (CCSMatrix)cCSMatrix0.power(950);
      cCSMatrix0.nonZeroAt((-1), (byte)0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix cCSMatrix4 = CCSMatrix.zero((int) (byte)3, 1029, (int) (byte)3);
      cCSMatrix0.min();
      cCSMatrix4.eachNonZeroInColumn(64, (VectorProcedure) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 950;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix2.foldNonZeroInRows(vectorAccumulator0);
      doubleArray0[1] = (double) 950;
      doubleArray0[2] = (double) 64;
      CCSMatrix.from1DArray((byte)3, (-719), doubleArray0);
      int int0 = 1940;
      Random.setNextRandom(int0);
      int int1 = (-2171);
      int int2 = 517;
      CCSMatrix cCSMatrix5 = new CCSMatrix(int2, int1);
      CCSMatrix cCSMatrix6 = CCSMatrix.fromBinary(byteArray0);
      cCSMatrix6.rowMajorIterator();
      cCSMatrix3.toBinary();
      MatrixProcedure matrixProcedure0 = null;
      cCSMatrix2.each(matrixProcedure0);
      cCSMatrix2.nonZeroColumnMajorIterator();
  }
}
