/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:12:46 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.model.HttpRequestBody;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selectable;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page page0 = new Page();
      boolean boolean0 = false;
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("");
      Page page2 = page1.setSkip(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      page2.setBytes(byteArray0);
      assertEquals(200, page2.getStatusCode());
      assertFalse(page2.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("");
      page1.getResultItems();
      assertEquals(200, page1.getStatusCode());
      assertFalse(page1.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Page page0 = new Page();
      Request request0 = new Request();
      Request request1 = new Request();
      Request request2 = request0.putExtra("7Bw6", request1);
      Request request3 = request2.setMethod("aJfaM}/c@fXA#*O~4av");
      Request request4 = request3.setPriority(3273L);
      Request request5 = request4.addHeader("_cycle_tried_times", "DKnt*:>r]j");
      page0.addTargetRequest(request5);
      page0.getTargetRequests();
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setSkip(false);
      Page page2 = page1.setRawText("lv2x2X7W[+");
      page2.getRequest();
      assertTrue(page2.isDownloadSuccess());
      assertEquals(200, page2.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Page page0 = new Page();
      page0.getBytes();
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page page0 = new Page();
      String string0 = "#pT";
      page0.setCharset("#pT");
      page0.setHtml((Html) null);
      Request request0 = new Request("#pT");
      Request request1 = request0.addCookie("#pT", "");
      page0.setUrl((Selectable) null);
      Request request2 = request1.setPriority((-1736L));
      request1.setUrl("");
      request2.setBinaryContent(true);
      request2.setUrl("#pT");
      Request request3 = request2.addHeader("_cycle_tried_times", "_cycle_tried_times");
      request3.putExtra("", "");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("_cycle_tried_times", (Object) null);
      hashMap0.put("", request1);
      Request request4 = request3.setExtras(hashMap0);
      page0.setCharset("_cycle_tried_times");
      page0.addTargetRequest(request4);
      int int0 = (-805);
      // Undeclared exception!
      try { 
        request2.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Page page0 = Page.fail();
      page0.setCharset((String) null);
      page0.getBytes();
      Request request0 = new Request("");
      Request request1 = request0.addHeader("0||_~an3nV", "] _QHu_jL");
      request1.addCookie("text/xml", "");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request2 = request0.setExtras(hashMap0);
      request1.putExtra("_cycle_tried_times", "0||_~an3nV");
      hashMap0.put("] _QHu_jL", "0||_~an3nV");
      Request request3 = request1.putExtra("", request2);
      Request request4 = request3.addCookie("", "_cycle_tried_times");
      request3.addCookie("", "_cycle_tried_times");
      request4.addHeader("_cycle_tried_times", "");
      Request request5 = request4.setPriority(0L);
      page0.setRequest(request5);
      page0.getUrl();
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        page0.addTargetRequests((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Page page0 = new Page();
      page0.getStatusCode();
      page0.getJson();
      // Undeclared exception!
      try { 
        page0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.selector.AbstractSelectable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page page0 = Page.fail();
      String string0 = "-1@yW3w]wX=m#";
      page0.putField("-1@yW3w]wX=m#", "-1@yW3w]wX=m#");
      page0.setSkip(true);
      page0.getHeaders();
      // Undeclared exception!
      try { 
        page0.addTargetRequest("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = Page.fail();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      page0.setHeaders(hashMap0);
      String string0 = page0.toString();
      assertEquals("Page{request=null, resultItems=ResultItems{fields={}, request=null, skip=false}, html=null, json=null, rawText='null', url=null, headers={}, statusCode=200, downloadSuccess=false, targetRequests=[], charset='null', bytes=null}", string0);
      
      page0.getRawText();
      page0.getCharset();
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page page0 = new Page();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-72);
      page0.setBytes(byteArray0);
      Page page1 = page0.setRawText("U1.");
      boolean boolean0 = page1.isDownloadSuccess();
      assertTrue(boolean0);
      assertEquals(200, page1.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0, (-12L));
      String string0 = page0.toString();
      assertEquals("Page{request=null, resultItems=ResultItems{fields={}, request=null, skip=false}, html=null, json=null, rawText='null', url=null, headers=null, statusCode=200, downloadSuccess=false, targetRequests=[], charset='null', bytes=null}", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0, 0L);
      page0.getHeaders();
      page0.setHeaders((Map<String, List<String>>) null);
      Page page1 = page0.setSkip(false);
      Request request0 = new Request((String) null);
      request0.addCookie("", (String) null);
      page1.addTargetRequest(request0);
      LinkedList<Selector> linkedList1 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList1);
      linkedList1.clear();
      List<String> list0 = andSelector0.selectList("_cycle_tried_times");
      page0.addTargetRequests(list0);
      page1.setStatusCode(1566);
      page0.setRequest(request0);
      ReplaceSelector replaceSelector0 = new ReplaceSelector("_cycle_tried_times", "");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("_cycle_tried_times");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = Page.fail();
      page1.getJson();
      page1.getJson();
      // Undeclared exception!
      try { 
        page1.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.selector.AbstractSelectable", e);
      }
  }
}
