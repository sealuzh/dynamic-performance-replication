/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:00:13 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.replace("Invalid signature: ", "Invalid signature: ", "Invalid signature: ");
      Utility.accessToString(192, true);
      Utility.format(192, 192, true, 'a');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 625, (int) (byte) (-77));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, 87, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(1944, 1944);
      String string0 = "P";
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.methodTypeToSignature("|jT2g9?3|9u&%J#H", (String[]) null);
      Utility.printArray((Object[]) null, false, false);
      Utility.fillup("|jT2g9?3|9u&%J#H", 15, false, 'W');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, 1981, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.isJavaIdentifierPart(')');
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{f!<bJZlDSyWklC3B";
      stringArray0[1] = "{f!<bJZlDSyWklC3B";
      stringArray0[2] = "{f!<bJZlDSyWklC3B";
      stringArray0[3] = "{f!<bJZlDSyWklC3B";
      stringArray0[4] = "{f!<bJZlDSyWklC3B";
      stringArray0[5] = "{f!<bJZlDSyWklC3B";
      stringArray0[6] = "{f!<bJZlDSyWklC3B";
      stringArray0[7] = "{f!<bJZlDSyWklC3B";
      Utility.methodTypeToSignature("{f!<bJZlDSyWklC3B", stringArray0);
      Utility.compactClassName("{f!<bJZlDSyWklC3B");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.skip(0L);
      try { 
        Utility.typeOfMethodSignature("Mr1-`@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mr1-`@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1580), (int) (byte) (-113));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1536, 53, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("F>Wi,0tsh*4wf");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.classOrInterface((-2113));
      Utility.isSet((-2113), (-2113));
      String string0 = "{Kg]2 v|wGEY8,Qm/";
      Utility.replace("nbz", "G", "{Kg]2 v|wGEY8,Qm/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("{Kg]2 v|wGEY8,Qm/", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "interface";
      stringArray0[1] = "F>Wi,0tsh*4wf";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)116;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)116, 1487);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.getSignature("V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-14);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 719, (int) (byte) (-6));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.accessToString(190, true);
      Utility.searchOpcode("private protected static final transient");
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)79;
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong((byte)79);
      constantArray0[0] = (Constant) constantLong0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(99, (-545));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble(316.46265);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)47, 84);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-65), 94);
      assertEquals("0:    athrow\n1:    laload\n2:    iastore\n3:    iastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(1241);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)53;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1682, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.accessToString(97, false);
      assertEquals("public synchronized volatile", string0);
      
      String string1 = Utility.methodSignatureReturnType("TyqTG(5=oCYp;k");
      assertEquals("yqTG(5=oCYp", string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "c";
      Utility.getSignature("c");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)100;
      byte byte1 = (byte)42;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-23);
      byte byte2 = (byte) (-72);
      byteArray0[6] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(226);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byte byte0 = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)45;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 937, (int) (byte)93, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.signatureToString("Co06>$7?B8U", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (-1266));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      Utility.searchOpcode("interface");
      try { 
        Utility.typeOfSignature("Gn3|G`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gn3|G`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-115);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-6706), (int) (byte)48);
      assertEquals("0:    ret\t\t%48\n2:    f2i\n3:    <illegal opcode>\n4:    fastore\n5:    fstore_2\n6:    f2d\n", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore\t\t%224", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 717, (int) (byte) (-9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "9u$Z>";
      String string1 = Utility.fillup("9u$Z>", 2489, false, 'a');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9u$Z>";
      stringArray0[1] = string1;
      stringArray0[2] = "9u$Z>";
      stringArray0[3] = "multianewarray";
      stringArray0[4] = string1;
      String string2 = Utility.methodTypeToSignature("9u$Z>", stringArray0);
      Utility.compactClassName(stringArray0[1], string2, true);
      try { 
        Utility.typeOfSignature("&*''1p0yI<Z\"(AY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &*''1p0yI<Z\"(AY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "l$6\"f%^y N|I($#Wf-";
      Utility.fillup("l$6\"f%^y N|I($#Wf-", 125, false, '~');
      int int0 = (-1620);
      Utility.clearBit((-2247), (-1620));
      // Undeclared exception!
      try { 
        Utility.decode("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~l$6\"f%^y N|I($#Wf-", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"6\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.";
      stringArray0[1] = "java.lang.";
      stringArray0[2] = "java.lang.";
      Utility.methodTypeToSignature("java.lang.", stringArray0);
      Utility.methodSignatureArgumentTypes("(Ljava/lang/;Ljava/lang/;Ljava/lang/;)Ljava/lang/;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("newarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `newarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)11;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.clearBit((-46), 2384);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("lreturn", "c7kb", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)85;
      Utility.toHexString(byteArray0);
      Utility.classOrInterface(116);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), (int) (byte)43);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.searchOpcode("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Utility.typeOfSignature("% 35ynK>1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: % 35ynK>1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ireturn";
      stringArray0[1] = "ireturn";
      stringArray0[2] = "ireturn";
      stringArray0[3] = "ireturn";
      stringArray0[4] = "ireturn";
      stringArray0[5] = "ireturn";
      stringArray0[6] = "ireturn";
      stringArray0[7] = "\"1:|O`+&_mFCU#";
      Utility.methodTypeToSignature("ireturn", stringArray0);
      Utility.getSignature("ireturn");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1701), (byte)85);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString((-1954177842));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)111;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";rKU>");
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 615, 89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.isSet(84, 2274);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)4;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 84, true);
      Utility.clearBit((byte)104, (byte)63);
      try { 
        Utility.methodSignatureArgumentTypes("jsr_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "(B*io]bD8'BV/Fc~";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(B*io]bD8'BV/Fc~", "(B*io]bD8'BV/Fc~", "(B*io]bD8'BV/Fc~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*io]bD8'BV/Fc~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)2;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i2f", (String) null, "istore_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B]>S>F.Nku>Ke?v";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.methodTypeToSignature("B]>S>F.Nku>Ke?v", stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B]>S>F.Nku>Ke?v");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      Utility.toHexString(byteArray0);
      Utility.convertString("wJUr+`(");
      Utility.fillup("bc", (byte) (-68), false, '*');
      try { 
        Utility.methodSignatureReturnType("LGF%N6j</9oI$B", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LGF%N6j</9oI$B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-112);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), (int) (byte)91);
      Utility.codeToString(byteArray0, constantPool0, (-364), (-364), false);
      Utility.classOrInterface((byte) (-112));
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1521), (-2595));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref(16, (byte) (-97));
      constantArray0[1] = (Constant) constantMethodref2;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)34, (byte) (-97));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("float");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString(1402);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[4] = (Constant) constantString1;
      ConstantMethodref constantMethodref3 = new ConstantMethodref(52, 666);
      constantArray0[5] = (Constant) constantMethodref3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_icmpeq\t\t#23559", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)86;
      byteArray0[8] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((byte)44);
      constantArray0[0] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      constantArray0[1] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, (int) (byte) (-61), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-50), (-1194), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishl
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, (-2059), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.accessToString(2925);
      Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-38);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-500), (-500));
      try { 
        Utility.methodSignatureToString("bo`ef", "V!RU^!V!VE$%.", ">/.Wx5Vv*qU{", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bo`ef
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "YO2`d!.0nSQ;I4^OMx`";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("YO2`d!.0nSQ;I4^OMx`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YO2`d!.0nSQ;I4^OMx`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.getSignature("Invalid Stack map table tag: ");
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)6;
      byteArray0[0] = (byte)6;
      byte byte1 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-83);
      byte byte2 = (byte) (-83);
      byteArray0[3] = (byte) (-83);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("org.apache.commons.io.filefilter.AgeFileFilter", "06 f2 ad ad", false);
      try { 
        Utility.typeOfSignature("-v[*RWMLW#}3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -v[*RWMLW#}3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte) (-44);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-24), 45);
      Constant constant0 = constantInvokeDynamic0.copy();
      constant0.toString();
      constantArray0[0] = constant0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)9);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-23), (int) (byte) (-23), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 59880. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("sipush\t\t16988", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      boolean boolean1 = true;
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)48;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Utility.replace("$e/$voon!p'H1;6", "yvo_z>5NXh:", "org.apache.bcel.classfile.EmptyVisitor");
      mockPrintStream0.println(true);
      mockPrintStream0.println(232);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "$e/$voon!p'H1;6");
      mockPrintStream0.write(0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "$e/$voon!p'H1;6";
      objectArray0[1] = (Object) mockPrintStream0;
      Utility.printArray(printStream0, objectArray0);
      int int0 = (-3606);
      Utility.classOrInterface((-3606));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4,{.FBg*Bmfc\"8");
      Utility.convertString("4,{.FBg*Bmfc\"8");
      try { 
        Utility.typeOfSignature("4,{.FBg*Bmfc\"8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4,{.FBg*Bmfc\"8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.compactClassName("\t\t");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\t\t";
      objectArray0[1] = (Object) "\t\t";
      Utility.printArray(objectArray0, false, false);
      Utility.clearBit(11, 11);
      Utility.compactClassName("\t\t", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, 11, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-16);
      byte byte0 = (byte)64;
      byteArray0[2] = (byte)64;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65, (int) (byte) (-7), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.format((-680), (-680), false, 'u');
      assertEquals("-680", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-101);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$baS$kNU$9b", string1);
      
      String string2 = Utility.replace("}`VW[Rs", "\"Q[|}%'?S", "gi7CIhLk");
      assertEquals("}`VW[Rs", string2);
      
      Utility.compactClassName("}`VW[Rs", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-70);
      objectArray0[1] = (Object) (byte) (-101);
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte) (-101);
      Utility.printArray(objectArray0, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(1348.92711);
      Constant constant0 = constantDouble0.copy();
      constantArray0[0] = constant0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lload_0", string3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 346);
      assertEquals("0:    dload_0\n1:    iconst_0\n2:    ddiv\n3:    areturn\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("26 03 6f b0", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_0", string2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.compactClassName("C", "C", false);
      Utility.convertString("C");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-33);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, (int) (byte)38);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3359), (int) (byte) (-56), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lneg
         // 1:    i2d
         // 2:    fastore
         // 3:    bipush\t\t-87
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "o$+";
      boolean boolean0 = false;
      Utility.decode("o$+", false);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("getstatic", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2027), (-2229), false);
      assertEquals("0:    dsub\n1:    lsub\n2:    ineg\n3:    drem\n4:    ineg\n5:    ladd\n6:    ineg\n7:    lmul\n8:    dadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (-1266));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Utility.compactClassName("J]tSt-");
      assertEquals("J]tSt-", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      String string2 = Utility.fillup("if_icmple\t\t#-26322", (byte)3, false, '5');
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("goto\t\t#17345", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short short0 = Utility.searchOpcode("<U4,V");
      assertEquals((short) (-1), short0);
      
      Utility.fillup("<U4,V", (short) (-1), false, 'e');
      String string0 = Utility.accessToString((int) (short) (-1), false);
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-72);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1996), 1212);
      assertEquals("0:    astore_3\n1:    dload_0\n2:    fload_2\n3:    caload\n4:    dstore\t\t%184\n", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "if_acmpeq";
      Utility.compactClassName("if_acmpeq", true);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("lHv3q]u*\"P9", "e N5 >Zj!P", "invokeInterface");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 48;
      Utility.format(48, (-4031), true, 'O');
      Utility.printArray((Object[]) null, false);
      Utility.typeOfSignature("[]");
      String string0 = "|\"/%\">xi#{ILo[<H=";
      try { 
        Utility.methodSignatureReturnType("|\"/%\">xi#{ILo[<H=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|\"/%\">xi#{ILo[<H='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.setBit(978, 978);
      String string0 = "-nCYj]cPT";
      Utility.compactClassName("-nCYj]cPT");
      Utility.classOrInterface((-1183));
      try { 
        Utility.typeOfSignature(". Constant pool size is: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: . Constant pool size is: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-103);
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong((byte) (-103));
      constantArray0[0] = (Constant) constantLong0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(99, (-527));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble(316.46265);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[3] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)47, 84);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-88), 94);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr\t\t#12111
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("CM Mtv\"cNr", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format((-1), (-1666), true, 't');
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), 22);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1187, (-2350), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte) (-127);
      Constant[] constantArray0 = new Constant[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantFloat constantFloat0 = new ConstantFloat(dataInputStream0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      Constant constant0 = constantFloat1.copy();
      constantArray0[0] = constant0;
      ConstantClass constantClass0 = new ConstantClass(dataInputStream0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("AEOF&P;*E-upeo");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-941), 1827);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantInteger constantInteger0 = new ConstantInteger((-946));
      constantArray0[5] = (Constant) constantInteger0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-103));
      constantArray0[6] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString((byte)37);
      constantArray0[7] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)46, 218, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-68);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)80);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-68), 2541, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2236. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2159, (int) (byte)90, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.classOrInterface(3339);
      boolean boolean0 = true;
      Utility.accessToString(1766, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1892, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)6;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$fcP$t$b4$9f$G", false);
      Utility.accessToString((int) (byte)6);
      try { 
        Utility.typeOfMethodSignature("(descriptor_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (descriptor_index = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("fH8$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte) (-100);
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)43;
      byteArray1[5] = (byte)14;
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte)68;
      byteArray1[8] = (byte) (-51);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)44, (int) (byte)43, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName("fconst_1", "f2i", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)17;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(212, (byte)17);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("fconst_1");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, (int) (byte)47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      Utility.printArray(objectArray0, false);
      Utility.classOrInterface(346);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-82);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 346, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-94);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)78);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (int) (byte)78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19926. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7J|,8j'c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7J|,8j'c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lV8hO");
      byteArray0[1] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2125, 93, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "!@Z";
      try { 
        Utility.typeOfSignature("!@Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "XR0}E_|";
      try { 
        Utility.methodSignatureReturnType("XR0}E_|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XR0}E_|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      Utility.printArray(objectArray0);
      short short0 = Utility.searchOpcode("{java.lang.Object@662400f1, java.lang.Object@e2361a9, java.lang.Object@28e9f445, java.lang.Object@4f805243}");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.clearBit(2171, (-934));
      assertEquals(2171, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)96;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-62), (int) (short) (-1), true);
      assertEquals("0:    <illegal opcode>\n1:    lstore_0\n2:    monitorenter\n3:    fstore_2\n4:    dstore_0\n5:    lshr\n6:    aconst_null\n7:    iadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)99;
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)1);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(22, (-1552));
      constantArray0[1] = (Constant) constantMethodHandle0;
      Constant constant0 = constantMethodHandle0.copy();
      constantArray0[2] = constant0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((-414), (byte)99);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2232), 1769, true);
      assertEquals("0:    aconst_null\n1:    lstore_0\n2:    dadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w\"{d+v]&:#zO%M{J%/");
      String string0 = ":";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode(":", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1618877651), 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)40;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("56:y,#5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 56:y,#5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantInteger");
      Utility.compactClassName("org.apache.bcel.classfile.ConstantInteger");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.classOrInterface(4053);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, 217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-118);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-118), (int) (byte)83);
      Utility.clearBit((byte)83, (byte)50);
      String string0 = "N4;-iHS9j+^.8";
      // Undeclared exception!
      try { 
        Utility.signatureToString("N4;-iHS9j+^.8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N4;-iHS9j+^.8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.classOrInterface((-3325));
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)98;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4096, (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.searchOpcode("/$jYXWe,+=9.");
      try { 
        Utility.typeOfSignature("/$jYXWe,+=9.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /$jYXWe,+=9.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.compactClassName("be$SYz", "be$SYz", true);
      String string0 = ")j4]N<u2:CW~";
      try { 
        Utility.typeOfSignature(")j4]N<u2:CW~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )j4]N<u2:CW~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(1241);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)53;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1682, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)97;
      byteArray0[0] = (byte)97;
      byte byte1 = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)45;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 937, (int) (byte)97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1j+");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1623), (int) (byte) (-101));
      assertEquals("0:    lload_2\n1:    daload\n2:    iload_3\n3:    if_icmpne\t\t#-25661\n6:    <illegal opcode>\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)32;
      byte byte0 = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte1 = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-90);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, (int) (byte) (-87), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8368. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(4452, 76, true, '%');
      Utility.isSet(4452, 4);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)0;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, 40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N NxpH`X5#k'IA");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)65;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(179, 0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2180, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1623), (int) (byte) (-101));
      assertEquals("0:    lload_2\n1:    fstore_2\n2:    iload_3\n3:    if_icmpne\t\t#-25661\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      try { 
        Utility.typeOfSignature("Q0M;yJU)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q0M;yJU)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.searchOpcode("r,Q");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-66);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)121, 167);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 179, 4738, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-115);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-24), (-4), false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    fload_2\n3:    dup2\n4:    f2d\n", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('@');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      String string0 = Utility.accessToString(2);
      assertEquals("private", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-15);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("{java.lang.Object@161e9e1c}");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("if_icmplt");
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_1);
      constantArray0[1] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, 1, 35, false);
      assertEquals("1:    ishr\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "2JYFG1_e";
      try { 
        Utility.typeOfSignature("2JYFG1_e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2JYFG1_e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.isSet(3778, 3778);
      Utility.format(3046, 3778, false, 'I');
      try { 
        Utility.typeOfSignature("*hCx{1]O,`'w-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hCx{1]O,`'w-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-1898));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)39;
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass((byte) (-46));
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)65, 1401);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantString constantString0 = new ConstantString((byte)18);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      Constant constant0 = constantMethodref0.copy();
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, 100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte) (-55);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-19);
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-19);
      byteArray1[5] = (byte) (-19);
      byteArray1[6] = (byte) (-19);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$rDSq:41>PC&");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.convertString("checkcast");
      Utility.fillup(" ConstantUtf8 objects created", (byte)97, true, '}');
      Utility.compactClassName("i2s", true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 844, (-4017), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.fillup("ifle", (-3), false, 'z');
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte) (-39);
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)75;
      byte byte1 = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)92;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifle");
      byteArray0[6] = (byte)75;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t<");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 72, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)68;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-4);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 230);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-94);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)11);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, (int) (byte)11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("\"9GV5}Qk~e[&9+[");
      Utility.searchOpcode("\"9GV5}Qk~e[&9+[");
      // Undeclared exception!
      try { 
        Utility.getSignature("\"9GV5}Qk~e[&9+[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[&9+[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.convertString("invokedynamic");
      Utility.compactClassName("invokedynamic");
      Utility.clearBit((-468), (-1804));
      String string0 = "<'U{.'7XcmJDy~>";
      try { 
        Utility.typeOfSignature("<'U{.'7XcmJDy~>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <'U{.'7XcmJDy~>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9enBb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9enBb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Utility.getSignature("From\tTo\tHandler\tType\n");
      assertEquals("LFrom;", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("VHO");
      Utility.accessToString((int) (byte)12);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.classOrInterface((byte)12);
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      Utility.isJavaIdentifierPart('S');
      Utility.setBit(9, 60);
      String string0 = "3\\DG.Ea1jo{0TpagR|#";
      try { 
        Utility.typeOfSignature("3DG.Ea1jo{0TpagR|#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3DG.Ea1jo{0TpagR|#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("CJH?s.EfG=qw0`F");
      Utility.accessToString((int) (byte)5);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      Utility.classOrInterface((byte)5);
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-9);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, 58);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.compactClassName("8d", false);
      try { 
        Utility.typeOfSignature("8d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.accessToString((-1240), true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 421, 421, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)57;
      byte byte0 = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)123;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte) (-127), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-123));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(123);
      constantArray0[2] = (Constant) constantMethodType0;
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((byte)47, (byte)123, byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.putfield";
      Utility.methodTypeToSignature("java.lang.putfield", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "\n";
      Utility.convertString("\n");
      Utility.accessToString(178);
      String string1 = "2cz^*r)!p9z;clnh7";
      Utility.replace("\n", "private final synchronized transient", "2cz^*r)!p9z;clnh7");
      Utility.isSet(178, 178);
      char char0 = 'F';
      Utility.isJavaIdentifierPart('F');
      Utility.compactClassName("2cz^*r)!p9z;clnh7", true);
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      Utility.replace("java.lang.Object@1eb1019f, java.lang.Object@5f81d90c, java.lang.Object@4ecdbf5e", "java.lang.Object@1eb1019f, java.lang.Object@5f81d90c, java.lang.Object@4ecdbf5e", "O#{(pl@Q'hAj>Fsa");
      try { 
        Utility.typeOfSignature("O#{(pl@Q'hAj>Fsa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O#{(pl@Q'hAj>Fsa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = Utility.setBit((-1637), (-1637));
      assertEquals((-1637), int0);
      
      short short0 = Utility.searchOpcode("7!7");
      assertEquals((short) (-1), short0);
      
      byte byte0 = Utility.typeOfSignature("Z?-a;><3EU9o");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.convertString("AZDw");
      assertEquals("AZDw", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dmul", string1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "MeN6@sg;";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("MeN6@sg;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MeN6@sg;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.setBit(81, (-1699));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-29);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-29), (int) (byte)86, false);
      MockFile mockFile0 = new MockFile("[u2`B2J2p2O*p'{**yx", "V");
      File file0 = MockFile.createTempFile("0:    sastore\n1:    dload_1\n2:    <illegal opcode>\n", "[u2`B2J2p2O*p'{**yx", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = new Locale("v%_mhm>`cj3x");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) (byte)39;
      objectArray0[3] = (Object) (byte) (-29);
      objectArray0[4] = (Object) "[u2`B2J2p2O*p'{**yx";
      objectArray0[5] = (Object) "V";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "[u2`B2J2p2O*p'{**yx", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ")YymIA&jdR],c6ldqo";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType(")YymIA&jdR],c6ldqo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YymIA&jdR],c6ldqo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("float");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-77);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-27);
      Utility.printArray(objectArray0, false);
      Utility.isJavaIdentifierPart('T');
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1453);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('T');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      Object[] objectArray1 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("]P*lbq<9D", objectArray1);
      Utility.printArray(printWriter0, objectArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2135, (int) (byte) (-77), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "float";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      String string1 = "'lU</%Jy\\cWWR3";
      try { 
        Utility.typeOfSignature("'lU</%JycWWR3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'lU</%JycWWR3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "0UkxY1)pV9[r";
      try { 
        Utility.typeOfSignature("0UkxY1)pV9[r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0UkxY1)pV9[r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "The magic number cannot be null";
      Utility.typeOfSignature("The magic number cannot be null");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Q", "", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(5, 5, true, 'u');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)31;
      byteArray0[0] = (byte)31;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((-1097.71910729));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)31, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString(1, true);
      Utility.accessToString(188);
      try { 
        Utility.methodSignatureReturnType("Kbr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kbr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)65;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)81;
      byte byte0 = (byte)42;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-66);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.accessToString((-1240), true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Utility.convertString("Warning: Padding byte != 0 in ");
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.setBit(256, 80);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)63;
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(97, 88);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong((-3314L));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 94, (-1647), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "org.apache.bcel.classfile.PMGClass";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.PMGClass");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "QPB;W\"`+Y";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QPB;W\"`+Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QPB;W\"`+Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("Dvsa0TM");
      Utility.isJavaIdentifierPart('k');
      Utility.setBit((byte)7, 146);
      Utility.isSet(146, (byte)7);
      Utility.compactClassName("goto_w", true);
      try { 
        Utility.typeOfMethodSignature("Dvsa0TM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Dvsa0TM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = false;
      Utility.decode("(Unknown attribute ", false);
      try { 
        Utility.methodSignatureArgumentTypes("(Unknown attribute ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unknown attribute '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("ZMcf,kK%hj", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "boolean";
      Utility.printArray(objectArray0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("qVP4%2L4N6;'yk8b");
      String string0 = "Invalid class name ";
      Utility.getSignature("Invalid class name ");
      try { 
        Utility.typeOfSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Np<f_G[&";
      try { 
        Utility.typeOfSignature("Np<f_G[&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Np<f_G[&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "tZsI8|]ej8";
      int int0 = 47;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.fillup("tZsI8|]ej8", 47, false, 'H');
      try { 
        Utility.typeOfSignature("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHtZsI8|]ej8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHtZsI8|]ej8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFile mockFile0 = new MockFile("Laload_1;V");
      MockFile mockFile1 = new MockFile(mockFile0, "D2` +jU'7E");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      mockFileOutputStream0.getChannel();
      mockFile0.setReadOnly();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-62);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), 46);
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)105;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-34), 53, false);
      assertEquals("0:    fcmpg\n1:    <illegal opcode>\n2:    astore_0\n3:    fadd\n4:    aload_0\n5:    lmul\n", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)92;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, 1214, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)29;
      byte byte0 = (byte)77;
      byteArray0[2] = (byte)77;
      byte byte1 = (byte)82;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-8);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)82);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantInteger1.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 93, 1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.isSet(84, 2274);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)4;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 84, true);
      Utility.clearBit((byte)104, (byte)63);
      try { 
        Utility.methodSignatureArgumentTypes("jsr_w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.signatureToString("Co06>$7?B8U", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (-1266));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RY>*#`jCN[LHQ`6M");
      char char0 = ' ';
      Utility.fillup("RY>*#`jCN[LHQ`6M", 23, false, ' ');
      byte[] byteArray0 = Utility.decode("       RY>*#`jCN[LHQ`6M", false);
      Utility.replace("RY>*#`jCN[LHQ`6M", "Byte code error: ", "Byte code error: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 23, (-238), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("J1QBc9z\"[$3]?`=UH");
      Utility.signatureToString("J1QBc9z\"[$3]?`=UH", true);
      Utility.fillup("L=<hhZ%;V", (-2308), false, 'D');
      Utility.setBit((-2308), (-2308));
      Utility.compactClassName("L=<hhZ%;V", false);
      try { 
        Utility.methodSignatureArgumentTypes("J1QBc9z\"[$3]?`=UH", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J1QBc9z\"[$3]?`=UH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "return";
      stringArray0[1] = "return";
      String string0 = Utility.methodTypeToSignature("return", stringArray0);
      assertEquals("(Lreturn;Lreturn;)Lreturn;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      byteSequence0.mark(31);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_2", string1);
      
      String string2 = Utility.methodSignatureReturnType("(Lreturn;Lreturn;)Lreturn;", false);
      assertEquals("return", string2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "N%,?ekER@bz2 'C9";
      try { 
        Utility.methodSignatureReturnType("N%,?ekER@bz2 'C9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N%,?ekER@bz2 'C9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaWriter");
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "1iwMvj4";
      try { 
        Utility.typeOfSignature("1iwMvj4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1iwMvj4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = Utility.compactClassName("Jd#?~(KPZdFTu;d");
      assertEquals("Jd#?~(KPZdFTu;d", string0);
      
      byte byte0 = Utility.typeOfSignature("Jd#?~(KPZdFTu;d");
      assertEquals((byte)11, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.fillup("g/,gt(T", 1513, true, 'O');
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = "void";
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = "dh0R2_ZW";
      try { 
        Utility.methodTypeToSignature("g/,gt(T", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.replace("f2l", "Q+0|plU{XNQ54-%", "Q+0|plU{XNQ54-%");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-74);
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-89);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-179), 181, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-118);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a0D_$f5$Fg$K$8a", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("SourceFile");
      assertEquals((byte)9, byte0);
      
      int int0 = Utility.setBit(12, 112);
      assertEquals(65548, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-108);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, (int) (byte) (-9), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("[|1tBGBzAi?*", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[|1tBGBzAi?*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|1tBGBzAi?*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      try { 
        Utility.typeOfSignature("=*yM;Whe#XB5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =*yM;Whe#XB5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$1", stringArray0);
      Utility.compactClassName("Vc7}.Hg3ZZ[wR!.$", false);
      boolean boolean0 = false;
      Utility.signatureToString("Vc7}.Hg3ZZ[wR!.$", false);
      // Undeclared exception!
      try { 
        MockURI.create("Vc7}.Hg3ZZ[wR!.$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 3: Vc7}.Hg3ZZ[wR!.$
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.signatureToString("Invalid method signature: ", true);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("V", (String[]) null);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.searchOpcode("2Cz^*r)!P9Z;clNh7");
      Utility.compactClassName("java.lang.Object@dee8c0f, java.lang.Object@5a713498");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("2Cz^*r)!P9Z;clNh7", "2Cz^*r)!P9Z;clNh7", "java.lang.Object@dee8c0f, java.lang.Object@5a713498");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2Cz^*r)!P9Z;clNh7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "RuntimeInvisibleParameterAnnotations";
      try { 
        Utility.typeOfSignature("RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleParameterAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$JavaReader");
      byteArray0[0] = (byte)96;
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('\"');
      byte[] byteArray1 = Utility.decode("$60", false);
      Utility.setBit((byte)96, 32);
      Utility.printArray((Object[]) null, false, true);
      Utility.encode(byteArray1, true);
      Utility.accessToString(7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.classOrInterface((-1368));
      String string0 = "ACv";
      try { 
        Utility.typeOfSignature("ACv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ACv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Utility.convertString("putstatic");
      assertEquals("putstatic", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-35);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1066), (-1066), true);
      assertEquals("0:    l2i\n1:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byte byte0 = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)91;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 61, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byte byte0 = (byte)80;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)67;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("H5>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H5>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "!#!%tD-e$tu`w";
      try { 
        Utility.typeOfSignature("!#!%tD-e$tu`w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #!%tD-e$tu`w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "W)YzAHs{rmSWxcCq";
      // Undeclared exception!
      try { 
        Utility.signatureToString("W)YzAHs{rmSWxcCq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W)YzAHs{rmSWxcCq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "zK(*";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "zK(*";
      stringArray0[1] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("zK(*", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-105);
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString("\t\t%");
      Utility.getSignature("\t\t%");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("\t\t%");
      try { 
        Utility.methodSignatureReturnType("R", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)65;
      byteArray0[1] = (byte) (-57);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)74;
      Constant[] constantArray0 = new Constant[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("[]");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)92, (byte)92);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)92, 91);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble((-2174.81877765));
      constantArray0[4] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((byte)0, (byte)92);
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      constantDouble0.setBytes((-1.0));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, (int) (byte)8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)32;
      byteSequence0.read();
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-34);
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte) (-58);
      try { 
        byteSequence0.readFully(byteArray1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(56);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("getfield");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-64));
      constantArray0[2] = (Constant) constantClass0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.convertString("fstore_3");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-111);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(3984);
      Utility.compactClassName("fstore_3", false);
      Utility.compactClassName("o=Ij|", true);
      Utility.compactClassName("o=Ij|", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = 2010;
      char char0 = 'J';
      Utility.format(2010, 2010, true, 'J');
      Utility.methodSignatureReturnType("FP3");
      Utility.methodSignatureReturnType("FP3");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("new", "float", "FP3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: new
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.classOrInterface((-724));
      Utility.getSignature("long");
      try { 
        Utility.methodSignatureReturnType("long", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.getSignature("^(Ornl6B;)L6JGR5PG");
      try { 
        Utility.methodSignatureReturnType("^(Ornl6B;)L6JGR5PG", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L6JGR5PG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = Utility.clearBit(20, 20);
      assertEquals(20, int0);
      
      String string0 = Utility.accessToString(20);
      assertEquals("protected final", string0);
      
      String string1 = Utility.signatureToString("CONSTANT_MethodType", true);
      assertEquals("char", string1);
      
      String string2 = Utility.fillup("CONSTANT_MethodType", 185, true, 'P');
      assertEquals("CONSTANT_MethodTypePPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP", string2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.isJavaIdentifierPart('K');
      String[] stringArray0 = null;
      Utility.methodTypeToSignature(")", (String[]) null);
      String[] stringArray1 = new String[1];
      stringArray1[0] = ")";
      Utility.methodTypeToSignature("()L);", stringArray1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byte byte0 = (byte)28;
      byteArray0[1] = (byte)28;
      MockFile mockFile0 = new MockFile("r/z9Aux");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(7P");
      Utility.accessToString(82);
      Utility.compactClassName(",", "jsr_w", false);
      Utility.isSet(82, 82);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)125;
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)67;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",");
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)73;
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)66, false);
      try { 
        Utility.typeOfSignature("(7P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (7P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "Exceptions";
      try { 
        Utility.methodSignatureReturnType("Exceptions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.clearBit(1438, 3190);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(uRibE8*::D?/Wk*F6", "#<'|5Fs\"^[X2c[N%x", "double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `uRibE8*::D?/Wk*F6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "AaW6=.\"qo.mFYS&\"Q";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AaW6=.\"qo.mFYS&\"Q");
      String string1 = "E@";
      try { 
        Utility.typeOfSignature("E@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('#');
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("'!eW'pbIO?");
      assertEquals("\\'!eW\\'pbIO?", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "'!eW'pbIO?";
      objectArray0[1] = (Object) "'!eW'pbIO?";
      objectArray0[2] = (Object) "'!eW'pbIO?";
      objectArray0[3] = (Object) "'!eW'pbIO?";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{'!eW'pbIO?, '!eW'pbIO?, '!eW'pbIO?, '!eW'pbIO?}", string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-10);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("double");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte)13);
      constantUtf8_0.clone();
      constantArray0[1] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)13, (int) (byte) (-10), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(1186);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit((-977), 40);
      Utility.clearBit(40, 122);
      Utility.accessToString(40, true);
      Utility.fillup("CONSTANT_Utf8", (-977), true, 'V');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.N;APr|._yC?1wM", "CONSTANT_Utf8", "tableswitch", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.N;APr|._yC?1wM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-32);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockFile mockFile0 = new MockFile("V7=Z\"{l(Goi8]It(.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantPool0.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3), (int) (byte) (-32));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 21509. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.getSignature("!B0x3f+");
      Utility.typeOfSignature("!B0x3f+");
      Utility.printArray((Object[]) null, true);
      int int0 = 72;
      Utility.fillup("L!B0x3f+;", 72, true, 'a');
      try { 
        Utility.typeOfMethodSignature("anewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: anewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&VNKhZ[B7dzA%sUq#");
      Utility.getSignature("}b");
      Utility.convertString("}b");
      Utility.getSignature("}b");
      Utility.typeOfSignature("L}b;");
      Utility.compactClassName("}b", false);
      Utility.setBit((byte)14, (-1070));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 14
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString(1319, false);
      Utility.convertString("{\"java.lang.Object@56860da7\", \"java.lang.Object@eace63d\", \"java.lang.Object@11a2025d\", \"java.lang.Object@1a11594a\", \"java.lang.Object@7c9c849a\", \"java.lang.Object@15e8183a\", \"java.lang.Object@14d95030\"}");
      Utility.fillup("{\"java.lang.Object@56860da7\", \"java.lang.Object@eace63d\", \"java.lang.Object@11a2025d\", \"java.lang.Object@1a11594a\", \"java.lang.Object@7c9c849a\", \"java.lang.Object@15e8183a\", \"java.lang.Object@14d95030\"}", 7, false, 'n');
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.convertString("\\");
      try { 
        Utility.methodSignatureReturnType("\\", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.format((-79), (-79), false, 'G');
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-79";
      objectArray0[1] = (Object) "-79";
      objectArray0[2] = (Object) "-79";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "-79";
      Utility.printArray(objectArray0);
      Utility.format((-3832), (-3832), false, 'G');
      Utility.classOrInterface((-3832));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-25);
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("-79");
      Utility.isJavaIdentifierPart('G');
      Utility.isSet((-4553), (-1255));
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((-2755), (byte)8);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pl^TedSiv&J6G^7 ?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pl^TedSiv&J6G^7 ?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)74;
      Constant[] constantArray0 = new Constant[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("[]");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)92, (byte)92);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[2] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)92, 91);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = new ConstantDouble((-2174.81877765));
      constantArray0[4] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((byte) (-57), (byte)92);
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, (int) (byte)8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-21);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 81, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.convertString("void");
      Utility.isSet((-1832), 195);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-94);
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-4100), (int) (byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr_w\t\t#1801805167
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.getSignature("lreturn");
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature(")\t");
      Utility.classOrInterface((-1989));
      Utility.fillup(")\t", 158, true, 'u');
      Utility.clearBit((-1989), (-1989));
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")\t";
      stringArray0[1] = "Llreturn;";
      stringArray0[2] = "]yvA#lSuyn^";
      stringArray0[3] = "]yvA#lSuyn^";
      Utility.methodTypeToSignature("]yvA#lSuyn^", stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("SfRDs/:){vG&T");
      Utility.searchOpcode("double");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-109);
      Constant[] constantArray0 = new Constant[6];
      DataInput dataInput0 = null;
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "}k4ZdQLvu]$sYRr";
      boolean boolean0 = false;
      Utility.decode("}k4ZdQLvu]$sYRr", false);
      int int0 = 180;
      Utility.accessToString(180);
      String string1 = "\t(wide)";
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureReturnType("\t(wide)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.classOrInterface(85);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("class, class, class", string1);
      
      String string2 = Utility.convertString("getfield");
      assertEquals("getfield", string2);
      
      String string3 = Utility.accessToString((-818));
      assertEquals("private protected static volatile transient abstract strictfp synthetic annotation enum", string3);
      
      String string4 = Utility.replace("|d]OcpL|K9QM(=AE!", "class", "9[G");
      assertEquals("|d]OcpL|K9QM(=AE!", string4);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-37);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string5 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-32), (-867));
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    <illegal opcode>\n", string5);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.format((-1858), (-1858), true, '\"');
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "-1858";
      objectArray0[2] = (Object) "-1858";
      Utility.printArray(objectArray0, false);
      String string0 = "M;S'BzhJx^tX'7O";
      // Undeclared exception!
      try { 
        Utility.signatureToString("M;S'BzhJx^tX'7O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M;S'BzhJx^tX'7O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "64vP,;a:EQY!p";
      try { 
        Utility.typeOfSignature("64vP,;a:EQY!p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 64vP,;a:EQY!p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("( NN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` NN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("]_6>", false);
      assertArrayEquals(new byte[] {(byte)93, (byte)95, (byte)54, (byte)62}, byteArray0);
      
      String string0 = Utility.replace("]_6>", "\"hfg9rwZ'grUL4y@", "\"hfg9rwZ'grUL4y@");
      assertEquals("]_6>", string0);
      
      boolean boolean0 = Utility.isSet((-1882), 972);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.isJavaIdentifierPart('|');
      int int0 = 5743;
      boolean boolean0 = false;
      Utility.format(5743, 65, false, 's');
      Utility.typeOfSignature("Invalid signature: `");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFully(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.fillup("{java.lang.Object@5e0284a1, java.lang.Object@11addaa1, java.lang.Object@3d87e719, java.lang.Object@7e0203a0, java.lang.Object@346fa74d, java.lang.Object@4b680bb3, java.lang.Object@495592e8, java.lang.Object@27249761, java.lang.Object@6e381907}", (-661), false, 'j');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)12;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1037, 121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "eiFtX~*!}?V8c+mq[O";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("eiFtX~*!}?V8c+mq[O", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('y');
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)21;
      byteArray0[0] = (byte)21;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPool1.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2333, (int) (byte)21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "\t\t";
      Utility.replace("\t\t", "\t\t", "\t\t");
      String string1 = "T!NF Fn6?";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t", "T!NF Fn6?", "ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.setBit(405, 1072);
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "monitorexit";
      String[] stringArray0 = new String[1];
      String string1 = "\t\t";
      stringArray0[0] = "\t\t";
      Utility.methodTypeToSignature("monitorexit", stringArray0);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(L;)Lmonitorexit;");
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)127;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)127;
      Utility.equals(byteArray0, byteArray1);
      Utility.compactClassName("monitorexit", false);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      short short0 = Utility.searchOpcode("interface");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.replace("`w*UW\"iY@E<itN/PI", "land", "\t\t%");
      assertEquals("`w*UW\"iY@E<itN/PI", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Utility.compactClassName("P_tm*UcU(L:It&5", "P_tm*UcU(L:It&5", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantInteger constantInteger0 = new ConstantInteger(512);
      constantArray0[0] = (Constant) constantInteger0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-58));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      EnclosingMethod enclosingMethod0 = new EnclosingMethod((-1399), 3, byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enclosingMethod0.getEnclosingClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnclosingMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("O5D- U]yX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O5D- U]yX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.isJavaIdentifierPart('4');
      boolean boolean0 = false;
      Utility.compactClassName("Unreachable default case reached!", false);
      try { 
        Utility.methodSignatureArgumentTypes("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.isSet(225, 225);
      Utility.accessToString(88);
      Utility.accessToString((-1080));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("static volatile transient native interface strictfp synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `static volatile transient native interface strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^y]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 106;
      Utility.accessToString(106, true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "+;smq>";
      try { 
        Utility.typeOfSignature("+;smq>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;smq>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(200);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)12;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "`JY,HdPt";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("`JY,HdPt", false);
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfMethodSignature("$60JY$yH$7fdPt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $60JY$yH$7fdPt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "L:EQ`k4CUKMG;V";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L:EQ`k4CUKMG;V");
      String string1 = "L:EQ`k4CUKMG;V";
      Utility.signatureToString("L:EQ`k4CUKMG;V");
      String string2 = "Ba{O";
      boolean boolean0 = false;
      Utility.signatureToString("Ba{O", false);
      Utility.classOrInterface((-1144));
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("c|(zhCeJ|E92/) ''rC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c|(zhCeJ|E92/) ''rC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.classOrInterface((-33));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature(".eH");
      Utility.searchOpcode(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(";");
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = 40;
      boolean boolean0 = false;
      Utility.accessToString(40, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static synchronized", "static synchronized", "static synchronized");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static synchronized
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)39;
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)10;
      byte byte1 = (byte)92;
      byteArray0[3] = (byte)92;
      Utility.toHexString(byteArray0);
      Utility.setBit((-879), 10);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)29;
      objectArray0[1] = (Object) (byte)29;
      objectArray0[2] = (Object) (byte)29;
      objectArray0[3] = (Object) (byte)92;
      objectArray0[4] = (Object) (byte)92;
      objectArray0[5] = (Object) (byte)39;
      objectArray0[6] = (Object) (byte)92;
      objectArray0[7] = (Object) (byte)10;
      objectArray0[8] = (Object) (byte)39;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.methodSignatureReturnType("27 1d 0a 5c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `27 1d 0a 5c'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "Tg-PEsT!eP~";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Tg-PEsT!eP~");
      boolean boolean0 = true;
      String string1 = Utility.fillup("Tg-PEsT!eP~", 2871, true, '#');
      Utility.setBit(2871, 23);
      Utility.accessToString(2871);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "public private protected final synchronized native interface strictfp";
      objectArray0[1] = (Object) "Tg-PEsT!eP~";
      objectArray0[2] = (Object) string1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "Tg-PEsT!eP~";
      objectArray0[6] = (Object) string1;
      Utility.printArray(objectArray0);
      Utility.accessToString(2871, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(":", "iastore", " }]642W`FW!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = (-5345);
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8NuZZv+OWan;=");
      Utility.accessToString((-5345), true);
      try { 
        Utility.typeOfSignature("public private protected static final native strictfp annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final native strictfp annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "n+O";
      Utility.convertString("n+O");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DI w");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-3488));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.accessToString(461, true);
      assertEquals("public protected static volatile transient native", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "public protected static volatile transient native";
      stringArray0[1] = "public protected static volatile transient native";
      stringArray0[2] = ":EQ`k4CUKMG";
      stringArray0[3] = "org.apache.bcel.util.ByteSequence$ByteArrayStream";
      String string1 = Utility.methodTypeToSignature(":EQ`k4CUKMG", stringArray0);
      assertEquals("(Lpublic;Lpublic;L:EQ`k4CUKMG;Lorg/apache/bcel/util/ByteSequence$ByteArrayStream;)L:EQ`k4CUKMG;", string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("P.In**%rc5NKPv`G!", false);
      MockFile mockFile0 = new MockFile("fcmpg", "P.In**%rc5NKPv`G!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "P.In**%rc5NKPv`G!";
      objectArray0[1] = (Object) "P.In**%rc5NKPv`G!";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) "fcmpg";
      objectArray0[4] = (Object) "fcmpg";
      mockFileOutputStream0.release();
      mockPrintStream0.write(byteArray0, 1348, 1348);
      mockFileOutputStream0.getChannel();
      mockFile0.deleteOnExit();
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) "P.In**%rc5NKPv`G!";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.fillup("t]\"SSNtL9ldLSn\"W-Q", (-3145), false, '.');
      try { 
        Utility.methodSignatureArgumentTypes("fcmpg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fcmpg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = (-2155);
      int int1 = 343;
      Utility.setBit((-2155), 343);
      String string0 = "The magic number cannot be null";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The magic number cannot be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The magic number cannot be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = Utility.compactClassName(",ne@Rmd\u0003", "YxE}Xb]e NO|2@ H", false);
      assertEquals(",ne@Rmd\u0003", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("E3ZupPh//)dY");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("laload", string1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "java.lang.";
      boolean boolean0 = true;
      Utility.fillup("java.lang.", 12, true, 'u');
      try { 
        Utility.decode("java.lang.uu", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "Unknown constant type ";
      try { 
        Utility.typeOfSignature("Unknown constant type ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unknown constant type 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)4;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("2e 37 00 ce 13 00 a7 0a 04", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2e 37 00 ce 13 00 a7 0a 04";
      stringArray0[1] = "2e 37 00 ce 13 00 a7 0a 04";
      String string1 = Utility.methodTypeToSignature("2e 37 00 ce 13 00 a7 0a 04", stringArray0);
      assertEquals("(L2e;L2e;)L2e;", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "2e 37 00 ce 13 00 a7 0a 04";
      objectArray0[1] = (Object) "(L2e;L2e;)L2e;";
      objectArray0[2] = (Object) (byte)19;
      objectArray0[3] = (Object) (byte) (-50);
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{2e 37 00 ce 13 00 a7 0a 04, (L2e;L2e;)L2e;, 19, -50}", string2);
      
      Object[] objectArray1 = new Object[9];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) (byte) (-50);
      Object object1 = new Object();
      objectArray1[2] = object1;
      objectArray1[3] = (Object) (byte) (-50);
      objectArray1[4] = (Object) (byte)4;
      objectArray1[5] = (Object) (byte)10;
      objectArray1[6] = (Object) (byte)4;
      objectArray1[7] = (Object) "(L2e;L2e;)L2e;";
      Object object2 = new Object();
      objectArray1[8] = object2;
      String string3 = Utility.printArray(objectArray1, true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int int0 = (-3369);
      int int1 = 745;
      Utility.clearBit((-3369), 745);
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[4];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "org.apache.commons.io.filefilter.HiddenFileFilter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.commons.io.filefilter.HiddenFileFilter\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)69;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("4a 22 3c 75 41 a8 4f cf 45", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "/2IT:$97J|z6!Ff1/";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iaload", "iaload", "/2IT:$97J|z6!Ff1/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iaload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName(")wO$lQWB_(2@S[Hd{R", ")wO$lQWB_(2@S[Hd{R", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString((-755), false);
      Utility.decode("areturn", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "areturn";
      objectArray0[1] = (Object) ")wO$lQWB_(2@S[Hd{R";
      objectArray0[2] = (Object) "areturn";
      objectArray0[3] = (Object) "public protected static native abstract strictfp synthetic annotation enum";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray(objectArray0);
      Utility.compactClassName("public protected static native abstract strictfp synthetic annotation enum");
      try { 
        Utility.methodSignatureReturnType("{areturn, )wO$lQWB_(2@S[Hd{R, areturn, public protected static native abstract strictfp synthetic annotation enum}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wO$lQWB_(2@S[Hd{R, areturn, public protected static native abstract strictfp synthetic annotation enum}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmple");
      short short0 = Utility.searchOpcode("ifnull");
      assertEquals((short)198, short0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int int0 = 2879;
      Utility.format(2879, 2879, false, '_');
      Utility.getSignature("#[^y;]");
      try { 
        Utility.methodSignatureArgumentTypes("#[^y;]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #[^y;]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_acmpne");
      try { 
        Utility.typeOfSignature("$p-=JJ_i5}04'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $p-=JJ_i5}04'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)60;
      Utility.encode(byteArray0, false);
      Utility.clearBit(1, 46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-951), (-804));
      constantMethodHandle0.clone();
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 29, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G^U~t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G^U~t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
