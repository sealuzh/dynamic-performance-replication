/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:39:00 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.VectorMatrixOperation;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 9;
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(9, (-1513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1513.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)89, 0.08999999999999997, (Random) mockRandom0);
      boolean boolean0 = compressedVector0.nonZeroAt((byte)89);
      assertEquals(0.0898876404494382, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.subtract((-3096.699153702));
      boolean boolean0 = compressedVector0.nonZeroAt(2809);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 156);
      compressedVector0.iterator();
      assertEquals(156, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      compressedVector0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        compressedVector0.set(25, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '25' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 9);
      Vector vector0 = compressedVector0.blankOfLength(9);
      assertEquals(0, compressedVector0.cardinality());
      assertTrue(vector0.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toBinary();
      compressedVector0.nonZeroAt(41);
      compressedVector0.swapElements(41, 41);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1209)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-1209), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1808.65762).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroIterator();
      assertEquals(1, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorMatrixOperation<Float> vectorMatrixOperation0 = (VectorMatrixOperation<Float>) mock(VectorMatrixOperation.class, new ViolatedAssumptionAnswer());
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 124;
      // Undeclared exception!
      try { 
        CompressedVector.zero(26, 124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 124.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random((-3611), (double) (-3611), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      compressedVector0.toBinary();
      compressedVector0.setAll(0);
      compressedVector0.max();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(2292, 2292);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2292' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(541);
      compressedVector0.setAll(541);
      compressedVector0.iterator();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(124);
      compressedVector0.setAll(124);
      assertEquals(124, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) (byte)65);
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 0.0, (Random) mockRandom0);
      mockRandom0.nextInt();
      mockRandom0.longs();
      compressedVector0.set(24, (-1383.1339494581891));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      // Undeclared exception!
      try { 
        CompressedVector.random(0, (double) (byte)65, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(16);
      hashMap0.put(integer0, integer0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 31);
      assertEquals(0.03225806451612903, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((byte)102);
      Byte byte0 = new Byte((byte)102);
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (byte)102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(18);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2491), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(18, 18);
      compressedVector0.setAll(2999.8614);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(3, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.length());
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(65, int0);
      
      Byte byte0 = new Byte((byte)65);
      assertNotNull(byte0);
      assertEquals((byte)65, (byte)byte0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(8);
      assertEquals(65, compressedVector0.length());
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5, 5);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-2147483645));
      assertNotNull(integer0);
      assertEquals((-2147483645), (int)integer0);
      
      Byte byte0 = new Byte((byte)102);
      assertNotNull(byte0);
      assertEquals((byte)102, (byte)byte0);
      
      Byte byte1 = hashMap0.put(integer0, byte0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(byte1);
      
      Byte byte2 = new Byte((byte)102);
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)102, (byte)byte2);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (byte)102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = compressedVector0.nonZeroAt((-113));
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom((-113));
      double double0 = compressedVector0.getOrElse(1, 1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(541);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(541, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.setAll(541);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(541, compressedVector0.cardinality());
      assertEquals(541, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(541, compressedVector0.cardinality());
      assertEquals(541, compressedVector0.length());
      assertNotNull(vectorIterator0);
      
      Integer integer0 = new Integer((-364));
      assertNotNull(integer0);
      assertEquals((-364), (int)integer0);
      
      int int0 = (-2799);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2799), 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)1;
      byte byte0 = (byte)65;
      byteArray0[7] = (byte)17;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)1, (double) (byte)1, (Random) mockRandom0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = SparseVector.zero((int) (byte)0);
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      assertNotSame(sparseVector0, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((byte)17, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)1, (double) (byte)1, (Random) mockRandom0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((byte)0, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte byte0 = (byte)65;
      double double0 = 0.08999999999999997;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2690L);
      assertNotNull(intStream0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 0.08999999999999997, (Random) mockRandom0);
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.is((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.08999999999999997;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.08999999999999997}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      String string0 = compressedVector0.toCSV();
      assertArrayEquals(new double[] {0.08999999999999997}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(string0);
      assertEquals("0.090", string0);
      
      compressedVector0.setAll(100.0);
      assertArrayEquals(new double[] {0.08999999999999997}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("gJ;:O$\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.norm();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Infinite or NaN
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 98.91102535693818;
      doubleArray0[1] = 98.91102535693818;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {98.91102535693818, 98.91102535693818, 0.0}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements((-227), 3696);
      assertArrayEquals(new double[] {98.91102535693818, 98.91102535693818, 0.0}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertArrayEquals(new double[] {98.91102535693818, 98.91102535693818, 0.0}, doubleArray0, 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(3, 1);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1, 1);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(1, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-364), (-364));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-364' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.073741824E9);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.073741824E9)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertArrayEquals(new double[] {(-1.0), (-1.073741824E9)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      String string0 = compressedVector0.toString();
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertNotNull(string0);
      assertEquals("-1.000 0.000", string0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertNotNull(vectorIterator0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(65, int0);
      
      compressedVector0.setAll(1.0);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(vectorIterator0);
      
      double double0 = compressedVector0.getOrElse(32, 0.0);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)66, 1.0, (Random) mockRandom0);
      assertEquals(66, compressedVector0.length());
      assertEquals(66, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(66, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 66;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {66.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.copy();
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertEquals(66, compressedVector0.length());
      assertEquals(66, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(66, compressedVector2.cardinality());
      assertEquals(66, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(66, compressedVector0.length());
      assertEquals(66, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      
      int int1 = (-29);
      BasicVector basicVector0 = (BasicVector)Vector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {66.0}, doubleArray0, 0.01);
      assertEquals(1, basicVector0.length());
      assertNotNull(basicVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      assertArrayEquals(new double[] {66.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      
      String string0 = "J^[";
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("J^[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(65, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs(0L, 0L, (long) 65);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      Byte byte0 = new Byte((byte)65);
      assertNotNull(byte0);
      assertEquals((byte)65, (byte)byte0);
      
      CompressedVector compressedVector1 = new CompressedVector(1565, (byte)65);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1565, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(55, vectorFunction0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(64, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(0.9846153846153847, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.073741824E9);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.073741824E9)}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertArrayEquals(new double[] {0.0, (-1.073741824E9)}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(2, cCSMatrix0.rows());
      assertEquals((-1.073741824E9), cCSMatrix0.min(), 0.01);
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertArrayEquals(new double[] {0.0, (-1.073741824E9)}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertArrayEquals(new double[] {0.0, (-1.073741824E9)}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertNotNull(vectorIterator0);
      
      compressedVector0.set(0, (-2089.0));
      assertArrayEquals(new double[] {0.0, (-1.073741824E9)}, doubleArray0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(65, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      LongStream longStream1 = mockRandom0.longs(0L, 0L, (long) 65);
      assertFalse(longStream1.equals((Object)longStream0));
      assertNotNull(longStream1);
      assertNotSame(longStream1, longStream0);
      
      Byte byte0 = new Byte((byte)65);
      assertNotNull(byte0);
      assertEquals((byte)65, (byte)byte0);
      
      CompressedVector compressedVector1 = new CompressedVector(65, 65);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(65, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)65).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(48, vectorFunction0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte byte0 = (byte)65;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) (byte)65);
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 0.0, (Random) mockRandom0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.2, double0, 0.01);
      
      compressedVector0.set(24, (-1383.1339494581891));
      assertEquals(0.015384615384615385, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      
      double double1 = compressedVector0.getOrElse(1, 0.0F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.015384615384615385, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.0, double1, 0.01);
      
      int int1 = 1641;
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1641, 0.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1641' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)65;
      byteArray0[7] = (byte)17;
      byteArray0[6] = (byte)1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)1, (double) (byte)1, (Random) mockRandom0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      SparseVector sparseVector0 = SparseVector.zero(1);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      assertNotSame(sparseVector0, compressedVector0);
      
      double[] doubleArray0 = new double[0];
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      CompressedVector compressedVector1 = (CompressedVector)sparseVector0.subtract((Vector) compressedVector0);
      assertTrue(compressedVector0.equals((Object)sparseVector0));
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertTrue(compressedVector1.equals((Object)sparseVector0));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(sparseVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      org.evosuite.runtime.Random.setNextRandom((-805));
      // Undeclared exception!
      try { 
        ((CompressedVector) sparseVector0).set((-3052), (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-3052' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)65;
      byteArray0[7] = (byte)17;
      byteArray0[6] = (byte)1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)1, (double) (byte)1, (Random) mockRandom0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      SparseVector sparseVector0 = SparseVector.zero(1);
      assertTrue(sparseVector0.equals((Object)compressedVector0));
      assertEquals(1, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      assertNotSame(sparseVector0, compressedVector0);
      
      double[] doubleArray0 = new double[0];
      Vector vector0 = Vector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, vector0.length());
      assertNotNull(vector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)65).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, sparseVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((byte)17, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)1;
      double[] doubleArray0 = new double[1];
      byteArray0[2] = (byte)17;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      byte[] byteArray1 = compressedVector1.toBinary();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(byteArray1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(byteArray1, byteArray0);
      
      BasicVector basicVector0 = (BasicVector)Vector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, basicVector0.length());
      assertNotNull(basicVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)17).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("J^[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte byte0 = (byte)65;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) (byte)65);
      assertNotNull(intStream0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(65, int0);
      
      compressedVector0.set(10, (-1383.1339494581891));
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(10, (-2449));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LongStream longStream0 = mockRandom0.longs((long) (byte)65);
      assertNotNull(longStream0);
      
      Byte byte0 = new Byte((byte)65);
      assertNotNull(byte0);
      assertEquals((byte)65, (byte)byte0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      
      Vector vector0 = Vector.zero(2);
      assertEquals(2, vector0.length());
      assertNotNull(vector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt((byte)65);
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertFalse(boolean0);
      
      compressedVector0.swapElements(14, 41);
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)66, 1.0, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(66, compressedVector0.length());
      assertEquals(66, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(66, int0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(66, compressedVector0.length());
      assertEquals(66, compressedVector0.cardinality());
      assertEquals(66, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(66, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(66, compressedVector0.length());
      assertEquals(66, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      assertNotSame(compressedVector0, compressedVector1);
      
      Byte byte0 = new Byte((byte)66);
      assertNotNull(byte0);
      assertEquals((byte)66, (byte)byte0);
      
      boolean boolean0 = compressedVector0.equals((Object) null);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(66, compressedVector0.length());
      assertEquals(66, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean0);
      
      int int1 = 1;
      compressedVector0.updateAt(1, vectorFunction0);
      mockRandom0.nextInt();
      compressedVector0.swapElements(9, 3378);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)1;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (byte)45;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertArrayEquals(new double[] {0.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      int int0 = (-880);
      compressedVector1.swapElements((byte)45, (byte)1);
      assertArrayEquals(new double[] {0.0, 45.0, 0.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        Vector.unit((-880));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      assertSame(compressedVector0, sparseVector0);
      
      Double double0 = new Double(2025.4148551);
      assertNotNull(double0);
      assertEquals(2025.4148551, (double)double0, 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertTrue(compressedVector1.equals((Object)sparseVector0));
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      
      double double1 = sparseVector0.manhattanNorm();
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(sparseVector0.equals((Object)compressedVector1));
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertNotSame(sparseVector0, compressedVector1);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("t~] 6qOwj2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      mockRandom0.setSeed((-2456L));
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.length());
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      LongStream longStream0 = mockRandom0.longs((long) (byte)65);
      assertNotNull(longStream0);
      
      Byte byte0 = new Byte((byte)65);
      assertNotNull(byte0);
      assertEquals((byte)65, (byte)byte0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(65, compressedVector0.length());
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(65, compressedVector0.length());
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(65, compressedVector1.length());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      Vector vector0 = Vector.zero((byte)65);
      assertEquals(65, vector0.length());
      assertNotNull(vector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(988);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertEquals(65, compressedVector0.length());
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((byte)65, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = 456.86;
      doubleArray0[3] = 1.0;
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.5, double0, 0.01);
      
      doubleArray0[4] = (double) (byte)65;
      doubleArray0[5] = 1.0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 456.86, 1.0, 65.0, 1.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.copy();
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(65, compressedVector2.cardinality());
      assertEquals(65, compressedVector2.length());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.blankOfLength((byte)1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector3.density(), 0.01);
      assertEquals(1, compressedVector3.length());
      assertEquals(0, compressedVector3.cardinality());
      assertNotNull(compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      
      BasicVector basicVector0 = (BasicVector)compressedVector1.subtract((-1204.9410083651574));
      assertArrayEquals(new double[] {1.0, 1.0, 456.86, 1.0, 65.0, 1.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector3));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertEquals(6, compressedVector1.cardinality());
      assertEquals(6, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(6, basicVector0.length());
      assertNotNull(basicVector0);
      assertNotSame(compressedVector1, compressedVector3);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, compressedVector2);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      boolean boolean0 = compressedVector0.equals((Object) byte0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector0.equals((Object)compressedVector2));
      assertEquals(65, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertFalse(boolean0);
      
      compressedVector1.add((-1204.9410083651574));
      compressedVector1.shuffle();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(16, vectorFunction0);
      int int0 = 4808;
      compressedVector0.swapElements(49, (-4385));
      compressedVector1.iterator();
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("J2Zu");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte byte0 = (byte)65;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) (byte)65);
      assertNotNull(intStream0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 0.0, (Random) mockRandom0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      compressedVector0.set(24, (-1383.1339494581891));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(0.015384615384615385, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(24, (-2449));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (byte)31;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0, 31.0}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      assertNotNull(ooPlaceVectorHadamardProduct0);
      
      CompressedVector compressedVector1 = new CompressedVector();
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(0, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertNotNull(compressedVector1);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.shuffle();
      assertArrayEquals(new double[] {0.0, 31.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(2, compressedVector2.length());
      assertEquals(0.5, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)65, 1.0, (Random) mockRandom0);
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)65;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {65.0}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      double double0 = compressedVector0.norm();
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertEquals(65, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(65, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertEquals(4.171330722922843, double0, 0.01);
      
      CompressedVector compressedVector2 = compressedVector0.to(vectorFactory0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertEquals(58, compressedVector0.cardinality());
      assertEquals(65, compressedVector0.length());
      assertEquals(0.8923076923076924, compressedVector0.density(), 0.01);
      assertEquals(58, compressedVector2.cardinality());
      assertEquals(65, compressedVector2.length());
      assertEquals(0.8923076923076924, compressedVector2.density(), 0.01);
      assertNotNull(compressedVector2);
      assertSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertSame(compressedVector2, compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-2700), 65.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-2700' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }
}
