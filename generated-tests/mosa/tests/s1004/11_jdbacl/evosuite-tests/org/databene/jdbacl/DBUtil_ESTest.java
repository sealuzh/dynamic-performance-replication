/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:41:17 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.types.StringDataValue;
import org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.raw.log.LogCounter;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBArray;
import org.firebirdsql.jdbc.FBConnection;
import org.h2.Driver;
import org.h2.engine.SessionRemote;
import org.h2.tools.Recover;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.jdbc.jdbcStatement;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.util.PSQLException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.connect((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'null.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler((Statement) null, true);
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.countRows("Th", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = DBUtil.available("OgvV#D6KSAn1TP", "OgvV#D6KSAn1TP", "OgvV#D6KSAn1TP", "OgvV#D6KSAn1TP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Connection connection0 = null;
      DBUtil.resetMonitors();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      DBUtil.getOpenStatementCount();
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly(" block: ", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings:  block: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "dbvxJ";
      DBUtil.existsEnvironment("dbvxJ");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      try { 
        pGConnectionPoolDataSource0.getConnection();
        fail("Expecting exception: PSQLException");
      
      } catch(PSQLException e) {
         //
         // The connection attempt failed.
         //
         verifyException("org.postgresql.core.v3.ConnectionFactoryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      DBUtil.runScript("", '[', (Connection) null, false, errorHandler0);
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Method> class0 = Method.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      String string0 = "WH";
      // Undeclared exception!
      try { 
        DBUtil.runScript("WH", '[', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      DBUtil.assertAllDbResourcesClosed(true);
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBUtil.resetMonitors();
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBUtil.resetMonitors();
      Connection connection0 = null;
      DBUtil.close((Connection) null);
      DBUtil.close((ResultSet) null);
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      Class<Jdbc4Connection> class0 = Jdbc4Connection.class;
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      DBUtil.resetMonitors();
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("Connecting with URL: ", "", "2Oil>X7vs5b-^K", "");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = DBUtil.escape("*4:T<:]");
      assertEquals("*4:T<:]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "SYSDEPENDS";
      Connection connection0 = null;
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("SYSDEPENDS", level0);
      errorHandler0.setLoggingStackTrace(false);
      errorHandler0.handleError("SYSDEPENDS");
      // Undeclared exception!
      try { 
        DBUtil.runScript("SYSDEPENDS", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      String string0 = ",MD=cu";
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("SY", "SY", "preparing statement: ", ",MD=cu");
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting SY failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.parseResultRow(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      Class<DefaultDatabase> class0 = DefaultDatabase.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      errorHandler0.setLoggingStackTrace(true);
      // Undeclared exception!
      try { 
        DBUtil.runScript("R\"f}0(dA_", ',', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      Connection connection0 = null;
      Class<jdbcStatement> class0 = jdbcStatement.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      String string0 = "M)(]?NepLo;%P]:>";
      ErrorHandler errorHandler1 = new ErrorHandler("M)(]?NepLo;%P]:>");
      errorHandler1.setLoggingStackTrace(true);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--SY", ',', (Connection) null, false, errorHandler0);
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, (String) null, (boolean) dBExecutionResult0.changedStructure);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBUtil.close((Connection) null);
      String string0 = "";
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "2Oil>X7vs5b-^K", "", "Connecting with URL: ");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--SYSDEPENDS");
      boolean boolean0 = false;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%A'r-`WvK;";
      stringArray0[1] = "--SYSDEPENDS";
      stringArray0[2] = "--\"Uf:J{~>W{lI";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "--\"Uf:J{~>W{lI", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("--SYSDEPENDS", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBForeignKeyConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '%A'r-`WvK;' not found in table '--SYSDEPENDS'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--gcKj+fWrf}ur,HXuik{");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--gcKj+fWrf}ur,HXuik{";
      stringArray0[1] = "|JcyEE4Dv:K@G8";
      stringArray0[2] = "--gcKj+fWrf}ur,HXuik{";
      stringArray0[3] = "--gcKj+fWrf}ur,HXuik{";
      stringArray0[4] = "--gcKj+fWrf}ur,HXuik{";
      stringArray0[5] = "--gcKj+fWrf}ur,HXuik{";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "--gcKj+fWrf}ur,HXuik{", false, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent(dBUniqueConstraint0, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<DefaultDatabase> class0 = DefaultDatabase.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      errorHandler0.setLoggingStackTrace(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.runScript("org.databene.JDBC", "org.databene.JDBC", '9', (Connection) null, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: org.databene.JDBC
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      int int0 = StringDataValue.BOTH;
      long long0 = LogCounter.MAX_LOGFILE_SIZE;
      long long1 = LogCounter.MAX_LOGFILE_SIZE;
      Driver driver0 = Driver.load();
      ConstraintDefinitionNode constraintDefinitionNode0 = new ConstraintDefinitionNode();
      constraintDefinitionNode0.getProperties();
      driver0.connect(" ", (Properties) null);
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) proxy0, "----R\"f}0(dA_", false, 536, 1275, 1003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "SYSDEPENDS";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("SYSDEPENDS", level0);
      boolean boolean0 = false;
      errorHandler0.setLoggingStackTrace(false);
      String string1 = "--";
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("--", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "";
      String string1 = "^%qrJT3;:hm";
      String string2 = null;
      try { 
        DBUtil.connect("", (String) null, (String) null, (String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting  failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBUtil.assertAllDbResourcesClosed(true);
      DBUtil.close((Connection) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/databene/.env.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error reading environment data for ''
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }
}
