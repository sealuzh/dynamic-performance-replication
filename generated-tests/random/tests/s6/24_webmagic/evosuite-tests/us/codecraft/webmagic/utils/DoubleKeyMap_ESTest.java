/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 14:45:29 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Map<Object, String>, Map<Object, HashMap<Object, Object>>> hashMap0 = new HashMap<Map<Object, String>, Map<Object, HashMap<Object, Object>>>();
      DoubleKeyMap<Map<Object, String>, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Object, HashMap<Object, Object>>(hashMap0);
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      HashMap<Object, HashMap<Object, Object>> hashMap1 = new HashMap<Object, HashMap<Object, Object>>();
      hashMap0.put(map0, hashMap1);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      doubleKeyMap0.remove((Map<Object, String>) hashMap2, (Object) hashMap3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Map<Object, String>, Map<Object, HashMap<Object, Object>>> hashMap0 = new HashMap<Map<Object, String>, Map<Object, HashMap<Object, Object>>>();
      DoubleKeyMap<Map<Object, String>, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Object, HashMap<Object, Object>>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      HashMap<Object, Object> hashMap3 = doubleKeyMap0.remove((Map<Object, String>) hashMap1, (Object) hashMap2);
      assertNull(hashMap3);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(2192);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(class0);
      doubleKeyMap0.put((Object) class0, integer0, integer0);
      Map<Integer, Integer> map0 = doubleKeyMap0.remove((Object) class0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      HashMap<Integer, Map<Map<Object, String>, Object>> hashMap2 = new HashMap<Integer, Map<Map<Object, String>, Object>>();
      DoubleKeyMap<Integer, Map<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Object>(hashMap2);
      doubleKeyMap0.put(integer0, (Map<Object, String>) hashMap0, (Object) hashMap1);
      HashMap hashMap3 = (HashMap)doubleKeyMap0.put(integer0, (Map<Object, String>) hashMap0, (Object) integer0);
      assertTrue(hashMap3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(2192);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, HashMap<String, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Object>, HashMap<Object, Object>>();
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>(map0);
      Map<Integer, Map<Integer, Integer>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, Integer>(map1, class0);
      Integer integer1 = doubleKeyMap2.get(integer0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<Map<Object, String>, Object> hashMap0 = new HashMap<Map<Object, String>, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<HashMap<Map<Object, String>, Object>, Map<Object, Object>> hashMap2 = new HashMap<HashMap<Map<Object, String>, Object>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Map<Object, String>, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, String>, Object>, Object, Object>(hashMap2);
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      hashMap2.put(hashMap0, hashMap3);
      Object object0 = doubleKeyMap0.get(hashMap0, (Object) hashMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<Integer, String, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<Integer, Object>>();
      Integer integer0 = new Integer(1);
      Map<String, HashMap<Integer, Object>> map0 = doubleKeyMap0.get(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Object, String>, Object>, Map<Object, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, String>, Object>, Map<Object, String>, Object>();
      HashMap<Map<Object, String>, Object> hashMap0 = new HashMap<Map<Object, String>, Object>();
      Map<Map<Object, String>, Object> map0 = doubleKeyMap0.remove(hashMap0);
      assertNull(map0);
  }
}
