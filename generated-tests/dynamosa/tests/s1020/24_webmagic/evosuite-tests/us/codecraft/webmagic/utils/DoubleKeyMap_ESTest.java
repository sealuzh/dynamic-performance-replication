/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 07:18:02 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, HashMap<Integer, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, HashMap<Integer, Integer>, String>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put((Map<HashMap<String, Object>, Object>) hashMap0, hashMap1, "r_S)v*r0");
      Map<HashMap<Integer, Integer>, String> map0 = doubleKeyMap0.remove((Map<HashMap<String, Object>, Object>) hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Object, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Object, Map<HashMap<String, Object>, Object>>();
      Integer integer0 = new Integer(3502);
      doubleKeyMap0.put((Map<String, String>) null, (Object) integer0, (Map<HashMap<String, Object>, Object>) null);
      Map<Object, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap0.get((Map<String, String>) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>();
      HashMap<HashMap<String, String>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<String, String>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<String, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, Object, Object>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Object object0 = doubleKeyMap1.remove(hashMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<String, Object>>();
      Map<Object, Map<Integer, HashMap<Integer, Integer>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, HashMap<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, HashMap<Integer, Integer>>(map0);
      HashMap<Integer, Integer> hashMap0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Integer) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Integer, Map<String, Map<HashMap<String, Object>, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<HashMap<String, Object>, Object>, Integer>, Integer, Map<String, Map<HashMap<String, Object>, Object>>>();
      Map<Integer, Map<String, Map<HashMap<String, Object>, Object>>> map0 = doubleKeyMap0.remove((HashMap<Map<HashMap<String, Object>, Object>, Integer>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Map<HashMap<String, String>, Map<Object, Object>>, HashMap<Map<HashMap<String, Object>, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Map<HashMap<String, String>, Map<Object, Object>>, HashMap<Map<HashMap<String, Object>, Object>, Object>>();
      DoubleKeyMap<Object, Integer, Map<HashMap<String, Object>, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<HashMap<String, Object>, Object>>((Map<Object, Map<Integer, Map<HashMap<String, Object>, Object>>>) null);
      Map<Integer, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, "I", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Object>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Map<HashMap<String, Integer>, Map<Object, HashMap<String, Map<HashMap<String, Object>, Object>>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<HashMap<String, Integer>, Object, HashMap<String, Map<HashMap<String, Object>, Object>>> doubleKeyMap2 = new DoubleKeyMap<HashMap<String, Integer>, Object, HashMap<String, Map<HashMap<String, Object>, Object>>>(map0);
      Map<Object, Object> map1 = doubleKeyMap2.newMap();
      Object object0 = doubleKeyMap0.put(map1, (String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = doubleKeyMap1.put("", (Object) doubleKeyMap0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Integer>, Integer>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0);
      String string0 = doubleKeyMap1.get("3OJ|2+Ik~;d+j", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      String string0 = doubleKeyMap1.get((Object) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Object, Map<HashMap<String, Object>, Object>>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, Map<HashMap<String, Object>, Object>>>();
      HashMap<Object, Map<String, HashMap<String, Integer>>> hashMap0 = new HashMap<Object, Map<String, HashMap<String, Integer>>>();
      DoubleKeyMap<Object, String, HashMap<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, Integer>>(hashMap0);
      Map<String, HashMap<String, Integer>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-3731));
      HashMap<HashMap<Integer, Object>, Map<Map<Integer, Object>, Integer>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Map<Integer, Object>, Integer>>();
      DoubleKeyMap<HashMap<Integer, Object>, Map<Integer, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Map<Integer, Object>, Integer>(hashMap0, (Class<? extends Map>) null);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(hashMap1, (Map<Integer, Object>) hashMap1, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-1410));
      HashMap<Object, Map<Map<Map<HashMap<String, Object>, Object>, Integer>, Integer>> hashMap0 = new HashMap<Object, Map<Map<Map<HashMap<String, Object>, Object>, Integer>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Map<HashMap<String, Object>, Object>, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Map<HashMap<String, Object>, Object>, Integer>, Integer>(hashMap0, class0);
      Object object0 = new Object();
      DoubleKeyMap<String, HashMap<Integer, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Integer, Object>, Object>();
      Map<Map<HashMap<String, Object>, Object>, Integer> map0 = doubleKeyMap1.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(object0, map0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>((Map<Integer, Map<Object, String>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>((Map<String, Map<Object, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, String, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, String, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, HashMap<String, Integer>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      doubleKeyMap0.put(hashMap0, "YgVpZ)nwEr%3Cx", hashMap0);
      HashMap<String, Integer> hashMap1 = doubleKeyMap0.remove(hashMap0, "r_S)v*r0");
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<String, Object>, Object> hashMap0 = new HashMap<HashMap<String, Object>, Object>();
      DoubleKeyMap<Map<HashMap<String, Object>, Object>, Map<HashMap<String, Object>, Object>, Map<HashMap<String, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<String, Object>, Object>, Map<HashMap<String, Object>, Object>, Map<HashMap<String, Object>, Object>>();
      doubleKeyMap0.put((Map<HashMap<String, Object>, Object>) hashMap0, (Map<HashMap<String, Object>, Object>) hashMap0, (Map<HashMap<String, Object>, Object>) hashMap0);
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap0.put((Map<HashMap<String, Object>, Object>) hashMap0, (Map<HashMap<String, Object>, Object>) hashMap0, (Map<HashMap<String, Object>, Object>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Object object0 = new Object();
      String string0 = doubleKeyMap1.get(object0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, String>();
      Integer integer0 = new Integer(1024);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(integer0, hashMap0, "_y?^*tCWR*HFN}'9:");
      String string0 = doubleKeyMap0.get(integer0, hashMap0);
      assertEquals("_y?^*tCWR*HFN}'9:", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Integer, Object>, Map<Map<HashMap<String, Object>, Object>, String>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Map<Map<HashMap<String, Object>, Object>, String>, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Object>, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put((Integer) null, hashMap0, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.remove((Integer) null, hashMap0);
      assertEquals(0, hashMap1.size());
  }
}
