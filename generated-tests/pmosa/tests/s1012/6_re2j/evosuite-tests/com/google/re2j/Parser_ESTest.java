/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 21:40:18 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", 500);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, 1810, 1810);
      Parser parser0 = new Parser("", 1810);
      Parser.parse("", 128541);
      Parser.parse("", (-3192));
      Parser.parse("-j3Rex2TxPXTb+3|3", 1810);
      Parser.parse("", 1810);
      Parser.parse("", 1810);
      Parser.parse("", 1810);
      Parser.parse("SXt4W4z{%zKh!IK ", 1749);
      Parser.parse("[:xdigit:]", (-851));
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 0);
      Parser.parse("missing closing ]", 0);
      Parser.parse("6'4", 0);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, 1749, 3897);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1749
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("?QeBV+GI3b&8Oh)", 43640);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("?JS'[", (-627));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        Parser.parse("[", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-211);
      Regexp regexp0 = Parser.parse("[:]", (-211));
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-211), 41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -211
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("{?_aJLn,CbW>U", 493);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `{?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P4dv%J:", (-211));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        Parser.parse("H(?P<(?(?(?P<", 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(?(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse("[l-:gE{b>6", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `l-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        Parser.parse("(?(mI_O^hH@!6I<2", 156);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        Parser.parse("[\bC", (-364));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[\bC`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Parser.parse("[:", (-1988));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Parser.parse("t(", (-959));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `t(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("(b", 4560);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(b`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "V|z";
      int int0 = 0;
      Parser parser0 = new Parser("V|z", 0);
      Parser.parse("", 0);
      try { 
        Parser.parse("= Cow{(,?O:1nJpF", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `= Cow{(,?O:1nJpF`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Parser.parse("(", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("Shavian", 714);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("KMuzCvdd$S;Ob!dJ", 0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexpArray0[2]);
      regexpArray0[3] = regexp4;
      String string0 = "n0nf9c^p5aR";
      int int0 = 0;
      Regexp regexp5 = Parser.parse(string0, int0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexpArray0[2]);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[6] = regexp7;
      int int1 = 295;
      int int2 = 991;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 295
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "\\C5E";
      Regexp regexp0 = Parser.parse("C5E", (-263));
      int int0 = (-1101);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 97);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "61PWCXv0E\" (nn|uk{";
      int int0 = 91;
      Parser.parse("61PWCXv0E\" (nn|uk{", 91);
      int int1 = 0;
      Parser parser0 = new Parser("61PWCXv0E\" (nn|uk{", 0);
      Parser.parse("61PWCXv0E\" (nn|uk{", 91);
      int int2 = 57;
      try { 
        Parser.parse("61PWCXv0E\" (nn|uk{", 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `61PWCXv0E\" (nn|uk{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        Parser.parse("!|*", 41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8|a4", 128);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse("0|", (-1679));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Regexp regexp0 = Parser.parse("I|", 3788);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("J|xU*", 60);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-227);
      Parser.parse("L", (-227));
      Parser parser0 = new Parser("J|xyU*", (-227));
      Parser.parse("H:FBa'i'[cx+o;$", 1386);
      Parser.parse("J|xyU*", (-227));
      Parser.parse("J|xyU*", (-227));
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 1075, (-227));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Parser.parse("[", 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("p:]", 2641);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      String string0 = "\\E";
      Regexp regexp0 = Parser.parse("E", (-260));
      regexpArray0[0] = regexp0;
      int int0 = 1261;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\E`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("/kfY2@/Z;*P%", 9);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("r\"+=2H84nt#N,", 9);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = Parser.parse("r\"+=2H84nt#N,", 0);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp4);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = new Regexp(regexp3);
      regexpArray0[7] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2051, 115);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      int int0 = 2289;
      Regexp regexp0 = Parser.parse("0U*S3", 2289);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.subs = regexpArray0;
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.subs = regexp0.subs;
      regexpArray0[1] = regexp2;
      int int1 = 2794;
      regexp0.max = 2289;
      int int2 = 4142;
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp2.equals("0U*S3");
      regexp0.min = 4142;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2794, 4142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2794
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp[] regexpArray0 = null;
      Parser.subarray((Regexp[]) null, 0, 0);
      String string0 = ".";
      Parser parser0 = new Parser(".", 0);
      Parser.parse(".", 64335);
      Parser.parse("", 0);
      Parser.parse(".", 0);
      int int0 = 0;
      Parser.parse(".", 0);
      try { 
        Parser.parse("=G~lB=\"2IlyQj[l", (-4019));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[l`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^`;*{;_Jn", (-1231));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("\"+OrNeC(lgyU>%Nv", 2102);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("R^Gp'HDmysti", 0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("qgPYKu{{goLrv", 2102);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = new Regexp(regexp1);
      regexpArray0[6] = regexp7;
      Regexp regexp8 = Parser.parse("qgPYKu{{goLrv", 0);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexp_Op1);
      regexpArray0[8] = regexp9;
      Parser.subarray(regexpArray0, 2102, 2102);
      Parser.parse("qgPYKu{{goLrv", 2102);
      Parser parser0 = new Parser((String) null, 45);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[2] = regexp3;
      Parser.subarray(regexpArray0, (-3402), (-3402));
      String string0 = "j~)zb6=SN7IVKW";
      int int0 = 0;
      try { 
        Parser.parse("j~)zb6=SN7IVKW", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Parser.parse(")Vwr5Q^9|y'", (-600));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "61PWCXv0E\" (nn|uk{";
      int int0 = 91;
      Parser.parse("61PWCXv0E\" (nn|uk{", 91);
      int int1 = 0;
      Parser parser0 = new Parser("61PWCXv0E\" (nn|uk{", 0);
      try { 
        Parser.parse("61PWCXv0E\" (nn|uk{", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `61PWCXv0E\" (nn|uk{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 48;
      Parser.parse("$LBI+bT7|U", 48);
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "nXz!$\"(c@hb67o~w";
      try { 
        Parser.parse("nXz!$\"(c@hb67o~w", (-644));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `nXz!$\"(c@hb67o~w`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Parser parser0 = new Parser(".", 0);
      Regexp regexp0 = Parser.parse(".", 0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse(".", 0);
      Parser.parse(".", 1849);
      Regexp regexp3 = new Regexp(regexp2);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      regexp3.runes = intArray0;
      Parser.parse("J@a#!wB$&|#b]3J*^", 1849);
      Regexp regexp4 = new Regexp(regexp3);
      Parser.parse("J@a#!wB$&|#b]3J*^", 0);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (-798));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser.parse("5>O", 2013);
      String string0 = "|tD-0myxIoqQ\\4dv%J:";
      Parser.parse("|tD-0myxIoqQ\u0004dv%J:", 52);
      int int0 = 1992;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\4`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005E", 1593);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-80);
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("p:]", (-652));
      Regexp[] regexpArray0 = null;
      int int0 = 118;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|C@1!{cAUN", 2013);
      Regexp regexp1 = Parser.parse(":!v\"0u4", 2013);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^`;*{;_Jn", 3776);
      Regexp regexp1 = Parser.parse("[::]", 3776);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp1;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 3776, 3776);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp regexp2 = Parser.parse("[::]", (-811));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 3693);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 583;
      Regexp regexp1 = Parser.parse("p}^Tlb.h%", (-652));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("i:", 42);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("[:^graph:]", (-1284));
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp5;
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexpArray0[6] = regexp6;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 42, 42);
      Parser.parse("V9XLg-2O:DIK LmS3'", 733);
      Parser.parse("peit:]", 733);
      String string0 = ")pMTJe)y@gr";
      int int0 = 346;
      Parser.parse(string0, int0);
      Regexp regexp7 = new Regexp(regexpArray0[5]);
      int int1 = 40;
      int int2 = 59;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:h:]", 1268);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp1 = Parser.parse("i0%W H;k<N,^ejytlF%", (-217));
      regexpArray0[3] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[4] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp3;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 0);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8|4", 128);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser.parse("invalid nested repetition operator", 1245);
      try { 
        Parser.parse("^7\u0000.|?^WZ(,vs~O", 1245);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        Parser.parse("^7\u0000|?^W2(,fvs~r", 384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "\\r";
      Parser.parse("\r", 2013);
      int int0 = 52;
      Parser.parse("|tD-0myxIoqQ\u0004dv%J:", 52);
      int int1 = 44010;
      Parser.parse(string0, int1);
      int int2 = 1992;
      String string1 = "ra<{)\">~";
      try { 
        Parser.parse(string1, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "missing closing ]";
      int int0 = 69;
      Parser.parse("missing closing ]", 69);
      Parser.parse("\u0004", 8);
      Parser.parse(string0, int0);
      int int1 = 839;
      Regexp[] regexpArray0 = new Regexp[0];
      int int2 = 9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("KMuzCvdd$S;Ob!dJ", 112);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Regexp regexp0 = Parser.parse("9tHeWc%5:^%\u0005c\"}dq", 1245);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser.parse("\nBWiRt:]", (-980));
      Parser.parse("\nBWiRt:]", 0);
      String string0 = null;
      int int0 = 74;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "\\x";
      Regexp regexp0 = Parser.parse("x", 12296);
      int int0 = 2762;
      Parser.parse(string0, int0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      int int1 = 154;
      int int2 = 981;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 154
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser.parse("x{", (-1919));
      String string0 = "\\p::]";
      int int0 = 272;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\p`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x{10FFFF}", 2504);
      Parser parser0 = new Parser("x{10FFFF}", 2504);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2504, (-552));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", 128);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 128, 128);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x0L0-x{10FFFF}", 1);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      int int0 = 51;
      Regexp regexp0 = Parser.parse("", 51);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("missing closing ]", (-1302));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("}cKQwIF|Fb7y(5a3[", (-1302));
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp2);
      regexpArray0[3] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      int int1 = (-3995);
      try { 
        Parser.parse("[-gE{>6", (-3995));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-gE{>6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 1245;
      String string0 = "~bK[";
      try { 
        Parser.parse("~bK[", 1245);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 1;
      Parser parser0 = new Parser("", 1);
      Regexp regexp0 = Parser.parse("", 1);
      Regexp regexp1 = Parser.parse(">", 1);
      Regexp regexp2 = Parser.parse("/{9}?Ll>.@", 1);
      Regexp regexp3 = Parser.parse("Zd X%", 1);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp2;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp3;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("/{5", (-1720));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("/{9}?Ll>.@", 3944);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{3r#", 92);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Parser.parse("(?(mI_O^hH@!6I<2", 372);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 124;
      try { 
        Parser.parse("KVPjOm[Z+-v:", 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Z+-v:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4DU2d 3sPW", 1256);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "&0_?";
      Regexp regexp0 = Parser.parse("&0_?", 109);
      Regexp regexp1 = Parser.parse("&0_?", 109);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("&0_?", (-656));
      regexpArray0[2] = regexp2;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 91, (-656));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Fn!\f{h9'o", (-2663));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Regexp regexp0 = Parser.parse("v5|", 884);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|w", (-3));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", (-2188));
      Parser parser0 = new Parser("_+b%`U~qPUW", (-2188));
      Regexp regexp1 = Parser.parse("4`G&| ", (-2188));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("pP5E", (-15));
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse("g7ZX", 18);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = Parser.parse("g7ZX", (-283));
      regexpArray0[3] = regexp4;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 11, 9);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PP", 508);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PL<", 253);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "(?";
      int int0 = 969;
      try { 
        Parser.parse("(?", 969);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|:C|d%{$.I!", 109);
      Regexp regexp1 = Parser.parse("C1ccZ=@JmQ>+hk&", 109);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", (-1931));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser parser0 = new Parser("b|}q(EtR3r)wbzqoZk", 109);
      Regexp regexp0 = Parser.parse("b|}q(EtR3r)wbzqoZk", 109);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "P";
      regexpArray0[0] = regexp1;
      Parser.parse("pP5E", (-15));
      Parser.parse("pP5E", (-15));
      Parser.parse("QTwX3{~h}\u0007L@h", (-15));
      String string0 = "C&{UA~!Oc\\";
      int int0 = (-1079);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: trailing backslash at end of expression
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Parser.parse("v5|", 69);
      Regexp regexp3 = Parser.parse("\u0000", 11265);
      Regexp regexp4 = Parser.parse("\u0000", (-3666));
      assertTrue(regexp4.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 1268);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Parser.parse("(?-E:$z", (-391));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-E`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Parser.parse("(?-m:q-", (-2227));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?-m:q-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = Parser.parse("missing closing ]", (-1302));
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexpArray0[0];
      regexpArray0[3] = regexpArray0[2];
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp1;
      Regexp regexp2 = Parser.parse("\b", (-3995));
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "k-8TMg5moicZW\\c";
      Parser.parse("k-8TMg5moicZWc", 674);
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 9;
      try { 
        Parser.parse("[-gE{>6", 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-gE{>6`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0006v5|", 884);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP5E", (-8));
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", 89);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^xt0L0-x{10FFF}", 125);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("u$nz9y8Xi-", 89);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "42+&| ";
      int int0 = (-1452);
      Parser.parse("42+&| ", (-1452));
      Regexp regexp0 = Parser.parse("S1~N>,A+7", (-1452));
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-855);
      try { 
        Parser.parse("k[^/5", (-855));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^/5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Parser parser0 = new Parser("a", (-1));
      Regexp regexp0 = Parser.parse("Q\tZ='TMlv?A]uB-m:", 953);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Parser.parse("Z\u0006-=d/9E", 2548);
      String string0 = "5)";
      int int0 = 256;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "k4[^3/5";
      try { 
        Parser.parse("k4[^3/5", (-539));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^3/5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        Parser.parse("(?)(emIiO^h@H@!6I<2", (-5791));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?)(emIiO^h@H@!6I<2`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0001X8/bsx_^;UYsD4Gi", 3208);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("hcv$I]f?e\u0015^BHH6gH", 3157);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2315, 128);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("aP5+", 253);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Parser.parse("Wpx{10FFFF}", 229);
      Parser parser0 = new Parser("Wpx{10FFFF}", 2863);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8|4", 10101);
      Regexp regexp1 = Parser.parse("8|4", 12342);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 12342, 3078);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      int int0 = (-1688);
      Regexp regexp0 = Parser.parse("d", (-1688));
      regexpArray0[0] = regexp0;
      try { 
        Parser.parse("+nJo", (-1688));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Parser parser0 = new Parser("p J?", 85);
      Regexp regexp0 = Parser.parse("B`%z|bt1Le", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp regexp0 = Parser.parse("_a\u0003v^yOc>tP4\"lIy", 0);
      String string0 = "Old_Italic";
      int int0 = 4;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser parser0 = new Parser("D", (-2142));
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp regexp0 = Parser.parse("D", (-2142));
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("D", 1814);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp4 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = Parser.parse("D", 64);
      regexpArray0[4] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 17, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Parser.parse("RyR>$f_p[&+;S\"Jwej-", (-1647));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[&+;S\"Jwej-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      try { 
        Parser.parse("(?P<(?>P<(?(?uP-]p<", 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp regexp0 = Parser.parse("PE", (-4250));
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("W^z;@|W`B\"G=$A2l", 3264);
      regexpArray0[2] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp2);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp5 = new Regexp(regexp_Op2);
      regexpArray0[5] = regexp5;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 118, 3264);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 118
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp regexp0 = Parser.parse("MOTZ0wQ", 92);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("MOTZ0wQ", 2);
      regexpArray0[2] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 45, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Parser.parse("(?P<L>P<(?5?uP-]p<", (-44));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      int int0 = 92;
      Regexp regexp0 = Parser.parse("(?-s:.)", 92);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("(?-s:.)", (-268));
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("(?-s:.)", (-268));
      regexpArray0[3] = regexp3;
      try { 
        Parser.parse("-{J |*,\u0002i:rSPP", 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">|d", 328);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Regexp regexp0 = Parser.parse("K|k", 248);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Regexp regexp0 = Parser.parse("K|k", 9);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser parser0 = new Parser("D{5,j,vTT1tzcFp:/H", 301);
      Parser.parse("D{5,j,vTT1tzcFp:/H", 52);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 301);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      String string0 = "Gp~DcJnei0[P]S";
      int int0 = 1953;
      Regexp regexp0 = Parser.parse("Gp~DcJnei0[P]S", 1953);
      regexp0.cap = 2759;
      regexpArray0[0] = regexp0;
      regexp0.max = 1953;
      int int1 = (-1079);
      int int2 = 1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1079), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1079
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
