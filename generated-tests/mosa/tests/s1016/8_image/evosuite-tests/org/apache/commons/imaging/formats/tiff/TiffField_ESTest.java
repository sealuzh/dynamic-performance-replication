/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:19:10 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[70];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(72, 72, fieldTypeFloat0, 72, 72, byteArray0, byteOrder0, 72);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(72, tiffField0.getSortHint());
      assertEquals(72, tiffField0.getDirectoryType());
      assertNotNull(tiffElement0);
      assertEquals(72, tiffField0.getTag());
      assertEquals(72L, tiffElement0.offset);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[70];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(72, 72, fieldTypeFloat0, 72, 72, byteArray0, byteOrder0, 72);
      String string0 = tiffField0.toString();
      assertEquals("72 (0x48: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (72 Float)", string0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(72, 72);
      String string1 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals(72, tiffField0.getSortHint());
      assertNotNull(string1);
      assertEquals(72, tiffField0.getOffset());
      assertEquals(288, tiffField0.getBytesLength());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: Float", string1);
      assertEquals(72, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[70];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(72, 72, fieldTypeFloat0, 72, 72, byteArray0, byteOrder0, 72);
      String string0 = tiffField0.toString();
      assertEquals("72 (0x48: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (72 Float)", string0);
      
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(72, 72);
      String string1 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(72, tiffField0.getSortHint());
      assertEquals(72, tiffField0.getDirectoryType());
      assertNull(string1);
      assertEquals(288, tiffField0.getBytesLength());
      assertEquals(72, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-3630), (-3630), fieldTypeDouble0, (-3630), (-3630), byteArray0, byteOrder0, (-3630));
      tiffField0.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(182, 182, fieldTypeDouble0, 182, 182, byteArray0, byteOrder0, 182);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@338b00c7 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[144];
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1284, 1284, fieldTypeLong0, 1284, 1284, byteArray0, byteOrder0, 1284);
      String string0 = tiffField0.toString();
      assertEquals("1284 (0x504: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (1284 SLong)", string0);
      
      tiffField0.getIntArrayValue();
      assertEquals(1284, tiffField0.getOffset());
      assertEquals(1284, tiffField0.getSortHint());
      assertEquals(1284, tiffField0.getDirectoryType());
      assertEquals(5136, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(201, 201, fieldTypeDouble0, 201, 201, byteArray0, byteOrder0, 201);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[83];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(65523, 65523, fieldTypeFloat0, 65523, 65523, byteArray0, byteOrder0, 65523);
      String string0 = tiffField0.toString();
      assertEquals(65523, tiffField0.getDirectoryType());
      assertEquals(65523, tiffField0.getOffset());
      assertEquals(65523, tiffField0.getSortHint());
      assertEquals(262092, tiffField0.getBytesLength());
      assertEquals("65523 (0xfff3: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (65523 Float)", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField(234, 234, fieldTypeByte0, 234, 234, byteArray0, byteOrder0, 234);
      tiffField0.dump();
      assertEquals(234, tiffField0.getOffset());
      assertEquals(234, tiffField0.getDirectoryType());
      assertEquals(234, tiffField0.getBytesLength());
      assertEquals(234, tiffField0.getTag());
      assertEquals(234, tiffField0.getSortHint());
      assertEquals(234L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[172];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(352, 352, fieldTypeFloat0, 352, 352, byteArray0, byteOrder0, 352);
      tiffField0.getDoubleArrayValue();
      assertEquals(352, tiffField0.getSortHint());
      assertEquals(352, tiffField0.getDirectoryType());
      assertEquals(1408, tiffField0.getBytesLength());
      assertEquals(352, tiffField0.getTag());
      assertEquals(352, tiffField0.getOffset());
      assertEquals(352L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(182, (-1733), fieldTypeShort0, 182, (-1733), byteArray0, byteOrder0, 182);
      String string0 = tiffField0.toString();
      assertEquals("182 (0xb6: Unknown Tag): 0, 0, 0, 0 (182 Short)", string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals((-1733), tiffField0.getOffset());
      assertEquals(182, tiffField0.getSortHint());
      assertEquals((-1733), tiffField0.getDirectoryType());
      assertEquals(364, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(201, 201, fieldTypeDouble0, 201, 201, byteArray0, byteOrder0, 201);
      tiffField0.dump();
      assertEquals(201, tiffField0.getSortHint());
      assertEquals(201, tiffField0.getTag());
      assertEquals(201, tiffField0.getOffset());
      assertEquals(1608, tiffField0.getBytesLength());
      assertEquals(201, tiffField0.getDirectoryType());
      assertEquals(201L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(182, 182, fieldTypeShort0, 182, 182, byteArray0, byteOrder0, 182);
      tiffField0.dump();
      String string0 = tiffField0.toString();
      assertEquals(364, tiffField0.getBytesLength());
      assertEquals("182 (0xb6: Unknown Tag):  (182 Short)", string0);
      assertEquals(182, tiffField0.getDirectoryType());
      assertEquals(182, tiffField0.getSortHint());
      assertEquals(182, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(37, 37, fieldTypeShort0, 37, 37, byteArray0, byteOrder0, 37);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(74, tiffField0.getBytesLength());
      assertEquals(37, tiffField0.getDirectoryType());
      assertEquals(37, tiffField0.getSortHint());
      assertEquals(37, tiffField0.getTag());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(37, tiffField0.getOffset());
      assertEquals(37L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(190, 190, fieldTypeDouble0, 190, 190, byteArray0, byteOrder0, 190);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "The array of suffixes must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[83];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(57, 57, fieldTypeFloat0, 57, 57, byteArray0, byteOrder0, 57);
      tiffField0.getFieldTypeName();
      assertEquals(57, tiffField0.getTag());
      assertEquals(57, tiffField0.getOffset());
      assertEquals(57, tiffField0.getSortHint());
      assertEquals(57, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(182, 182, fieldTypeDouble0, 182, 182, byteArray0, byteOrder0, 182);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(182, tiffField0.getOffset());
      assertEquals(182, tiffField0.getSortHint());
      assertEquals(182, int0);
      assertEquals(182, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField((byte)81, (byte)81, fieldTypeRational0, (byte)81, (byte)81, byteArray0, byteOrder0, (byte)81);
      tiffField0.dump();
      assertEquals(81, tiffField0.getOffset());
      assertEquals(81, tiffField0.getTag());
      assertEquals(81, tiffField0.getSortHint());
      assertEquals(81, tiffField0.getDirectoryType());
      assertEquals(648, tiffField0.getBytesLength());
      assertEquals(81L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(182, 182, fieldTypeDouble0, 182, 182, byteArray0, byteOrder0, 182);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [D@6c4e8f12 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(182, 182, fieldTypeDouble0, 182, 182, byteArray0, byteOrder0, 182);
      String string0 = tiffField0.getTagName();
      assertEquals("Unknown Tag (0xb6)", string0);
      assertEquals(182, tiffField0.getDirectoryType());
      assertEquals(182, tiffField0.getSortHint());
      assertEquals(182, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[83];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(314, 314, fieldTypeAscii0, 314, 314, byteArray0, byteOrder0, 314);
      tiffField0.toString();
      assertEquals(314, tiffField0.getTag());
      assertEquals(314, tiffField0.getSortHint());
      assertEquals(314L, tiffField0.getCount());
      assertEquals(314, tiffField0.getDirectoryType());
      assertEquals(314, tiffField0.getBytesLength());
      assertEquals(314, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(5167, 5167, fieldTypeDouble0, 5167, 5167, byteArray0, byteOrder0, 5167);
      tiffField0.getDoubleArrayValue();
      assertEquals(5167, tiffField0.getSortHint());
      assertEquals(5167L, tiffField0.getCount());
      assertEquals(5167, tiffField0.getDirectoryType());
      assertEquals(41336, tiffField0.getBytesLength());
      assertEquals(5167, tiffField0.getTag());
      assertEquals(5167, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[41];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(104, 104, fieldTypeShort0, 104, 104, byteArray0, byteOrder0, 104);
      tiffField0.getByteArrayValue();
      String string0 = tiffField0.toString();
      assertEquals(104, tiffField0.getSortHint());
      assertEquals(104, tiffField0.getDirectoryType());
      assertEquals("104 (0x68: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (104 SShort)", string0);
      assertEquals(208, tiffField0.getBytesLength());
      assertEquals(104, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = new FieldTypeByte((-853), ";s1f`_%&");
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-853), (-853), fieldTypeByte0, (byte)0, (byte)0, byteArray0, byteOrder0, (byte)0);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@4784afcb for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[186];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField((-3150), (-3150), fieldTypeLong0, 2155L, (-3150), byteArray0, byteOrder0, (-3150));
      tiffField0.getDoubleArrayValue();
      assertEquals(8620, tiffField0.getBytesLength());
      assertEquals((-3150), tiffField0.getDirectoryType());
      assertEquals((-3150), tiffField0.getTag());
      assertEquals((-3150), tiffField0.getOffset());
      assertEquals((-3150), tiffField0.getSortHint());
      assertEquals(2155L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[147];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(14, 14, fieldTypeFloat0.RATIONAL, 1533L, 1533L, byteArray0, byteOrder0, 14);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField0 = new TiffField(249, (byte)81, fieldTypeRational0, 249, (byte)81, byteArray0, byteOrder0, 249);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, int0);
      assertEquals(81, tiffField0.getDirectoryType());
      assertEquals(249L, tiffField0.getCount());
      assertEquals(249, tiffField0.getTag());
      assertEquals(81, tiffField0.getOffset());
      assertEquals(1992, tiffField0.getBytesLength());
      assertEquals(249, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(5167, 5167, fieldTypeDouble0, 5167, 5167, byteArray0, byteOrder0, 5167);
      int int0 = tiffField0.getSortHint();
      assertEquals(5167, int0);
      assertEquals(5167, tiffField0.getDirectoryType());
      assertEquals(5167, tiffField0.getTag());
      assertEquals(5167, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[144];
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1284, 1284, fieldTypeLong0, 1284, 1284, byteArray0, byteOrder0, 1284);
      String string0 = tiffField0.toString();
      assertEquals("1284 (0x504: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (1284 SLong)", string0);
      
      tiffField0.getIntValueOrArraySum();
      assertEquals(1284, tiffField0.getDirectoryType());
      assertEquals(1284, tiffField0.getSortHint());
      assertEquals(5136, tiffField0.getBytesLength());
      assertEquals(1284, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[83];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      TiffField tiffField0 = new TiffField(5164, (-1254), fieldTypeRational0, 5164, (-1254), byteArray0, byteOrder0, 5164);
      tiffField0.toString();
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(41312, tiffField0.getBytesLength());
      assertEquals(5164, tiffField0.getSortHint());
      assertEquals((-1254), tiffField0.getOffset());
      assertEquals(5164, tiffField0.getTag());
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals((-1254), tiffField0.getDirectoryType());
      assertEquals(5164L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(265, 265, fieldTypeFloat0, 265, 265, byteArray0, byteOrder0, 265);
      String string0 = tiffField0.getTagName();
      assertEquals(265, tiffField0.getTag());
      assertEquals(265, tiffField0.getSortHint());
      assertEquals(265, tiffField0.getOffset());
      assertEquals(265, tiffField0.getDirectoryType());
      assertEquals("CellLength", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(182, (-1712), fieldTypeShort0, 182, (-1712), byteArray0, byteOrder0, 182);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(182L, tiffField0.getCount());
      assertEquals(182, tiffField0.getTag());
      assertEquals((-1712), tiffField0.getDirectoryType());
      assertEquals((-1712), tiffField0.getOffset());
      assertEquals(0, int0);
      assertEquals(364, tiffField0.getBytesLength());
      assertEquals(182, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[183];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, byteOrder0, 1);
      tiffField0.dump();
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("1 (0x1: Unknown Tag): ", string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[183];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, byteOrder0, 1);
      tiffField0.getIntValueOrArraySum();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): 0.0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[183];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, byteOrder0, 1);
      tiffField0.getIntArrayValue();
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): 0.0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[17];
      byteArray0[4] = (byte)81;
      TiffField tiffField0 = new TiffField((byte)81, (byte)81, fieldTypeRational0, (byte)81, (-1381L), byteArray0, byteOrder0, (byte)0);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)125;
      TiffField tiffField0 = new TiffField(6, 69, fieldTypeRational0, (byte)125, 6, byteArray0, byteOrder0, (byte)0);
      tiffField0.getIntArrayValue();
      assertEquals(125L, tiffField0.getCount());
      assertEquals(69, tiffField0.getDirectoryType());
      assertEquals(1000, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(6, tiffField0.getTag());
      assertEquals(6, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(34, 19, fieldTypeAscii0, 34, 34, byteArray0, byteOrder0, 19);
      tiffField0.dump();
      assertEquals(34, tiffField0.getOffset());
      assertEquals(19, tiffField0.getSortHint());
      assertEquals(19, tiffField0.getDirectoryType());
      assertEquals(34, tiffField0.getBytesLength());
      assertEquals(34, tiffField0.getTag());
      assertEquals(34L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField(40091, 829, fieldTypeByte0, 40091, 2147483647L, byteArray0, byteOrder0, 829);
      String string0 = tiffField0.getStringValue();
      assertEquals(829, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(40091, tiffField0.getTag());
      assertEquals(829, tiffField0.getSortHint());
      assertEquals(Integer.MAX_VALUE, tiffField0.getOffset());
      assertEquals(40091, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[16];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(155, 155, fieldTypeDouble0, 155, 155, byteArray0, byteOrder0, 155);
      String string0 = tiffField0.getValueDescription();
      assertEquals(155, tiffField0.getOffset());
      assertEquals(155, tiffField0.getSortHint());
      assertEquals(155, tiffField0.getDirectoryType());
      assertEquals(155, tiffField0.getTag());
      assertEquals(1240, tiffField0.getBytesLength());
      assertEquals(155L, tiffField0.getCount());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[249];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffField tiffField0 = new TiffField(3317, 3317, fieldTypeByte0, 3317, 3317, byteArray0, byteOrder0, 3317);
      tiffField0.dump();
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@32d3c0e7 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[109];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(65539, 65539, fieldTypeShort0, 65539, 65539, byteArray0, byteOrder0, 65539);
      String string0 = tiffField0.toString();
      assertEquals("65539 (0x10003: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (54) (65539 Short)", string0);
      assertEquals(65539, tiffField0.getOffset());
      assertEquals(65539, tiffField0.getSortHint());
      assertEquals(65539, tiffField0.getDirectoryType());
      assertEquals(131078, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[208];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(75, 75, fieldTypeLong0, 5051, 75, byteArray0, byteOrder0, 5051);
      String string0 = tiffField0.toString();
      assertEquals(75, tiffField0.getOffset());
      assertEquals(5051, tiffField0.getSortHint());
      assertEquals(75, tiffField0.getDirectoryType());
      assertEquals("75 (0x4b: Unknown Tag): 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (52) (5051 SLong)", string0);
      assertEquals(20204, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[249];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(3317, 3317, fieldTypeFloat0, 3317, 3317, byteArray0, byteOrder0, 20);
      tiffField0.dump();
      assertEquals(3317, tiffField0.getOffset());
      assertEquals(13268, tiffField0.getBytesLength());
      assertEquals(3317L, tiffField0.getCount());
      assertEquals(3317, tiffField0.getTag());
      assertEquals(20, tiffField0.getSortHint());
      assertEquals(3317, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[427];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(3633, 3633, fieldTypeDouble0, 3633, 3633, byteArray0, byteOrder0, 744);
      tiffField0.dump();
      tiffField0.toString();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }
}
