/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:25:13 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 581;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp3 = new Regexp(regexp0);
      regexp2.equals(regexp3);
      regexp0.op = regexp_Op1;
      regexp2.max = 0;
      regexp2.name = "";
      regexp0.name = "";
      Regexp regexp4 = Simplify.simplify(regexp2);
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      regexp4.op = regexp_Op2;
      Regexp regexp5 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      Regexp regexp6 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp6);
      Simplify.simplify(regexp4);
      Regexp regexp7 = Simplify.simplify(regexp5);
      assertSame(regexp7, regexp5);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "";
      Simplify.simplify(regexp1);
      Regexp regexp2 = Simplify.simplify(regexp0);
      regexp2.reinit();
      regexp2.flags = 0;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.QUEST;
      regexp2.op = regexp_Op2;
      regexp2.equals(regexp3);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 464;
      regexp0.max = (-1212);
      regexp0.max = 581;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.min = 581;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = (-518);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.name = "h";
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp1);
      regexp3.max = (-845);
      int[] intArray0 = new int[8];
      intArray0[0] = (-845);
      intArray0[1] = (-518);
      intArray0[2] = 1;
      intArray0[3] = (-518);
      intArray0[4] = (-845);
      intArray0[5] = (-518);
      intArray0[6] = (-518);
      intArray0[7] = (-518);
      regexp1.runes = intArray0;
      regexp3.name = "";
      Regexp regexp4 = Simplify.simplify(regexp3);
      Regexp regexp5 = Simplify.simplify(regexp1);
      regexp5.reinit();
      regexp5.reinit();
      regexp4.max = (-518);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      regexp5.op = regexp_Op1;
      Regexp regexp6 = Simplify.simplify(regexp5);
      regexp6.cap = 648;
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp5);
      Regexp regexp7 = Simplify.simplify(regexp6);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp2);
      Regexp regexp8 = Simplify.simplify(regexp7);
      assertSame(regexp8, regexp5);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      Simplify.simplify(regexp0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 581;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      Simplify.simplify(regexp0);
  }
}
