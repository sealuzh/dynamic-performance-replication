/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:03:44 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      boolean boolean0 = xPathLexer0.isIdentifierChar('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume((-1181));
      token0.toString();
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("+_zF");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(5, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E>-+Y^-AFq_.O/");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("E", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(">", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("U|smhR*,nmc-tkx");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume(1419);
      xPathLexer0.and();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^[FJ'");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume((-2479));
      // Undeclared exception!
      try { 
        xPathLexer1.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_>R9+j_tnkr1S4Aq\"0");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(2, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      String string0 = "1{:/ Sk<O!7";
      XPathLexer xPathLexer1 = new XPathLexer("1{:/ Sk<O!7");
      xPathLexer1.doubleColon();
      xPathLexer0.not();
      Token token0 = xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.minus();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.endPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.mod();
      XPathLexer xPathLexer5 = new XPathLexer();
      String string1 = null;
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("60.t(X{=An@T7fV");
      xPathLexer0.number();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.not();
      xPathLexer0.currentPosition();
      xPathLexer0.consume(25);
      assertEquals("60.t(X{=An@T7fV", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("e#oNxr");
      xPathLexer0.and();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      String string0 = xPathLexer0.getXPath();
      assertEquals("e#oNxr", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(3, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(" ", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(2826);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.not();
      assertEquals("(", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CA:%|");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.number();
      xPathLexer4.leftBracket();
      xPathLexer4.consume();
      XPathLexer xPathLexer5 = new XPathLexer(") (");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.star();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("t)_`/.^V<~ 4");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("t", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(")", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("_", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.slashes();
      assertEquals(12, token3.getTokenType());
      assertEquals("`/", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ Sk<O!7");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("1{", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(18, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      xPathLexer0.and();
      Token token3 = xPathLexer0.comma();
      String string0 = token3.toString();
      assertEquals("[ (32) (/)", string0);
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals(" ", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("S", token5.getTokenText());
      
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(15, token2.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      Token token7 = xPathLexer0.minus();
      assertEquals("!", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token6);
      assertEquals(11, token6.getTokenType());
      assertEquals("O", token6.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("7", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8y\nt&|BM`vh&N");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("8", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("y", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("\n", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("t", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals("&", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("B", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.equals();
      String string0 = "*";
      XPathLexer xPathLexer1 = new XPathLexer("*");
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token1);
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("[ (");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token1 = xPathLexer0.equals();
      assertEquals(" ", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (3) ([)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (3) ([)");
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.or();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.setXPath("E0uQ3*:}V_:");
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.pipe();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("0", token4.getTokenText());
      
      String string0 = token3.toString();
      assertEquals("[ (17) (E)", string0);
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("u", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("Q3", token6.getTokenText());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals("*", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals(":", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("}V_:", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.equals();
      String string0 = "=";
      XPathLexer xPathLexer1 = new XPathLexer("=");
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bTd<2zrew~Q");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      xPathLexer1.colon();
      xPathLexer0.consume();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer2.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftParen();
      xPathLexer3.rightParen();
      String string0 = "xfn,f%T?}/h(@?wV( $";
      XPathLexer xPathLexer4 = new XPathLexer("xfn,f%T?}/h(@?wV( $");
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dGPGcAB+iTT0aBf");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      xPathLexer0.or();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume(2940);
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('c');
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.equals();
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xrY;uu]V1\f}@l");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      xPathLexer0.mod();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("?xu~5/AZvfInm|K)");
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer1.dots();
      xPathLexer1.getXPath();
      Token token1 = xPathLexer1.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      String string0 = "}mWtu2nb^?;";
      xPathLexer0.setXPath("}mWtu2nb^?;");
      xPathLexer0.plus();
      xPathLexer0.dollar();
      xPathLexer0.currentPosition();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("}mWtu2nb^?;");
      xPathLexer1.mod();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("!5", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      String string0 = token1.toString();
      assertEquals("[ (-2) ()", string0);
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("lPn", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ON/W*^A/hX(0");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("ON/W*^A/hX(0");
      xPathLexer1.or();
      xPathLexer1.comma();
      xPathLexer0.at();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer2.slashes();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.getXPath();
      xPathLexer0.consume((-1744));
      assertNotSame(xPathLexer0, xPathLexer2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("s/xqBLBY/oajmpR9");
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.dollar();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.consume((-1248));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "y=^Z;DTF";
      XPathLexer xPathLexer0 = new XPathLexer("y=^Z;DTF");
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer1.at();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_>R9+j_tnkr1S4Aq\"0");
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.whitespace();
      xPathLexer1.mod();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("eZ;RK|=Kz_[V8=tk>2d");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("Z", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("E0uQ3*:}V_:");
      xPathLexer1.getPreviousToken();
      Token token2 = xPathLexer1.slashes();
      assertEquals("E", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(";RK|=Kz_[V8=tk>2d", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_>R9+j_tnkr1S4Aq\"0");
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mc]$Qhg#&I=0_O");
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.rightParen();
      xPathLexer1.star();
      xPathLexer1.getPreviousToken();
      xPathLexer2.at();
      xPathLexer2.slashes();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("B.t(/I;#EQ94k}3X");
      xPathLexer0.dollar();
      xPathLexer0.LA(103);
      xPathLexer0.leftBracket();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.isIdentifierStartChar('@');
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.hasMoreChars();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!;x0b16U>^CM");
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("rm1h ?Zc1");
      xPathLexer1.comma();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("rm1h ?Zc1");
      xPathLexer1.notEquals();
      xPathLexer0.rightParen();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      xPathLexer0.consume((-1134));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.and();
      Token token2 = xPathLexer1.leftParen();
      assertEquals(1, token2.getTokenType());
      
      boolean boolean0 = xPathLexer3.isIdentifierChar('-');
      assertTrue(boolean0);
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer3.star();
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer2.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("NR&n6");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer2.and();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("M1");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.mod();
      Token token1 = xPathLexer1.nextToken();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
      
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (15) (M1)", string0);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.getXPath();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token4 = xPathLexer3.rightBracket();
      assertEquals(4, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.slashes();
      String string0 = "4.P{`";
      XPathLexer xPathLexer1 = new XPathLexer("4.P{`");
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"xH");
      xPathLexer0.rightBracket();
      xPathLexer0.consume(123);
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("u6%JCl.O_@*");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|.UZ/Hj^#R8b8WPt");
      XPathLexer xPathLexer1 = new XPathLexer("|.UZ/Hj^#R8b8WPt");
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("|.UZ/Hj^#R8b8WPt");
      xPathLexer2.getPreviousToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("|.UZ/Hj^#R8b8WPt");
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      assertFalse(xPathLexer4.equals((Object)xPathLexer2));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("[ (");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("[", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(" ", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.identifier();
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer1.div();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer1.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+LOVZ\t<3{[H']");
      xPathLexer0.div();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("+", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("L", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("\t", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("<", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tQ+tbW9P}-%O.V9gHC");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.consume();
      assertEquals("tQ+tbW9P}-%O.V9gHC", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("nk'h}5&CcBksWZ>");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E0uQ3*:}V_:");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("E", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.rightParen();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(2, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token2 = xPathLexer2.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer2.slashes();
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("tk%q");
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("0", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer3.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("t", token6.getTokenText());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("e#$(jK6X@C");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer0.consume(1613);
      xPathLexer0.comma();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[qln~Bj)[O922oLw");
      Token token0 = xPathLexer0.at();
      assertEquals("[", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      Token token1 = xPathLexer1.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("qln", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("P~ob[#");
      XPathLexer xPathLexer5 = new XPathLexer("P~ob[#");
      Token token3 = xPathLexer5.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("P", token3.getTokenText());
      
      Token token4 = xPathLexer5.nextToken();
      assertEquals("~ob[#", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.star();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "J_b";
      XPathLexer xPathLexer1 = new XPathLexer("J_b");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d#eK[xn%+\u0007<");
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (20) (d)", string0);
      
      Token token2 = xPathLexer0.dots();
      assertEquals("#", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertNotSame(token4, token1);
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("K", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("[", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("xn", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`=F~e^w|LU@K5]0=");
      XPathLexer xPathLexer1 = new XPathLexer("E$bo2|^U_<2x<s");
      XPathLexer xPathLexer2 = new XPathLexer("`=F~e^w|LU@K5]0=");
      xPathLexer2.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dollar();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer(") (");
      xPathLexer3.mod();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.colon();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer("E$bo2|^U_<2x<s");
      xPathLexer8.LA(81);
      xPathLexer9.consume(81);
      String string0 = xPathLexer1.getXPath();
      assertEquals("E$bo2|^U_<2x<s", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "1{:/ Sk<O!7";
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ Sk<O!7");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ONk/W*^A/hX(0");
      xPathLexer0.star();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("ONk/W*^A/hX(0");
      assertEquals("ONk/W*^A/hX(0", xPathLexer2.getXPath());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("p");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token1);
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.plus();
      token0.toString();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume((-695));
      xPathLexer0.at();
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&G8=pZ:4)|Lj6mHh");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.hasMoreChars();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!5clPn:F[Su9 WR");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.div();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|.UZ/Hj^#R8b8WFAPt");
      XPathLexer xPathLexer1 = new XPathLexer("|.UZ/Hj^#R8b8WFAPt");
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("|.UZ/Hj^#R8b8WFAPt");
      xPathLexer2.getPreviousToken();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("|.UZ/Hj^#R8b8WFAPt");
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      assertNull(xPathLexer4.getXPath());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aHS;^j63S:Y'=M<Y)0X");
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("S", token2.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (16) (a)", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aHS;^j63S:Y'=M<Y)0X");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("aHS;^j63S:Y'=M<Y)0X");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      xPathLexer2.dollar();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.identifierOrOperatorName();
      String string0 = xPathLexer2.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ Sk<O!7");
      xPathLexer0.div();
      xPathLexer0.doubleColon();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      String string0 = "c5d";
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.number();
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("4.P{`");
      Token token1 = xPathLexer2.dots();
      assertEquals(14, token1.getTokenType());
      assertEquals("4.", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("B|2");
      Token token0 = xPathLexer0.comma();
      assertEquals("B", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.comma();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (32) (|)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.number();
      assertEquals("2", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('@');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ Sk<O!7");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("1{", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("1{:/ Sk<O!7");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer("1{:/ Sk<O!7");
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
      
      xPathLexer1.setPreviousToken((Token) null);
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("1", token2.getTokenText());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.div();
      xPathLexer2.endPosition();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer3.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("1{", token3.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("Zhi1U@d^-kiDAtmb)");
      xPathLexer2.getPreviousToken();
      xPathLexer2.or();
      xPathLexer3.operatorName();
      Token token4 = xPathLexer1.comma();
      assertEquals("{", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("2xc\":&u:CJ");
      XPathLexer xPathLexer9 = new XPathLexer("2xc\":&u:CJ");
      xPathLexer4.setXPath("1{:/ Sk<O!7");
      Token token5 = xPathLexer8.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
      
      XPathLexer xPathLexer10 = new XPathLexer(";\"WZXR-<,c:4X");
      Token token6 = xPathLexer7.identifierOrOperatorName();
      assertNotNull(token6);
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer8.pipe();
      assertEquals("x", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("deK[xn%+7<");
      xPathLexer0.div();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<N-t*=xP8kQ\"$0 x");
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("<N-t*=xP8kQ\"$0 x");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer2.not();
      assertEquals("<", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer2.comma();
      assertEquals("N", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.or();
      xPathLexer2.relationalOperator();
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer(")");
      xPathLexer3.operatorName();
      Token token3 = xPathLexer2.nextToken();
      assertEquals("-", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer4.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token5 = xPathLexer2.identifierOrOperatorName();
      assertEquals("t", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Butz");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.not();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-kf?da=L'<tRwJ~");
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      String string0 = "1{:/ Sk<O!7";
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.doubleColon();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("{D{!tTp!kL:u5&@?6-");
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b,");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      xPathLexer0.consume(94);
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('{');
      assertFalse(boolean0);
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(20, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("2G'QEp,D?");
      Token token2 = xPathLexer0.leftParen();
      assertEquals("2", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("G", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("'", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("Q", token5.getTokenText());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("p", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E+Ypln^v*-S!C{");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("E", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Ypln^v*-S!C{", token2.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-kI?da=z'<tRwJ~");
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      String string0 = "1{:/ Sk<O!7";
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.doubleColon();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.comma();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer("{D{!tTp!kL:u5&@?6-");
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.hasMoreChars();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("_>R9+j_tnkr1S4Aq\"0");
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer("_>R9+j_tnkr1S4Aq\"0");
      xPathLexer2.mod();
      xPathLexer0.nextToken();
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.isIdentifierStartChar('y');
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v.0:F]HRp");
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("v.0:F]HRp");
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer1.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.notEquals();
      Token token0 = xPathLexer2.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b16U>^CM");
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      token0.toString();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.not();
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.nextToken();
      Token token4 = xPathLexer0.dots();
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(">", token5.getTokenText());
      assertEquals(9, token5.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (23) (!)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer(">=+");
      String string1 = token4.toString();
      assertEquals("[ (13) (x)", string1);
      
      xPathLexer2.consume();
      xPathLexer1.identifier();
      String string2 = token1.toString();
      assertEquals("[ (11) (A)", string2);
      
      xPathLexer3.nextToken();
      Token token6 = xPathLexer3.getPreviousToken();
      assertEquals(">=", token6.getTokenText());
      assertEquals(10, token6.getTokenType());
      
      xPathLexer2.setPreviousToken(token3);
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.or();
      xPathLexer1.identifier();
      Token token7 = xPathLexer3.nextToken();
      assertEquals(5, token7.getTokenType());
      assertEquals("+", token7.getTokenText());
      
      Token token8 = xPathLexer4.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer1.setPreviousToken(token2);
      Token token9 = xPathLexer4.identifierOrOperatorName();
      assertNotNull(token9);
      assertEquals(15, token9.getTokenType());
      
      boolean boolean0 = xPathLexer4.isIdentifierChar('u');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$)AZr!x0b1sU>^CM");
      XPathLexer xPathLexer1 = new XPathLexer("i: EJ&~^L<`99|2");
      xPathLexer1.nextToken();
      xPathLexer0.not();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("i: EJ&~^L<`99|2");
      xPathLexer0.dollar();
      xPathLexer2.or();
      xPathLexer1.operatorName();
      xPathLexer1.notEquals();
      xPathLexer0.consume((-303));
      Token token0 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D)AZr~;x0b16U>^CM");
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.consume((-2658));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<4jN-t*=xP8kQ\"$0 x");
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer1.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      XPathLexer xPathLexer4 = new XPathLexer("4..P{`");
      xPathLexer2.nextToken();
      xPathLexer0.mod();
      Token token0 = xPathLexer4.number();
      xPathLexer4.plus();
      Token token1 = xPathLexer2.whitespace();
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ Sk<O!7");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.slashes();
      xPathLexer1.identifier();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("S");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer2.minus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.equals();
      xPathLexer0.mod();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer4.nextToken();
      xPathLexer2.slashes();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.leftParen();
      xPathLexer3.hasMoreChars();
      xPathLexer1.consume((-1));
      assertNotSame(xPathLexer1, xPathLexer5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v.0:F]xHRp");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token0 = xPathLexer1.slashes();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
