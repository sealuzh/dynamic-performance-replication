/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:29:39 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1413.5957116;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(0.3333333333333333, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(2577.0);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1607;
      MockRandom mockRandom0 = new MockRandom(1607);
      // Undeclared exception!
      try { 
        CCSMatrix.random(1607, 1607, (double) 1607, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2618);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.iteratorOfColumn(2618);
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.maxInColumn(2618);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(0, vectorFunction0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transform(matrixFunction0);
      assertEquals(0, cCSMatrix1.cardinality());
      
      cCSMatrix0.min();
      assertTrue(cCSMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 364
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2618, 2618, 2618);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(16, 16);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '17' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      cCSMatrix0.rank();
      cCSMatrix0.getRow(4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = new Integer(3273);
      int[] intArray0 = new int[2];
      intArray0[0] = 496;
      intArray0[1] = 3273;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '496' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      mockRandom0.ints((long) 0);
      mockRandom0.longs();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 10;
      mockRandom0.doubles();
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.spliterator();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.toColumnVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 496);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)496).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(496, vectorAccumulator0);
      cCSMatrix0.maxInColumn(496);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      cCSMatrix0.add((double) 7);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[] doubleArray0 = new double[1];
      CCSMatrix.from1DArray(2914, 2914, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-290);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random((-290), (-2146183690), (-1245.904981658633), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.minInColumn(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.add((double) 7);
      CCSMatrix.identity(7);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(8, 976.7);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2095);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2095;
      doubleArray0[1] = (double) 2095;
      doubleArray0[2] = (double) 2095;
      doubleArray0[3] = (double) 2095;
      ColumnMajorSparseMatrix.from1DArray(2095, 2095, doubleArray0);
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 496;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 496);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.iteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 11;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(11, 1403);
      cCSMatrix0.setAll(1403);
      int int1 = 3295;
      cCSMatrix0.minInColumn(int0);
      CCSMatrix.randomSymmetric(int1, (double) int1, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      cCSMatrix0.columnMajorIterator();
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      Matrix matrix0 = cCSMatrix1.hadamardProduct(cCSMatrix0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      long long0 = 1196L;
      MockRandom mockRandom0 = new MockRandom(1196L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(2589, 0, mockRandom0);
      Matrix matrix1 = ooPlaceMatricesAddition0.applySymmetric(denseMatrix0, (SparseMatrix) cCSMatrix1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix1, matrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 496);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)496).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(496, vectorAccumulator0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.nonZeroAt(2955, 9);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn((-1063));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1063
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 2618;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2618);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(2618, 2618);
      cCSMatrix0.add((Matrix) sparseMatrix0);
      CCSMatrix.zero(int0, int0);
      double double0 = Double.NEGATIVE_INFINITY;
      ColumnMajorSparseMatrix.diagonal(int0, double0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfShape(int0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 496);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 1232;
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.from1DArray((-1), 1232, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Matrix.diagonal(368, 368);
      MockRandom mockRandom0 = new MockRandom(0L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2611, 2601, 0.0, (Random) mockRandom0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1232;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("Can not remove from this iterator.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2601, 2, 2);
      Matrix matrix0 = cCSMatrix0.removeRow(367);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, cCSMatrix0, matrix0, matrix0);
      cCSMatrix1.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      Matrix.diagonal(10, 10);
      cCSMatrix0.rank();
      cCSMatrix0.product();
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.blank();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
      DenseVector denseVector0 = DenseVector.zero(2955);
      Matrix matrix1 = denseVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix1, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 8);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)8, 1650.6346496, (double)8, 4.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformColumn(0, vectorFunction0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, (double)7, (-1315.128), 803.799211, (-2925.494867581096)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transform(matrixFunction0);
      cCSMatrix0.insert(matrix0);
      // Undeclared exception!
      try { 
        matrix0.minInColumn(1454);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1454
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)3, 1650.6346496, (double)0, 4.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transformColumn(0, vectorFunction0);
      Matrix.diagonal(2140, 954);
      cCSMatrix1.rank();
      Double double0 = new Double(8);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(367);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInRow(3, vectorProcedure0);
      cCSMatrix0.copyOfShape(0, 8);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(368);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(368, 2601, 0.0, (Random) mockRandom0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1570, 1570);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2618);
      Matrix.diagonal(368, 0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(368, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(241);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 241
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(8, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)3, 1650.6346496, (double)0, 4.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transformColumn(0, vectorFunction0);
      Matrix.diagonal(3533, 3);
      cCSMatrix0.rank();
      Double double0 = new Double(2140);
      cCSMatrix1.copyOfShape(3, 3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      cCSMatrix1.blankOfShape(176, 3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7);
      Integer integer0 = new Integer(7);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = Integer.valueOf(7);
      linkedList0.add(integer1);
      Integer integer2 = new Integer(3990);
      linkedList0.add(integer2);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      cCSMatrix0.add((double) 7);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2095);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1607, (double)1607, (double)1607, (double)1607, (double)2095).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      cCSMatrix0.add((double) 0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = new Integer(0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(7, 7, 7);
      cCSMatrix0.rank();
      Double double0 = new Double(7);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(7, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2601, 367, (double) 0L, (Random) mockRandom0);
      cCSMatrix0.equals((Object) mockRandom0);
      cCSMatrix0.minInColumn(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 367;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(8, 0, doubleArray0);
      cCSMatrix1.nonZeroAt(4086, 0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(7, 7);
      cCSMatrix0.add((double) 7);
      CCSMatrix.identity(7);
      CCSMatrix.fromCSV("");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      CCSMatrix.from1DArray(0, 7, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Matrix.diagonal(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      Matrix.diagonal(1584, 1079.0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(1584);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1584
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-739L));
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(7, (double) 1, (Random) mockRandom0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2618;
      intArray0[1] = 7;
      intArray0[2] = 7;
      cCSMatrix0.rotate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3273, 3273, 496);
      cCSMatrix0.minInColumn(2);
      cCSMatrix0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1, 1);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cCSMatrix0.minInColumn(1);
      cCSMatrix0.max();
      cCSMatrix0.set(0, 0, 367.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(16);
      linkedList0.add(integer0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      CCSMatrix.random(351, 2601, 0.04159350693856215, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 2095;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2095);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(1607, vectorFunction0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.transform(matrixFunction0);
      long long0 = 1824L;
      MockRandom mockRandom0 = new MockRandom(long0);
      CCSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(16);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(16);
      Matrix matrix0 = cCSMatrix0.removeFirstColumn();
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      matrix0.apply(matrixOperation0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(41L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(367, 367, 0.0, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1816, 1816);
      cCSMatrix0.maxInColumn(651);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)7;
      CCSMatrix.fromBinary(byteArray0);
  }
}
