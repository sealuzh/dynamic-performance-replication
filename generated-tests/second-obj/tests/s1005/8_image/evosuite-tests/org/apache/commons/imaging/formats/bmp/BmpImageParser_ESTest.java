/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:09:46 GMT 2018
 */

package org.apache.commons.imaging.formats.bmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.FileDialog;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.function.BiFunction;
import javax.swing.DebugGraphics;
import org.apache.commons.imaging.ImageFormat;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BmpImageParser_ESTest extends BmpImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      bmpImageParser0.getAcceptedExtensions();
      ImageFormat[] imageFormatArray0 = bmpImageParser0.getAcceptedTypes();
      assertNotNull(imageFormatArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = bmpImageParser0.getDefaultExtension();
      assertEquals(".bmp", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[0];
      try { 
        bmpImageParser0.getAllBufferedImages(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[6];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      // Undeclared exception!
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) null, (ByteSource) byteSourceArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        bmpImageParser0.getImageInfo(byteArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[2];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        bmpImageParser0.getImageInfo(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      bmpImageParser0.getName();
      MockFile mockFile0 = new MockFile("Bmp-Custom");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      bmpImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(54);
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, byteArrayOutputStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      File file0 = MockFile.createTempFile("N=w[2$c3}XRw+Z,E[9", "N=w[2$c3}XRw+Z,E[9");
      bmpImageParser0.getBufferedImage(file0, (Map<String, Object>) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, pipedOutputStream0, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[0];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("PNM file has invalid prefix byte 1", byteArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("FORMAT", "FORMAT");
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: FORMAT
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[21];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, bmpImageParser0);
      try { 
        bmpImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: null
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(mockFileInputStream0, "ICNS_48x48_8BIT_IMAGE");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("ICNS_48x48_8BIT_IMAGE", bmpImageParser0);
      bmpImageParser0.getICCProfileBytes((ByteSource) byteSourceInputStream0, (Map<String, Object>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      bmpImageParser0.getXmpXml(byteSourceInputStream0, hashMap1);
      MockFile mockFile0 = new MockFile((String) null, "");
      bmpImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashMap0);
      PrintStream printStream0 = DebugGraphics.logStream();
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, printStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: ICNS_48x48_8BIT_IMAGE
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      bmpImageParser1.getAcceptedTypes();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("ICNS_48x48_8BIT_IMAGE", byteArray0);
      byteSourceArray0.getInputStream();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(mockFileInputStream0, "ICNS_48x48_8BIT_IMAGE");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("VERBOSE", "ICNS_48x48_8BIT_IMAGE");
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[28];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("<", byteArray0);
      try { 
        bmpImageParser0.getFormatCompliance((ByteSource) byteSourceArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[0];
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("Compression: BI_BITFIELDS", bmpImageParser0);
      try { 
        bmpImageParser0.getImageSize(byteArray0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: Compression: BI_BITFIELDS
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("PIXEL_DENSITY");
      mockFile0.getCanonicalFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PIXEL_DENSITY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFileOutputStream0.write(13);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      mockFile0.mkdirs();
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      hashMap0.put("PIXEL_DENSITY", mockMinguoDate0);
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to org.apache.commons.imaging.PixelDensity
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("PIXEL_DENSITY");
      mockFile0.getCanonicalFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PIXEL_DENSITY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFileOutputStream0.write(13);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(pipedInputStream0, "8Y#jC2Gfb4nII}'S`");
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("PIXEL_DENSITY");
      File file0 = mockFile0.getCanonicalFile();
      mockFile0.getAbsolutePath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PIXEL_DENSITY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      hashMap0.put("FORMAT", mockFile0);
      hashMap0.put("FORMAT", file0);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("PIXEL_DENSITY");
      mockFile0.getCanonicalFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PIXEL_DENSITY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      mockFile0.mkdirs();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      System.setCurrentTimeMillis(3269L);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("PIXEL_DENSITY");
      mockFile0.getCanonicalFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PIXEL_DENSITY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      mockFileOutputStream0.flush();
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      bmpImageParser0.getImageInfo((File) mockFile0, (Map<String, Object>) hashMap0);
      bufferedImage0.getRaster();
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      mockFile0.setReadOnly();
      ByteSourceFile byteSourceFile1 = new ByteSourceFile(mockFile0);
      bmpImageParser0.getImageSize((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("PIXEL_DENSITY");
      mockFile0.getCanonicalFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PIXEL_DENSITY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImageFormats imageFormats0 = ImageFormats.JPEG;
      bmpImageParser0.canAcceptType(imageFormats0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      bmpImageParser0.getFormatCompliance((ByteSource) byteSourceFile0);
      BiFunction<String, Object, FileDialog> biFunction0 = (BiFunction<String, Object, FileDialog>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)56;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BufferedImage bufferedImage1 = null;
      try {
        bufferedImage1 = new BufferedImage((byte)0, (byte)56, (byte)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (56) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4528);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "BUFFERED_IMAGE_FACTORY";
      hashMap0.put("BUFFERED_IMAGE_FACTORY", pipedInputStream0);
      try { 
        bmpImageParser0.getBufferedImage((InputStream) pipedInputStream0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("icm#");
      mockFile0.getCanonicalFile();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("icm#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 13;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      InputStream inputStream0 = byteSourceFile0.getInputStream((long) 13);
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      ByteSourceInputStream byteSourceInputStream0 = new ByteSourceInputStream(inputStream0, "icm#");
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      try { 
        bmpImageParser1.getFormatCompliance((ByteSource) byteSourceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 16777216
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("PIXEL_DENSITY");
      File file0 = mockFile0.getCanonicalFile();
      mockFile0.renameTo(file0);
      file0.toURL();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PIXEL_DENSITY");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 13;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      mockFileOutputStream0.write(13);
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      mockFile0.mkdirs();
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      bmpImageParser0.getMetadata((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
      bmpImageParser0.writeImage(bufferedImage0, mockFileOutputStream0, hashMap0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceFile0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File count: -1 read: 83 length: 4594
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }
}
