/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:44:08 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.io.CharArrayWriter;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("");
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Spider spider1 = spider0.downloader((Downloader) null);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Spider.Status.values();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      spider1.setEmptySleepTime(4);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider1 = spider0.pipeline((Pipeline) null);
      Locale locale0 = Locale.forLanguageTag("Y?");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      spider3.setUUID("Y?");
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider4 = spider3.startRequest(linkedList1);
      Request request0 = new Request("");
      // Undeclared exception!
      try { 
        spider4.get("_cycle_tried_times");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("PZdRlct");
      Spider spider3 = spider2.startUrls(list0);
      spider3.startRequest((List<Request>) null);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.addCookie("", "PZdRlct");
      requestArray0[1] = request1;
      spider0.setUUID(" error");
      String string0 = spider1.getUUID();
      assertNotNull(string0);
      
      spider2.checkIfRunning();
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y?");
      spider0.getUUID();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider1.initComponent();
      spider2.setUUID("Y?");
      spider0.clearPipeline();
      linkedList0.add((SpiderListener) null);
      LinkedList<Selector> linkedList1 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList1);
      spider0.getCollectorPipeline();
      String[] stringArray0 = new String[1];
      spider0.setExitWhenComplete(false);
      stringArray0[0] = "Y?";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("d=FNXp");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "d=FNXp";
      stringArray0[2] = "d=FNXp";
      stringArray0[3] = "d=FNXp";
      stringArray0[4] = "d=FNXp";
      stringArray0[5] = "d=FNXp";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Request request0 = new Request("O</*%G`=z%dx");
      request0.addHeader("Y?", "O</*%G`=z%dx");
      spider0.setSpawnUrl(false);
      spider0.setEmptySleepTime(732);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Spider.Status.fromValue((-1));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("download page {} error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = new Page();
      boolean boolean0 = true;
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("html");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      Spider spider2 = spider1.thread(639);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(639);
      spider2.thread((ExecutorService) forkJoinPool0, 639);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<Request> list0 = new LinkedList<Request>();
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.startRequest(list0);
      Spider spider2 = spider1.clearPipeline();
      spider2.startUrls(linkedList0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-683), threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GG");
      Spider spider0 = new Spider(simplePageProcessor0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("O</*%G`=z%dx");
      spider0.thread(1437);
      long long0 = spider0.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(5000);
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("html");
      spider0.clearPipeline();
      PriorityBlockingQueue<String> priorityBlockingQueue0 = null;
      try {
        priorityBlockingQueue0 = new PriorityBlockingQueue<String>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.PriorityBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("err");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("PZdRlct");
      Spider spider3 = spider2.startUrls(list0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      Request[] requestArray0 = new Request[2];
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("PZdRlct");
      Spider spider3 = spider2.startUrls(list0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.addCookie("", "PZdRlct");
      requestArray0[1] = request1;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Request request0 = new Request();
      Downloader downloader0 = null;
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider1.setSpawnUrl(true);
      LinkedList<Request> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<Request>((Collection<? extends Request>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "Stopped";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Stopped");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider0.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider2.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      // Undeclared exception!
      try { 
        spider2.thread((-3409));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("PZdRlct");
      Spider spider3 = spider2.startUrls(list0);
      Json json0 = new Json(list0);
      // Undeclared exception!
      try { 
        spider3.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("{C)/Xl50V");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Request request0 = new Request("Spider is already running!");
      Request request1 = request0.setMethod("");
      request1.setPriority(0L);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(30000, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) scheduledThreadPoolExecutor0, (-401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.checkIfRunning();
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("{C)/Xl50V");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Logger logger0 = (Logger)spider1.logger;
      spider2.logger = (org.slf4j.Logger) logger0;
      Request request0 = new Request("Spider is already running!");
      Request request1 = request0.setMethod("");
      request1.setPriority(0L);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      request0.putExtra("Spider is already running!", "Spider is already running!");
      Spider spider3 = spider1.setExitWhenComplete(true);
      boolean boolean0 = spider3.isSpawnUrl();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider3.setUUID("Y?");
      Spider spider5 = spider4.pipeline((Pipeline) null);
      Locale locale0 = Locale.forLanguageTag("Y?");
      phantomJSDownloader0.setRetryNum(2);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider5.getAll((Collection<String>) set0);
      spider2.getCollectorPipeline();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Request request0 = new Request();
      Request request1 = new Request();
      request0.addCookie("process request ", "waitNewUrl - interrupted, error {}");
      Spider spider6 = spider2.setExitWhenComplete(true);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(160, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      phantomJSDownloader0.setThread((-1333));
      spider1.setExecutorService(forkJoinPool0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider6.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[0];
      spider5.addRequest(requestArray0);
      spider6.initComponent();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GG");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[4];
      Spider spider2 = spider1.clearPipeline();
      spider2.setSpawnUrl(false);
      Spider spider3 = spider0.setScheduler((Scheduler) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Locale locale0 = Locale.forLanguageTag("D Qm6@pAm*2a6G<u");
      locale0.getUnicodeLocaleKeys();
      spider3.getCollectorPipeline();
      Spider spider4 = spider3.scheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("PZdRlct");
      Spider spider3 = spider2.startUrls(list0);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      requestArray0[0] = request0;
      spider4.start();
      spider4.getThreadAlive();
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y[?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y[?", "Y[?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Spider spider4 = spider0.pipeline((Pipeline) null);
      Locale locale0 = Locale.forLanguageTag("Y[?");
      phantomJSDownloader0.setRetryNum(2);
      locale0.getUnicodeLocaleKeys();
      spider3.getThreadAlive();
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      spider2.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider0.pipeline((Pipeline) null);
      Locale locale0 = Locale.forLanguageTag("Y?");
      phantomJSDownloader0.setRetryNum(2);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider3.getAll((Collection<String>) set0);
      spider2.getCollectorPipeline();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("");
      Spider spider4 = spider3.scheduler(fileCacheQueueScheduler1);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      spider1.setSpiderListeners(linkedList1);
      spider4.setUUID((String) null);
      // Undeclared exception!
      try { 
        spider4.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      Locale locale0 = Locale.forLanguageTag("Y?");
      phantomJSDownloader0.setRetryNum(2);
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider0.getAll((Collection<String>) set0);
      spider2.getCollectorPipeline();
      spider3.run();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      spider1.exitWhenComplete = false;
      spider2.setExitWhenComplete(true);
      boolean boolean0 = spider2.isSpawnUrl();
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y?");
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      spider2.initComponent();
      Spider spider4 = spider3.setUUID("Y?");
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      spider3.startRequest(linkedList1);
      spider0.getThreadAlive();
      spider4.close();
      spider4.setEmptySleepTime((-571));
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getUUID();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider1.initComponent();
      spider2.setUUID("Y?");
      Spider spider3 = spider0.clearPipeline();
      spider2.runAsync();
      linkedList0.add((SpiderListener) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("<");
      fileCacheQueueScheduler0.poll(spider3);
      spider3.setScheduler(fileCacheQueueScheduler0);
      Spider spider4 = spider1.setExitWhenComplete(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_cycle_tried_times";
      stringArray0[1] = "";
      stringArray0[2] = "<";
      stringArray0[3] = "Y?";
      // Undeclared exception!
      try { 
        spider4.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y?");
      spider0.getUUID();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      spider2.initComponent();
      Spider spider4 = spider3.setUUID("Y?");
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      spider3.startRequest(linkedList1);
      spider0.clearPipeline();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      forkJoinPool0.isShutdown();
      linkedList0.add((SpiderListener) null);
      LinkedList<Selector> linkedList3 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList3);
      Json json0 = new Json(linkedList2);
      spider0.getCollectorPipeline();
      String[] stringArray0 = new String[1];
      spider1.setExitWhenComplete(false);
      stringArray0[0] = "Y?";
      spider4.close();
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("O</*%G`=z%dx");
      request0.addHeader("Y?", "O</*%G`=z%dx");
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">x^yR&");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("write file error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Request request0 = new Request("write file error");
      linkedList0.offerLast(request0);
      spider1.startRequest(linkedList0);
      spider0.threadNum = 2375;
      spider0.getUUID();
      spider1.getStartTime();
      System.setCurrentTimeMillis(2375);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y?");
      spider0.getUUID();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider1.initComponent();
      Spider spider3 = spider2.setUUID("Y?");
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      spider2.startRequest(linkedList1);
      spider0.clearPipeline();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add((SpiderListener) null);
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      spider3.sleep(2);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider3);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Spider.Status.fromValue(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xca4Z@Wo");
      Spider spider0 = new Spider(simplePageProcessor0);
      String string0 = "+3d";
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", (String) null);
      Request request0 = new Request();
      Spider spider1 = spider0.setExitWhenComplete(false);
      request0.addHeader("", "");
      spider1.clearPipeline();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      linkedList1.add((SpiderListener) null);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y?");
      spider0.getUUID();
      ForkJoinPool.commonPool();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider2.setUUID("Y?");
      spider0.clearPipeline();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<Selector> linkedList2 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList2);
      Json json0 = new Json(linkedList1);
      spider0.getCollectorPipeline();
      spider0.isSpawnUrl();
      Spider.Status.values();
      spider0.getStartTime();
      spider0.stop();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Request request0 = new Request("Y?");
      LinkedList<Request> linkedList2 = new LinkedList<Request>();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      System.setCurrentTimeMillis(2014L);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Page page0 = new Page();
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isExitWhenComplete();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Request request0 = new Request("Y?");
      LinkedList<Request> linkedList2 = new LinkedList<Request>();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider2);
      linkedList2.offerLast((Request) null);
      Spider spider4 = spider3.startRequest(linkedList1);
      spider3.getUUID();
      spider0.getStartTime();
      System.setCurrentTimeMillis(2014L);
      LinkedList<Selector> linkedList3 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList3);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      List<String> list0 = spider0.getAll((Collection<String>) linkedBlockingQueue0);
      Json json0 = new Json(list0);
      spider1.getCollectorPipeline();
      spider3.setExitWhenComplete(false);
      String[] stringArray0 = new String[0];
      spider4.test(stringArray0);
      Spider.Status.values();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Spider spider2 = spider1.setUUID(" error");
      spider2.getScheduler();
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
