/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:19:41 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.access.btree.BTree;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.h2.table.Table;
import org.h2.value.ValueDecimal;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("@AJ&lFPAZ|d");
      SQLUtil.removeComments("@AJ&lFPAZ|d");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("@AJ&lFPAZ|d");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("CW:w8Y1@5:KF");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("h),9K");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CW:w8Y1@5:KF", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES h),9K()", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("v=[G _kTEF}=$");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v=[G _kTEF}=$");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v=[G _kTEF}=$";
      stringArray0[1] = "v=[G _kTEF}=$";
      stringArray0[2] = "org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "v=[G _kTEF}=$", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "v=[G _kTEF}=$", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"v=[G _kTEF}=$\" UNIQUE (v=[G _kTEF}=$, v=[G _kTEF}=$, org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("b-?['V`!(P", true);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = RawStoreFactory.ENCRYPTION_BLOCKSIZE;
      assertEquals("derby.encryptionBlockSize", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "V|Gf^OQG1.]AS4");
      SQLUtil.addRequiredCondition("V|Gf^OQG1.]AS4", stringBuilder0);
      assertEquals("V|Gf^OQG1.]AS4 and V|Gf^OQG1.]AS4", stringBuilder0.toString());
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("truncatexbcxf.s", "truncatexbcxf.s", stringArray0, "V|Gf^OQG1.]AS4", ",", stringArray0);
      assertEquals("truncatexbcxf.s join V|Gf^OQG1.]AS4 as , on ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage("b-?['V`!(P", (DBSchema) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("b-?['V`!(P", false);
      assertEquals("b - ? [ 'V`!(P'", string0);
      
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "b-?['V`!(P", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string2 = RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER;
      Boolean boolean0 = SQLUtil.mutatesStructure("truncate");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "b-?['V`!(P", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isProcedureCall("exectfre");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      TableContainer tableContainer0 = new TableContainer("ktyiX5.UFMd;j;7");
      tableContainer0.getTable("ktyiX5.UFMd;j;7");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o8x\"t9+|yt", (DBTable) null, 28, "o8x\"t9+|yt");
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isDML("i*H");
      String string0 = SQLUtil.removeComments("i*H");
      assertEquals("i*H", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = TypeCompilerFactory.MODULE;
      SQLUtil sQLUtil0 = new SQLUtil();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isDDL("nHE8FQgC");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "nHE8FQgC";
      stringArray0[1] = "nHE8FQgC";
      stringArray0[2] = "nHE8FQgC";
      String string1 = SQLUtil.innerJoin("nHE8FQgC", stringArray0, "nHE8FQgC", "alter index_*t5", stringArray0);
      assertEquals("nHE8FQgC as alter index_*t5 on nHE8FQgC.nHE8FQgC = alter index_*t5.nHE8FQgC and nHE8FQgC.nHE8FQgC = alter index_*t5.nHE8FQgC and nHE8FQgC.nHE8FQgC = alter index_*t5.nHE8FQgC", string1);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop materialized view_*t5", false, stringArray0);
      String string2 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"drop materialized view_*t5\" ", string2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", (DBTable) null, 2780, "alter table");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER TABLE", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2930, "ALTER TABLE ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ALTER TABLE ", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("ALTER TABLE  ALTER TABLE (2,2) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.removeComments("_E\"S([T|?e<ERn4j?");
      Boolean boolean0 = SQLUtil.mutatesStructure("IEP<dI9z*M'gYwdy]");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("IEP<dI9z*M'gYwdy]", false);
      assertEquals("IEP < dI9z * M 'gYwdy]'", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("26s6'yK1[\"#H|+x");
      jdbcClob jdbcClob0 = new jdbcClob("26s6'yK1[\"#H|+x");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.quoteChar((-4));
      SQLUtil.renderNumber(streamTokenizer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(884L);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = RawStoreFactory.MINIMUM_RECORD_SIZE_PARAMETER;
      String string1 = SQLUtil.substituteMarkers("LA.ab(", "pBZ)]-^g ><-11s*ExO", "pBZ)]-^g ><-11s*ExO");
      assertEquals("LA.ab(", string1);
      
      boolean boolean0 = SQLUtil.isDDL("pBZ)]-^g ><-11s*ExO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "_}i]BqQ_M";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("storage_key", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      int int0 = (-279);
      int int1 = (-1111);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-279), (CharSequence) stringBuilder0, (-279), (-1111));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -279
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.iapi.error.ShutdownException", true);
      assertEquals("org.apache.derby.iapi.error.ShutdownException", string0);
      
      TableContainer tableContainer0 = new TableContainer("org.apache.derby.iapi.error.ShutdownException");
      tableContainer0.getTable("org.apache.derby.iapi.error.ShutdownException");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.iapi.error.ShutdownException", (DBTable) null, (-1039), "org.apache.derby.iapi.error.ShutdownException");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.apache.derby.iapi.error.ShutdownException ORG.APACHE.DERBY.IAPI.ERROR.SHUTDOWNEXCEPTION NULL", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String string0 = TypeId.FLOAT_NAME;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "wK)-&fi9Ps");
      SQLUtil.addOptionalCondition("P`'", stringBuilder0);
      assertEquals("wK)-&fi9Ps or P`'", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize(",_^5", false);
      assertEquals(", _ ^ 5", string0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ONE;
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Boolean boolean0 = new Boolean("DAYNAME");
      String string0 = LogToFile.DUMP_LOG_FROM_LOG_FILE;
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("DAYNAME");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      boolean boolean1 = SQLUtil.isDML("4P}LsKT");
      assertFalse(boolean1);
      
      String string2 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("DAYNAME", string2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "B:ol5Qjm?W#jd;'";
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.renderColumnListWithTableName("DiMzYxW1$^Y=", stringArray0);
      assertEquals("DiMzYxW1$^Y=.null, DiMzYxW1$^Y=.null, DiMzYxW1$^Y=.B:ol5Qjm?W#jd;', DiMzYxW1$^Y=.null, DiMzYxW1$^Y=.null, DiMzYxW1$^Y=.null", string0);
      
      String string1 = SQLUtil.substituteMarkers("w^pQ\"%>:t$,zUhL", "DiMzYxW1$^Y=", stringArray0[4]);
      assertEquals("w^pQ\"%>:t$,zUhL", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2930, "ALTER TABLE ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ALTER TABLE ", (DBTable) null, dBDataType0, integer0, integer1);
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ld;~0JAw9y!@Md";
      stringArray0[1] = "select into";
      stringArray0[2] = "5v;^xxw";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("ld;~0JAw9y!@Md = 'ld;~0JAw9y!@Md' AND select into = 'select into' AND 5v;^xxw = '5v;^xxw'", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("create materialized viewh}fm", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append(2527);
      stringBuilder3.append((CharSequence) stringBuilder1);
      SQLUtil.addOptionalCondition("create materialized viewh}fm", stringBuilder3);
      SQLUtil.removeComments("create materialized viewh}fm");
      SQLUtil.isDDL("create materialized viewh}fm");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create materialized viewh}fm";
      stringArray0[1] = "create materialized viewh}fm";
      stringArray0[2] = "create materialized viewh}fm";
      stringArray0[3] = "create materialized viewh}fm";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesStructure("rename$8y0pnsg jerqe2ycg");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = new Boolean("DAYNAME");
      String string0 = LogToFile.DUMP_LOG_FROM_LOG_FILE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string1 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string2 = SQLUtil.join("", "", stringArray0, "4P}LsKT", " AND (", stringArray0);
      assertEquals("4P}LsKT as  AND ( on .null =  AND (.null", string2);
      
      String string3 = SQLUtil.substituteMarkers("", "", (Object) null);
      assertEquals("null", string3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDDL("nHE8FQgC");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_*t5";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pZN$dSj;dg");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType.getInstance((-920), "o\"&s");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      int int0 = DatabaseParameterBuffer.SHUTDOWN_DELAY;
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("m~T:!Vh='\"afH0B`GX|V", stringBuilder0);
      assertEquals("m~T:!Vh='\"afH0B`GX|V", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      Integer integer0 = RawTransaction.ABORT;
      Integer.toUnsignedLong(2439);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delebejturp88:h!vptfb", defaultDBTable0, (DBDataType) null, integer0, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter tablepi/oi6<iaow");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = NoPutResultSet.LAST;
      TableContainer tableContainer0 = new TableContainer("last");
      tableContainer0.getSchema();
      DBPackage dBPackage0 = new DBPackage("callcheckdefinition", (DBSchema) null);
      Boolean.valueOf("15 8mR");
      Locale locale0 = Locale.PRC;
      int int0 = DatabaseParameterBuffer.SHUTDOWN_DELAY;
      Object object0 = new Object();
      String string1 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-1);
      DBCatalog dBCatalog0 = new DBCatalog("_*t5");
      DBSchema dBSchema0 = new DBSchema("rename", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
      
      Boolean boolean1 = Boolean.TRUE;
      String string1 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("c013800d-00fb-2641-07ec-");
      tableContainer0.setDoc((String) null);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container c013800d-00fb-2641-07ec-", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("X>G}o");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Routine Privilege on ", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, dBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES X>G}o()", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.normalize("_*t5", true);
      TableContainer tableContainer0 = new TableContainer("_*t5");
      tableContainer0.getTable("_*t5");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("_ * t5", (DBTable) null, (-4909), "LA.ab(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: LA.ab(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "G";
      stringArray0[1] = "G";
      stringArray0[2] = "B:ol5Qjm?W#jd;'";
      stringArray0[3] = "G";
      stringArray0[5] = "G";
      SQLUtil.isProcedureCall("jturp88");
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = Optimizer.JOIN_ORDER_OPTIMIZATION;
      DBCatalog dBCatalog0 = new DBCatalog("derby.optimizer.optimizeJoinOrder");
      DBSchema dBSchema0 = new DBSchema("'", dBCatalog0);
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("derby.optimizer.optimizeJoinOrder.'", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals((Object) null);
      String[] stringArray0 = new String[6];
      stringArray0[2] = "mqt67}S";
      stringArray0[3] = "JTURp88Eh!vPTFb";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "JTURp88Eh!vPTFb", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "mqt67}S", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      SQLUtil.mutatesDataOrStructure("drop table");
      Boolean boolean0 = Boolean.TRUE;
      assertFalse(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize("_*t5", true);
      TableContainer tableContainer0 = new TableContainer("_*t5");
      SQLUtil sQLUtil0 = new SQLUtil();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_ * t5");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedLong(2439);
      SQLUtil.normalize("*{3D{YVO;,{vBZ;1", false);
      VersionNumber.valueOf("zi{;r7g");
      String string0 = "186{|";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "186{|";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "It[>0#cko_o", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CONSTRAINT ", false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("CONSTRAINT ", true, defaultDBTable0, "It[>0#cko_o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.normalize("qCc)d&Lp(", false);
      VersionNumber.valueOf("qCc)d&Lp(");
      DBSchema dBSchema0 = new DBSchema("{{s^5<:,Hs82 0D");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("trun", dBSchema0);
      SQLUtil.typeAndName(dBSchema0);
      SQLUtil.isDML("{{s^5<:,Hs82 0D");
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.mutatesDataOrStructure("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("select into");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedLong(2439);
      Integer.getInteger((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deletejturp88eh!vptfb", defaultDBTable0, (DBDataType) null, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      FileUtil.canonicalPath("lxpY=)R[y%+");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/lxpY=)R[y%+", defaultDBTable0, (-873), "Hn");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      objectOutputStream0.flush();
      rowOutputBinary0.writeChars("lxpY=)R[y%+");
      mockPrintWriter0.println(true);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Zh.");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("eB*4N +qo.2PyYNM");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Random.setNextRandom(45);
      SQLUtil.mutatesDataOrStructure("getResultSet");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getResultSet";
      SQLUtil.renderColumnListWithTableName("getResultSet", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("4)P2");
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callcheckdefinitrion", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("y2m-:", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer0 = new Integer((-1884746857));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      boolean boolean0 = false;
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ":ecKivEBS%7Ch;|", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("_*t5", true);
      assertEquals("_ * t5", string0);
      
      TableContainer tableContainer0 = new TableContainer("_*t5");
      SQLUtil sQLUtil0 = new SQLUtil();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(rowOutputBinary0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_ * t5");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_ * t5";
      stringArray0[1] = "_ * t5";
      stringArray0[2] = "_*t5";
      stringArray0[3] = "_ * t5";
      stringArray0[4] = "_*t5";
      stringArray0[5] = null;
      stringArray0[6] = "_ * t5";
      stringArray0[8] = "\\b'r[LY##+an*O/Z5t";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (_ * t5, _ * t5, _*t5, _ * t5, _*t5, , _ * t5, , \\b'r[LY##+an*O/Z5t)", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(122, "");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      DBSchema dBSchema0 = new DBSchema("deletejturp88eh!vptfb");
      DBPackage dBPackage0 = new DBPackage((String) null, dBSchema0);
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals(" : (1,1)", string0);
      
      SQLUtil.parseColumnTypeAndSize(" : (1,1)");
      boolean boolean0 = SQLUtil.isDDL("bi~V=Yn[[R2*1\"");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "G*tzjZi>a)[B)(1L$";
      stringArray0[2] = " : (1,1)";
      stringArray0[3] = "deletejturp88eh!vptfb";
      String string1 = SQLUtil.leftJoin("DATABASES", stringArray0, ":byteLength=", "", stringArray0);
      assertEquals("left join :byteLength= as  on DATABASES.G*tzjZi>a)[B)(1L$ = .G*tzjZi>a)[B)(1L$ and DATABASES.null = .null and DATABASES. : (1,1) = . : (1,1) and DATABASES.deletejturp88eh!vptfb = .deletejturp88eh!vptfb", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Bg");
      DBDataType dBDataType0 = DBDataType.getInstance((-2197), "Bg");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Bg", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Bg BG(2) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.equals((Object) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "mqt67}S";
      stringArray0[1] = "_*t5";
      stringArray0[2] = "mqt67}S";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "JTURp88Eh!vPTFb", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT JTURp88Eh!vPTFb ", string0);
      
      dBUniqueConstraint0.addColumnName("CONSTRAINT JTURp88Eh!vPTFb ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT JTURp88Eh!vPTFb ", stringBuilder0.toString());
      
      Boolean boolean0 = Boolean.TRUE;
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(mqt67}S, _*t5, mqt67}S)", string1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("b-?[Dj`!(P", false);
      Boolean boolean0 = new Boolean(false);
      DBDataType dBDataType0 = DBDataType.getInstance(47, "create materialized view*sk8r6f#-dig");
      Locale locale0 = Locale.PRC;
      Boolean.compare((boolean) boolean0, true);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      SQLUtil.renderValue(mockJapaneseDate0);
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@241908ce";
      stringArray0[1] = "create materialized view*sk8r6f#-dig";
      stringArray0[2] = "table null";
      stringArray0[3] = "create materialized view*sk8r6f#-dig";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "b-?[Dj`!(P", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("b - ? [ Dj ` ! (P", defaultDBTable0, dBDataType0, integer0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("COLUMNNAME", defaultDBTable0, (DBDataType) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.mutatesStructure("select");
      SQLUtil.mutatesDataOrStructure("%!B3(P-|v)ZzH5~");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("%!B3(P-|v)ZzH5~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"P-|v\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("26s6'yK1[\"#H|+x");
      jdbcClob jdbcClob0 = new jdbcClob("26s6'yK1[\"#H|+x");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.quoteChar(0);
      SQLUtil.renderNumber(streamTokenizer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = SQLUtil.normalize("_*t5", true);
      assertEquals("_ * t5", string0);
      
      TableContainer tableContainer0 = new TableContainer("_*t5");
      SQLUtil sQLUtil0 = new SQLUtil();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_ * t5");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "callxbcxf.s");
      DBDataType.getInstance(1, ",U;;4&q*3=AG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",U;;4&q*3=AG");
      Locale locale0 = Locale.PRC;
      Boolean.compare(false, true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_*t5";
      stringArray0[1] = ".3s0 k";
      stringArray0[2] = "alter session";
      stringArray0[3] = "_*t5";
      stringArray0[4] = "_*t5";
      stringArray0[5] = "_ * t5";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("_*t5", true, defaultDBTable0, stringArray0);
      SQLUtil.renderValue(dBNonUniqueIndex0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(".3s0 k", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("FOREIGN KEY (_*t5, .3s0 k, alter session, _*t5, _*t5, _ * t5) REFERENCES _ * t5(_*t5, .3s0 k, alter session, _*t5, _*t5, _ * t5)", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.isProcedureCall("SELECT36 * FROM ");
      SQLUtil.mutatesDataOrStructure("SELECT36 * FROM ");
      SQLUtil.normalize("T#E_\"YT|)3F_", false);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      RowOutputBinary rowOutputBinary1 = new RowOutputBinary((byte)41);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(rowOutputBinary1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(rowOutputBinary0);
      objectOutputStream1.flush();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("*");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      DBSchema dBSchema0 = new DBSchema("T#E_\"YT|)3F_");
      Locale locale0 = Locale.PRC;
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer((-1884746857));
      DBDataType dBDataType0 = DBDataType.getInstance((-1884746857), "*uB`\"Ls8Y?PgC");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = new Integer(2147483645);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*uB`\"Ls8Y?PgC", defaultDBTable0, dBDataType0, integer1, integer2);
      String string0 = Table.VIEW;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~N|.| P8,");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "i/J$+";
      objectArray0[1] = (Object) defaultDBTable0;
      objectArray0[2] = (Object) dBDataType0;
      objectArray0[3] = (Object) defaultDBColumn0;
      objectArray0[4] = (Object) integer1;
      objectArray0[5] = (Object) "*uB`\"Ls8Y?PgC";
      objectArray0[6] = (Object) "~N|.| P8,";
      objectArray0[7] = (Object) "i/J$+";
      objectArray0[8] = (Object) "VIEW";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "i/J$+", objectArray0);
      defaultDBColumn0.setDefaultValue("~N|.| P8,");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      boolean boolean0 = SQLUtil.isDDL("drop materialized viewsource_null_flag");
      boolean boolean1 = SQLUtil.isDDL("L,B8QFuG8Dk?@b\"Kq");
      assertFalse(boolean1 == boolean0);
      
      DBSchema dBSchema0 = new DBSchema("ku/nUP/JouFd=9w$^P");
      DBPackage dBPackage0 = new DBPackage("*uB`\"Ls8Y?PgC", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("*uB`\"Ls8Y?PgC", dBPackage0);
      dBProcedure0.toString();
      String string1 = SQLUtil.substituteMarkers("VIEW", "drop materialized viewsource_null_flag", dBProcedure0);
      assertEquals("VIEW", string1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      rowOutputBinary0.writeChars("table null");
      rowOutputBinary0.reset();
      SQLUtil.isDDL("SOURCE_NULL_FLAG");
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(0, "rename");
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = new Integer(40);
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = Integer.valueOf(5);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", (DBTable) null, dBDataType0, (Integer) 1, integer4);
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("RLD\"6}.Ol-%?%B", defaultDBTable0, dBDataType0);
      vector0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      Integer integer5 = new Integer(1);
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer7 = Integer.valueOf((-1614));
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("mKD<.", (DBTable) null, dBDataType0, integer7, integer7);
      // Undeclared exception!
      try { 
        defaultDBColumn2.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select");
      Locale locale0 = Locale.PRC;
      Boolean.compare(false, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "call";
      defaultDBTable0.getReferrers();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique indexnhe8fqgc", true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("4.Ni0e,a5-CRNb`!We", false, dBUniqueConstraint0);
      DBDataType.getInstance((-1028), "4.Ni0e,a5-CRNb`!We");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("/*");
      mockPrintWriter0.close();
      Locale locale1 = Locale.PRC;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select");
      String string0 = SQLUtil.renderValue(locale1);
      assertEquals("zh_CN", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table call", string1);
      
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("UNIQUE (call, , , )", string2);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessioncheckdefinition");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }
}
