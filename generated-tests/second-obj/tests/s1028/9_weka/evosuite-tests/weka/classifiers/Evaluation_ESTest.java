/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:40:10 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Label;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.RegOptimizer;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.filters.AllFilter;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a!z";
      Evaluation.main(stringArray0);
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "a!]";
      stringArray0[2] = "";
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Nqx1QpF^!xfc";
      stringArray0[1] = "Nqx1QpF^!xfc";
      stringArray0[2] = "uL+\"aGT_*>pA\";=sfhm";
      stringArray0[3] = "uL+\"aGT_*>pA\";=sfhm";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("zYZMoY");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteAttributeType((-384));
      evaluation0.areaUnderPRC(986);
      evaluation0.avgCost();
      Random.setNextRandom(986);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluation.handleCostOption("", 83);
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate("become");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Vector vector0 = defaultTableModel0.getDataVector();
      instances0.retainAll(vector0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(83);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      instances0.clear();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.setDiscardPredictions(false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluation.handleCostOption("", 83);
      String[] stringArray0 = new String[1];
      J48 j48_0 = new J48();
      j48_0.listOptions();
      j48_0.setNumFolds(2147483645);
      String[] stringArray1 = new String[0];
      Evaluation.main(stringArray1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1461), true, true);
      simpleLogistic0.enumerateMeasures();
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      evaluation0.areaUnderPRC((-2));
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Capabilities capabilities0 = new Capabilities(attributeSelectedClassifier0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("   * Runs the classfier from commandline.\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@relation");
      evaluation0.toClassDetailsString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("");
      testInstances0.generate(".bsi");
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      evaluation0.falseNegativeRate(27);
      evaluation0.weightedRecall();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.toSummaryString();
      evaluation0.areaUnderROC(12);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.numInstances();
      evaluation0.weightedAreaUnderROC();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.generate(".bsi");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      double double0 = KStarConstants.FLOOR;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".cost");
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.SFEntropyGain();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      evaluation0.correct();
      evaluation0.unclassified();
      evaluation0.weightedAreaUnderROC();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("z/N_OH7b`rt");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      evaluation0.weightedAreaUnderPRC();
      int int0 = (-3208);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setKeys("@data");
      databaseLoader0.getNextInstance(instances0);
      // Undeclared exception!
      try { 
        instances0.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Instances instances1 = testInstances1.generate(".bsi");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getClassPriors();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances1.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<Object> stack0 = new Stack<Object>();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.areaUnderROC(1);
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFSchemeEntropy();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation2.toMatrixString();
      evaluation1.correct();
      evaluation0.weightedFalsePositiveRate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      testInstances0.generate("fPiA");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      testInstances0.setWordSeparators(" slots...");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-1));
      TestInstances testInstances2 = new TestInstances();
      testInstances0.assign(testInstances2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.kappa();
      evaluation0.weightedFMeasure();
      System.setCurrentTimeMillis((-1008L));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("G");
      testInstances0.generate(".bsi");
      Instances instances1 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      testInstances0.setClassIndex(27);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      simpleLogistic0.toString();
      instances0.parallelStream();
      M5P m5P0 = new M5P();
      DecisionStump decisionStump0 = new DecisionStump();
      double double0 = evaluation0.m_Correct;
      evaluation0.falsePositiveRate((-3976));
      evaluation0.getHeader();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toMatrixString();
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 2322.24851432;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2322.24851432, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      instances0.add((Instance) denseInstance0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-15.268));
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.SFMeanSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation.handleCostOption("", 83);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Vector vector0 = defaultTableModel0.getDataVector();
      instances0.retainAll(vector0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(16);
      evaluation0.rootRelativeSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CostMatrix costMatrix0 = new CostMatrix(83);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Vector vector0 = defaultTableModel0.getDataVector();
      instances0.retainAll(vector0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.setDiscardPredictions(true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[1];
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomial0, instances0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomial", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(2);
      evaluation0.KBMeanInformation();
      classificationViaRegression0.listOptions();
      evaluation0.meanPriorAbsoluteError();
      try { 
        evaluation0.crossValidateModel((Classifier) classificationViaRegression0, instances0, 1, (java.util.Random) null, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(2, (-100.55));
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.SFEntropyGain();
      evaluation0.relativeAbsoluteError();
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Evaluation.handleCostOption("", 83);
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Instances instances0 = testInstances0.generate("");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Vector vector0 = defaultTableModel0.getDataVector();
      instances0.retainAll(vector0);
      instances0.retainAll(vector0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      evaluation0.addNumericTrainClass(Double.NaN, (-2564.5739222));
      evaluation0.rootRelativeSquaredError();
      evaluation0.addNumericTrainClass(8.83977960799, (-195.4533563));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      testInstances1.generate(".bsi");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      AbstractClassifier.makeCopies(naiveBayesMultinomialUpdateable0, 15);
      DenseInstance denseInstance0 = new DenseInstance(726);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      binarySparseInstance0.setWeight(1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate("");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Stack<Label> stack0 = new Stack<Label>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      instances0.retainAll(stack0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-2564.5739222), (-2));
      evaluation0.addNumericTrainClass(4.9E-324, 431.1);
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.equals(defaultTableModel0);
      evaluation0.SFEntropyGain();
      Evaluation.getGlobalInfo(bayesNet0);
      evaluation0.setNumericPriorsFromBuffer();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      Double double1 = new Double((-2));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falseNegativeRate((-1));
      char[] charArray0 = new char[4];
      evaluation0.num2ShortID(493, charArray0, 493);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      testInstances0.clone();
      Instances instances1 = testInstances0.generate(".arff");
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumNominalValues(13);
      evaluation0.SFEntropyGain();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.useNoPriors();
      evaluation0.unclassified();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) classificationViaRegression1, instances1, (-2), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(" M~[8a2CMt!R");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.toSummaryString();
      evaluation0.incorrect();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Evaluation.handleCostOption("", 70);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ASEvaluation aSEvaluation0 = attributeSelectedClassifier0.getEvaluator();
      Capabilities capabilities0 = aSEvaluation0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) attributeSelectedClassifier0, instances0, 70, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Instances instances0 = testInstances0.generate("");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Stack<Label> stack0 = new Stack<Label>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      instances0.retainAll(stack0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      evaluation0.addNumericTrainClass(Double.NaN, (-2564.5739222));
      evaluation0.rootRelativeSquaredError();
      evaluation0.addNumericTrainClass(8.83977960799, (-195.4533563));
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.equals(bayesNet0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation.handleCostOption("", 83);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      defaultTableModel0.getDataVector();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-not-numeric-class");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      Double double1 = new Double(83);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falseNegativeRate(83);
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Instances instances0 = testInstances1.generate(".bsi");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("l;7/qSj8jz])&4}dtI");
      instances0.setRelationName("w$*");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.incorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel(" ", instances0, (-2749), testInstances0.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jdbcDriver");
      Vector<Object> vector0 = new Vector<Object>();
      instances0.retainAll(vector0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-426));
      evaluation0.addNumericTrainClass((-2), (-390.9970880387));
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      Double double1 = new Double((-2));
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.evaluateModelOnce(10.0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Stack<Label> stack0 = new Stack<Label>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      instances0.retainAll(stack0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.areaUnderROC(105);
      M5Rules m5Rules0 = new M5Rules();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) m5Rules0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Instances instances0 = testInstances0.generate("");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Stack<Label> stack0 = new Stack<Label>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      instances0.retainAll(stack0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      evaluation0.m_Header = instances0;
      doubleArray0[1] = (double) 83;
      doubleArray0[2] = (double) 83;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      evaluation0.SFSchemeEntropy();
      evaluation0.rootMeanPriorSquaredError();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      testInstances0.generate((String) null);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("'\"vm[M0??0I");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      Double double1 = new Double(1000.0);
      try { 
        evaluation0.evaluateModelOnce((-2692.721109), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2692
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      testInstances0.getWords();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      evaluation0.KBMeanInformation();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Evaluation.handleCostOption("", 83);
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Instances instances0 = testInstances0.generate("");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Stack<Label> stack0 = new Stack<Label>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)93;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      instances0.retainAll(stack0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1.0E-6, (-149.9803696));
      evaluation0.addNumericTrainClass(6.0, 2.0);
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.equals((Object) null);
      try { 
        bayesNet0.initCPTs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.estimate.SimpleEstimator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("\tin conjunction with the '-p' option (only nominal classes).\n");
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      Double double1 = new Double((-2));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      evaluation0.falseNegativeRate((-2));
      testInstances0.setClassIndex((-3065));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      DenseInstance denseInstance0 = new DenseInstance(20);
      instances1.add((Instance) denseInstance0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      Double double1 = new Double(1934.99552);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3C8s<M?_");
      evaluation0.falseNegativeRate(2994);
      testInstances0.setClassIndex((-2931));
      DenseInstance denseInstance0 = new DenseInstance(1176);
      instances0.add((Instance) denseInstance0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.confusionMatrix();
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayesMultinomial0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      TestInstances testInstances2 = new TestInstances();
      testInstances2.setNumNominalValues((-1068));
      testInstances1.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances3 = new TestInstances();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(2865.0, (-1));
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.equals(evaluation0);
      evaluation0.SFEntropyGain();
      Evaluation.getGlobalInfo(classificationViaRegression0);
      double double0 = evaluation0.m_MinTarget;
      bayesNet0.enumerateMeasures();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances1.generate("%7j9.XD* ");
      TestInstances testInstances2 = new TestInstances();
      testInstances1.generate(".cost");
      testInstances1.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.getGlobalInfo(classificationViaRegression0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.errorRate();
      try { 
        Evaluation.handleCostOption(" ", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3C8s<M?_");
      evaluation0.falseNegativeRate(3014);
      testInstances0.setClassIndex((-2931));
      DenseInstance denseInstance0 = new DenseInstance(1176);
      instances0.add((Instance) denseInstance0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.confusionMatrix();
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      evaluation0.weightedFalseNegativeRate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      instances0.remove((Object) votedPerceptron0);
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Double double0 = new Double((-2));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Double double1 = new Double(0.975);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.totalCost();
      evaluation0.KBInformation();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("weka.packageManager.offline");
      TestInstances testInstances2 = new TestInstances();
      testInstances1.setNumNominalValues((-1));
      testInstances1.setNumRelationalString((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      Double double1 = new Double((-2));
      evaluation0.sizeOfPredictedRegions();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.SFPriorEntropy();
      M5Rules m5Rules0 = new M5Rules();
      // Undeclared exception!
      try { 
        m5Rules0.getM5RootNode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.m5.M5Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("$}ft!=6}rTUY]U");
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumNominalValues((-2));
      testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      naiveBayesMultinomial0.getCapabilities();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.KBMeanInformation();
      Double double1 = new Double((-2));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falseNegativeRate((-1));
      evaluation0.meanAbsoluteError();
      evaluation0.getDiscardPredictions();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      naiveBayesMultinomial0.setOptions(testInstances0.DEFAULT_WORDS);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      TestInstances testInstances2 = new TestInstances();
      testInstances0.setHandler(classificationViaRegression0);
      Instances instances0 = testInstances2.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".arff");
      BayesNet bayesNet0 = new BayesNet();
      testInstances1.setNumClasses(17);
      evaluation0.SFEntropyGain();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      evaluation0.correct();
      evaluation0.unclassified();
      evaluation0.weightedAreaUnderROC();
      evaluation0.pctCorrect();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-4618), (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4618
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("");
      testInstances0.generate(".bsi");
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.toString();
      evaluation0.KBMeanInformation();
      Double double0 = new Double((-563.5578238631723));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      evaluation0.falseNegativeRate((-1334));
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setClassIndex((-1418));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DenseInstance denseInstance0 = new DenseInstance(3014);
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.kappa();
      evaluation0.weightedFMeasure();
      evaluation0.correct();
      evaluation0.unclassified();
      evaluation0.pctUnclassified();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      TableModelEvent tableModelEvent0 = new TableModelEvent(defaultTableModel0);
      tableModelEvent0.getLastRow();
      defaultTableModel0.fireTableChanged(tableModelEvent0);
      TableModelEvent tableModelEvent1 = new TableModelEvent(defaultTableModel0, 771, 911);
      defaultTableModel0.rowsRemoved(tableModelEvent1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(484);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, 11);
      testInstances1.setMultiInstance(false);
      binarySparseInstance0.setValueSparse(484, Double.NaN);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[3];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-1116);
      Evaluation.handleCostOption((String) null, (-1116));
      Classifier classifier0 = null;
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      double double0 = KStarConstants.LOG2;
      Double double1 = new Double(0.693147181);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      capabilities0.getRevision();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("getClass");
      sMOreg0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      try { 
        AbstractClassifier.makeCopies(sMOreg0, (-3329));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("ufX\"t|f$jQTU4");
      naiveBayesMultinomial0.setOptions(testInstances0.DEFAULT_WORDS);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      TestInstances testInstances1 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setHandler(classificationViaRegression0);
      TestInstances testInstances3 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances3.generate("\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CostMatrix costMatrix0 = new CostMatrix(18);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = null;
      Instances instances0 = testInstances0.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Stack<Label> stack0 = new Stack<Label>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      instances0.retainAll(stack0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      Instances instances1 = new Instances(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Stack<Label> stack0 = new Stack<Label>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      instances0.retainAll(stack0);
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      Capabilities capabilities0 = filter0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      Instances instances1 = new Instances(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.areaUnderROC(105);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DenseInstance denseInstance0 = new DenseInstance(105);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.pctIncorrect();
      evaluation0.kappa();
      evaluation0.weightedFMeasure();
      System.setCurrentTimeMillis(0L);
      evaluation0.m_TotalCost = 1361.23;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      TestInstances testInstances0 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("\"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = KStarConstants.FLOOR;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(30.39955754653478, (-644.27147421));
      BayesNet bayesNet0 = new BayesNet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      String string0 = DefaultEditorKit.selectionForwardAction;
      evaluation0.unclassified();
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.correlationCoefficient();
      try { 
        evaluation1.crossValidateModel(" ", instances0, 0, testInstances0.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      TestInstances testInstances1 = new TestInstances();
      costSensitiveClassifier0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances1 = testInstances0.generate(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      Double double0 = new Double((-2));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Double double1 = new Double(0.975);
      CostSensitiveClassifier.main(testInstances1.DEFAULT_WORDS);
      evaluation0.m_Header = instances1;
      evaluation0.KBRelativeInformation();
      evaluation0.falseNegativeRate(2);
      evaluation0.useNoPriors();
      Double double2 = new Double(0.0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falseNegativeRate(1);
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.meanAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances0.generate("Setting the number ^f folds does only make sense for reduced error pruning.");
      TestInstances testInstances1 = new TestInstances();
      costSensitiveClassifier0.toString();
      testInstances0.generate(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      Double double0 = new Double((-2));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Double double1 = new Double(0.975);
      CostSensitiveClassifier.main(testInstances1.DEFAULT_WORDS);
      evaluation0.KBRelativeInformation();
      evaluation0.falseNegativeRate((-2));
      evaluation0.useNoPriors();
      Double double2 = new Double(536.0);
      evaluation0.sizeOfPredictedRegions();
      SMOreg sMOreg0 = new SMOreg();
      RegOptimizer regOptimizer0 = sMOreg0.getRegOptimizer();
      sMOreg0.setRegOptimizer(regOptimizer0);
      evaluation0.unclassified();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TableModelEvent tableModelEvent0 = new TableModelEvent(defaultTableModel0);
      testInstances1.toString();
      tableModelEvent0.getLastRow();
      defaultTableModel0.fireTableChanged(tableModelEvent0);
      TableModelEvent tableModelEvent1 = new TableModelEvent(defaultTableModel0, 771, 911);
      tableModelEvent1.getType();
      defaultTableModel0.rowsRemoved(tableModelEvent1);
      defaultTableModel0.fireTableStructureChanged();
      LinkedList<Bagging> linkedList0 = new LinkedList<Bagging>();
      instances0.retainAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-1273.5357959791));
      evaluation0.SFEntropyGain();
      evaluation0.relativeAbsoluteError();
      evaluation0.meanAbsoluteError();
      ArffLoader arffLoader0 = new ArffLoader();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 448, (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      costSensitiveClassifier0.setSeed((-1994981129));
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Instances instances1 = testInstances1.generate(".bsi");
      TestInstances testInstances2 = new TestInstances();
      instances0.equalHeaders(instances1);
      testInstances0.setNumNominalValues((-188));
      Instances instances2 = testInstances1.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances2);
      testInstances0.setNumRelationalString((-466));
      double double0 = evaluation0.m_TotalCoverage;
      SMO sMO0 = new SMO();
      Capabilities capabilities0 = sMO0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances2.setNumString(1);
      evaluation0.KBMeanInformation();
      Double double1 = new Double(2);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBRelativeInformation();
      evaluation0.falseNegativeRate((-539));
      evaluation0.useNoPriors();
      Double double2 = new Double(949.91);
      evaluation0.sizeOfPredictedRegions();
      double double3 = evaluation0.m_SumKBInfo;
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.priorEntropy();
      evaluation0.meanAbsoluteError();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(102);
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      naiveBayesMultinomial0.setOptions(testInstances0.DEFAULT_WORDS);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      TestInstances testInstances1 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      capabilities0.test(instances0);
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 1.0E75;
      doubleArray0[2] = (double) 102;
      doubleArray0[3] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, (-2011.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TableModelEvent tableModelEvent0 = new TableModelEvent(defaultTableModel0);
      testInstances1.toString();
      tableModelEvent0.getLastRow();
      defaultTableModel0.fireTableChanged(tableModelEvent0);
      TableModelEvent tableModelEvent1 = new TableModelEvent(defaultTableModel0, 771, 911);
      tableModelEvent1.getType();
      defaultTableModel0.rowsRemoved(tableModelEvent1);
      defaultTableModel0.fireTableStructureChanged();
      TableModelEvent tableModelEvent2 = new TableModelEvent(defaultTableModel0, 1, 11, 2, 1);
      LinkedList<Bagging> linkedList0 = new LinkedList<Bagging>();
      instances0.retainAll(linkedList0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-1273.5357959791));
      evaluation0.SFEntropyGain();
      evaluation0.relativeAbsoluteError();
      evaluation0.meanAbsoluteError();
      ArffLoader arffLoader0 = new ArffLoader();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[0];
      J48 j48_0 = new J48();
      evaluation0.evaluateModel((Classifier) j48_0, instances0, objectArray0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      testInstances0.setNumString(14);
      evaluation0.KBMeanInformation();
      Double double1 = new Double((-10.0));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBRelativeInformation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.falseNegativeRate(1);
      evaluation0.useNoPriors();
      double double2 = evaluation0.m_SumSqrClass;
      evaluation0.KBRelativeInformation();
      evaluation0.falseNegativeRate((-1551));
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.useNoPriors();
      evaluation0.unclassified();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) classificationViaRegression1, instances0, 1, (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(".cost");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      testInstances0.setNumString(14);
      evaluation0.KBMeanInformation();
      Double double1 = new Double((-10.0));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBRelativeInformation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.falseNegativeRate(1);
      evaluation0.useNoPriors();
      Double double2 = new Double(773.704874834369);
      double[] doubleArray0 = evaluation0.getClassPriors();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1800.714044), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(772);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      evaluation0.SFEntropyGain();
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      testInstances1.generate(".bsi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      AbstractClassifier.makeCopies(naiveBayesMultinomialUpdateable0, 15);
      DenseInstance denseInstance0 = new DenseInstance(726);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 726;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) (-1);
      doubleArray1[6] = (double) (-1375);
      doubleArray1[7] = (double) (-2);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) (-1375);
      doubleArray2[5] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) (-1);
      doubleArray3[1] = (double) 726;
      doubleArray3[2] = (double) (-2);
      doubleArray3[3] = (double) 1;
      doubleArray3[1] = (double) (-2);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 726;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) (-1);
      doubleArray5[1] = (double) (-1375);
      doubleArray5[2] = 5.7;
      doubleArray5[3] = (double) (-1);
      doubleArray5[5] = (double) (-1375);
      doubleArray5[6] = (double) (-2);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray1[4] = (double) 1;
      doubleArray6[1] = (double) 15;
      doubleArray6[2] = 5.7;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 5.7;
      doubleArray7[1] = (double) 1;
      doubleArray7[2] = (double) (-2);
      doubleArray7[3] = (double) 1;
      doubleArray7[4] = 5.7;
      doubleArray7[5] = (double) (-1375);
      doubleArray7[6] = (double) 2;
      doubleArray7[7] = (double) (-1);
      doubleArray7[8] = (double) 1;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (double) (-1);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (double) 1;
      doubleArray9[1] = (double) 0;
      doubleArray9[2] = (double) 1;
      doubleArray9[3] = (double) 2;
      doubleArray9[4] = (double) 15;
      doubleArray9[1] = (-1692.6321);
      doubleArray9[7] = (double) 2;
      doubleArray9[8] = (double) 15;
      doubleArray0[8] = doubleArray9;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.correct();
      evaluation0.unclassified();
      evaluation0.SFMeanSchemeEntropy();
      MockRandom mockRandom0 = new MockRandom();
      Null null0 = new Null();
      null0.getHeader();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toClassDetailsString(".bsi");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1, 1);
      TestInstances testInstances1 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBRelativeInformation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.falseNegativeRate(2);
      evaluation0.useNoPriors();
      Double double0 = new Double(1.7976931348623157E308);
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(772);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
      evaluation0.rootRelativeSquaredError();
      evaluation0.SFSchemeEntropy();
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances2.DEFAULT_WORDS);
      AbstractClassifier.runClassifier(sMOreg0, testInstances2.DEFAULT_WORDS);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
          CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
          costSensitiveClassifier0.getCostMatrix();
          ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
          TestInstances testInstances0 = new TestInstances();
          Instances instances0 = testInstances0.generate(" ");
          DefaultTableModel defaultTableModel0 = new DefaultTableModel();
          TestInstances testInstances1 = new TestInstances();
          SMOreg sMOreg0 = new SMOreg();
          Capabilities capabilities0 = sMOreg0.getCapabilities();
          TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
          Instances instances1 = testInstances2.generate("\"");
          sMOreg0.toString();
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          Evaluation evaluation0 = new Evaluation(instances0);
          evaluation0.getClassPriors();
          double double0 = KStarConstants.FLOOR;
          Evaluation evaluation1 = new Evaluation(instances1);
          evaluation1.addNumericTrainClass(5.70001, 2989.3114003);
          evaluation1.addNumericTrainClass((-1), (-644.27147421));
          evaluation0.sizeOfPredictedRegions();
          try { 
            evaluation1.KBRelativeInformation();
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't compute K&B Info score: class numeric!
             //
             verifyException("weka.classifiers.Evaluation", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      Instances instances1 = new Instances(instances0, (-2));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      AbstractClassifier.makeCopies(naiveBayesMultinomialUpdateable0, 15);
      DenseInstance denseInstance0 = new DenseInstance(726);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      SMO sMO0 = new SMO();
      sMO0.getCapabilities();
      evaluation0.correct();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.rootMeanSquaredError();
      evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }
}
