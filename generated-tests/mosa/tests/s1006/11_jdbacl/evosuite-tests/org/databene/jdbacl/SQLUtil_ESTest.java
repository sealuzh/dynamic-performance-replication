/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:17:35 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.math.BigInteger;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.RawStore;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.DropTriggerNode");
      DBDataType dBDataType0 = DBDataType.getInstance(5, "_8");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.DropTriggerNode", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("_4]\t", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("_4]\t _8 NULL", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selectusestreamblons");
      StringBuilder stringBuilder0 = new StringBuilder("selectusestreamblons");
      SQLUtil.addRequiredCondition("selectusestreamblons", stringBuilder0);
      assertEquals("selectusestreamblons and selectusestreamblons", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("E%I<VfBd2'o", true);
      assertEquals("E % I < VfBd2 'o'", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("#iVcnwykL*=Wxes");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin(">", stringArray0, ">", " ", stringArray0);
      String string1 = SQLUtil.removeComments("Jev?SsvyI:Z[");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_RECOVERY_UNDO_REVERTING_KEY;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "execute";
      stringArray0[1] = null;
      String string1 = SQLUtil.innerJoin("execute", stringArray0, "execute", (String) null, stringArray0);
      assertEquals("execute as null on execute.execute = null.execute and execute.null = null.null", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("(^;");
      SQLUtil.addOptionalCondition("(^;", stringBuilder0);
      assertEquals("(^; or (^;", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("(,e1c:<F", "M||8dmrTT", "(,e1c:<F");
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertNotNull(string0);
      assertEquals("sequence (,e1c:<F", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("E},F", "E},F", "E},F");
      assertEquals("'E},F'", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop HtaleqiryO]%");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      boolean boolean0 = SQLUtil.isQuery("drop HtaleqiryO]%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4N#c5W");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?C(1P", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ?C(1P PRIMARY KEY (, , , , , , )", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "delete4n#c5w";
      stringArray0[1] = "vqUnv";
      String string0 = SQLUtil.renderColumnListWithTableName("vqUnv", stringArray0);
      assertEquals("vqUnv.delete4n#c5w, vqUnv.vqUnv", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("org.apache.derby.impl.sql.compile.DropSequenceNode");
      tableContainer0.getTable("org.apache.derby.impl.sql.compile.DropSequenceNode");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.normalize(",)-=m'Aj", false);
      assertEquals(",) - = m 'Aj'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("EygH>x?p\"_pM,5*6uq#", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("EygH>x?p\"_pM,5*6uq#", stringBuilder0);
      assertEquals("EygH>x?p\"_pM,5*6uq#", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4N#c5W");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "x7G6tP";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "4N#c5W", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (x7G6tP)", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.normalize(".UgE3%e", false);
      assertEquals(".UgE3 % e", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.normalize("alter materialized vieworg.apache.derby.impl.sql.compile.varbitconstantnode", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter materialized vieworg.apache.derby.impl.sql.compile.varbitconstantnode");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.normalize("5s/;", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("5s/;");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("");
      SQLUtil.normalize("/*", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",)-=m'aj");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",)-=m'aj");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(",)-=m'aj", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.normalize("%9(-O$a[R", true);
      assertEquals("% 9 (- O $ a [ R", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("s;\"fW0?^/t", stringBuilder0);
      assertEquals("s;\"fW0?^/t", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select#  ivcnwykl ", true, "select#  ivcnwykl ", " NOT NULL");
      SQLUtil.constraintName(dBCheckConstraint0);
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"select#  ivcnwykl \" ", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis(2587L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("813,Qmz,Z*^*}Td/d");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "813,Qmz,Z*^*}Td/d", false, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("%9(-O$a[R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: %9(-O$a[R
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "kX/*N}Hn]Un\">{;n%", (String[]) null, "kX/*N}Hn]Un\">{;n%", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("8<5\"", false);
      assertEquals("8 < 5 \"\"", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      defaultDBTable0.getPrimaryKeyConstraint();
      stringArray0[2] = null;
      stringArray0[3] = stringArray0[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotNull(string0);
      assertEquals("unique constraint constraint", string0);
      
      String string1 = TypeId.DOUBLE_NAME;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , )", string2);
      
      String string3 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      assertNull(dBUniqueConstraint0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tableand");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "4N#c5W", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 4N#c5W PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.hsqldb.resources.BundleHandler";
      stringArray0[1] = "org.hsqldb.resources.BundleHandler";
      stringArray0[2] = "org.hsqldb.resources.BundleHandler";
      stringArray0[3] = "org.hsqldb.resources.BundleHandler";
      stringArray0[4] = "org.hsqldb.resources.BundleHandler";
      stringArray0[5] = "org.hsqldb.resources.BundleHandler";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.hsqldb.resources.BundleHandler", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.hsqldb.resources.BundleHandler UNIQUE (org.hsqldb.resources.BundleHandler, org.hsqldb.resources.BundleHandler, org.hsqldb.resources.BundleHandler, org.hsqldb.resources.BundleHandler, org.hsqldb.resources.BundleHandler, org.hsqldb.resources.BundleHandler)", string0);
      
      String string1 = SQLUtil.join("org.hsqldb.resources.BundleHandler", "org.hsqldb.resources.BundleHandler", stringArray0, "org.hsqldb.resources.BundleHandler", (String) null, stringArray0);
      assertEquals("org.hsqldb.resources.BundleHandler join org.hsqldb.resources.BundleHandler as null on org.hsqldb.resources.BundleHandler.org.hsqldb.resources.BundleHandler = null.org.hsqldb.resources.BundleHandler and org.hsqldb.resources.BundleHandler.org.hsqldb.resources.BundleHandler = null.org.hsqldb.resources.BundleHandler and org.hsqldb.resources.BundleHandler.org.hsqldb.resources.BundleHandler = null.org.hsqldb.resources.BundleHandler and org.hsqldb.resources.BundleHandler.org.hsqldb.resources.BundleHandler = null.org.hsqldb.resources.BundleHandler and org.hsqldb.resources.BundleHandler.org.hsqldb.resources.BundleHandler = null.org.hsqldb.resources.BundleHandler and org.hsqldb.resources.BundleHandler.org.hsqldb.resources.BundleHandler = null.org.hsqldb.resources.BundleHandler", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.normalize("renameselect#  ivcnwykl * = w  xems", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TableContainer tableContainer0 = new TableContainer("drop materialized viewselectusestreamblobs");
      tableContainer0.getSchema();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4N#c5W");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "4N#c5W", true, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("4N#c5W.4N#c5W", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.removeComments(",)-=m'Aj");
      SQLUtil.mutatesDataOrStructure(",)-=m'Aj");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("select#  ivcnwykl * = w  xems", true);
      assertEquals("select #  ivcnwykl * = w  xems", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select #  ivcnwykl * = w  xems", (DBSchema) null);
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("xja,WLZGXGlJEa}", true);
      assertEquals("xja, WLZGXGlJEa }", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4N#c5W");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?C(1P", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance(3, ",)-=m'Aj");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",)-=m'Aj", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(",)-=m'Aj ,)-=M'AJ(3,2) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("qirYO]%");
      DBSequence dBSequence0 = new DBSequence("update", "?0/A'4", "qirYO]%");
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)11;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      bigInteger2.shiftLeft((byte)11);
      dBSequence0.setMaxValue(bigInteger2);
      dBSequence0.setDoc("?0/A'4");
      dBSequence0.setDoc("alter materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.catalog.DependableFinder");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CN{q!\"f__");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("deletesetdate(string,date)");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize(",)-=}'Aj`", true);
      assertEquals(",) - = } 'Aj`'", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",)-=}'Aj`");
      DBDataType dBDataType0 = DBDataType.getInstance(233, ",) - = } 'Aj`'");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",) - = } 'Aj`'", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("~Y", defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(",) - = } 'Aj`'", defaultDBTable0, (-2260), "~Y");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("~Y", defaultDBTable0, (-1952667620), ",) - = } 'Aj`'");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(",) - = } 'Aj`', ~Y, ,) - = } 'Aj`', ~Y, null", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DATE");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("#iVcnwykL*=Wxes");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ralQ&#cEX9]0w}*V");
      Character character0 = Character.valueOf('l');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("#iVcnwykL*=Wxes", (String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("selectu", (String) null, (String) null);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4N#c5W");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      SQLUtil.isQuery(".9;/*");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4N#c5W");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?C(1P", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("myi");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(5, ",)-=m'Aj");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",)-=m'Aj");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "IDENTICAL";
      stringArray0[1] = ", ";
      stringArray0[2] = "IDENTICAL";
      stringArray0[3] = "IDENTICAL";
      stringArray0[4] = ",)-=m'Aj";
      stringArray0[5] = ",)-=m'Aj";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "IDENTICAL", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(",)-=m'Aj", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",)-=m'Aj", dBTable0, dBDataType0, integer2);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IDENTICAL");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("BU%qT");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertEquals(",)-=m'Aj", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectusestreamblons");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("5zi", false, (String) null, "zZf_");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK zZf_", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "renameselect#  ivcnwykl * = w  xems";
      stringArray0[1] = "renameselect#  ivcnwykl * = w  xems";
      stringArray0[2] = "renameselect#  ivcnwykl * = w  xems";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(renameselect#  ivcnwykl * = w  xems, renameselect#  ivcnwykl * = w  xems, renameselect#  ivcnwykl * = w  xems)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"renameselect#  ivcnwykl * = w  xems\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
