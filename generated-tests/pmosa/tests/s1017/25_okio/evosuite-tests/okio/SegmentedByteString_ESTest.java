/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:46:39 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Locale;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSource;
import okio.Options;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(buffer0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(buffer0);
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(buffer0);
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      buffer0.write((ByteString) segmentedByteString0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(3265, byteArray0, 3265, (-774));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(1L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      ByteString byteString0 = ByteString.EMPTY;
      segmentedByteString0.rangeEquals(2, byteString0, (-1816), (-1816));
      segmentedByteString0.equals(buffer0);
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(buffer0);
      segmentedByteString0.write(buffer0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(buffer0);
      byte byte0 = (byte)73;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte) (-76);
      segmentedByteString0.rangeEquals((-5054), byteArray0, 0, (int) (byte) (-76));
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource.sha256(buffer0);
      buffer1.writeLongLe(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 1);
      realBufferedSource0.buffer.indexOf((ByteString) segmentedByteString0);
      segmentedByteString0.base64Url();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiUppercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource.sha256(buffer0);
      buffer1.writeLongLe(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 1);
      Charset charset0 = Charset.defaultCharset();
      segmentedByteString0.string(charset0);
      segmentedByteString0.hashCode();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)37;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      segmentedByteString0.indexOf(byteString0);
      buffer1.indexOf((ByteString) segmentedByteString0);
      Charset charset0 = Charset.defaultCharset();
      segmentedByteString0.string(charset0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = ByteString.of(byteArray0);
      segmentedByteString0.rangeEquals((-1631), byteString0, (-1631), (int) (byte)116);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte) (-87);
      Charset.defaultCharset();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-52L));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = segmentedByteString0.rangeEquals(2, byteArray0, 9, (-7));
      assertEquals(2, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(63L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-36);
      boolean boolean0 = segmentedByteString0.rangeEquals(2, byteArray0, 2, (int) (byte) (-36));
      assertTrue(boolean0);
      
      segmentedByteString0.hashCode();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(0L);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)12;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer2 = buffer1.write(byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer2, 8);
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)12, byteArray0, (int) (byte)43, (-56321));
      assertTrue(boolean0);
      
      int int0 = segmentedByteString0.size();
      assertEquals(8, int0);
      
      ByteString byteString1 = segmentedByteString0.toAsciiUppercase();
      assertEquals(8, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(9223372036854775807L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.write(buffer1);
      assertEquals(10L, buffer1.completeSegmentByteCount());
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      segmentedByteString0.rangeEquals(1, byteString0, 1, 1);
      segmentedByteString0.hmacSha1(byteString0);
      segmentedByteString0.write(buffer0);
      assertEquals(9L, buffer1.size());
      assertEquals(9L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.utf8();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      buffer1.indexOf((ByteString) segmentedByteString0);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)80;
      boolean boolean0 = segmentedByteString0.rangeEquals(1, byteArray0, 101, 101);
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(42L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      ByteString byteString1 = segmentedByteString0.hmacSha1(byteString0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)1;
      ByteString.of(byteArray0);
      segmentedByteString0.equals(byteString1);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(44L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 4);
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertFalse(boolean0);
      assertEquals(4, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(63L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 4);
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertTrue(boolean0);
      assertEquals(4, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(42L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.rangeEquals(0, (ByteString) segmentedByteString0, 3329, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha512();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(32L);
      Buffer buffer1 = buffer0.writeLongLe(2611L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 6);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)122;
      segmentedByteString0.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(42L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      buffer1.readUnsafe();
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      ByteString byteString1 = segmentedByteString0.hmacSha1(byteString0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)80;
      segmentedByteString1.rangeEquals((int) (byte)80, byteString1, 2056, 2);
      Charset.defaultCharset();
      segmentedByteString1.equals(segmentedByteString0);
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)43;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer1 = buffer0.write(byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 8);
      boolean boolean0 = segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, (int) (byte)43, (-56301));
      assertTrue(boolean0);
      
      segmentedByteString0.compareTo(byteString0);
      segmentedByteString0.size();
      segmentedByteString0.rangeEquals((int) (byte)0, byteArray0, (-88), (int) (byte)0);
      int int0 = segmentedByteString0.compareTo(byteString0);
      assertEquals((-1), int0);
      
      int int1 = segmentedByteString0.size();
      assertEquals(8, int1);
      
      Charset.defaultCharset();
      byte[] byteArray1 = segmentedByteString0.toByteArray();
      assertArrayEquals(new byte[] {(byte)0, (byte) (-90), (byte) (-86), (byte) (-55), (byte)0, (byte)0, (byte)0, (byte)43}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(42L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      buffer1.readUnsafe();
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      ByteString byteString1 = segmentedByteString0.hmacSha512(byteString0);
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.hmacSha1(byteString0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)80;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset.defaultCharset();
      segmentedByteString1.equals(segmentedByteString0);
      segmentedByteString1.equals(buffer0);
      Charset.defaultCharset();
      segmentedByteString1.sha1();
      // Undeclared exception!
      try { 
        segmentedByteString1.getByte(4421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=4421 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteString byteString0 = ByteString.of(byteArray0);
      buffer0.write(byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 9);
      segmentedByteString0.rangeEquals(2456, byteArray0, (-921), (int) (byte)0);
      segmentedByteString0.compareTo(byteString0);
      segmentedByteString0.size();
      segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.lastIndexOf(byteArray0);
      Charset.defaultCharset();
      segmentedByteString0.indexOf(byteArray0, (int) (byte)0);
      ByteBuffer byteBuffer0 = segmentedByteString0.asByteBuffer();
      assertEquals(9, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      buffer0.indexOf((ByteString) segmentedByteString0);
      buffer1.indexOf((ByteString) segmentedByteString0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-39);
      boolean boolean0 = segmentedByteString0.rangeEquals((-2054), byteArray0, 2, 10);
      assertFalse(boolean0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("V");
      mockPrintStream0.close();
      PrintStream printStream0 = mockPrintStream0.append('3');
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) segmentedByteString0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) segmentedByteString0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) segmentedByteString0;
      objectArray0[5] = (Object) "V";
      objectArray0[6] = (Object) ">s]kC";
      Object object1 = new Object();
      objectArray0[7] = object1;
      PrintStream printStream1 = mockPrintStream1.printf((Locale) null, ">s]kC", objectArray0);
      segmentedByteString0.write(printStream1);
      assertEquals(2, segmentedByteString0.size());
  }
}
