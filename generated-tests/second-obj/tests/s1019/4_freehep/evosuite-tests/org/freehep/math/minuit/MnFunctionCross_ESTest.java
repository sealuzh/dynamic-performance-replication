/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:28:08 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-2746.0), 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(7);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[3] = (double) 7;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      mnUserTransformation1.add("", 0.0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 7, mnUserTransformation1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 7, mnStrategy0, 0.0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 7, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 0.0, 1810.9).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.add("", (double) 0);
      mnUserParameterState0.setUpperLimit(0, (-3527.6561482));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1810.9, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-4;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1810.9, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(100.0, 100.0, 100.0, 100.0, 100.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(7);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 7, mnUserTransformation1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 7, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, 1000.0, 484.172393, 1000.0, (-614.798891875)).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 3661.419778649014;
      doubleArray0[5] = 3661.419778649014;
      doubleArray0[6] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(3);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3661.419778649014, mnStrategy0, 3661.419778649014);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 772.04935433466, 15);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 3);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 3661.419778649014;
      doubleArray0[5] = 3661.419778649014;
      doubleArray0[6] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3661.419778649014, mnStrategy0, 3661.419778649014);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3661.419778649014;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3661.419778649014;
      doubleArray1[3] = 0.05;
      doubleArray1[4] = 1.5000000000000002;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 3661.419778649014, (-1));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 0, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3661.419778649014, mnStrategy0, 0.05);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 3661.419778649014;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 3661.419778649014;
      mnUserParameterState0.add("", 0.05);
      doubleArray0[6] = 0.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1985.079964), (-1985.079964), (-633.08995), (-1985.079964), 1490.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 0, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3661.419778649014, mnStrategy0, 0.05);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 3661.419778649014;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 3661.419778649014;
      mnUserParameterState0.add("", 0.05);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 2630);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 397.0151574989622, 1810.9).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("", (double) 0);
      mnUserParameterState0.setUpperLimit(0, (-3527.6561482));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.7871301773461627E114;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1810.9;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-3871.35842668), mnStrategy0, 0.0);
      double[] doubleArray1 = new double[3];
      doubleArray0[3] = (-3871.35842668);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 4.0E-7, (-1251));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 3661.469778649014, 1.0, 100.0, 1.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(7);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 7;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 7, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy(7);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 7, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      int int0 = 0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.0, 0);
      // Undeclared exception!
      try { 
        mnUserTransformation0.int2ext(7, 3661.469778649014);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 1810.9, 1500.2479773717794, 1810.9, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 0, mnUserTransformation0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3661.419778649014, mnStrategy0, 0.05);
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 3661.419778649014;
      doubleArray0[5] = 3661.419778649014;
      mnUserParameterState0.add("", 0.05);
      doubleArray0[6] = 0.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1811.0440309355574, 0.0, 1811.0440309355574, 224.4669391).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 1811.0440309355574);
      mnUserParameterState0.add("NRD0p3\"1x/VN/", 1811.0440309355574);
      mnUserParameterState0.setUpperLimit(0, (-1.0389301840039238E42));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1811.0440309355574;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2303.4789), 2849);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.1915212578705516, mnStrategy0, 1.1915212578705516);
      mnUserParameterState0.add("Y2_L<%p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3527.6561482);
      doubleArray0[1] = 1810.9;
      doubleArray0[2] = 1.1915212578705516;
      intArray0[3] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3527.6561482), (-2147115026));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-4.873296382080711), (-2147115026));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2, 0);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, (-0.6726214858708977), 1810.9, 224.4669391, 224.4669391).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.add("", 12.000000000000002);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 0);
      mnStrategy0.setHessianStepTolerance(1.6);
      mnUserParameterState0.toString();
      mnUserParameterState0.add("\n# of function calls: 0\nfunction value: 0.0\nexpected distance to the minimum (edm): 0.0\nexternal parameters: \n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n     0 ||           ||          ||    12.0000   ||\n\n\n\n", (double) 0);
      int[] intArray0 = new int[4];
      mnUserParameterState0.setError(0, (-207.3579199));
      intArray0[0] = 0;
      double[] doubleArray0 = new double[9];
      mnStrategy0.setGradientStepTolerance(1810.9);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1810.9;
      doubleArray0[7] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[8] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      mnStrategy0.setHessianNCycles((-5));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 224.4669391, (-4374));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4697.3507, 4697.3507, 4697.3507, 4697.3507, (-3527.6561482)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2630.77954, mnStrategy0, (-0.8705106557299092));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.8705106557299092);
      doubleArray0[1] = 2630.77954;
      doubleArray0[2] = (-3527.6561482);
      doubleArray0[3] = 2630.77954;
      doubleArray0[4] = 2630.77954;
      doubleArray0[5] = 2630.77954;
      doubleArray0[6] = 2630.77954;
      doubleArray0[7] = 2630.77954;
      doubleArray0[8] = (-0.8705106557299092);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-0.8705106557299092), (-1425859406));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 1810.9, 1810.9, 224.6593060791965, (-1.0389301840039238E42)).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 0.05);
      mnUserParameterState0.add("Y2_Li<p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.6593060791965);
      mnUserParameterState0.setPrecision(1810.9);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3557.7282558622633);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.05, (-991347505));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 1810.9;
      double double1 = 224.4669391;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 0.0, 1810.9, 224.4669391, 1810.9).when(fCNBase0).valueOf(any(double[].class));
      int int0 = 0;
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 0.05);
      mnUserParameterState0.add("Y2_L<%p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[0];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1810.9;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (double) 0;
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, (-2704.456255523), 0);
      double double2 = (-4.873296382080711);
      double double3 = 0.2;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.2, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0389301840039238E42, (-0.21069928712129), 8.85).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2.50634430215723), mnStrategy0, (-2.50634430215723));
      mnUserParameterState0.add("Y2_L<%p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 224.4669391;
      doubleArray0[2] = 1.0389301840039238E42;
      doubleArray0[2] = (-2.50634430215723);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-577.35597188033), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, (-0.6726214858708977)).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 0.05);
      mnUserParameterState0.add("Fz3iLW_v>,}O[R$", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      mnStrategy0.setGradientNCycles(3718);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[7];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3016.66862130392, 16);
      // Undeclared exception!
      try { 
        mnUserParameterState0.setLowerLimit("ZyZec2%GHuM>o%V", (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 397.0151574989622, 1810.9).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      mnUserParameterState0.add("", (double) 0);
      mnUserParameterState0.setUpperLimit(0, (-3527.6561482));
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.7871301773461627E114;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1810.9;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-3871.35842668), mnStrategy0, 0.0);
      double[] doubleArray1 = new double[3];
      doubleArray0[3] = (-3871.35842668);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1810.9;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, 1627.608318081, 4);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 0.0, 1810.9, 224.4669391, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 0.05);
      mnUserParameterState0.add("Y2_L<%p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 12.9301;
      doubleArray0[0] = 1810.9;
      doubleArray0[3] = (double) 0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 12.9301, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2247.328529164933, 0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2.176785696659582, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1035.269681834701, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1480.17), 0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1035.269681834701;
      doubleArray1[1] = (double) 0;
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0, 402);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.add("Y2_Li<71", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.47);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-3557.7282558622633);
      doubleArray0[3] = 0.05;
      intArray0[3] = 0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1619.795157062576, (-3557.7282558622633), (-159.10183932271), 15.169704307403723, (double)0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-4.873296382080711);
      doubleArray1[1] = (-1.0389301840039238E42);
      doubleArray1[2] = 0.05;
      doubleArray1[3] = (-3557.7282558622633);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0.05, 0);
      double[] doubleArray2 = new double[5];
      doubleArray0[3] = (double) 0;
      doubleArray0[1] = (-6.514797470728592E56);
      doubleArray2[3] = (double) 615;
      doubleArray2[4] = (double) 615;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1.0389301840039238E42), mnStrategy0, (-1.0389301840039238E42));
      mnUserParameterState0.add("Y2_L<%p1", (-3113.5988277));
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      mnUserParameterState0.setLimits(0, 100.0, 0.02);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.02;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1.0389301840039238E42);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 735);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.add("Y2_L<%1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      int[] intArray0 = new int[4];
      intArray0[3] = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 0.0;
      doubleArray0[1] = 1810.9;
      doubleArray0[2] = 0.05;
      intArray0[3] = 0;
      mnUserParameterState0.params();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.05, 0.05, (-2126.895430838146)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1475.7865), 0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-4.873296382080711);
      doubleArray1[1] = 224.4669391;
      doubleArray1[2] = 0.05;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 0.0, 1810.9, 1810.9, 164.4).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 0.05);
      mnUserParameterState0.add("Y2_L<%p1", (double) 0);
      mnStrategy0.setGradientNCycles(0);
      mnUserParameterState0.setUpperLimit(0, 0.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      mnStrategy0.setHessianStepTolerance(0.05);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3527.6561482);
      doubleArray0[2] = 0.05;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3527.6561482), (-2147115020));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3527.6561482), (-2147115020));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.add("Y2_L<%p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3527.6561482);
      doubleArray0[1] = 1809.9201702864468;
      doubleArray0[2] = 0.05;
      doubleArray0[3] = (double) 0;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-4, 1.7871301773461627E114, 1.0E-4, 9.150546659379748, 224.4669391).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase1, mnUserParameterState0, 0, mnStrategy0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 8);
      double[] doubleArray1 = new double[1];
      int[] intArray1 = new int[1];
      intArray1[0] = 2146298429;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray1, doubleArray1, doubleArray0, 9.150546659379748, 2146298429);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146298429, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 0.0, 1810.9, 1810.9, (-1.0389301840039238E42)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 0.05);
      mnUserParameterState0.add("Y2_L<%p1", (double) 0);
      mnStrategy0.setGradientNCycles(0);
      mnUserParameterState0.setUpperLimit(0, 0.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      mnStrategy0.setHessianStepTolerance(0.05);
      double[] doubleArray0 = new double[4];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.47237765237E12, 0);
      doubleArray0[0] = (-3527.6561482);
      doubleArray0[2] = 0.05;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3527.6561482), (-2147115020));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3527.6561482), (-2147115020));
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0389301840039238E42).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-2.50634430215723), mnStrategy0, (-2.50634430215723));
      mnUserParameterState0.add("Y2'_L<%p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 224.4669391;
      doubleArray0[2] = 1.0389301840039238E42;
      doubleArray0[2] = (-2.50634430215723);
      intArray0[3] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2.2801791147549514E57), 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.add("Y2_Li<p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 224.47);
      mnUserParameterState0.setPrecision(0.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-3557.7282558622633);
      doubleArray0[3] = 0.05;
      intArray0[3] = 0;
      mnUserParameterState0.params();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, (-724.54500291));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 59.690039590117536, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1810.9, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.05, mnStrategy0, 0.05);
      mnUserParameterState0.add("Y2_L<%p1", (double) 0);
      mnUserParameterState0.setUpperLimit(0, 218.41400402649742);
      int[] intArray0 = new int[4];
      mnStrategy0.setHessianG2Tolerance((-3527.6561482));
      mnStrategy0.setGradientNCycles(0);
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4.873296382080711);
      doubleArray0[1] = (-3527.6561482);
      doubleArray0[2] = 0.05;
      mnUserParameterState0.setLowerLimit(0, 0.05);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1891.09, (-2147115034));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnUserParameterState0.add("Y2_Li<p1", (double) 0);
      mnStrategy0.setHessianStepTolerance(1033.5023051101);
      mnUserParameterState0.setUpperLimit(0, 224.4669391);
      mnUserParameterState0.setPrecision(0.0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 0.05;
      intArray0[3] = 0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1619.795157062576, 0.05, (-159.10183932271), 15.169704307403723, (double)0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0, mnStrategy0, 0);
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 224.4669391;
      doubleArray1[2] = 0.05;
      doubleArray1[3] = 0.0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 15.169704307403723, 2);
      assertNotNull(mnCross0);
  }
}
