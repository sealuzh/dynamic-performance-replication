/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:59:24 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 27);
      jSONScanner0.nextToken(27);
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-810), 27);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("@FD)L9P<[24;Fc&");
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kY<Vpgh7{.", 56320);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('r');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'h', 'h');
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-733));
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals((-733), jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'b', 'b');
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('.');
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils", 49);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('\u001F');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      
      jSONReaderScanner0.nextIdent();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tZnk5o$0HL0e");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string1 = jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Unknown", string1);
      
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 512);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("Unknown", string0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("5O'D:X;d");
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('5', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse false");
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('u');
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      String string0 = jSONScanner0.scanString('u');
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONScanner0.setTimeZone(timeZone0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(");Z{C*-*\".Q{bZ", 49);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(11, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(11, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2741);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      jSONReaderScanner0.matchStat = 2741;
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2741, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      
      jSONReaderScanner0.sbuf = charArray0;
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('O');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("]");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(15, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$O");
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken((-768));
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H%#[IoYr");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("H%#[IoYr");
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('H', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = 2741;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2741);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(intArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 51, 83);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(83, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner1.scanDate('\u0000');
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(83, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      jSONReaderScanner1.scanStringArray(arrayList0, '%');
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(83, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float float0 = jSONReaderScanner1.scanFloat('p');
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(83, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("5yfJK])", 0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('5', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      jSONReaderScanner0.scanStringArray(linkedHashSet0, '!');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Calendar calendar0 = jSONScanner0.getCalendar();
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('5', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(calendar0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("&[02PiB$:l`eNr");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1136, 102);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.nextToken(104);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      MockFile mockFile0 = new MockFile("M*");
      assertEquals("M*", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals("M*", mockFile0.toString());
      assertNotNull(mockFile0);
      
      jSONScanner0.putChar('X');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M*");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_ASH@(yh#");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M*");
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("_ASH", string0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 't');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000", 1911);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000", (-2465));
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2465), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2465), jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONScanner0.scanFieldInt(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      
      jSONScanner0.scanNumber();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-2465), jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R}?F4MW<_=7");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('8');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      JSONScanner jSONScanner0 = new JSONScanner("R}?F4MW<_=7", (-1));
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('=');
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3613, 0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('h');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('h');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("M*");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('M', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken((-1));
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals('*', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SfxbmfhA", 1765);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1765, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1765, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1765, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "kpvd";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kpvd");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Unknown");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = "unknown";
      SymbolTable symbolTable0 = new SymbolTable(7);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.ASMUtils", (-904));
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals((-904), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals((-904), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner0.scanType("T");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals((-904), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
      
      boolean boolean1 = jSONReaderScanner0.isEnabled((-904));
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals((-904), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("Z");
      assertNotNull(stringReader0);
      
      JSONScanner jSONScanner0 = new JSONScanner("p4wsJ43UIgw");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      Feature feature0 = Feature.InternFieldNames;
      jSONScanner0.config(feature0, false);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(973, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("BrowserCompatible", 56320);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Feature feature0 = Feature.AllowArbitraryCommas;
      String string0 = jSONReaderScanner1.scanString('{');
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotNull(string0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("", string0);
      
      jSONReaderScanner1.config(feature0, false);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0L, long0);
      
      boolean boolean0 = JSONScanner.charArrayCompare("BrowserCompatible", (-1), charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e0lT$W", 56320);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2741);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false", 8);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(8, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.scanIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(7, jSONScanner0.token());
      assertEquals(8, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(8);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      String string1 = jSONScanner0.stringDefaultValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ");
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('V');
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1130);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'V', 'u'}, charArray0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(563);
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = new SymbolTable(563);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n*F{", 341);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(341, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('-');
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(341, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      
      jSONReaderScanner0.nextIdent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(341, jSONReaderScanner0.getFeatures());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", 341);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(341, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      double double0 = jSONScanner0.scanDouble('-');
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(341, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("false", 8);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = JSONScanner.charArrayCompare(".", 2414, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(");Z{C*-*\".Q{bZ", 49);
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('2');
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(11, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner(");Z{C*-*\".Q{bZ", (-1));
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanNumber();
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1156);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("mW}b3", 0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('m', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('m', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1765, 1765);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1765, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1765, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(timeZone0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("Set", 112);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(112, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('S', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.setTimeZone(timeZone0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1765, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(112, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('S', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse true");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("NurD^ tk");
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('N', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('N', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = jSONScanner1.matchStat();
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('N', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), int0);
      
      String string0 = jSONScanner1.stringDefaultValue();
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('N', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(string0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2741);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("q.ta?Cr3EuD");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('q', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean1 = jSONScanner0.matchField(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("o1vpg", 108);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(108, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('o', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("-hTM6A[`N_I1V<");
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals('-', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-hTM6A[`N_I1V<");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner3 = new JSONScanner("parse new\u0000");
      assertEquals(0, jSONScanner3.pos());
      assertEquals(989, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.token());
      assertEquals('p', jSONScanner3.getCurrent());
      assertFalse(jSONScanner3.isEOF());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      
      float float0 = jSONReaderScanner0.scanFloat('Z');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 56320);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 56320);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextIdent();
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(20, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner0 = new JSONScanner("G5^`K;f", 111);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('G', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(111, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("M*", 0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals('M', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      JSONScanner jSONScanner2 = new JSONScanner("\"1cd(&");
      assertEquals('\"', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      // Undeclared exception!
      try { 
        jSONScanner2.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("RL?ss!7Xcb[");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanNumber();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('M');
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner1 = new JSONScanner("FAiRaEx~jqrc]Jl", (-4426));
      assertEquals('F', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-4426), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      jSONScanner1.setLocale(locale0);
      assertEquals('F', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-4426), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[8];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-96);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)104, (byte)122, (byte)81, (byte) (-96)}, byteArray0);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("TKx");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken((int) (byte)104);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.matchField(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[8];
      SymbolTable symbolTable0 = new SymbolTable(69);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("J#icoHMoypvuGy", 1);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('J', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[8];
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 110);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate(')');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      jSONReaderScanner0.scanStringArray(set0, ' ');
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('s');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("BrowserCompatible", 56320);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      MockFile mockFile0 = new MockFile("eeOE2:Gi)Uh8Q#");
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("eeOE2:Gi)Uh8Q#", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("eeOE2:Gi)Uh8Q#", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      jSONReaderScanner0.nextToken(56320);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('O', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      String string0 = jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('O', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals("", string0);
      
      JSONScanner jSONScanner0 = new JSONScanner("error parse null or new", 0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string1 = jSONScanner0.stringDefaultValue();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(string1);
      
      int int0 = jSONReaderScanner1.scanInt('^');
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('B', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1136, 102);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("unclosed str");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1136);
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner2.scanDecimal('1');
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      MockFile mockFile0 = new MockFile("unclosed str");
      assertEquals("unclosed str", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals("unclosed str", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      float[][] floatArray0 = jSONReaderScanner2.scanFieldFloatArray2(charArray0);
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals((-2), jSONReaderScanner2.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken((-194));
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(' ', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      String string0 = jSONScanner0.stringDefaultValue();
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(string0);
      
      int int0 = jSONReaderScanner0.scanInt('^');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("nyfjk]");
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      long long0 = jSONScanner0.longValue();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(757770282L, long0);
      
      // Undeclared exception!
      try { 
        jSONScanner1.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet", 123);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate('W');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      jSONReaderScanner0.scanStringArray(linkedHashSet0, ' ');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("new", (-1));
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken((-2951));
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(9, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      int int0 = jSONScanner0.matchStat();
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str", 119);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(119, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(119, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("unclosed str");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      MockFile mockFile0 = new MockFile("unclosed str");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("unclosed str", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("unclosed str", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      UUID uUID1 = jSONReaderScanner0.scanUUID('s');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(119, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("unclosed str");
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('u', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("arPcs?p", 1911);
      assertEquals('a', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      boolean boolean0 = JSONScanner.charArrayCompare("arPcs?p", 0, charArray0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 796, 25);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(25, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(25, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(25, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(collection0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("5yfJK])", 0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      double double0 = jSONReaderScanner0.scanDouble('V');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(5.0, double0, 0.01);
      
      Class<Locale> class0 = Locale.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(collection0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2), (-1548));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("SfxbmfhA");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      double double0 = jSONScanner0.scanDouble('(');
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      jSONScanner0.nextToken((int) (byte) (-96));
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ", 0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(0);
      assertEquals(16, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nk)wn");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = jSONScanner0.token();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R}?F4MW<_=7");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("AllowISO8601DateFormat");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 66, 46);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(46, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDecimal('&');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("T", 83);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(83, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = ';';
      charArray0[2] = '%';
      charArray0[3] = 'Y';
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(83, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(intArray0);
      assertArrayEquals(new char[] {'2', ';', '%', 'Y'}, charArray0);
      
      int int0 = 101;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 101);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(101, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'2', ';', '%', 'Y'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble(';');
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(101, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'2', ';', '%', 'Y'}, charArray0);
      assertEquals(2.0, double0, 0.01);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, 369, 369);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.IOUtils", 49);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[1];
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.hasSpecial = false;
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("RR_Z_ bxlHcfw#o");
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('R', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean0);
      
      String string0 = "";
      JSONScanner jSONScanner2 = new JSONScanner("");
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte) (-96);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : pos 9, json : unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '2', '2');
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(50, jSONReaderScanner0.getFeatures());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'2', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(50, jSONReaderScanner0.getFeatures());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'2', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('2');
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(50, jSONReaderScanner0.getFeatures());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'2', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('\'');
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(50, jSONReaderScanner0.getFeatures());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'2', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(50, jSONReaderScanner0.getFeatures());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'2', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken((-2));
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(50, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'2', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal1 = jSONReaderScanner0.decimalValue();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(50, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((byte)2, bigDecimal1.byteValue());
      assertEquals((short)2, bigDecimal1.shortValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(bigDecimal1);
      assertArrayEquals(new char[] {'2', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("05yfJK])");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("05yfJK])", 0);
      assertEquals('0', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      double double0 = jSONReaderScanner0.scanDouble('g');
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(5.0, double0, 0.01);
      
      Class<Locale> class0 = Locale.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(collection0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-2), (-1548));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e|^MlF9@mJ*.b", (-1452717867));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanNumber();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("-hTM6A[`N_I1V<");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("-hTM6A[`N_I1V<");
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextToken(0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(2, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('h', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONReaderScanner0.nextToken((-2242));
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(3, jSONReaderScanner0.pos());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.pos());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N\"v", Integer.MIN_VALUE);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(Integer.MIN_VALUE, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(Integer.MIN_VALUE, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(Integer.MIN_VALUE, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(Integer.MIN_VALUE, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("xZ ");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.info();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string0);
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("$<*/%+tGq1F^");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$<*/%+tGq1F^", 56320);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("$<*/%+tGq1F^");
      assertEquals(0, jSONScanner0.pos());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = 36;
      JSONScanner jSONScanner1 = new JSONScanner("TreeSet", 127);
      assertEquals(127, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('T', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextIdent();
      assertEquals(127, jSONScanner1.getFeatures());
      assertEquals(22, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner1.scanBoolean('u');
      assertEquals(127, jSONScanner1.getFeatures());
      assertEquals(22, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare((String) null, 127, charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O1vpg");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("O1vpg");
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('O', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("tkx");
      assertEquals(0, jSONScanner2.pos());
      assertEquals('t', jSONScanner2.getCurrent());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner2.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner2.pos());
      assertEquals('t', jSONScanner2.getCurrent());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals((-2), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONScanner2.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O1vR)$g");
      assertEquals('O', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("O1vR)$g");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('O', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals('O', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean0);
      
      long long0 = jSONScanner1.scanFieldLong(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('O', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0L, long0);
      
      boolean boolean1 = jSONScanner1.scanFieldBoolean(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('O', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = jSONScanner0.isBlankInput();
      assertEquals('O', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = Calendar.AM_PM;
      assertEquals(9, int0);
      
      long long1 = jSONScanner1.scanFieldLong(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('O', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      char char0 = jSONScanner0.next();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('1', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("aEPcs?p", 1911);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('F', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("set", 44);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('s', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(44, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("set");
      assertEquals(0, jSONScanner2.pos());
      assertEquals('s', jSONScanner2.getCurrent());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      jSONScanner0.skipWhitespace();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('F', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      JSONScanner jSONScanner3 = new JSONScanner("[%Ba");
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals('', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.token());
      assertEquals(989, jSONScanner3.getFeatures());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner4 = new JSONScanner("\"1cd(&", 0);
      assertEquals(0, jSONScanner4.matchStat());
      assertFalse(jSONScanner4.isEOF());
      assertNull(jSONScanner4.stringDefaultValue());
      assertEquals(0, jSONScanner4.pos());
      assertEquals(0, jSONScanner4.getFeatures());
      assertEquals(0, jSONScanner4.token());
      assertEquals('\"', jSONScanner4.getCurrent());
      assertEquals(0, jSONScanner4.matchStat);
      assertNotNull(jSONScanner4);
      assertFalse(jSONScanner4.equals((Object)jSONScanner1));
      assertFalse(jSONScanner4.equals((Object)jSONScanner2));
      assertFalse(jSONScanner4.equals((Object)jSONScanner3));
      assertFalse(jSONScanner4.equals((Object)jSONScanner0));
      
      jSONScanner3.nextToken(44);
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(14, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(1, jSONScanner3.pos());
      assertEquals('%', jSONScanner3.getCurrent());
      assertEquals(989, jSONScanner3.getFeatures());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertNotSame(jSONScanner3, jSONScanner4);
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner4));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      String string0 = jSONScanner2.stringVal();
      assertEquals(0, jSONScanner2.pos());
      assertEquals('s', jSONScanner2.getCurrent());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(string0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner3);
      assertNotSame(jSONScanner2, jSONScanner4);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner3));
      assertFalse(jSONScanner2.equals((Object)jSONScanner4));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONScanner jSONScanner0 = new JSONScanner(" - ", 41);
      assertEquals(0, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      jSONScanner0.setLocale(locale0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      JSONScanner jSONScanner1 = new JSONScanner(" - ");
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char[] charArray0 = new char[9];
      charArray0[2] = 'j';
      boolean boolean0 = jSONScanner1.matchField(charArray0);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'j', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.hasSpecial = false;
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONScanner jSONScanner1 = new JSONScanner("unclosed str");
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("");
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner0.nextToken(0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(9, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      boolean boolean1 = jSONScanner2.matchField(charArray0);
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(20, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Z1vpH");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("Z1vpH");
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('Z', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanNumber();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner2 = new JSONScanner("N(\u0002s@&vq<T)B~]#B");
      assertEquals('N', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      jSONReaderScanner0.scanIdent();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e0lT$W", 56320);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("e0lT$W", 58);
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(58, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner1 = new JSONScanner("unclosed str");
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("unclosed str", 0);
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals('u', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      boolean boolean1 = jSONScanner1.matchField(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(calendar0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("t");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean2 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e|^MlF9@mJ*.b", (-1452717867));
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanNumber();
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1452717867), jSONReaderScanner0.getFeatures());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      char char0 = '%';
      JSONScanner jSONScanner0 = new JSONScanner("-hTM6A[`N_I1V<");
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      UUID uUID0 = jSONScanner0.scanUUID('5');
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(uUID0);
      
      Date date0 = jSONScanner0.scanFieldDate(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("treeset", 0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-1899));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("'hJ`WL#r}^n%f8HU%");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\'', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("'hJ`WL#r}^n%f8HU%", 0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\'', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char char0 = 'b';
      char char1 = '*';
      boolean boolean0 = jSONScanner0.scanBoolean('*');
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\'', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('*');
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('\'', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals('\'', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o1vpg");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate('3');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      double double0 = jSONReaderScanner0.scanDouble('\'');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '\'';
      charArray0[2] = '3';
      charArray0[3] = '\'';
      charArray0[4] = '3';
      charArray0[5] = '\'';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 6);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertArrayEquals(new char[] {'', '\'', '3', '\'', '3', '\''}, charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextToken(8);
      assertEquals(1, jSONScanner1.pos());
      assertEquals(4, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('3', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'', '\'', '3', '\'', '3', '\''}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int int0 = jSONScanner1.indexOf('\'', 6);
      assertEquals(1, jSONScanner1.pos());
      assertEquals(4, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('3', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'', '\'', '3', '\'', '3', '\''}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      JSONScanner jSONScanner0 = new JSONScanner(" - ", 41);
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getExtension('x');
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNull(string0);
      
      jSONScanner0.setLocale(locale0);
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextIdent();
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('{');
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONScanner0.scanISO8601DateIfMatch(false);
      assertEquals(41, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '{';
      charArray0[2] = 'x';
      boolean boolean2 = JSONScanner.charArrayCompare("h", 41, charArray0);
      assertArrayEquals(new char[] {'Q', '{', 'x'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, (-521));
      assertEquals((-521), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'Q', '{', 'x'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-521), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'Q', '{', 'x'}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-521), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'Q', '{', 'x'}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean3 = jSONReaderScanner0.isBlankInput();
      assertEquals((-521), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'Q', '{', 'x'}, charArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      boolean boolean0 = jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("Set");
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('S', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("Set");
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('S', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner3 = new JSONScanner("Set", (-1587));
      assertFalse(jSONScanner3.isEOF());
      assertEquals('S', jSONScanner3.getCurrent());
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertEquals((-1587), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      jSONScanner1.nextToken(0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(21, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      
      // Undeclared exception!
      try { 
        jSONScanner3.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e0lT$W", 56320);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("e0lT$W");
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      long long0 = jSONScanner0.scanLong('Q');
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0L, long0);
      
      jSONScanner0.nextToken(15);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('o', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('v');
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('o', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      
      jSONScanner0.nextToken(4);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9, 9);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'b', '=', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(9, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'b', '=', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'b', '=', '\u0000'}, charArray0);
      
      jSONScanner0.nextToken(9);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(8, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 8192);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Calendar calendar0 = jSONReaderScanner1.getCalendar();
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(calendar0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONReaderScanner2.scanFieldBoolean(charArray0);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-2), jSONReaderScanner2.matchStat());
      assertEquals((-2), jSONReaderScanner2.matchStat);
      assertArrayEquals(new char[] {'b', '=', '\u0000'}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",*");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(',', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner(",*", 4911);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(4911, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(',', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.skipWhitespace();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(',', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((char[]) null, 91, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("o1vpg", 108);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(108, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int[] intArray0 = jSONScanner1.scanFieldIntArray(charArray0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(108, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      SymbolTable symbolTable0 = new SymbolTable(31);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1050);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2741);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("false", 8);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(8, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(8, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONScanner0.nextToken(8);
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(7, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(8, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(7, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(8, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = JSONScanner.charArrayCompare("8vX2", 1142, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O1vR)$g");
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("O1vR)$g");
      assertEquals('O', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner(":");
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(':', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      float float0 = jSONScanner2.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals(':', jSONScanner2.getCurrent());
      assertEquals((-2), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner2.nextToken(0);
      assertEquals(17, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertTrue(jSONScanner2.isEOF());
      assertEquals((-2), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      boolean boolean1 = jSONScanner2.matchField(charArray0);
      assertEquals(17, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertTrue(jSONScanner2.isEOF());
      assertEquals((-2), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = jSONScanner2.matchStat();
      assertEquals(17, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertTrue(jSONScanner2.isEOF());
      assertEquals((-2), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("unclosed str");
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("]");
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(']', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(calendar0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("t");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Date date0 = jSONScanner2.scanFieldDate(charArray0);
      assertFalse(jSONScanner2.isEOF());
      assertEquals(']', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals((-1), jSONScanner2.matchStat);
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e0lT$W", 56320);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char char0 = 'h';
      SymbolTable symbolTable0 = new SymbolTable(56320);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 56320, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7ja62-3&uCT .w'lQt<", (-1157));
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1157), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      MockDate mockDate0 = new MockDate((-1157), 0, (-1157));
      assertEquals("Sat Oct 31 00:00:00 GMT 739", mockDate0.toString());
      assertNotNull(mockDate0);
      
      jSONScanner0.setToken((-1157));
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1157), jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1157), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1157), jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1157), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1157), 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.token());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("o1vpg", 3603);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(3603, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner1.scanBoolean(')');
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(3603, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)81}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner2 = new JSONScanner("M*");
      assertEquals('M', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      jSONScanner0.nextToken(18);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      char[] charArray0 = new char[0];
      float[] floatArray0 = jSONScanner1.scanFieldFloatArray(charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(3603, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner3 = new JSONScanner("M*");
      assertEquals('M', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.pos());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(989, jSONScanner3.getFeatures());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      boolean boolean2 = jSONScanner1.matchField(charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('1', jSONScanner1.getCurrent());
      assertEquals(3603, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = jSONScanner1.matchField(charArray0);
      assertEquals(2, jSONScanner1.token());
      assertEquals(1, jSONScanner1.pos());
      assertEquals('v', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(3603, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      JSONScanner jSONScanner4 = null;
      try {
        jSONScanner4 = new JSONScanner(charArray0, (byte)81);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4#vpg");
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4#vpg");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate('3');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner1 = new JSONScanner("%x|j$QI%O9[}tw");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('%', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0L, long0);
      
      int int0 = jSONScanner1.indexOf('3', 2622);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('%', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", 0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('u');
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      jSONScanner0.stringDefaultValue = "n*F{";
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals("n*F{", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      float float0 = jSONScanner0.scanFloat('u');
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals("n*F{", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      UUID uUID0 = jSONScanner0.scanUUID('%');
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals("n*F{", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(uUID0);
      
      int int0 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals("n*F{", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("n&p9$bfn", 2715);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(2715, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(2715, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0, 123);
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(123, jSONReaderScanner2.getFeatures());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      float[] floatArray0 = jSONReaderScanner2.scanFieldFloatArray(charArray0);
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(123, jSONReaderScanner2.getFeatures());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals((-2), jSONReaderScanner2.matchStat());
      assertEquals((-2), jSONReaderScanner2.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      SymbolTable symbolTable0 = new SymbolTable(123);
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = new SymbolTable(123);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.addSymbol((-2), (-2), 0, symbolTable1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[8];
      SymbolTable symbolTable0 = new SymbolTable(69);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("J#icoHMoypvuGy", 1);
      assertEquals(1, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('J', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("QS;,78{,82:Fz[#a", 69);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      long long1 = jSONReaderScanner0.longValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('Q', jSONReaderScanner0.getCurrent());
      assertEquals(69, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      jSONScanner0.nextToken(7);
      assertEquals(1, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'm';
      charArray1[1] = 'P';
      boolean boolean1 = jSONScanner0.matchField(charArray1);
      assertEquals(1, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('#', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'m', 'P'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", 0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(563);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('-');
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('u', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("unclosed str");
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner(" ");
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(' ', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      boolean boolean1 = jSONScanner1.matchField(charArray0);
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(calendar0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("unclosed str");
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean2 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = jSONScanner1.scanFieldDouble(charArray0);
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertEquals(0.0, double0, 0.01);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('u', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertEquals(0, int0);
      
      int int1 = jSONScanner1.intValue();
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(int1 == int0);
      assertEquals(757770282, int1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"<1E0|nW^laqr$");
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("", 45);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(45, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('V');
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      Class<Locale> class0 = Locale.class;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 45);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(45, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Collection<String> collection0 = jSONReaderScanner1.scanFieldStringArray(charArray0, class0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(45, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(collection0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-2));
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H%#[IoYr");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("o1vpg");
      assertEquals(0, jSONScanner1.token());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new", 5);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(5, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0.0F, float0, 0.01F);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(5, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 27);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(27, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(27);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(27, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(7, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFloat('O');
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(27, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(7, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-810), 27);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'h', 'h');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(104, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('h');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(104, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('h');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(104, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("arPcs?p");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('a', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken(6);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals('r', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M8$YWlFz&nlTu>!", 123);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate('S');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'W');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner(".", 946);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(946, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(31);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(25, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(946, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(946, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      int int0 = jSONScanner0.matchStat();
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(946, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(946, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONScanner0.scanStringArray(linkedHashSet0, ',');
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(946, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[2E0R4e4H", (-556));
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-556), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-556), jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-556), jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(2715);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 2715);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-556), jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      JSONScanner jSONScanner0 = new JSONScanner("0*eF0@|ee", (-1011));
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1011), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = jSONScanner0.scanInt('-');
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1011), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1011), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("9:/d?6yN>a");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('9', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("f");
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('f', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner2.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('f', jSONScanner2.getCurrent());
      assertEquals((-2), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {'h', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONScanner2.nextToken((-1011));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("RR_Z_ bxlHcfwo");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('R', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('R', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      JSONScanner jSONScanner1 = new JSONScanner("# Z%");
      assertEquals(0, jSONScanner1.pos());
      assertEquals('#', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('R', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("# Z%");
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('#', jSONScanner2.getCurrent());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48, 2828);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2828, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2828, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('G');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2828, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('G');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(2828, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1.2.46");
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      float[][] floatArray0 = jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken(796);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(3, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[1];
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[2E0R4e4H", (-556));
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-556), jSONReaderScanner0.getFeatures());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-556), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(2715);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 2715);
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONScanner0.scanNumber();
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(2715, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("arPcs?p", 1911);
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[10];
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("");
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0.0F, float0, 0.01F);
      
      JSONScanner jSONScanner3 = new JSONScanner(charArray0, 0, 0);
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('\u001A', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.getFeatures());
      assertTrue(jSONScanner3.isEOF());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      
      boolean boolean1 = jSONScanner1.isBlankInput();
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(20, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = Calendar.OCTOBER;
      assertEquals(9, int0);
      
      long long0 = jSONScanner3.scanFieldLong(charArray0);
      assertEquals('\u001A', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.getFeatures());
      assertTrue(jSONScanner3.isEOF());
      assertEquals((-2), jSONScanner3.matchStat());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.token());
      assertEquals((-2), jSONScanner3.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner4 = null;
      try {
        jSONScanner4 = new JSONScanner(charArray0, 1836);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("}`bF8NfhzVN;");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('}', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(17);
      assertEquals(13, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 91);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(91, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(");Z{C*-*\".Q{bZ", 224);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(224, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(')', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken(12);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(224, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(11, jSONReaderScanner1.token());
      assertEquals(';', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ;, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("o1vpg");
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('o', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Dyf8k]", 0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONScanner1.nextToken(10);
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(1, jSONScanner1.token());
      assertEquals('1', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("$O*D%+t,q1Fh", 56320);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      BigDecimal bigDecimal1 = jSONReaderScanner1.scanDecimal('l');
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(bigDecimal1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner0.nextIdent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      int int1 = jSONReaderScanner0.getFeatures();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(int1 == int0);
      assertEquals(989, int1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.hasSpecial = true;
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("unclosed str");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unclosed str");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner2 = new JSONScanner("]");
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(']', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      long long0 = jSONScanner2.longValue();
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(']', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0L, long0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean2 = jSONScanner2.matchField(charArray0);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(15, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      jSONScanner1.nextToken(2);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      long long1 = jSONScanner0.scanLong('_');
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      boolean boolean3 = jSONScanner2.isEnabled((int) '_', (-1));
      assertEquals(0, jSONScanner2.pos());
      assertEquals(15, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("5yfJK])", 0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate('3');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[2] = 'h';
      charArray0[3] = '3';
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('z');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      
      jSONScanner0.nextToken((-1));
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('y', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.nextIdent();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('Q');
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      boolean boolean1 = JSONScanner.charArrayCompare("arPcs", 43, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("arPcs");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner(".Bs!mYEJH?x61/28]wW");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('.', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean2 = jSONScanner1.matchField(charArray0);
      assertEquals('B', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(25, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      jSONReaderScanner0.bp = (-591);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Calendar calendar0 = jSONReaderScanner1.getCalendar();
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(calendar0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Calendar calendar1 = jSONReaderScanner0.getCalendar();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(calendar1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("f^d.");
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      boolean boolean3 = jSONReaderScanner2.scanFieldBoolean(charArray0);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      byte[] byteArray0 = jSONReaderScanner2.bytesValue();
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Unknown");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EUu0S~", (-1069));
      assertEquals((-1069), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-1069), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 46);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(46, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      double double0 = jSONReaderScanner0.scanDouble('h');
      assertEquals((-1069), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[2E0R4e4H", (-556));
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-556), jSONReaderScanner0.getFeatures());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('2', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-556), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 6 - 2, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("o1vpg");
      assertEquals('o', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("]");
      assertEquals(0, jSONScanner2.pos());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertEquals(']', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals('1', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = jSONScanner2.matchField(charArray0);
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(15, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSONScanner2.nextToken(3392903);
      assertEquals(20, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner3 = new JSONScanner("]", 15);
      assertEquals(15, jSONScanner3.getFeatures());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(']', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.token());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      
      boolean boolean2 = jSONScanner3.matchField(charArray0);
      assertEquals(15, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('\u001A', jSONScanner3.getCurrent());
      assertTrue(jSONScanner3.isEOF());
      assertEquals(15, jSONScanner3.token());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("unclosed str");
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("unclosed str");
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('u', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(calendar0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("t");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      StringReader stringReader0 = new StringReader("t");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('t', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("t", (-299));
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals("", jSONReaderScanner3.stringDefaultValue());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals((-299), jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      String string0 = jSONReaderScanner3.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals("", jSONReaderScanner3.stringDefaultValue());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals((-299), jSONReaderScanner3.getFeatures());
      assertEquals((-1), jSONReaderScanner3.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.deny");
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      MockFile mockFile0 = new MockFile("NKb,.sx-oo,xcYFw");
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("NKb,.sx-oo,xcYFw", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertEquals("NKb,.sx-oo,xcYFw", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("NKb,.sx-oo,xcYFw", 191);
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(191, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken(0);
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(191, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      char[] charArray0 = new char[1];
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner1.nextToken((-2));
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(191, jSONReaderScanner1.getFeatures());
      assertEquals(16, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      int int0 = jSONReaderScanner0.intValue();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, int0);
      
      int int1 = jSONReaderScanner0.pos();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = "o1vpg";
      JSONScanner jSONScanner1 = new JSONScanner("o1vpg");
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('o', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray0);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("\"1cd(&");
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('\"', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      // Undeclared exception!
      try { 
        jSONScanner2.nextToken(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kpvd");
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = jSONReaderScanner0.pos();
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner("kpvd");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int2 = jSONScanner0.scanFieldInt(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('k', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[0];
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3441);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$O*D%+t,q1Fh");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("-");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse new", 41);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(41, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      int[] intArray1 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(intArray1);
      assertArrayEquals(new char[] {}, charArray0);
      
      long long0 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(41, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      UUID uUID0 = jSONScanner0.scanUUID('q');
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(uUID0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'a');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      MockFile mockFile0 = new MockFile("M*");
      assertEquals("M*", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("M*", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      jSONScanner0.putChar('X');
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      jSONScanner0.nextIdent();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"M*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 1136);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1136, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1136, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      MockFile mockFile0 = new MockFile("M*");
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertEquals("M*", mockFile0.getName());
      assertEquals("M*", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertNotNull(mockFile0);
      
      jSONReaderScanner0.close();
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1136, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 390);
      assertEquals(390, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      Number number0 = jSONScanner0.integerValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(number0);
      assertEquals(29, number0);
      
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1136, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[0];
      int[] intArray0 = JSONLexerBase.digits;
      assertNotNull(intArray0);
      
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3441);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal(';');
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      MockFile mockFile0 = new MockFile("$O*D%+t,q1Fh");
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("$O*D%+t,q1Fh", mockFile0.getName());
      assertEquals("$O*D%+t,q1Fh", mockFile0.toString());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ';';
      charArray1[1] = ';';
      charArray1[2] = ';';
      charArray1[3] = ';';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 40);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(';', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {';', ';', ';', ';'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      float[][] floatArray1 = jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(';', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(floatArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {';', ';', ';', ';'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken(2466);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(24, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(';', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {';', ';', ';', ';'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", 0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(563);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('\"');
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '-';
      charArray0[2] = 'R';
      charArray0[3] = '-';
      charArray0[4] = '\"';
      boolean boolean1 = JSONScanner.charArrayCompare("n*F{", 72, charArray0);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 714, 'R');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner0.skipComment();
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed str");
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.hasSpecial = false;
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("unclosed str");
      assertEquals(0, jSONScanner1.token());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean0);
      
      JSONScanner jSONScanner2 = new JSONScanner("]");
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(']', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = jSONScanner2.matchField(charArray0);
      assertEquals(0, jSONScanner2.pos());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(15, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSONScanner1.nextToken(19);
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      
      boolean boolean2 = jSONScanner1.matchField(charArray0);
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(1, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(9, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illega str");
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(14);
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("sKN%Jwi0");
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("$O", 119);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('$', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(119, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONReaderScanner0.nextToken(89);
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "-78WeM5#.";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-78WeM5#.", 10);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(10, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("&[02PiB$:leNr");
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      UUID uUID0 = jSONScanner0.scanUUID('.');
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(uUID0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONScanner0.matchStat = (int) '.';
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(46, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'n');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NsRX", 59);
      assertEquals('N', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(59, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("M*");
      assertEquals(0, jSONScanner1.token());
      assertEquals('M', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.skipWhitespace();
      assertEquals(0, jSONScanner1.token());
      assertEquals('M', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("unclosed str");
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('u', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(59, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("can not cast to JSONObject.");
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      int int0 = 5;
      jSONScanner0.nextToken(5);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals('a', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[8];
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "/R\"\\";
      JSONScanner jSONScanner1 = new JSONScanner("/R\"");
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('/', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JSONScanner jSONScanner0 = new JSONScanner("scan false error", 14);
          assertEquals(0, jSONScanner0.pos());
          assertEquals('s', jSONScanner0.getCurrent());
          assertEquals(0, jSONScanner0.matchStat());
          assertFalse(jSONScanner0.isEOF());
          assertNull(jSONScanner0.stringDefaultValue());
          assertEquals(14, jSONScanner0.getFeatures());
          assertEquals(0, jSONScanner0.token());
          assertEquals(0, jSONScanner0.matchStat);
          assertNotNull(jSONScanner0);
          
          jSONScanner0.scanIdent();
          assertEquals(18, jSONScanner0.token());
          assertEquals(0, jSONScanner0.pos());
          assertEquals(0, jSONScanner0.matchStat());
          assertFalse(jSONScanner0.isEOF());
          assertNull(jSONScanner0.stringDefaultValue());
          assertEquals(14, jSONScanner0.getFeatures());
          assertEquals(' ', jSONScanner0.getCurrent());
          assertEquals(0, jSONScanner0.matchStat);
          
          char[] charArray0 = new char[5];
          charArray0[0] = '{';
          char char0 = '4';
          charArray0[1] = '4';
          byte[] byteArray0 = new byte[5];
          byteArray0[0] = (byte)30;
          byteArray0[1] = (byte)10;
          byteArray0[1] = (byte) (-89);
          byteArray0[3] = (byte) (-69);
          byteArray0[4] = (byte)64;
          boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
          assertArrayEquals(new byte[] {(byte)30, (byte) (-89), (byte)0, (byte) (-69), (byte)64}, byteArray0);
          assertFalse(boolean0);
          
          SymbolTable symbolTable0 = new SymbolTable(2378);
          assertNotNull(symbolTable0);
          
          String string0 = jSONScanner0.scanSymbol(symbolTable0);
          assertEquals(18, jSONScanner0.token());
          assertEquals(0, jSONScanner0.pos());
          assertEquals(0, jSONScanner0.matchStat());
          assertFalse(jSONScanner0.isEOF());
          assertNull(jSONScanner0.stringDefaultValue());
          assertEquals(14, jSONScanner0.getFeatures());
          assertEquals(' ', jSONScanner0.getCurrent());
          assertEquals(0, jSONScanner0.matchStat);
          assertNotNull(string0);
          assertEquals("false", string0);
          
          JSONScanner jSONScanner1 = new JSONScanner("undefined", (-2446));
          assertEquals("", jSONScanner1.stringDefaultValue());
          assertEquals((-2446), jSONScanner1.getFeatures());
          assertEquals(0, jSONScanner1.matchStat());
          assertEquals(0, jSONScanner1.pos());
          assertEquals('u', jSONScanner1.getCurrent());
          assertFalse(jSONScanner1.isEOF());
          assertEquals(0, jSONScanner1.token());
          assertEquals(0, jSONScanner1.matchStat);
          assertNotNull(jSONScanner1);
          assertFalse(jSONScanner1.equals((Object)jSONScanner0));
          
          jSONScanner1.scanNumber();
          assertEquals("", jSONScanner1.stringDefaultValue());
          assertEquals((-2446), jSONScanner1.getFeatures());
          assertEquals(0, jSONScanner1.matchStat());
          assertEquals(0, jSONScanner1.pos());
          assertEquals('u', jSONScanner1.getCurrent());
          assertFalse(jSONScanner1.isEOF());
          assertEquals(2, jSONScanner1.token());
          assertEquals(0, jSONScanner1.matchStat);
          assertNotSame(jSONScanner1, jSONScanner0);
          assertFalse(jSONScanner1.equals((Object)jSONScanner0));
          
          float float0 = jSONScanner1.scanFieldFloat(charArray0);
          assertEquals("", jSONScanner1.stringDefaultValue());
          assertEquals((-2446), jSONScanner1.getFeatures());
          assertEquals((-2), jSONScanner1.matchStat());
          assertEquals(0, jSONScanner1.pos());
          assertEquals('u', jSONScanner1.getCurrent());
          assertFalse(jSONScanner1.isEOF());
          assertEquals(2, jSONScanner1.token());
          assertEquals((-2), jSONScanner1.matchStat);
          assertArrayEquals(new char[] {'{', '4', '\u0000', '\u0000', '\u0000'}, charArray0);
          assertNotSame(jSONScanner1, jSONScanner0);
          assertFalse(jSONScanner1.equals((Object)jSONScanner0));
          assertEquals(0.0F, float0, 0.01F);
          
          // Undeclared exception!
          try { 
            jSONScanner0.nextIdent();
            fail("Expecting exception: StringIndexOutOfBoundsException");
          
          } catch(StringIndexOutOfBoundsException e) {
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("# Z%");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("Set", 91);
      assertEquals(0, jSONScanner1.token());
      assertEquals('S', jSONScanner1.getCurrent());
      assertEquals(91, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5j|w2p'Rr$3z", 1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\"");
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('U');
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(bigDecimal0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "n*F{";
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", 0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(563);
      assertNotNull(symbolTable0);
      
      char char0 = '-';
      boolean boolean0 = jSONScanner0.scanBoolean('-');
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      int int0 = 1111;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1111, 0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("n*F{");
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('n', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      double double0 = jSONScanner0.scanFieldDouble(charArray1);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(charArray1, charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("# Z%");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanString('J');
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44, 116);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(116, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("# Z%", 44);
      assertEquals(44, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('#', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("F", 116);
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('F', jSONScanner2.getCurrent());
      assertEquals(116, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      long long0 = jSONScanner2.scanFieldSymbol(charArray0);
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('F', jSONScanner2.getCurrent());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals(116, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-1), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0L, long0);
      
      jSONScanner2.scanNumber();
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals(116, jSONScanner2.getFeatures());
      assertTrue(jSONScanner2.isEOF());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(3, jSONScanner2.token());
      assertEquals((-1), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = jSONScanner0.matchField(charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("M C7:}!34$B0-pUED", 2308);
      assertEquals(2308, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[3];
      jSONScanner0.nextIdent();
      assertEquals(2308, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23, 2308);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2308, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("M C7:}!34$B0-pUED", (-2017));
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-2017), jSONScanner1.getFeatures());
      assertEquals('M', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("M C7:}!34$B0-pUED", 24180);
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(24180, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals('M', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner3 = new JSONScanner("_Hp)X y|;tC<)AtXWX@", 23);
      assertEquals(23, jSONScanner3.getFeatures());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('_', jSONScanner3.getCurrent());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      
      jSONScanner3.skipWhitespace();
      assertEquals(23, jSONScanner3.getFeatures());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('_', jSONScanner3.getCurrent());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals(2308, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner3);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner3));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner4 = new JSONScanner("_Hp)X y|;tC<)AtXWX@", 24180);
      assertEquals("", jSONScanner4.stringDefaultValue());
      assertFalse(jSONScanner4.isEOF());
      assertEquals(0, jSONScanner4.token());
      assertEquals('_', jSONScanner4.getCurrent());
      assertEquals(0, jSONScanner4.matchStat());
      assertEquals(24180, jSONScanner4.getFeatures());
      assertEquals(0, jSONScanner4.pos());
      assertEquals(0, jSONScanner4.matchStat);
      assertNotNull(jSONScanner4);
      assertFalse(jSONScanner4.equals((Object)jSONScanner3));
      assertFalse(jSONScanner4.equals((Object)jSONScanner0));
      assertFalse(jSONScanner4.equals((Object)jSONScanner2));
      assertFalse(jSONScanner4.equals((Object)jSONScanner1));
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2308, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('/', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('P');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('/', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = 'P';
      charArray0[2] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 218);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(218, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'7', 'P', '7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 218);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'7', 'P', '7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      float float0 = jSONReaderScanner1.scanFloat('P');
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3, jSONReaderScanner1.matchStat());
      assertEquals(16, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'7', 'P', '7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(7.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '-';
      charArray0[2] = 'c';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 32, 56320);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('&', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(56320, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'&', '-', 'c'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      float float0 = jSONReaderScanner0.scanFloat('-');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(5.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 34;
      JSONScanner jSONScanner0 = new JSONScanner("V", 34);
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char char0 = jSONScanner0.getCurrent();
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(34, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('V', char0);
      
      jSONScanner0.nextToken(34);
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(34, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString();
      char[] charArray0 = new char[6];
      char char1 = 'F';
      charArray0[0] = char1;
      charArray0[1] = char0;
      char char2 = 'n';
      charArray0[2] = char2;
      charArray0[3] = char0;
      boolean boolean0 = false;
      jSONScanner0.scanISO8601DateIfMatch(boolean0);
      charArray0[4] = char0;
      charArray0[5] = char0;
      jSONScanner0.scanFieldDouble(charArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      jSONScanner0.scanUUID(charArray0[3]);
      jSONScanner0.decimalValue();
      jSONScanner0.scanIdent();
      int int1 = 5;
      jSONScanner0.arrayCopy(int0, charArray0, int1, int0);
      jSONScanner0.stringVal();
      String string0 = "d|h1";
      String string1 = "iyA}B5Yv7";
      Locale locale0 = new Locale(string0, string1);
      jSONScanner0.setLocale(locale0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, (-394));
      assertEquals((-394), jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Feature feature0 = Feature.AutoCloseSource;
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('\'');
      assertEquals((-394), jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.config(feature0, false);
      assertEquals((-394), jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("{>sR8';XV\u0000=");
      assertFalse(jSONScanner0.isEOF());
      assertEquals('{', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken((-1));
      assertFalse(jSONScanner0.isEOF());
      assertEquals('>', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(12, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("aI80D?Z#F)pG*1B", 253);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(253, jSONReaderScanner1.getFeatures());
      assertEquals('a', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("{>sR8';XV\u0000=");
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('{', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      double double0 = jSONReaderScanner2.scanDouble('J');
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('{', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertEquals(0.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner2.scanUUID('\'');
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('{', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("i?QY`lX!s");
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('i', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      
      jSONReaderScanner2.nextToken(14);
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('>', jSONReaderScanner2.getCurrent());
      assertEquals(12, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000", 1911);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      int int0 = (-2465);
      SymbolTable symbolTable0 = new SymbolTable(1911);
      assertNotNull(symbolTable0);
      
      jSONScanner0.nextToken(1911);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(20, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{w-m");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken(1911);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(12, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BwK", (-2065));
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2065), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanNumber();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2065), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(563);
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = new SymbolTable(563);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n*F{", 41);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('v');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('J');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("un=losed string : ");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(241);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("RR_Z_ bxlHcfwo");
      assertEquals(0, jSONScanner0.token());
      assertEquals('R', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("RR_Z_ bxlHcfwo", 103);
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(103, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = 'Z';
      charArray0[3] = ')';
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(103, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'6', '6', 'Z', ')'}, charArray0);
      
      StringReader stringReader0 = new StringReader(", name ");
      assertNotNull(stringReader0);
      
      int int0 = Calendar.UNDECIMBER;
      assertEquals(12, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 103);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'6', '6', 'Z', ')'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDecimal('6');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", 0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(101);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('-');
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EtUXn@T(%", 46);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '-';
      charArray1[1] = '-';
      charArray1[2] = '-';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 39);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean1 = jSONReaderScanner1.scanBoolean('-');
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(3, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'-', '-', '-'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jSONReaderScanner0.nextToken((-1066));
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      String string0 = jSONReaderScanner0.stringVal();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(46, jSONReaderScanner0.getFeatures());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals("", string0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      MockFile mockFile0 = new MockFile("I-&F6", "I-&F6");
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/23_fastjson/I-&F6/I-&F6", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("I-&F6", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_mosa/projects/23_fastjson/I-&F6", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertNotNull(mockFile0);
      
      JSONScanner jSONScanner1 = new JSONScanner("8Mw", (-415));
      assertEquals((-415), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('8', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      int int0 = jSONScanner1.scanInt('l');
      assertEquals((-415), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('8', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(8, int0);
      
      boolean boolean3 = jSONScanner1.scanISO8601DateIfMatch(true);
      assertEquals((-415), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('8', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, 2992);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(2992, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.hasSpecial = false;
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(2992, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(2992, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("U", 116);
      assertEquals(116, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(",'xfyc{", 61);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(61, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner1.scanDate('3');
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(61, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals(116, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Calendar.OCTOBER;
      assertEquals(9, int0);
      
      long long1 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals(116, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(116, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      
      JSONScanner jSONScanner1 = new JSONScanner(",'xfyc{");
      assertEquals(',', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      SymbolTable symbolTable0 = new SymbolTable(9);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner1.scanSymbol(symbolTable0);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(16, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\'', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(string0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      long long2 = jSONScanner1.scanLong('m');
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(16, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('\'', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(0L, long2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "kpvd";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kpvd");
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      
      SymbolTable symbolTable0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("M*");
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('M', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('#');
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('M', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      jSONScanner1.nextToken(4);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('*', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(1, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-3542));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-3542), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate('#');
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-3542), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONScanner jSONScanner2 = new JSONScanner("Set", (-1));
      assertEquals('S', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals((-1), jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      jSONScanner1.nextToken(4);
      assertNull(jSONScanner1.stringDefaultValue());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(1, jSONScanner1.token());
      assertEquals(1, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      boolean boolean0 = jSONScanner1.matchField(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(1, jSONScanner1.token());
      assertEquals(1, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'#', '#', '#', '#', '#'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean0);
      
      int int0 = jSONScanner2.matchStat();
      assertEquals('S', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals((-1), jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertEquals(0, int0);
      
      float[] floatArray0 = jSONScanner2.scanFieldFloatArray(charArray0);
      assertEquals('S', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertEquals((-1), jSONScanner2.getFeatures());
      assertEquals((-2), jSONScanner2.matchStat());
      assertEquals((-2), jSONScanner2.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'#', '#', '#', '#', '#'}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      String string0 = jSONScanner0.stringDefaultValue();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(string0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONScanner2.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+Y\u0000", 1911);
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('+', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      SymbolTable symbolTable0 = new SymbolTable(1911);
      assertNotNull(symbolTable0);
      
      jSONScanner0.nextToken(1911);
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'h';
      boolean boolean0 = jSONScanner0.matchField(charArray1);
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'h'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("Unknown", string0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("|^");
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('|', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner1 = new JSONScanner("|^", 0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('|', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.nextToken(13);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UufTF.6tFAq :T(Q");
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("UufTF.6tFAq :T(Q", 919);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(919, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate('v');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(919, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JSONScanner jSONScanner1 = new JSONScanner("UufTF.6tFAq :T(Q", 16);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('U', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(16, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextToken(16);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(16, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner1.matchField(charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(16, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean0);
      
      float[] floatArray0 = jSONScanner1.scanFieldFloatArray(charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('u', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(16, jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextToken(16);
      assertEquals(1, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(18, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('.', jSONScanner1.getCurrent());
      assertEquals(16, jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("can not cast to JSONObject.");
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(0);
      assertEquals(1, jSONScanner0.token());
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[8];
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "/R\"\\";
      JSONScanner jSONScanner1 = new JSONScanner("/R\"");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('/', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", (-28));
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-28), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(563);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('?');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-28), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[2] = '?';
      Class<InputStream> class0 = InputStream.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, symbolTable0, '?');
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-28), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(enum0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 563, '?');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(63, jSONReaderScanner0.getFeatures());
      assertEquals('?', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'?', '\u0000', '?'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(63, jSONReaderScanner0.getFeatures());
      assertEquals('?', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'?', '\u0000', '?'}, charArray0);
      assertEquals(0, int0);
      
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-679));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("UufTF.6tFAq :T(Q");
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[3];
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      charArray0[0] = 'J';
      charArray0[1] = 'l';
      charArray0[2] = '&';
      boolean boolean0 = JSONScanner.charArrayCompare("UufTF.6tFAq :T(Q", 85, charArray0);
      assertArrayEquals(new char[] {'J', 'l', '&'}, charArray0);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5, (-167));
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-167), jSONReaderScanner0.getFeatures());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'J', 'l', '&'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-167), jSONReaderScanner0.getFeatures());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'J', 'l', '&'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "false");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = jSONReaderScanner0.scanDouble('l');
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-167), jSONReaderScanner0.getFeatures());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'J', 'l', '&'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-167), jSONReaderScanner0.getFeatures());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertArrayEquals(new char[] {'J', 'l', '&'}, charArray0);
      
      char char0 = jSONReaderScanner0.charAt(0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-167), jSONReaderScanner0.getFeatures());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'J', 'l', '&'}, charArray0);
      assertEquals('J', char0);
      
      int int0 = 1467;
      int int1 = 4336;
      String string0 = jSONReaderScanner0.subString(1467, 4336);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-167), jSONReaderScanner0.getFeatures());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'J', 'l', '&'}, charArray0);
      
      jSONScanner0.scanNumber();
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(3, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'J', 'l', '&'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("o1vpg");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("o1vpg");
      assertEquals('o', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nyfjk]", 0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.scanBoolean('P');
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[", (byte)110);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.resetStringPosition();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('P');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(110, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("[");
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('[', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.nextToken(jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\u0000", 1911);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[6];
      char char0 = 'h';
      charArray0[0] = 'h';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000", (-2465));
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2465), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2465), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('h');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2465), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2465), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(1911);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("05yfJK])");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("05yfJK])", 0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('?');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(5.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('?');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("v7");
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('v', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner0.scanDate('x');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      StringReader stringReader0 = new StringReader("v7");
      assertNotNull(stringReader0);
      
      jSONScanner0.nextToken(22);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      UUID uUID1 = jSONScanner0.scanUUID('O');
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(uUID1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("fastjson", 59);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(59, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("fastjson");
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('f', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.skipWhitespace();
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('f', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("\"1cd(&");
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('\"', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 'l';
      charArray0[2] = 'q';
      charArray0[3] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'q');
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'b', 'l', 'q', 'b'}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'b', 'l', 'q', 'b'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("K", 0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('K', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled(3521, (-1084026706));
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'b', 'l', 'q', 'b'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", (-28));
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-28), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(563);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('-');
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-28), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      boolean boolean1 = JSONScanner.charArrayCompare("n*F{", 92, charArray0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      jSONScanner0.scanStringArray(hashSet0, '-');
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-28), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49, 2);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-28), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Date date0 = jSONReaderScanner0.scanDate('|');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.matchStat();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.pos());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals((-28), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Z1vpH");
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("Z1vpH");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('Z', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new", 26);
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0.0F, float0, 0.01F);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8ffS vNie$xfvF|^'");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean0);
      
      boolean boolean1 = jSONScanner1.matchField(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('1', jSONScanner1.getCurrent());
      assertEquals(1, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 5108);
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(calendar0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("M*");
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('M', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      
      boolean boolean2 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double double0 = jSONScanner1.scanFieldDouble(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('1', jSONScanner1.getCurrent());
      assertEquals(1, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("M*");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("+yoJ_T", 2);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('+', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.token = 0;
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('+', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('+', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      int int0 = 1367;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0, 1367);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(1367, jSONReaderScanner2.getFeatures());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner3.pos());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArray0, 2);
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertTrue(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals('\u0000', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertNotNull(jSONReaderScanner4);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      
      JSONScanner jSONScanner1 = new JSONScanner("sF*+K", (-2345));
      assertEquals((-2345), jSONScanner1.getFeatures());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('s', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONReaderScanner3.isEnabled(9, 0);
      assertEquals(0, jSONReaderScanner3.pos());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner4);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner4));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined", 56320);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('h');
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(56320, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 56320);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(56320, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(56320, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0L, long0);
      
      boolean boolean2 = jSONScanner0.matchField(charArray0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(56320, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      jSONScanner0.nextToken(2778);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(56320, jSONScanner0.getFeatures());
      assertEquals(23, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("aEPcs?p", 1911);
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("xz85V+w=)jM+%'OQ|m", 0);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('x', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.skipWhitespace();
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = new JSONScanner("scan null error");
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('s', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. z
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("M*", 0);
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('M', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("M*");
      assertEquals('M', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      long long0 = jSONScanner2.longValue();
      assertEquals('M', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'G';
      charArray0[2] = 'e';
      charArray0[3] = 'u';
      charArray0[4] = '&';
      charArray0[5] = '(';
      charArray0[6] = 'e';
      charArray0[7] = '5';
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'F', 'G', 'e', 'u', '&', '(', 'e', '5'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'F', 'G', 'e', 'u', '&', '(', 'e', '5'}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean0);
      
      JSONScanner jSONScanner3 = new JSONScanner("o1vpg", 12);
      assertFalse(jSONScanner3.isEOF());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals(12, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.token());
      assertEquals('o', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      jSONScanner3.nextToken(161);
      assertFalse(jSONScanner3.isEOF());
      assertNull(jSONScanner3.stringDefaultValue());
      assertEquals('1', jSONScanner3.getCurrent());
      assertEquals(12, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(1, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('M', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'F', 'G', 'e', 'u', '&', '(', 'e', '5'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      
      long long1 = jSONScanner2.scanLong('i');
      assertEquals('M', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.isEOF());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-1), jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner3);
      assertTrue(long1 == long0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner3));
      assertEquals(0L, long1);
      
      boolean boolean1 = jSONScanner1.isEnabled((-1011), 14);
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('M', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner3);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner3));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e|^MlF9@mJ*.b", (-1452717866));
      assertEquals((-1452717866), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'g';
      charArray0[2] = 'Y';
      charArray0[3] = 'J';
      charArray0[4] = 'e';
      charArray0[5] = '1';
      charArray0[6] = 'y';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1452717866), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(collection0);
      assertArrayEquals(new char[] {'(', 'g', 'Y', 'J', 'e', '1', 'y'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals((-1452717866), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONScanner jSONScanner0 = new JSONScanner("-hTM6A`_I1V<");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray1);
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0.0F, float0, 0.01F);
      
      JSONScanner jSONScanner1 = new JSONScanner("-hTM6A`_I1V<");
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float1 = jSONScanner1.scanFloat('5');
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(float1, float0, 0.01F);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0.0F, float1, 0.01F);
      
      UUID uUID0 = jSONScanner1.scanUUID('5');
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(uUID0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('5');
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextToken(125);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(2, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('h', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(iio Qe~{QmDZE", 0);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('(', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextIdent();
      assertEquals(10, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nsrx");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      int int0 = Calendar.AM;
      assertEquals(0, int0);
      
      String string0 = jSONReaderScanner1.scanString('3');
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(string0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 43, 0);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      
      float float0 = jSONReaderScanner2.scanFloat('k');
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", 0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('\"');
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = 'R';
      charArray0[3] = '-';
      charArray0[4] = '\"';
      boolean boolean1 = JSONScanner.charArrayCompare("n*F{", 72, charArray0);
      assertArrayEquals(new char[] {'-', '-', 'R', '-', '\"'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 714, 'R');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'-', '-', 'R', '-', '\"'}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'-', '-', 'R', '-', '\"'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'-', '-', 'R', '-', '\"'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("fastjson", 0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.putChar('~');
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 10, (-1083018040));
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1083018040), jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 120);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(120, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', 'n'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFloat('.');
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(120, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'7', '7', '7', '7', '7', '7', 'n'}, charArray0);
      assertEquals(777777.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("M*");
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("M*", 0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals('M', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.skipWhitespace();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('M', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[6] = '7';
      charArray0[7] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32, 0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'7', '7', '7', '\u0000', '\u0000', '\u0000', '7', '7', '\u0000'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFloat('7');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'7', '7', '7', '\u0000', '\u0000', '\u0000', '7', '7', '\u0000'}, charArray0);
      assertEquals(777.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("05yfJK])");
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("05yfJK])", 0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 70);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      String string0 = jSONReaderScanner1.tokenName();
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("Unknown", string0);
      
      double double0 = jSONReaderScanner0.scanDouble('7');
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(5.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('7');
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("v7");
      assertEquals('v', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 0, 2020);
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(2020, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.pos());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNotNull(jSONReaderScanner3);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      double double1 = jSONReaderScanner1.scanDouble('%');
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String string1 = jSONScanner0.tokenName();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(string1);
      assertEquals("Unknown", string1);
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArray0, 2561, (-1));
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals((-1), jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals("", jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals('\u0000', jSONReaderScanner4.getCurrent());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertNotNull(jSONReaderScanner4);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner4.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner4.getFeatures());
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals("", jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals('\u0000', jSONReaderScanner4.getCurrent());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertNull(collection0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      
      jSONScanner0.nextIdent();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      Number number0 = jSONScanner0.integerValue();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(number0);
      assertEquals(5, number0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("05yfJK])");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      
      JSONScanner jSONScanner0 = new JSONScanner("05yfJK])", 0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 70);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      String string0 = jSONReaderScanner1.tokenName();
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals("Unknown", string0);
      
      double double0 = jSONReaderScanner0.scanDouble('7');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(5.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('7');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner0.scanInt('Q');
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(5, int0);
      
      String string1 = jSONReaderScanner1.subString(95, 682);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      SymbolTable symbolTable0 = new SymbolTable(403);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, ' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Z1vpH");
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("00Z\"]%F", 2994);
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2994, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'G';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 544, 544);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(544, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'2', 'G'}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      long long0 = jSONReaderScanner1.scanFieldLong(charArray0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(544, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'2', 'G'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0L, long0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2994, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'2', 'G'}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner1.scanInt(']');
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(544, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'2', 'G'}, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(2, int0);
      
      String string0 = jSONReaderScanner0.subString(544, 2);
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2994, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals("\u0000\u0000", string0);
      
      SymbolTable symbolTable0 = new SymbolTable(1327);
      assertNotNull(symbolTable0);
      
      SymbolTable symbolTable1 = new SymbolTable(2994);
      assertNotNull(symbolTable1);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable1, '9');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "\"S1DZ *tvp@=m`RH(Ne";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`sJuBID<'", 5);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('`', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(5, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'O';
      charArray0[1] = 'f';
      charArray0[2] = 'O';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('`', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(5, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'O', 'f', 'O'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('%');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('`', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(5, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken(20);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(5, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      String string1 = jSONReaderScanner0.stringVal();
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(5, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("`sJuBID<'", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("05yfJK", 19);
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(19, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(19, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'p', 'p', 'p', 'p', 'p', 'p'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('p');
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(19, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken(0);
      assertEquals(19, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(19, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals("5y", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockFile mockFile0 = new MockFile((String) null, "5y");
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("5y", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("5y", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertNotNull(mockFile0);
      
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 40);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(40, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("@]:hiM");
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("@]:hiM", 91);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('@', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(91, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('@', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = 'n';
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol((SymbolTable) null, '5');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("05yfJK", 40);
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('O');
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("05yfJK");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 2635);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2635, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner0 = new JSONScanner("m*", 2635);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2635, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('m', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(2635, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      float[][] floatArray0 = jSONReaderScanner2.scanFieldFloatArray2(charArray0);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals((-2), jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals((-2), jSONReaderScanner2.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      jSONReaderScanner1.nextToken(95);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2635, jSONReaderScanner1.getFeatures());
      assertEquals('y', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      
      SymbolTable symbolTable0 = new SymbolTable(1604);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner2.scanSymbolWithSeperator(symbolTable0, 'A');
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNull(string0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('9', '~', 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5yfJK])");
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("fastjson", 59);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(59, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("fastjson");
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('f', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.skipWhitespace();
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('f', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner2 = new JSONScanner("\"1cd(&");
      assertFalse(jSONScanner2.isEOF());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals('\"', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      JSONScanner jSONScanner3 = new JSONScanner("9e[~v,A'{", 0);
      assertNull(jSONScanner3.stringDefaultValue());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('9', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      jSONScanner3.nextToken(0);
      assertNull(jSONScanner3.stringDefaultValue());
      assertFalse(jSONScanner3.isEOF());
      assertEquals(0, jSONScanner3.pos());
      assertEquals(0, jSONScanner3.getFeatures());
      assertEquals(3, jSONScanner3.token());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('[', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotSame(jSONScanner3, jSONScanner0);
      assertNotSame(jSONScanner3, jSONScanner1);
      assertNotSame(jSONScanner3, jSONScanner2);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      boolean boolean0 = jSONScanner0.scanBoolean('Y');
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(59, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner3);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner3));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4#vpg");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4#vpg");
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner0.scanDate('3');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      
      jSONScanner0.putChar('~');
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, '~', 0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner("&[02PiB$:l`eNr");
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      UUID uUID0 = jSONScanner0.scanUUID('.');
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(uUID0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      charArray0[0] = '.';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("true");
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('t', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextToken(3637);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(6, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean1 = jSONScanner1.matchField(charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(6, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 22);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("&[02PiB$:l`eNr");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('&', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner1 = new JSONScanner("Unknown");
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('U', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner0.nextToken(3637);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      char[] charArray0 = new char[0];
      boolean boolean2 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(14, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JSONScanner jSONScanner2 = null;
      try {
        jSONScanner2 = new JSONScanner(charArray0, 3637);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Unknown");
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EUu0S~", (-1069));
      assertEquals((-1069), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals((-1069), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 46);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(46, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      float float0 = jSONReaderScanner0.scanFloat('-');
      assertEquals((-1069), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nsrx");
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      int int0 = Calendar.LONG_FORMAT;
      assertEquals(2, int0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("j7flsdu");
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('j', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("0zx%", 8192);
      assertEquals(8192, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('0', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals('j', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = Calendar.OCTOBER;
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      long long0 = jSONScanner1.scanFieldLong(charArray0);
      assertEquals(8192, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('0', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray0);
      assertEquals(8192, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('0', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.nextToken(2);
      assertEquals(8192, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(2, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('z', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4#vpg");
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("IgnoreAutoType");
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('I', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner1.scanFieldBoolean(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('I', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      
      JSONScanner jSONScanner2 = new JSONScanner(")", 10);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(')', jSONScanner2.getCurrent());
      assertEquals(10, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      boolean boolean2 = jSONScanner1.isBlankInput();
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('I', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = Calendar.OCTOBER;
      assertEquals(9, int0);
      
      long long0 = jSONScanner2.scanFieldLong(charArray0);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals(')', jSONScanner2.getCurrent());
      assertEquals(10, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-1), jSONScanner2.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '3';
      jSONScanner1.nextToken(2336);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(1, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('g', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      // Undeclared exception!
      try { 
        jSONScanner2.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"S1DZ *tvp@=m`RH(Ne", 40);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'p', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.pos = 117;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(117, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString('p');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '.';
      charArray0[6] = '\'';
      charArray0[7] = '2';
      charArray0[8] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\'', 2755);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2755, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\'', '2', '2', '\'', '\'', '.', '\'', '2', '('}, charArray0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2755, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\'', '2', '2', '\'', '\'', '.', '\'', '2', '('}, charArray0);
      
      double double0 = jSONReaderScanner0.scanDouble('.');
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2755, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\'', '2', '2', '\'', '\'', '.', '\'', '2', '('}, charArray0);
      assertEquals(0.0, double0, 0.01);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('m');
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2755, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'\'', '2', '2', '\'', '\'', '.', '\'', '2', '('}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2755, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\'', '2', '2', '\'', '\'', '.', '\'', '2', '('}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((int) '2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("NonStringKeyAsString", 1911);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(string0);
      assertArrayEquals(new char[] {'q', 'q', 'l', 'l'}, charArray0);
      
      JSONScanner jSONScanner1 = new JSONScanner("3d0S(%'0_KC~iMKj=", (-2544));
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2544), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1911, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('N', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Calendar.OCTOBER;
      assertEquals(9, int0);
      
      long long0 = jSONScanner1.scanFieldLong(charArray0);
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2544), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {'q', 'q', 'l', 'l'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = jSONScanner1.scanFieldBigInteger(charArray0);
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2544), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'q', 'q', 'l', 'l'}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      jSONScanner1.token = 1091;
      assertFalse(jSONScanner1.isEOF());
      assertEquals(1091, jSONScanner1.token());
      assertEquals('3', jSONScanner1.getCurrent());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2544), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NonStringKeyAsString");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      jSONScanner1.nextToken(1911);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(2, jSONScanner1.token());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('d', jSONScanner1.getCurrent());
      assertEquals((-2544), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      float float0 = jSONScanner1.floatValue();
      assertFalse(jSONScanner1.isEOF());
      assertEquals(2, jSONScanner1.token());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('d', jSONScanner1.getCurrent());
      assertEquals((-2544), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals(3.0F, float0, 0.01F);
      
      String string1 = jSONScanner1.tokenName();
      assertFalse(jSONScanner1.isEOF());
      assertEquals(2, jSONScanner1.token());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('d', jSONScanner1.getCurrent());
      assertEquals((-2544), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      assertNotNull(string1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4#vpg");
      assertEquals(0, jSONScanner0.pos());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("IgnoreAutoType");
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('I', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      
      boolean boolean0 = jSONScanner1.scanFieldBoolean(charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('I', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner2 = new JSONScanner("4#vpg", 10);
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(10, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('4', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 114);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      boolean boolean2 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JSONScanner jSONScanner3 = new JSONScanner("4#vpg", (-1));
      assertFalse(jSONScanner3.isEOF());
      assertEquals((-1), jSONScanner3.getFeatures());
      assertEquals(0, jSONScanner3.matchStat());
      assertEquals('4', jSONScanner3.getCurrent());
      assertEquals(0, jSONScanner3.token());
      assertEquals(0, jSONScanner3.pos());
      assertEquals("", jSONScanner3.stringDefaultValue());
      assertEquals(0, jSONScanner3.matchStat);
      assertNotNull(jSONScanner3);
      assertFalse(jSONScanner3.equals((Object)jSONScanner0));
      assertFalse(jSONScanner3.equals((Object)jSONScanner1));
      assertFalse(jSONScanner3.equals((Object)jSONScanner2));
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '3';
      charArray1[1] = '$';
      charArray1[2] = '3';
      charArray1[3] = '3';
      charArray1[4] = '3';
      charArray1[5] = '3';
      charArray1[6] = '3';
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('4', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONScanner0, jSONScanner3);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(charArray0, charArray1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner3));
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0.0, double0, 0.01);
      
      int int0 = jSONScanner2.intValue();
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(10, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('4', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner3);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner3));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, int0);
      
      int int1 = jSONScanner2.intValue();
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(10, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals('4', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner3);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertTrue(int1 == int0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner3));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n*F{", 0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(563);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = jSONScanner0.scanBoolean('\"');
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '-';
      charArray0[2] = 'R';
      charArray0[3] = '-';
      charArray0[4] = '\"';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = JSONScanner.charArrayCompare("n*F{", 72, charArray0);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 714, 'R');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanString('-');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      assertEquals("-R-", string0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(82, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\"', '-', 'R', '-', '\"'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      jSONScanner0.skipComment();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("$O*D%+t,q1Fh");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      Date date0 = jSONReaderScanner0.scanDate('#');
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      
      char char0 = '\'';
      double double0 = jSONReaderScanner0.scanDouble('\'');
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0.0F, float0, 0.01F);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char1 = 'n';
      jSONReaderScanner1.scanStringArray(linkedList0, 'n');
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), 1635);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char char0 = '2';
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      char char1 = '.';
      charArray0[6] = '\'';
      charArray0[7] = '2';
      charArray0[8] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\'', 2755);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2755, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\'', '2', '2', '\'', '\'', '\u0000', '\'', '2', '('}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(2755);
      assertNotNull(symbolTable0);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(2755, 2755);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2755, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\'', '2', '2', '\'', '\'', '\u0000', '\'', '2', '('}, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
