/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 16:45:53 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (-2182.753));
      jSONObject1.put("null", (Map) null);
      String string0 = jSONObject0.toString(12, 12);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-126));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("S`MMHN,<A#L", (double) (byte) (-126));
      jSONObject0.toString((int) (byte) (-126));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double(1557.4833514);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getString("r;ov/]yytu?9uj;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r;ov/]yytu?9uj;\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      Byte byte0 = new Byte((byte)98);
      hashMap0.put((JSONObject) null, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.remove("{}");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(13);
      Byte byte0 = new Byte((byte)46);
      hashMap0.put(integer0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("z}", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("5&~1`gku,", 0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("z}", 2);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<JSONArray, Short> hashMap0 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}", (-329));
      assertEquals((-329), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt((String) null, 447);
      assertEquals(447, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("YSVGNOd52$D_o|", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("my |3GQX", (-1488.870530671024));
      assertEquals((-1488.870530671024), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 288.13784864);
      assertEquals(288.13784864, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "\"\"");
      Byte byte0 = Byte.valueOf((byte)13);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(1.0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)47);
      JSONObject jSONObject1 = jSONObject0.put("UfNM%}", (Object) short0);
      JSONObject jSONObject2 = jSONObject1.put("int", 0L);
      JSONObject jSONObject3 = jSONObject1.put("B2JQvQ{$vTj", true);
      Double double0 = new Double(0.0);
      jSONObject3.putOpt("lJdAF4%qXb=482MN+PN", double0);
      // Undeclared exception!
      jSONObject2.toString(2412, 125);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 2815L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double((-1889.13638099235));
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.put((String) null, (-235));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "t{l)vLk");
      try { 
        jSONObject0.getLong("t{l)vLk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t{l)vLk\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("java.lang.Byte@0000000001", stringArray0);
      try { 
        jSONObject0.getDouble("java.lang.Byte@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Byte@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.accumulate("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(1072L);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(long0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, 0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((int) (short)32, 120);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.quote("wheel.json.JSONTokener");
      assertEquals("\"wheel.json.JSONTokener\"", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(506L);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, long0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optString("i*x?M~fsd&wR\"h'=x9~", "java.lang.Long@00000000060");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("getgetChars");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      try { 
        jSONObject1.getInt("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("ma>v>m&/[zB_hE|fZ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float(2977.12889715809);
      JSONObject jSONObject1 = jSONObject0.append("2977.12889715809", float0);
      jSONObject1.put("getquote", (Map) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("&FBP:^-nQb", (Object) hashMap0);
      String string0 = jSONObject1.toString((-2392));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.valueToString(jSONObject0, 1, 1);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 32, 32);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("OCC=6#ynB'Bx}M", (Object) null);
      String string0 = jSONObject0.toString(480, (-2812));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("OCC=6#ynB'Bx}M", (Object) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+|~8c3");
      jSONObject0.toString(8, 537);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "t{l)vLk");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(47, (Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(48, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(1.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "@<WJ:+Q`C7a7DV");
      try { 
        jSONObject0.getJSONObject("@<WJ:+Q`C7a7DV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@<WJ:+Q`C7a7DV\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("K?IJY&/v}c{", 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"java.lang.String@0000000001\"";
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.put((String) null, (double) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+|~8c3");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("47..", (Collection) linkedList0);
      jSONObject0.optString("47..", "47..");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optJSONObject("null");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float(2977.12889715809);
      jSONObject0.append("2977.12889715809", float0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("2977.12889715809");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("`+2/]w-H[]mfvg\"m", 0L);
      double double0 = jSONObject1.optDouble("`+2/]w-H[]mfvg\"m");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Short short0 = new Short((short) (-28951));
      jSONObject0.put("] is not a JSONArray.", (int) (short) (-28951));
      JSONObject jSONObject1 = jSONObject0.append("}KmCu-'I#@Dp", object0);
      jSONObject0.names();
      jSONObject1.get("}KmCu-'I#@Dp");
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Short short0 = new Short((short) (-942));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)47);
      jSONObject0.put("UfNM%}", (Object) short0);
      long long0 = jSONObject0.getLong("UfNM%}");
      assertEquals(47L, long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("O1Ut", true);
      long long0 = jSONObject0.optLong("O1Ut", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long((-743L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.putOpt("getparseByte", jSONObject0);
      jSONObject0.getJSONObject("getparseByte");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+|~8c3");
      jSONObject0.put("+|~8c3", (-1L));
      try { 
        jSONObject0.getJSONObject("+|~8c3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+|~8c3\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer(39);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("0");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("Z~q-", (Object) double0);
      try { 
        jSONObject1.getJSONArray("Z~q-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z~q-\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", 2047.87);
      int int0 = jSONObject1.optInt("is");
      assertEquals(2047, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("z);(v", (-228L));
      double double0 = jSONObject1.getDouble("z);(v");
      assertEquals((-228.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Byte byte0 = new Byte((byte)97);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("lo", (-1.0));
      boolean boolean0 = jSONObject0.optBoolean("lo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("aH[", "aH[");
      try { 
        jSONObject1.getBoolean("aH[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aH[\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Long long0 = new Long((-743L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put(",WlIb|,!^wk", true);
      boolean boolean0 = jSONObject0.getBoolean(",WlIb|,!^wk");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("toO", false);
      boolean boolean0 = jSONObject1.optBoolean("toO", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      int int0 = jSONObject1.optInt("] is not a Boolean.");
      assertEquals(4, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2977.12889715809);
      assertEquals("2977.12889715809", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2812));
      assertEquals("-2812", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      jSONObject1.append("{}", linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 1224L);
      Iterator iterator0 = jSONObject1.keys();
      try { 
        jSONObject0.append("{}", iterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gettoString", (Object) null);
      Boolean boolean0 = new Boolean("gettoString");
      jSONObject1.accumulate("gettoString", boolean0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = Integer.decode("1");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("1", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      jSONObject1.accumulate("] is not a Boolean.", (Object) null);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{x]WgYJmXp2a%OrhJ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {x]WgYJmXp2a%OrhJ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{r&cWe.vQco=`ECrr#(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 19 of {r&cWe.vQco=`ECrr#(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{`:-+HN9yHMbn}Gc");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>(9);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("0", object0);
      boolean boolean0 = jSONObject0.isNull("0");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>(9);
      Float float0 = new Float((-3133.66));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("0", float0);
      boolean boolean0 = jSONObject0.isNull("0");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Short short0 = new Short((short) (-942));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string0 = jSONObject0.toString(1156);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("equ");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Short short0 = new Short((short) (-942));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.put("lBrMT#\"9", (int) (short) (-942));
      jSONObject0.put("] is not a Boolean.", false);
      String string0 = jSONObject0.toString(1156);
      long long0 = jSONObject0.optLong(string0, (long) (short) (-942));
      assertEquals((-942L), long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 5107L);
      assertEquals(5107L, long0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Short short0 = new Short((short)1471);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string0 = jSONObject0.optString("getlowestOneBit");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("null", (Map) null);
      jSONObject1.optJSONObject("null");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject$Null", (-4650L));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float(1.0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float((-449.771F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.has("] is not a Boolean.");
      assertEquals(8, jSONObject0.length());
  }
}
