/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:30:00 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.TypeUtils;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaBeanInfo_ESTest extends JavaBeanInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      Class<Annotation> class1 = Annotation.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Method> class0 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Method> class0 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, true);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<AtomicInteger> class0 = AtomicInteger.class;
      Class<Void> class1 = Void.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Constructor<Integer>[] constructorArray0 = null;
      // Undeclared exception!
      try { 
        JavaBeanInfo.getCreatorConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String[] stringArray0 = new String[0];
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("dou").when(jSONType0).typeKey();
      doReturn("E[bQOMb").when(jSONType0).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class0, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      Class<Void> class1 = Void.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0, false, true);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      Class<String> class1 = String.class;
      LinkedList<FieldInfo> linkedList2 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo1 = new JavaBeanInfo(class1, (Class<?>) null, javaBeanInfo0.creatorConstructor, javaBeanInfo0.creatorConstructor, (Method) null, (Method) null, (JSONType) null, linkedList0);
      UnaryOperator<FieldInfo> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      linkedList2.replaceAll(unaryOperator0);
      Class<Void> class2 = Void.class;
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class2, (JSONType) null);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<Object> class0 = Object.class;
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "&";
      stringArray0[1] = "&";
      stringArray0[2] = "&";
      stringArray0[3] = "&";
      Class<String> class2 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      doReturn((Object) stringArray0, (Object) stringArray0).when(jSONType0).orders();
      doReturn("&", "&").when(jSONType0).typeKey();
      doReturn("&", "com").when(jSONType0).typeName();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class1, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      JavaBeanInfo.add(linkedList0, (FieldInfo) null);
      Class<AtomicBoolean> class3 = AtomicBoolean.class;
      Class<Method> class4 = Method.class;
      JavaBeanInfo.getBuilderClass(javaBeanInfo0.jsonType);
      JavaBeanInfo javaBeanInfo1 = null;
      try {
        javaBeanInfo1 = new JavaBeanInfo(class3, class4, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, javaBeanInfo0.jsonType, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<String> class1 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Class<String> class2 = String.class;
      Class<Integer> class3 = Integer.class;
      String[] stringArray0 = new String[19];
      stringArray0[0] = "sh";
      stringArray0[1] = "X!T5JaA/6NDXqmaD|";
      stringArray0[2] = "X!T5JaA/6NDXqmaD|";
      Class<String> class4 = String.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class4).when(jSONType1).builder();
      doReturn(stringArray0).when(jSONType1).orders();
      doReturn("X!T5JaA/6NDXqmaD|", (String) null).when(jSONType1).typeKey();
      doReturn("sh", (String) null).when(jSONType1).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class2, class3, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType1, linkedList0);
      JavaBeanInfo.getBuilderClass(class1, javaBeanInfo0.jsonType);
      Class<AtomicLong> class5 = AtomicLong.class;
      Class<String> class6 = String.class;
      FieldInfo fieldInfo0 = new FieldInfo("m", class5, class6, class3, (Field) null, 2, 5, 1140);
      linkedList0.add(fieldInfo0);
      Class<Method> class7 = Method.class;
      JavaBeanInfo javaBeanInfo1 = null;
      try {
        javaBeanInfo1 = new JavaBeanInfo(class6, class7, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, javaBeanInfo0.jsonType, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<Object> class0 = Object.class;
      Class<AtomicBoolean> class1 = AtomicBoolean.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(jSONType0).orders();
      doReturn("").when(jSONType0).typeKey();
      doReturn("").when(jSONType0).typeName();
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class0, class1, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType0, linkedList0);
      Class<Method> class2 = Method.class;
      Constructor<Method>[] constructorArray0 = (Constructor<Method>[]) Array.newInstance(Constructor.class, 0);
      Constructor<?> constructor0 = JavaBeanInfo.getDefaultConstructor(class2, constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      Class<Method> class1 = Method.class;
      Class<Integer> class2 = Integer.class;
      JavaBeanInfo.build((Class<?>) class2, (Type) class1, propertyNamingStrategy0, true, true);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      JavaBeanInfo.build(javaBeanInfo0.clazz, (Type) null, (PropertyNamingStrategy) null, true, true);
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      JavaBeanInfo.getBuilderClass((JSONType) null);
      Class<?> class3 = JavaBeanInfo.getBuilderClass((JSONType) null);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<String> class1 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class2);
      
      String[] stringArray0 = new String[11];
      stringArray0[0] = "sh";
      stringArray0[1] = "0X!T5JaA/6NDXqmaD|";
      stringArray0[2] = "0X!T5JaA/6NDXqmaD|";
      Class<String> class3 = String.class;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class3).when(jSONType1).builder();
      doReturn((Object) stringArray0, (Object) stringArray0).when(jSONType1).orders();
      doReturn("0X!T5JaA/6NDXqmaD|", "[B").when(jSONType1).typeKey();
      doReturn("sh", "sh").when(jSONType1).typeName();
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<AtomicLong> class4 = AtomicLong.class;
      JavaBeanInfo javaBeanInfo0 = new JavaBeanInfo(class2, class4, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, jSONType1, linkedList0);
      Class<Integer> class5 = Integer.class;
      Class<?> class6 = JavaBeanInfo.getBuilderClass(class5, javaBeanInfo0.jsonType);
      assertNotNull(class6);
      
      Class<String> class7 = String.class;
      FieldInfo fieldInfo0 = new FieldInfo("0X!T5JaA/6NDXqmaD|", class7, class7, javaBeanInfo0.builderClass, (Field) null, 443, (-1946), (-1314));
      linkedList0.add(fieldInfo0);
      Class<AtomicBoolean> class8 = AtomicBoolean.class;
      JavaBeanInfo javaBeanInfo1 = new JavaBeanInfo(class1, class8, (Constructor<?>) null, (Constructor<?>) null, (Method) null, (Method) null, javaBeanInfo0.jsonType, linkedList0);
      assertEquals("class java.lang.String", class2.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      Class<Method> class1 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      Class<Integer> class2 = Integer.class;
      JavaBeanInfo.build((Class<?>) class2, (Type) class1, propertyNamingStrategy1, true, true);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<String> class3 = String.class;
      Class<Integer> class4 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("java.lang.Integer", class3, class4, javaBeanInfo0.clazz, (Field) null, 0, 1, 61);
      boolean boolean0 = fieldInfo0.jsonDirect;
      Class<AtomicInteger> class5 = AtomicInteger.class;
      JavaBeanInfo.getBuilderClass(class5, jSONType0);
      JavaBeanInfo.build((Class<?>) class3, (Type) javaBeanInfo0.clazz, propertyNamingStrategy0);
      TypeUtils.compatibleWithJavaBean = false;
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      linkedList0.add(fieldInfo0);
      JavaBeanInfo.build((Class<?>) class3, (Type) fieldInfo0.declaringClass, propertyNamingStrategy1, true, true);
      Class<String> class6 = String.class;
      FieldInfo fieldInfo1 = new FieldInfo("java.lang.Integer", javaBeanInfo0.clazz, class6, fieldInfo0.fieldType, (Field) null, (-2920), 869, 512);
      Class<Void> class7 = Void.class;
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo1 = JavaBeanInfo.build((Class<?>) class7, (Type) null, propertyNamingStrategy2);
      javaBeanInfo1.creatorConstructorParameterTypes = javaBeanInfo0.creatorConstructorParameterTypes;
      JavaBeanInfo.add(linkedList0, fieldInfo1);
      Class<?> class8 = JavaBeanInfo.getBuilderClass((JSONType) null);
      assertNull(class8);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<FieldInfo> class0 = FieldInfo.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, false);
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      Class<Method> class1 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      Class<Integer> class2 = Integer.class;
      JavaBeanInfo.build((Class<?>) class2, (Type) class1, propertyNamingStrategy1, true, true);
      LinkedList<FieldInfo> linkedList0 = new LinkedList<FieldInfo>();
      Class<String> class3 = String.class;
      Class<Integer> class4 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("java.lang.Integer", class3, class4, javaBeanInfo0.clazz, (Field) null, 0, 1, 61);
      boolean boolean0 = fieldInfo0.jsonDirect;
      Class<AtomicInteger> class5 = AtomicInteger.class;
      JavaBeanInfo.getBuilderClass(class5, jSONType0);
      JavaBeanInfo.build((Class<?>) class3, (Type) javaBeanInfo0.clazz, propertyNamingStrategy0);
      TypeUtils.compatibleWithJavaBean = false;
      LinkedList<FieldInfo> linkedList1 = new LinkedList<FieldInfo>();
      linkedList0.add(fieldInfo0);
      JavaBeanInfo.build((Class<?>) class3, (Type) fieldInfo0.declaringClass, propertyNamingStrategy1, true, true);
      Class<String> class6 = String.class;
      FieldInfo fieldInfo1 = new FieldInfo("java.lang.Integer", javaBeanInfo0.clazz, class6, fieldInfo0.fieldType, (Field) null, 22, 869, 512);
      JavaBeanInfo.add(linkedList0, fieldInfo1);
      Class<Void> class7 = Void.class;
      PropertyNamingStrategy propertyNamingStrategy2 = PropertyNamingStrategy.SnakeCase;
      JavaBeanInfo javaBeanInfo1 = JavaBeanInfo.build((Class<?>) class7, (Type) null, propertyNamingStrategy2);
      javaBeanInfo1.creatorConstructorParameterTypes = javaBeanInfo0.creatorConstructorParameterTypes;
      JavaBeanInfo.add(linkedList0, fieldInfo1);
      Class<?> class8 = JavaBeanInfo.getBuilderClass((JSONType) null);
      assertNull(class8);
  }
}
