/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:08:17 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.File;
import java.io.PushbackReader;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Consumer;
import java.util.function.LongBinaryOperator;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("7V*AtbhYccV{|S!S");
      assertEquals("7v*atbhyccv{|s!s", locale0.getLanguage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("7V*AtbhYccV{|S!S", classLoader1, true);
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "C>G$.";
      TypeUtils.fnv1a_64("C>G$.");
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.fnv1a_64_lower("C>G$.");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("C>G$.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"C>G$.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getSerializeFeatures(class0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("2/=G", hashtable0);
      String string0 = "L";
      MockThread mockThread0 = new MockThread("L");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.isPath(class0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(false);
      imageCapabilities1.clone();
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities1, imageCapabilities0, bufferCapabilities_FlipContents0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      LinkedHashMap<OutOfMemoryError, SQLWarning> linkedHashMap0 = new LinkedHashMap<OutOfMemoryError, SQLWarning>();
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("clazz lis null");
      linkedHashMap0.put(outOfMemoryError0, (SQLWarning) null);
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("clazz lis null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"clazz lis null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.toLocale("L");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "UEJ^";
      stringArray0[1] = "getSuppressed";
      stringArray0[2] = "hiUE";
      stringArray0[3] = "(jC|>xJfP/53I";
      stringArray0[4] = "KIjx@G";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("KIjx@G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"KIjx@G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.fnv1a_64("wait");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-90);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.clearDeserializers();
      parserConfig0.addDeny("fastjson.parser.autoTypeAccept");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      propertyNamingStrategy0.translate("fastjson.parser.autoTypeSupport");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      parserConfig0.checkAutoType("fastjson.parser.auto-type-support", (Class<?>) class0, (int) (byte) (-69));
      TypeUtils.unwrapOptional((Type) null);
      InstantiationError instantiationError0 = new InstantiationError();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, (PropertyNamingStrategy) null);
      TypeUtils.castToDate((Object) null);
      Hashtable<IllegalStateException, Insets> hashtable1 = new Hashtable<IllegalStateException, Insets>();
      TypeUtils.castToDate((Object) null);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.NoSuchFieldError: fastjson.parser.autoTypeSupport
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.isPath(class0);
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("");
      BreakIterator.getWordInstance(locale0);
      Locale.getISOCountries();
      BreakIterator.getLineInstance();
      BreakIterator.getSentenceInstance(locale0);
      Class<String> class0 = String.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(verifyError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.setDefaultAssertionStatus(false);
      classLoader0.clearAssertionStatus();
      classLoader0.setClassAssertionStatus("can not cast to Date, value : ", false);
      TypeUtils.loadClass("L", classLoader0);
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", "L");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      Short short0 = new Short((short)74);
      TypeUtils.castToInt(short0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TypeUtils.decapitalize("hf");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("hf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : hf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.decapitalize("WRITE_MAP_NULL_FEATURES");
      TypeUtils.fnv1a_64("WRITE_MAP_NULL_FEATURES");
      TypeUtils.decapitalize("WRITE_MAP_NULL_FEATURES");
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.fnv1a_64_lower("4=~<ub)>4/(1Bx2[<YT");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      TypeUtils.isPath(class0);
      TypeUtils.loadClass("", (ClassLoader) aSMDeserializerFactory0.classLoader);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberFormatException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.getSerializeFeatures(class0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      MockThread mockThread0 = new MockThread("L");
      ClassLoader.getSystemClassLoader();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.fnv1a_64_lower("O:;++");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.loadClass("2/=G", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "O:;++", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      String string0 = null;
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      String string1 = "Ljava.awt.Font";
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("Ljava.awt.Font", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.fnv1a_64("getXclone");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("getXclone");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getXclone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      TypeUtils typeUtils0 = new TypeUtils();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("Ljava.awt.Point");
      MockDate mockDate0 = new MockDate();
      MockThread mockThread0 = new MockThread("name");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("iJ%JK=Jd7thOU<Rv].", classLoader0, false);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getClass((Type) class0);
      MockDate mockDate0 = new MockDate(193, 49, 49, Integer.MAX_VALUE, 49, 193);
      Time time0 = TypeUtils.castToSqlTime(mockDate0);
      assertEquals("07:52:13", time0.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null);
      MockThread mockThread1 = new MockThread(mockThread0, "Ljava.awt.Rectangle");
      MockThread.reset();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      mockThread1.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("L", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.instrumentation.InstrumentingClassLoader@3620270c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.unwrapOptional(type0);
      Type type2 = TypeUtils.getGenericParamType(type1);
      assertSame(type2, type1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getClass(type0);
      TypeUtils.getRawClass(class1);
      Type type1 = TypeUtils.getGenericParamType(class0);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.decapitalize("hf");
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("hf", hashtable0);
      MockThread mockThread0 = new MockThread("hf");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<ClassLoader> class0 = ClassLoader.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isGenericParamType(class0);
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException("fastjson.parser.autoTypeAccept");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(illegalMonitorStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLRecoverableException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.isKotlin(class0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      TypeUtils.isKotlin(class1);
      Class<Long> class2 = Long.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(1981, 1981);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(weakHashMap0);
      treeMap0.putIfAbsent("getMetaClass", "getMetaClass");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) treeMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockThread mockThread0 = new MockThread((Runnable) null);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("NULL", treeMap0);
      MockThread mockThread1 = new MockThread("NULL");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<InternalError> class0 = InternalError.class;
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class0, class1, parameterizedTypeImpl0, (Field) null, 1170, 1170, (-3631));
      parserConfig0.getDeserializer(fieldInfo0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) parserConfig0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie("mr}5U#~\r_!", "mr}5U#~\r_!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal cookie name
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.toLocale("[F");
      Class<Short> class0 = Short.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.loadClass("Q;ZC2XLk");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("Q;ZC2XLk");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Q;ZC2XLk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null);
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockDate> class1 = MockDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.util.MockDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("UnicodeLocaleAttributes", decimalFormatSymbols0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(decimalFormat0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.fnv1a_64_lower("4=~<ub)>4/(1Bx2[<YT");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.isPath(class0);
      TypeUtils.loadClass("4=~<ub)>4/(1Bx2[<YT", (ClassLoader) aSMDeserializerFactory0.classLoader);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isProxy(class0);
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.isPath(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class com.alibaba.fastjson.util.ParameterizedTypeImpl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<Float> class0 = Float.TYPE;
      TypeUtils.getRawClass(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext(38, roundingMode0);
      String string0 = ParserConfig.DENY_PROPERTY;
      BigDecimal bigDecimal0 = new BigDecimal((-1054), mathContext0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-1054));
      TypeUtils.castToString(stringIndexOutOfBoundsException0);
      long long0 = new Integer((-1054));
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      TypeUtils.unwrapOptional(class2);
      TypeUtils.getGenericParamType(class0);
      BatchUpdateException batchUpdateException0 = TypeUtils.cast((Object) null, (Type) class1, (ParserConfig) null);
      assertNull(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Boolean boolean1 = Boolean.TRUE;
      TypeUtils.isHibernateInitialized(boolean1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.isNumber(":");
      TypeUtils.isHibernateInitialized(":");
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.decapitalize(":");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null);
      MockThread mockThread1 = new MockThread(mockThread0, "Ljava.awt.Rectangle");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("I", classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.toLocale("NULL_CAUSE_MESSAGE");
      Class<SQLException> class0 = SQLException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.decapitalize("dXovy0Q-w");
      TypeUtils.loadClass("", (ClassLoader) null);
      TypeUtils.getGenericParamType((Type) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("", "stackTrace");
      hashtable0.clear();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      hashtable0.put("java.beans.Transient", "java.beans.Transient");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, hashtable0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<RenderingHints> class0 = RenderingHints.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classLoader0.setDefaultAssertionStatus(true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = DateFormat.MONTH_FIELD;
      TypeUtils.getGenericParamType(class0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Clock clock0 = MockClock.systemDefaultZone();
      Constructor<TimeUnit>[] constructorArray0 = (Constructor<TimeUnit>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        MockClock.tick(clock0, (Duration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // tickDuration
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      TypeUtils.getSerializeFeatures(class0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.setAsmEnable(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "~fbJC P]lBE.,U}V_Q", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.fnv1a_64("timezoneOffset");
      TypeUtils.loadClass("q4uUv1H]?\"f;", (ClassLoader) null, false);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", hashMap0);
      parserConfig0.setAsmEnable(false);
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      TypeUtils.decapitalize("{[1,d4lvKhtFH~");
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("Ljava.util.concurrent.ConcurrentSkipListMap");
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.cast((Object) map0, (Type) class1, parserConfig0);
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept", classLoader0, true);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("/**/");
      String string0 = File.pathSeparator;
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Double> class0 = Double.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      TypeUtils.unwrapOptional((Type) null);
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "4=~<ub)>4/(1Bx2[<YT";
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.clearDeserializers();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      String string1 = ";wO*rqyzb[bUbLvj+";
      ParserConfig parserConfig1 = ParserConfig.global;
      assertSame(parserConfig1, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.deny");
      assertSame(parserConfig1, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.isAutoTypeSupport());
      
      Class<StackTraceElement> class0 = StackTraceElement.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("deserialze");
      assertEquals("deserialze", stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException: deserialze", stringIndexOutOfBoundsException0.toString());
      assertNotNull(stringIndexOutOfBoundsException0);
      
      Class<String> class0 = String.class;
      String string0 = TypeUtils.castToJavaBean((Object) stringIndexOutOfBoundsException0, class0);
      assertEquals("deserialze", stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException: deserialze", stringIndexOutOfBoundsException0.toString());
      assertNotNull(string0);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertNotNull(class1);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.String", class2.toString());
      assertNotNull(class2);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(weakHashMap0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class3.equals((Object)class1));
      assertNotSame(class3, class1);
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      boolean boolean1 = TypeUtils.isNumber("can not cast oracle.sql.DATE to Date");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getRawClass(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      Class class3 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class3.equals((Object)class1));
      assertNotSame(class3, class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isEnum());
      assertEquals("class [S", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isArray());
      assertNotNull(class3);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedHashSet<BufferCapabilities> linkedHashSet0 = new LinkedHashSet<BufferCapabilities>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : zh_TW
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("UEJ^", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("(jC|>xJfP/53I", class1, class1, class1, (Field) null, 154, 154, 154);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(154, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(154, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals("(jC|>xJfP/53I", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(154, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(154, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals("(jC|>xJfP/53I", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("(jC|>xJfP/53I", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(154, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(154, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(154, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals("(jC|>xJfP/53I", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("(jC|>xJfP/53I", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(154, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(method0);
      
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
      
      Method method1 = beanContext0.getMethod();
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(154, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(154, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertEquals("(jC|>xJfP/53I", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("(jC|>xJfP/53I", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(154, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(method1);
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("UEJ^", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("(jC|>xJfP/53I", class1, class1, class1, (Field) null, 154, 154, 154);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(154, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(154, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals("(jC|>xJfP/53I", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(154, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(154, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals("(jC|>xJfP/53I", fieldInfo0.toString());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals(154, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertEquals("(jC|>xJfP/53I", beanContext0.getName());
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(154, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(154, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals("(jC|>xJfP/53I", fieldInfo0.toString());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals(154, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertEquals("(jC|>xJfP/53I", beanContext0.getName());
      assertNull(method0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<IllegalMonitorStateException> class2 = IllegalMonitorStateException.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      IllegalMonitorStateException illegalMonitorStateException0 = TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class2, parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, treeMap0.size());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      assertNotNull(illegalMonitorStateException0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "x;63_,j1)Zx_%dW=";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertEquals("class java.sql.Timestamp", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      simplePropertyPreFilter0.setMaxLevel(3550);
      assertEquals(3550, simplePropertyPreFilter0.getMaxLevel());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("<D\"6!m%nWk}/");
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      TreeMap<Boolean, SQLTransactionRollbackException> treeMap0 = new TreeMap<Boolean, SQLTransactionRollbackException>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) parameterizedTypeImpl0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl1);
      
      ParserConfig parserConfig2 = new ParserConfig(false);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertNotNull(parserConfig2);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"URLs\":[\"java.net.URL@0000000324\"]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.clearDeserializers();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.deny");
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.isAutoTypeSupport());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate("4=~<ub)>4/(1Bx2[<YT");
      assertEquals("4=~<ub)>4/(1-bx2[<-y-t", string0);
      assertNotNull(string0);
      
      String string1 = propertyNamingStrategy0.translate(";wO*rqyzb[bUbLvj+");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";w-o*rqyzb[b-ub-lvj+", string1);
      assertNotNull(string1);
      
      Class<InterruptedException> class0 = InterruptedException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertEquals("class java.lang.InterruptedException", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      byte[] byteArray0 = TypeUtils.castToBytes("4=~<ub)>4/(1Bx2[<YT");
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";wO*rqyzb[bUbLvj+", (Type) class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<AtomicInteger> class2 = AtomicInteger.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      String string0 = identityHashMap0.put((String) null, "L");
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap0, true);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isPath(class1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      Class<?> class3 = TypeUtils.loadClass("<TiNGy");
      assertNull(class3);
      
      Class<EnumDeserializer> class4 = EnumDeserializer.class;
      Class<DataTruncation> class5 = DataTruncation.class;
      boolean boolean2 = TypeUtils.isPath(class5);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = TypeUtils.getParserFeatures(class4);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertNotNull(imageCapabilities0);
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, true);
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      ImageCapabilities imageCapabilities1 = new ImageCapabilities(true);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertTrue(imageCapabilities1.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertNotNull(imageCapabilities1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      ImageCapabilities imageCapabilities2 = (ImageCapabilities)imageCapabilities1.clone();
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities1));
      assertNotSame(imageCapabilities1, imageCapabilities2);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      assertNotSame(imageCapabilities2, imageCapabilities0);
      assertNotSame(imageCapabilities2, imageCapabilities1);
      assertTrue(imageCapabilities1.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertFalse(imageCapabilities2.isTrueVolatile());
      assertTrue(imageCapabilities2.isAccelerated());
      assertNotNull(imageCapabilities2);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities1, (BufferCapabilities.FlipContents) null);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities2));
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities2));
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities1.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertFalse(bufferCapabilities0.isPageFlipping());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertNotNull(bufferCapabilities0);
      
      boolean boolean0 = TypeUtils.isNumber("Oo@:>B96Pz'");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.util.TypeUtils@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Hashtable<IllegalStateException, Insets> hashtable0 = new Hashtable<IllegalStateException, Insets>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("NULL_CAUSE_MESSAGE");
      assertEquals("MESSAGE", locale0.getVariant());
      assertEquals("null", locale0.getLanguage());
      assertEquals("CAUSE", locale0.getCountry());
      assertEquals("null_CAUSE_MESSAGE", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("NULL_CAUSE_MESSAGE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("timezoneOffset");
      assertEquals((-2789874707046034427L), long0);
      
      Class<?> class0 = TypeUtils.loadClass("q4uUv1H]?\"f;", (ClassLoader) null, false);
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      assertNotNull(weakHashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("uYJ/s}@T9T", weakHashMap0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("getMetaClass", (Class<?>) null, class2, class2, (Field) null, (-674), 182, 525);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(525, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(182, fieldInfo0.serialzeFeatures);
      assertNull(fieldInfo0.getFormat());
      assertEquals("getMetaClass", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(525, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(182, fieldInfo0.serialzeFeatures);
      assertNull(fieldInfo0.getFormat());
      assertEquals("getMetaClass", fieldInfo0.toString());
      assertEquals("getMetaClass", beanContext0.getName());
      assertEquals(182, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertNotNull(beanContext0);
      
      Class<?> class3 = beanContext0.getBeanClass();
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(525, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(182, fieldInfo0.serialzeFeatures);
      assertNull(fieldInfo0.getFormat());
      assertEquals("getMetaClass", fieldInfo0.toString());
      assertEquals("getMetaClass", beanContext0.getName());
      assertEquals(182, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals("class com.alibaba.fastjson.util.ParameterizedTypeImpl", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Class<?> class4 = TypeUtils.getRawClass(class3);
      assertSame(class3, class4);
      assertSame(class4, class3);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(525, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(182, fieldInfo0.serialzeFeatures);
      assertNull(fieldInfo0.getFormat());
      assertEquals("getMetaClass", fieldInfo0.toString());
      assertEquals("getMetaClass", beanContext0.getName());
      assertEquals(182, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals("class com.alibaba.fastjson.util.ParameterizedTypeImpl", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class4.isPrimitive());
      assertEquals("class com.alibaba.fastjson.util.ParameterizedTypeImpl", class4.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isEnum());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertNotNull(class4);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(fieldInfo0.fieldClass);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(525, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(182, fieldInfo0.serialzeFeatures);
      assertNull(fieldInfo0.getFormat());
      assertEquals("getMetaClass", fieldInfo0.toString());
      assertNull(stringArray0);
      
      Class class5 = (Class)TypeUtils.getCollectionItemType(fieldInfo0.fieldClass);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(525, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(182, fieldInfo0.serialzeFeatures);
      assertNull(fieldInfo0.getFormat());
      assertEquals("getMetaClass", fieldInfo0.toString());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertEquals("class java.lang.Object", class5.toString());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      assertNotNull(class5);
      
      long long1 = TypeUtils.fnv1a_64_lower("Ljava.awt.Color");
      assertFalse(long1 == long0);
      assertEquals(3667406880279837568L, long1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      boolean boolean1 = TypeUtils.isPath(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("2/=G");
      assertEquals("2/=G", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "2/=G");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("2/=G", threadGroup0.getName());
      assertEquals("2/=G", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "2/=G");
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertEquals("2/=G", threadGroup0.getName());
      assertEquals("2/=G", threadGroup1.getName());
      assertEquals("2/=G", threadGroup2.getName());
      assertNotNull(threadGroup2);
      
      MockThread mockThread0 = new MockThread("EIMCq|:}'*bg@KbJ+");
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(threadGroup2, mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertEquals("2/=G", threadGroup0.getName());
      assertEquals("2/=G", threadGroup1.getName());
      assertEquals("2/=G", threadGroup2.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup2, threadGroup1);
      assertNotSame(threadGroup2, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertEquals("2/=G", threadGroup0.getName());
      assertEquals("2/=G", threadGroup1.getName());
      assertEquals("2/=G", threadGroup2.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertEquals("2/=G", threadGroup0.getName());
      assertEquals("2/=G", threadGroup1.getName());
      assertEquals("2/=G", threadGroup2.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(type0, parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      parserConfig0.clearDeserializers();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.deny");
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate("4=~<ub)>4/(1Bx2[<YT");
      assertEquals("4=~<ub)>4/(1-bx2[<-y-t", string0);
      assertNotNull(string0);
      
      String string1 = propertyNamingStrategy0.translate(";wO*rqyzb[bUbLvj+");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";w-o*rqyzb[b-ub-lvj+", string1);
      assertNotNull(string1);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class0 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";wO*rqyzb[bUbLvj+", (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(mockThread0, "Ljava.awt.Rectangle");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      MockThread.reset();
      long long0 = TypeUtils.fnv1a_64("fi");
      assertEquals(619336241334307088L, long0);
      
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      mockThread0.setUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertNotSame(mockThread0, mockThread1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      Class<?> class0 = TypeUtils.loadClass("java.lang.Comparable", classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.lang.Comparable", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertNotNull(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNotNull(hashtable1);
      
      Field field1 = ParserConfig.getFieldFromCache("2/=G", hashtable1);
      assertTrue(hashtable1.equals((Object)hashtable0));
      assertNotSame(hashtable1, hashtable0);
      assertTrue(hashtable1.isEmpty());
      assertEquals(0, hashtable1.size());
      assertNull(field1);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.getJSONObject("");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNull(jSONObject1);
      
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      String string0 = "2/=G";
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      MockThread mockThread0 = new MockThread("L");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.autoTypeSupport");
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string1 = propertyNamingStrategy0.translate("+(P7}3]CM}ogJ,6m");
      assertFalse(string1.equals((Object)string0));
      assertEquals("+(-p7}3]-c-m}og-j,6m", string1);
      assertNotNull(string1);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      String string2 = propertyNamingStrategy1.translate("java.util.concurrent.ConcurrentSkipListSet");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertEquals("Java.util.concurrent.ConcurrentSkipListSet", string2);
      assertNotNull(string2);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig2 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(parserConfig2);
      
      parserConfig1.setAsmEnable(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(parserConfig1.equals((Object)parserConfig2));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(parserConfig1, parserConfig2);
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "L", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("net.sf.cglib.proxy.Factory");
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "@type");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup0.getName());
      assertEquals("@type", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup0.getName());
      assertEquals("@type", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup0.getName());
      assertEquals("@type", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup0.getName());
      assertEquals("@type", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      
      MockThread.reset();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      mockThread1.setContextClassLoader(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup0.getName());
      assertEquals("@type", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      long long0 = TypeUtils.fnv1a_64("7YR:$6[=K/W");
      assertEquals((-5364839490341461562L), long0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader1, classLoader0);
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup0.getName());
      assertEquals("@type", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(classLoader1);
      
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[nsS]", classLoader1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("(B)Ljava/lang/Byte;", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("getgetCause", class1, class1, class1, (Field) null, (-199), 13, 13);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(13, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(13, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("getgetCause", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(13, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(13, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("getgetCause", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("getgetCause", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(13, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertNotNull(beanContext0);
      
      Class<?> class2 = beanContext0.getBeanClass();
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(13, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(13, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("getgetCause", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("getgetCause", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(13, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertEquals("class java.sql.SQLWarning", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertNotNull(class2);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(genericArrayType0).toString();
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(13, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(13, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("getgetCause", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("getgetCause", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(13, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertEquals("class java.sql.SQLWarning", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertNotNull(type0);
      
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(13, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(13, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("getgetCause", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("getgetCause", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(13, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertEquals("class java.sql.SQLWarning", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertNotNull(type1);
      
      Type type2 = TypeUtils.getGenericParamType(type1);
      assertSame(type0, type1);
      assertSame(type0, type2);
      assertSame(type1, type2);
      assertSame(type1, type0);
      assertSame(type2, type0);
      assertSame(type2, type1);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(13, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(13, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("getgetCause", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("getgetCause", beanContext0.getName());
      assertNull(beanContext0.getFormat());
      assertEquals(13, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals("", beanContext0.getLabel());
      assertEquals("class java.sql.SQLWarning", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertNotNull(type2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = "2/=G";
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertNotNull(timeDeserializer0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("2/=G");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(hashtable0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.clearDeserializers();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.deny");
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate("4=~<ub)>4/(1Bx2[<YT");
      assertEquals("4=~<ub)>4/(1-bx2[<-y-t", string0);
      assertNotNull(string0);
      
      String string1 = propertyNamingStrategy0.translate(";wO*rqyzb[bUbLvj+");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";w-o*rqyzb[b-ub-lvj+", string1);
      assertNotNull(string1);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("interface java.time.chrono.ChronoLocalDate", class1.toString());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isArray());
      assertTrue(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";wO*rqyzb[bUbLvj+", (Type) class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = TypeUtils.fnv1a_64_lower("0^>oTe67-xpIeOIGKy");
      assertEquals((-4225953947936064785L), long0);
      
      Locale locale0 = new Locale("0^>oTe67-xpIeOIGKy", "x;63_,j1)Zx_%dW=", "T");
      assertEquals("0^>ote67-xpieoigky_X;63_,J1)ZX_%DW=_T", locale0.toString());
      assertEquals("T", locale0.getVariant());
      assertEquals("X;63_,J1)ZX_%DW=", locale0.getCountry());
      assertEquals("0^>ote67-xpieoigky", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("x;63_,j1)Zx_%dW=", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'x'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      String string0 = "4=~<ub)>4/(1Bx2[<YT";
      long long0 = TypeUtils.fnv1a_64_lower("4=~<ub)>4/(1Bx2[<YT");
      assertEquals((-1026665568766419764L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      mockThread0.run();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      boolean boolean1 = TypeUtils.isPath(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Object object0 = null;
      Class<MapDeserializer> class1 = MapDeserializer.class;
      MapDeserializer mapDeserializer0 = TypeUtils.cast((Object) null, class1, parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(mapDeserializer0);
      
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      ConcurrentHashMap<SQLNonTransientException, ChronoLocalDate> concurrentHashMap0 = null;
      try {
        concurrentHashMap0 = new ConcurrentHashMap<SQLNonTransientException, ChronoLocalDate>(0, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "x;63_,j1)Zx_%dW=";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.Timestamp", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class2.equals((Object)class1));
      assertNotSame(class2, class1);
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      Class<Float> class3 = Float.TYPE;
      assertFalse(class3.isInterface());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertEquals("float", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      Class<?> class4 = TypeUtils.getRawClass(class2);
      assertFalse(class2.equals((Object)class1));
      assertFalse(class4.equals((Object)class1));
      assertSame(class2, class4);
      assertNotSame(class2, class1);
      assertSame(class4, class2);
      assertNotSame(class4, class1);
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("class java.lang.String", class4.toString());
      assertEquals(17, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertNotNull(class4);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      String string0 = TypeUtils.decapitalize("x;63_,j1)Zx_%dW=");
      assertEquals("x;63_,j1)Zx_%dW=", string0);
      assertNotNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertFalse(class2.equals((Object)class1));
      assertSame(class2, class4);
      assertNotSame(class2, class1);
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      Class<?> class5 = TypeUtils.getClassFromMapping("fastjson.parser.autoTypeSupport");
      assertNull(class5);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = TypeUtils.castToFloat(float0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("jSQDVO?vdJdFq!S7p", "|N_*?Rh1d`:wYfv5}3|", 52);
      assertEquals("jSQDVO?vdJdFq!S7p", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: jSQDVO?vdJdFq!S7p", sQLTimeoutException0.toString());
      assertEquals("|N_*?Rh1d`:wYfv5}3|", sQLTimeoutException0.getSQLState());
      assertEquals(52, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("has", sQLTimeoutException0);
      assertEquals("jSQDVO?vdJdFq!S7p", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: jSQDVO?vdJdFq!S7p", sQLTimeoutException0.toString());
      assertEquals("|N_*?Rh1d`:wYfv5}3|", sQLTimeoutException0.getSQLState());
      assertEquals(52, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: has", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("has", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientConnectionException: has
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      ParserConfig.parserAllFieldToCache(class0, identityHashMap0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(18, identityHashMap0.size());
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNull(stackTraceElementDeserializer0);
      
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLNonTransientConnectionException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.auto-type-support", string0);
      assertNotNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      String string1 = propertyNamingStrategy1.translate("pAHH4d32x9h:]dH#:WU");
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertEquals("pAHH4d32x9h:]dH#:WU", string1);
      assertNotNull(string1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      parserConfig0.setAsmEnable(false);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isAsmEnable());
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      assertNotNull(imageCapabilities0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) imageCapabilities0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      MockThread mockThread0 = new MockThread("L");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate(";Ljava/lang/reflect/Type;)Ljava/lang/Object;");
      assertEquals(";-ljava/lang/reflect/-type;)-ljava/lang/-object;", string0);
      assertNotNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      String string1 = propertyNamingStrategy1.translate("java.util.concurrent.ConcurrentSkipListSet");
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertEquals("Java.util.concurrent.ConcurrentSkipListSet", string1);
      assertNotNull(string1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("2/=G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 2/=G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)16, (byte)22, (byte)22}, byteArray0);
      
      boolean boolean2 = TypeUtils.compatibleWithFieldName;
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("4=~<ub)>4/(1Bx2[<YT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 4=~<ub)>4/(1Bx2[<YT
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      MockThread mockThread0 = new MockThread("L");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.autoTypeSupport");
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      assertNotNull(imageCapabilities0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      assertNotNull(bufferCapabilities_FlipContents0);
      
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      assertFalse(bufferCapabilities0.isMultiBufferAvailable());
      assertTrue(bufferCapabilities0.isPageFlipping());
      assertFalse(bufferCapabilities0.isFullScreenRequired());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      assertNotNull(bufferCapabilities0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isInterface());
      assertFalse(class2.isSynthetic());
      assertEquals("interface java.lang.annotation.Annotation", class2.toString());
      assertFalse(class2.isEnum());
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation1 = TypeUtils.getAnnotation((Class<?>) class0, class3);
      assertSame(class3, class1);
      assertNull(annotation1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "yyyy-MM-dd";
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("getConstructors");
      assertEquals("java.lang.OutOfMemoryError: getConstructors", outOfMemoryError0.toString());
      assertEquals("getConstructors", outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      Class<Byte>[] classArray0 = null;
      parserConfig0.initJavaBeanDeserializers((Class<?>[]) null);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("java.awt.");
      assertEquals("java.lang.IllegalAccessError: java.awt.", illegalAccessError0.toString());
      assertEquals("java.awt.", illegalAccessError0.getMessage());
      assertNotNull(illegalAccessError0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ofPattern("yyyy-MM-dd", locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(dateTimeFormatter0);
      
      // Undeclared exception!
      try { 
        MockLocalTime.parse((CharSequence) "getConstructors", dateTimeFormatter0);
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'getConstructors' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertEquals("long", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals("long", class1.toString());
      assertNotNull(class1);
      
      Locale locale0 = TypeUtils.toLocale("3");
      assertEquals("3", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("3", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BreakIterator breakIterator0 = BreakIterator.getLineInstance();
      assertNotNull(breakIterator0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3");
      assertFalse(boolean0);
      
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      assertNotNull(comparator0);
      
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(comparator0);
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNull(type0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("p*7W9K3B+9nkLv_O");
      assertEquals(7968915404953887858L, long0);
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException((String) null);
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNull(negativeArraySizeException0.getMessage());
      assertNotNull(negativeArraySizeException0);
      
      HttpCookie httpCookie0 = null;
      try {
        httpCookie0 = new HttpCookie((String) null, "/vah");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.HttpCookie", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "x;63_,j1)\\Zx_%dW=";
      Class<Timestamp> class0 = Timestamp.class;
      String[] stringArray0 = new String[10];
      stringArray0[0] = "x;63_,j1)Zx_%dW=";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.Timestamp", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      simplePropertyPreFilter0.setMaxLevel(3550);
      assertEquals(3550, simplePropertyPreFilter0.getMaxLevel());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<SqlDateDeserializer>[] classArray0 = (Class<SqlDateDeserializer>[]) Array.newInstance(Class.class, 7);
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      classArray0[0] = class2;
      Class<SqlDateDeserializer> class3 = SqlDateDeserializer.class;
      classArray0[1] = class3;
      Class<SqlDateDeserializer> class4 = SqlDateDeserializer.class;
      classArray0[3] = class4;
      Class<SqlDateDeserializer> class5 = SqlDateDeserializer.class;
      classArray0[4] = class5;
      Class<SqlDateDeserializer> class6 = SqlDateDeserializer.class;
      classArray0[5] = class6;
      Class<SqlDateDeserializer> class7 = SqlDateDeserializer.class;
      classArray0[6] = class7;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertSame(classLoader0, classLoader1);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addAccept("fastjson.parser.autoTypeAccept");
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      parserConfig0.setAsmEnable(false);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(parserConfig0, parserConfig1);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.isAsmEnable());
      
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertNotNull(mapDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mapDeserializer0, (Type) class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@f2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("4=~<ub)>4/(1Bx2[<YT");
      assertEquals((-1026665568766419764L), long0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext(38, roundingMode0);
      assertNotNull(mathContext0);
      
      String string0 = ParserConfig.DENY_PROPERTY;
      assertEquals("fastjson.parser.deny", string0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = new BigDecimal(38, mathContext0);
      assertEquals((short)38, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-971));
      assertEquals("java.lang.StringIndexOutOfBoundsException: String index out of range: -971", stringIndexOutOfBoundsException0.toString());
      assertEquals("String index out of range: -971", stringIndexOutOfBoundsException0.getMessage());
      assertNotNull(stringIndexOutOfBoundsException0);
      
      String string1 = TypeUtils.castToString((Object) null);
      assertNull(string1);
      
      Integer integer0 = new Integer((-3232));
      assertEquals((-3232), (int)integer0);
      assertNotNull(integer0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread1 = new MockThread(mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = aSMDeserializerFactory0.classLoader.getParent();
      assertSame(classLoader0, classLoader2);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      // Undeclared exception!
      try { 
        java.sql.Date.valueOf("2/=G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_INSTANT;
      assertNotNull(dateTimeFormatter0);
      
      Locale locale1 = dateTimeFormatter0.getLocale();
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertNotNull(locale1);
      
      Locale locale2 = JSON.defaultLocale;
      assertFalse(locale2.equals((Object)locale0));
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertNotNull(locale2);
      
      String string0 = locale2.getDisplayLanguage(locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("Englisch", string0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Englisch");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("GuMtkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(locale1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : en
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      MockThread mockThread0 = new MockThread("L");
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      MockThread.reset();
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      FieldInfo fieldInfo0 = new FieldInfo("L", class1, class2, class0, (Field) null, 0, 1024, 0);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1024, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("L", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1024, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("L", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("L", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals(1024, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertNotNull(beanContext0);
      
      Method method0 = beanContext0.getMethod();
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.isEnum);
      assertEquals(1024, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(0, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals("L", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertEquals("L", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      assertNull(beanContext0.getFormat());
      assertEquals(1024, beanContext0.getFeatures());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(method0);
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((Runnable) null, "Ljava.awt.Rectangle");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread("DisableSpecialKeyDetect");
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      parserConfig0.addDeny("r}i");
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(parserConfig0, parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      long long0 = TypeUtils.fnv1a_64(" QgC\"9=7Ci");
      assertEquals(51864012203084381L, long0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.TYPE;
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class2, "r}i", fieldArray0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNull(field0);
      
      Class<PropertyProcessableDeserializer> class3 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockThread1, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ConcurrentHashMap<Insets, Insets> concurrentHashMap0 = new ConcurrentHashMap<Insets, Insets>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      long long0 = concurrentHashMap0.reduceKeysToLong(844L, toLongFunction0, 115L, longBinaryOperator0);
      assertEquals(115L, long0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      MockThread mockThread0 = new MockThread("L");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      String string0 = TypeUtils.decapitalize("2/=G");
      assertEquals("2/=G", string0);
      assertNotNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<?> class0 = TypeUtils.getClassFromMapping("org.springframework.security.web.csrf.DefaultCsrfToken");
      assertNull(class0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
      
      Float float0 = new Float(842.6767F);
      assertEquals(842.6767F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      parserConfig0.clearDeserializers();
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.deny");
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.isAutoTypeSupport());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate("4=~<ub)>4/(1Bx2[<YT");
      assertEquals("4=~<ub)>4/(1-bx2[<-y-t", string0);
      assertNotNull(string0);
      
      String string1 = propertyNamingStrategy0.translate(";wO*rqyzb[bUbLvj+");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";w-o*rqyzb[b-ub-lvj+", string1);
      assertNotNull(string1);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";wO*rqyzb[bUbLvj+", (Type) class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("4=~<ub)>4/(1Bx2[<YT");
      assertEquals((-1026665568766419764L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.clearDeserializers();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.addDeny(";wO*rqYz[bUbLm+");
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = parserConfig0.propertyNamingStrategy.translate("fastjson.parser.deny");
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals("fastjson.parser.deny", string0);
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertNotNull(string0);
      
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>((Comparator<? super String>) null);
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, treeMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      boolean boolean2 = MockThread.interrupted();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Thread[] threadArray0 = new Thread[4];
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(1, int0);
      
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertNotNull(timeDeserializer0);
      
      boolean boolean3 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      Class<IllegalStateException> class2 = IllegalStateException.class;
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class2, class3);
      assertNull(annotation0);
      
      Class<SQLTransientException> class4 = SQLTransientException.class;
      Annotation annotation1 = TypeUtils.getAnnotation((Class<?>) class4, class3);
      assertNull(annotation1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("toL");
      assertEquals("toL", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "d2^O");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("toL", threadGroup0.getName());
      assertEquals("d2^O", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      mockThread0.run();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      boolean boolean0 = false;
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader0.setDefaultAssertionStatus(false);
      assertSame(classLoader0, classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("getshortValue", (ClassLoader) aSMClassLoader0);
      assertSame(classLoader1, classLoader0);
      assertNull(class0);
      
      InterruptedException interruptedException0 = new InterruptedException("2/=G");
      assertEquals("2/=G", interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException: 2/=G", interruptedException0.toString());
      assertNotNull(interruptedException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("2/=G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 2/=G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("kotlin.Metadata");
      assertEquals("kotlin.metadata", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kotlin.metadata", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      JSONObject jSONObject0 = new JSONObject(true);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      Point point0 = new Point(3089, 3089);
      assertEquals(3089, point0.x);
      assertEquals(3089, point0.y);
      assertEquals(3089.0, point0.getX(), 0.01);
      assertEquals(3089.0, point0.getY(), 0.01);
      assertNotNull(point0);
      
      Point point1 = new Point(point0);
      assertTrue(point1.equals((Object)point0));
      assertEquals(3089, point0.x);
      assertEquals(3089, point0.y);
      assertEquals(3089, point1.x);
      assertEquals(3089, point1.y);
      assertEquals(3089.0, point0.getX(), 0.01);
      assertEquals(3089.0, point0.getY(), 0.01);
      assertEquals(3089.0, point1.getY(), 0.01);
      assertEquals(3089.0, point1.getX(), 0.01);
      assertNotNull(point1);
      
      JSONObject jSONObject1 = jSONObject0.fluentRemove(point1);
      assertTrue(point0.equals((Object)point1));
      assertTrue(point1.equals((Object)point0));
      assertSame(jSONObject0, jSONObject1);
      assertNotSame(point0, point1);
      assertNotSame(point1, point0);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, point0.x);
      assertEquals(3089, point0.y);
      assertEquals(3089, point1.x);
      assertEquals(3089, point1.y);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(3089.0, point0.getX(), 0.01);
      assertEquals(3089.0, point0.getY(), 0.01);
      assertEquals(3089.0, point1.getY(), 0.01);
      assertEquals(3089.0, point1.getX(), 0.01);
      assertTrue(jSONObject1.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertNotNull(jSONObject1);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      // Undeclared exception!
      try { 
        JSON.toJSON((Object) class0, serializeConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      MockThread mockThread0 = new MockThread("L");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.autoTypeSupport");
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNotSame(parserConfig1, parserConfig0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate(";Ljava/lang/reflect/Type;)Ljava/lang/Object;");
      assertEquals(";-ljava/lang/reflect/-type;)-ljava/lang/-object;", string0);
      assertNotNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      String string1 = propertyNamingStrategy1.translate("java.util.concurrent.ConcurrentSkipListSet");
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertEquals("Java.util.concurrent.ConcurrentSkipListSet", string1);
      assertNotNull(string1);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig2 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(parserConfig2);
      
      parserConfig1.setAsmEnable(false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.equals((Object)parserConfig2));
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(parserConfig1, parserConfig0);
      assertNotSame(parserConfig1, parserConfig2);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      Class<TimeZone> class1 = TimeZone.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, (PropertyNamingStrategy) null);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((Runnable) null, "Ljava.awt.Rectangle");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread("DisableSpecialKeyDetect");
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig0.addDeny("tri");
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(parserConfig0, parserConfig1);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      long long0 = TypeUtils.fnv1a_64(" QgC\"9=7Ci");
      assertEquals(51864012203084381L, long0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction0);
      assertNotNull(comparator0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      Double double0 = new Double(737.64751);
      assertEquals(737.64751, (double)double0, 0.01);
      assertNotNull(double0);
      
      Date date0 = TypeUtils.castToDate(double0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      JSONObject jSONObject0 = new JSONObject(19, true);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = jSONObject0.fluentRemove(propertyNamingStrategy0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject1, jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      Class<Long> class0 = Long.class;
      JSONObject jSONObject2 = jSONObject1.fluentPutAll(treeMap0);
      assertSame(jSONObject0, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
      assertSame(jSONObject1, jSONObject0);
      assertSame(jSONObject1, jSONObject2);
      assertSame(jSONObject2, jSONObject0);
      assertSame(jSONObject2, jSONObject1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertTrue(jSONObject2.isEmpty());
      assertEquals(0, jSONObject2.size());
      assertEquals(0, treeMap0.size());
      assertNotNull(jSONObject2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError();
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNull(verifyError0.getMessage());
      assertNotNull(verifyError0);
      
      Class<Byte> class0 = Byte.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      MockThread mockThread0 = new MockThread("L");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertSame(classLoader1, classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertSame(classLoader1, classLoader0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      MockThread.reset();
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class0, (PropertyNamingStrategy) null, true, false);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig1, javaBeanInfo0);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertSame(classLoader1, classLoader0);
      assertNotSame(parserConfig1, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertNotNull(objectDeserializer0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)50;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)104, (byte)50, (byte)40, (byte)40, (byte)50, (byte)50, (byte)50}, byteArray0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      Float float0 = new Float((double) (byte)104);
      assertEquals(104.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      java.sql.Date date0 = TypeUtils.castToSqlDate(float0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = Opcodes.ICONST_1;
      assertEquals(4, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Field[] fieldArray0 = null;
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, (Object) null);
      assertFalse(renderingHints0.isEmpty());
      assertEquals(1, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("EUR", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("\u20AC", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(',', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("uJTL", decimalFormatSymbols0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("EUR", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("\u20AC", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals(',', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("uJTL#", decimalFormat0.toLocalizedPattern());
      assertEquals("-uJTL", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("uJTL", decimalFormat0.getPositivePrefix());
      assertEquals("uJTL#", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        renderingHints0.put(parameterizedTypeImpl0, decimalFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = Opcodes.T_INT;
      assertEquals(10, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      MockThread mockThread0 = new MockThread("L");
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<Collator> class0 = Collator.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertNotNull(throwableDeserializer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) typeUtils0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      boolean boolean3 = TypeUtils.isKotlin(class0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      
      Random.setNextRandom((-1));
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      parserConfig0.clearDeserializers();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertSame(parserConfig1, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.deny");
      assertSame(parserConfig1, parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAsmEnable());
      assertTrue(parserConfig1.isAutoTypeSupport());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate("4=~<ub)>4/(1Bx2[<YT");
      assertEquals("4=~<ub)>4/(1-bx2[<-y-t", string0);
      assertNotNull(string0);
      
      String string1 = propertyNamingStrategy0.translate(";wO*rqyzb[bUbLvj+");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";w-o*rqyzb[b-ub-lvj+", string1);
      assertNotNull(string1);
      
      Class<Date> class0 = Date.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.util.Date", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";wO*rqyzb[bUbLvj+", (Type) class1, parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";wO*rqyzb[bUbLvj+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string1 = propertyNamingStrategy0.translate("java.time.com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer");
      assertEquals("java.time.com.alibaba.fastjson.parser.deserializer.-sql-date-deserializer", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        propertyNamingStrategy0.translate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.PropertyNamingStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      boolean boolean3 = TypeUtils.isHibernateInitialized(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(",YVVx3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : ,YVVx3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      long long0 = TypeUtils.fnv1a_64_lower("zNT C8;Ns$H");
      assertEquals((-7663555486798894868L), long0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      assertEquals(0, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = TypeUtils.loadClass("L", classLoader0);
      assertNull(class1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      boolean boolean1 = TypeUtils.isGenericParamType((Type) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(1034);
      assertEquals(1034.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)10, atomicInteger0.byteValue());
      assertEquals(1034, atomicInteger0.intValue());
      assertEquals(1034L, atomicInteger0.longValue());
      assertEquals((short)1034, atomicInteger0.shortValue());
      assertEquals(1034, atomicInteger0.get());
      assertEquals(1034.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("1034", atomicInteger0.toString());
      assertNotNull(atomicInteger0);
      
      String string0 = treeMap0.higherKey("zNT C8;Ns$H");
      assertEquals(0, treeMap0.size());
      assertNull(string0);
      
      Short short0 = TypeUtils.castToShort(atomicInteger0);
      assertEquals((short)1034, (short)short0);
      assertEquals(1034.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((byte)10, atomicInteger0.byteValue());
      assertEquals(1034, atomicInteger0.intValue());
      assertEquals(1034L, atomicInteger0.longValue());
      assertEquals((short)1034, atomicInteger0.shortValue());
      assertEquals(1034, atomicInteger0.get());
      assertEquals(1034.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("1034", atomicInteger0.toString());
      assertNotNull(short0);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-6839957020230453714L);
      doubleArray0[1] = (double) 1034;
      doubleArray0[2] = (double) (-6839957020230453714L);
      doubleArray0[3] = (double) (-6839957020230453714L);
      doubleArray0[4] = (double) 1034;
      doubleArray0[5] = (double) 1034;
      doubleArray0[6] = (double) 1034;
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalTime localTime0 = MockLocalTime.now();
      assertNotNull(localTime0);
      
      Time time0 = Time.valueOf(localTime0);
      assertEquals("20:21:21", time0.toString());
      assertNotNull(time0);
      
      long long0 = time0.getTime();
      assertEquals(73281000L, long0);
      assertEquals("20:21:21", time0.toString());
      
      Date date0 = TypeUtils.castToDate(time0);
      assertSame(time0, date0);
      assertSame(date0, time0);
      assertEquals("20:21:21", time0.toString());
      assertEquals("20:21:21", date0.toString());
      assertNotNull(date0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Z", "Z");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Z", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Z", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Z", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      sQLFeatureNotSupportedException0.addSuppressed(mockException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Z", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Z", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Z", sQLFeatureNotSupportedException0.toString());
      
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLFeatureNotSupportedException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((Runnable) null, "Ljava.awt.Rectangle");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      Field field0 = ParserConfig.getFieldFromCache("wAEM+Djm-:}RT>'", linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("} SI(`wWV;/T,n", class0, class0, class0, (Field) null, 90, 37, 90);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(37, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(90, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("} SI(`wWV;/T,n", fieldInfo0.toString());
      assertNotNull(fieldInfo0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(37, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(90, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("} SI(`wWV;/T,n", fieldInfo0.toString());
      assertEquals("} SI(`wWV;/T,n", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals(37, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNotNull(beanContext0);
      
      Field field1 = beanContext0.getField();
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(37, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(90, fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.isEnum);
      assertNull(fieldInfo0.getFormat());
      assertEquals("} SI(`wWV;/T,n", fieldInfo0.toString());
      assertEquals("} SI(`wWV;/T,n", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertNull(beanContext0.getFormat());
      assertEquals(37, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertNull(field1);
      
      Field field2 = linkedHashMap0.put("wAEM+Djm-:}RT>'", (Field) null);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(field2);
      
      Field field3 = ParserConfig.getFieldFromCache("Ljava.awt.Rectangle", linkedHashMap0);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertNull(field3);
      
      MockThread mockThread2 = new MockThread("} SI(`wWV;/T,n");
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory1);
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(aSMClassLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory2);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory2);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory2, aSMDeserializerFactory0);
      assertNotSame(aSMDeserializerFactory2, aSMDeserializerFactory1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory1.classLoader);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("Ljava.awt.Rectangle");
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(parserConfig1, parserConfig0);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory2);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory2);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      String string0 = propertyNamingStrategy0.translate("+");
      assertEquals("+", string0);
      assertNotNull(string0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory3 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(aSMDeserializerFactory3.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory3.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory3.equals((Object)aSMDeserializerFactory1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory3);
      
      ParserConfig parserConfig2 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory3));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(parserConfig2.fieldBased);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      assertNotNull(parserConfig2);
      
      ParserConfig parserConfig3 = ParserConfig.global;
      assertFalse(parserConfig3.equals((Object)parserConfig1));
      assertFalse(parserConfig3.equals((Object)parserConfig0));
      assertFalse(parserConfig3.equals((Object)parserConfig2));
      assertNotSame(parserConfig3, parserConfig1);
      assertNotSame(parserConfig3, parserConfig0);
      assertNotSame(parserConfig3, parserConfig2);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig3.compatibleWithJavaBean);
      assertFalse(parserConfig3.fieldBased);
      assertFalse(parserConfig3.isAutoTypeSupport());
      assertTrue(parserConfig3.isAsmEnable());
      assertNotNull(parserConfig3);
      
      parserConfig2.setAsmEnable(false);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig3));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory3));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(parserConfig2, parserConfig0);
      assertNotSame(parserConfig2, parserConfig3);
      assertNotSame(parserConfig2, parserConfig1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory3);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory2);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertFalse(parserConfig2.fieldBased);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertFalse(parserConfig2.isAsmEnable());
      
      Class<TimeZone> class1 = TimeZone.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, true, propertyNamingStrategy1);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("getMetaClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : getMetaClass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread((Runnable) null, "Ljava.awt.Rectangle");
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotNull(mockThread1);
      
      MockThread mockThread2 = new MockThread("DisableSpecialKeyDetect");
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(mockThread2);
      
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      parserConfig0.clearDeserializers();
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig0.addDeny("r}i");
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertNotSame(mockThread2, mockThread0);
      assertNotSame(mockThread2, mockThread1);
      assertNotSame(parserConfig0, parserConfig1);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      long long0 = TypeUtils.fnv1a_64(" QgC\"9=7Ci");
      assertEquals(51864012203084381L, long0);
      
      Class<OptionalCodec> class0 = OptionalCodec.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.TYPE;
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertNotNull(class2);
      
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class2, "r}i", fieldArray0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals("short", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertNull(field0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, (Type) class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.instrumentation.InstrumentingClassLoader@3620270c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<?> class1 = TypeUtils.loadClass("java.lang.Comparable", classLoader0);
      assertSame(classLoader0, classLoader1);
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("interface java.lang.Comparable", class1.toString());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      int int1 = 79;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 79, 0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=79,HOUR_OF_DAY=79,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertNotNull(parserConfig0);
      
      Hashtable<IllegalStateException, Insets> hashtable0 = new Hashtable<IllegalStateException, Insets>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      TreeSet<MockMinguoDate> treeSet0 = new TreeSet<MockMinguoDate>();
      assertNotNull(treeSet0);
      
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction0);
      assertNotNull(comparator0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(1027);
      assertEquals(1027.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("1027", atomicInteger0.toString());
      assertEquals((byte)3, atomicInteger0.byteValue());
      assertEquals(1027, atomicInteger0.get());
      assertEquals((short)1027, atomicInteger0.shortValue());
      assertEquals(1027, atomicInteger0.intValue());
      assertEquals(1027L, atomicInteger0.longValue());
      assertEquals(1027.0, atomicInteger0.doubleValue(), 0.01);
      assertNotNull(atomicInteger0);
      
      Long long0 = TypeUtils.castToLong(atomicInteger0);
      assertEquals(1027L, (long)long0);
      assertEquals(1027.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("1027", atomicInteger0.toString());
      assertEquals((byte)3, atomicInteger0.byteValue());
      assertEquals(1027, atomicInteger0.get());
      assertEquals((short)1027, atomicInteger0.shortValue());
      assertEquals(1027, atomicInteger0.intValue());
      assertEquals(1027L, atomicInteger0.longValue());
      assertEquals(1027.0, atomicInteger0.doubleValue(), 0.01);
      assertNotNull(long0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : interface java.lang.Comparable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte)10;
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader1);
      
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader2);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      ParserConfig parserConfig1 = new ParserConfig(classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(parserConfig1);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertNotNull(typeUtils0);
      
      Class<String> class1 = String.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotNull(throwableDeserializer0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      assertNull(noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException", noSuchFieldException0.toString());
      assertNotNull(noSuchFieldException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(noSuchFieldException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchFieldException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class1);
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertNotNull(class3);
      
      Class<IllegalStateException> class4 = IllegalStateException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class4, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(serializeBeanInfo0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Class class5 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class5.equals((Object)class3));
      assertNotSame(class5, class3);
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class5.getModifiers());
      assertTrue(class5.isArray());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isAnnotation());
      assertEquals("class [F", class5.toString());
      assertFalse(class5.isInterface());
      assertFalse(class5.isPrimitive());
      assertNotNull(class5);
      
      Class<?> class6 = TypeUtils.getRawClass(class5);
      assertFalse(class5.equals((Object)class3));
      assertFalse(class6.equals((Object)class1));
      assertNotSame(class1, class6);
      assertNotSame(class5, class3);
      assertNotSame(class6, class1);
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class5.getModifiers());
      assertTrue(class5.isArray());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isAnnotation());
      assertEquals("class [F", class5.toString());
      assertFalse(class5.isInterface());
      assertFalse(class5.isPrimitive());
      assertFalse(class6.isAnnotation());
      assertEquals(1041, class6.getModifiers());
      assertTrue(class6.isArray());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isInterface());
      assertEquals("class [F", class6.toString());
      assertFalse(class6.isPrimitive());
      assertNotNull(class6);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "%M9U&]Bs-zZGM ;Ga^-";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2/=G");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = ParserConfig.DENY_PROPERTY;
      assertFalse(string1.equals((Object)string0));
      assertEquals("fastjson.parser.deny", string1);
      assertNotNull(string1);
      
      LinkedHashSet<LinkageError> linkedHashSet0 = new LinkedHashSet<LinkageError>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      ClassLoader classLoader0 = null;
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("2/=G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 2/=G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<InstantiationException> class0 = InstantiationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("2/=G", hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNull(field0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("2/=G");
      assertEquals("2/=G", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "2/=G");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("2/=G", threadGroup0.getName());
      assertEquals("2/=G", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      mockThread0.run();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ThreadGroup threadGroup2 = new ThreadGroup("new");
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertEquals("new", threadGroup2.getName());
      assertNotNull(threadGroup2);
      
      Class<?> class1 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("interface java.util.List", class1.toString());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("L");
      assertEquals((-5808551375595768565L), long0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      parserConfig0.setAutoTypeSupport(true);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      parserConfig0.clearDeserializers();
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = ParserConfig.global;
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotNull(parserConfig1);
      
      parserConfig1.addDeny("fastjson.parser.deny");
      assertSame(parserConfig1, parserConfig0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertTrue(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string0 = propertyNamingStrategy0.translate("4=~<ub)>4/(1Bx2[<YT");
      assertEquals("4=~<ub)>4/(1-bx2[<-y-t", string0);
      assertNotNull(string0);
      
      String string1 = propertyNamingStrategy0.translate(";wO*rqyzb[bUbLvj+");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";w-o*rqyzb[b-ub-lvj+", string1);
      assertNotNull(string1);
      
      Class<Byte> class0 = Byte.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Byte", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ";wO*rqyzb[bUbLvj+", (Type) class1, parserConfig1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";wO*rqyzb[bUbLvj+\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber(",YVVx3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<AtomicLong> class0 = AtomicLong.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class2.isAnnotation());
      assertEquals("class java.util.concurrent.atomic.AtomicLong", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      boolean boolean2 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Field field0 = ParserConfig.getFieldFromCache("kotlin.Metadata", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class3.equals((Object)class2));
      assertNotSame(class3, class2);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class3).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class3.equals((Object)class2));
      assertNotSame(class3, class2);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertNotNull(type0);
      
      Field field1 = ParserConfig.getFieldFromCache(",YVVx3", hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(field1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<SimpleDateFormat> class4 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class4, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(list0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("kotlin.Metadata", ",YVVx3", "fastjson.parser.deny", (-226));
      assertEquals("kotlin.Metadata", stackTraceElement0.getClassName());
      assertEquals((-226), stackTraceElement0.getLineNumber());
      assertEquals(",YVVx3", stackTraceElement0.getMethodName());
      assertEquals("fastjson.parser.deny", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("kotlin.Metadata.,YVVx3(fastjson.parser.deny)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class2, class3);
      assertFalse(class2.equals((Object)class3));
      assertFalse(class3.equals((Object)class2));
      assertFalse(class2.isAnnotation());
      assertEquals("class java.util.concurrent.atomic.AtomicLong", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertNotNull(parameterizedTypeImpl0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(instant0);
      
      Timestamp timestamp0 = Timestamp.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.32", timestamp0.toString());
      assertNotNull(timestamp0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timestamp0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<NumberDeserializer> class2 = NumberDeserializer.class;
      boolean boolean2 = TypeUtils.isKotlin(class2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class2);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertNotNull(parserConfig0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl1);
      
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      assertFalse(parameterizedTypeImpl2.equals((Object)parameterizedTypeImpl0));
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(parameterizedTypeImpl2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      String string0 = propertyNamingStrategy0.translate("getSuppressed");
      assertEquals("get_suppressed", string0);
      assertNotNull(string0);
      
      String string1 = propertyNamingStrategy0.translate("get_suppressed");
      assertTrue(string1.equals((Object)string0));
      assertEquals("get_suppressed", string1);
      assertNotNull(string1);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = null;
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      assertEquals("java.lang.OutOfMemoryError", outOfMemoryError0.toString());
      assertNull(outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) outOfMemoryError0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
