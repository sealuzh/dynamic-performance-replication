/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:31:52 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8BqSr;7'R");
      jSONScanner0.scanType("8BqSr;7'R");
      jSONScanner0.scanNumber();
      jSONScanner0.sp = (-2);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.features = (-1376);
      char char0 = '(';
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.stringDefaultValue = "null";
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken(109);
      jSONReaderScanner0.scanInt('(');
      jSONReaderScanner0.isEOF();
      char char1 = '(';
      jSONReaderScanner0.scanDecimal('(');
      jSONReaderScanner0.tokenName();
      char char2 = 'G';
      jSONReaderScanner0.scanInt('G');
      char char3 = '`';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('`');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ` - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '/';
      charArray0[2] = '}';
      char char0 = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '/';
      charArray0[4] = '\\';
      charArray0[5] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type : ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      jSONReaderScanner0.scanFloat('A');
      charArray0[1] = '7';
      charArray0[2] = 'X';
      charArray0[3] = ')';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      char[] charArray1 = jSONReaderScanner0.sub_chars(10, 91);
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 10, (-3771));
      jSONScanner0.next();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(43, 91, charArray1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = (-722);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n+#w0", (-722));
      jSONReaderScanner0.scanDouble('<');
      jSONReaderScanner0.features = (-722);
      jSONReaderScanner0.close();
      char[] charArray0 = new char[8];
      char char0 = '#';
      charArray0[0] = '#';
      charArray0[1] = '2';
      charArray0[2] = '&';
      charArray0[3] = 'v';
      char char1 = 'F';
      charArray0[4] = 'F';
      charArray0[5] = '9';
      char char2 = 't';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner.checkDate('4', '4', '4', '4', 's', '4', (-2494), (-2494));
      JSONScanner jSONScanner0 = new JSONScanner(":,;}zeGFQM=^", (-2494));
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      char[] charArray1 = new char[4];
      charArray1[0] = '4';
      charArray1[1] = 's';
      charArray1[2] = 'f';
      charArray1[3] = 's';
      jSONScanner0.scanFieldInt(charArray1);
      jSONScanner0.bp = 50;
      jSONScanner0.scanFieldSymbol(charArray1);
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      locale0.getExtensionKeys();
      jSONScanner0.calendar = calendar0;
      jSONScanner0.isEnabled(816, 69);
      jSONScanner0.scanLong('4');
      jSONScanner0.scanFieldLong(charArray1);
      jSONScanner0.scanFieldDouble(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 372, (-1455));
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.setToken((-920));
      JSONScanner jSONScanner0 = new JSONScanner("e1tW?sUmda'9e`U", 372);
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.np = (-2147483647);
      jSONScanner0.scanDate('.');
      jSONScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("C2W)\"", 3497);
      char[] charArray0 = new char[4];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextToken(3497);
      charArray0[0] = 'R';
      jSONReaderScanner0.info();
      charArray0[1] = 'H';
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      charArray0[2] = 'T';
      charArray0[3] = 'H';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanLong('?');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 3497, 2431);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[2] = 'Y';
      charArray0[3] = 'u';
      charArray0[4] = '?';
      charArray0[5] = 'q';
      charArray0[6] = 'm';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanDouble('C');
      jSONReaderScanner0.scanUUID('m');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'b';
      charArray0[2] = 't';
      charArray0[3] = '^';
      charArray0[4] = 'O';
      charArray0[5] = '_';
      charArray0[6] = 'Z';
      charArray0[7] = 'r';
      charArray0[8] = 'f';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      jSONScanner0.nextToken(12);
      jSONScanner0.scanFieldLong(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not");
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = ',';
      char char0 = '`';
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(14);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'F');
      charArray0[2] = '`';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6Z%jp", 1775);
      jSONReaderScanner0.scanUUID('P');
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("6Z%jp", objectArray0);
      jSONReaderScanner0.scanFloat('&');
      jSONReaderScanner0.subString(1775, 1775);
      jSONReaderScanner0.matchStat();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(1775);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 6, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", (-1721919487));
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanBoolean('=');
      int int0 = jSONReaderScanner0.scanType("false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 77);
      char char0 = 'Y';
      jSONReaderScanner0.scanFloat('Y');
      jSONReaderScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("pxjmjdi");
      int int0 = 69;
      int int1 = 115;
      jSONReaderScanner0.longValue();
      SymbolTable symbolTable0 = new SymbolTable(102);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(69, 69, 115, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("181XpsJ95{[*Z:}J");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 't';
      charArray0[2] = 'o';
      charArray0[3] = 'G';
      charArray0[4] = 'l';
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('k');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.token = 3;
      jSONReaderScanner0.scanFloat('=');
      Locale locale0 = Locale.JAPANESE;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.scanLong('@');
      jSONReaderScanner0.scanDate('#');
      jSONReaderScanner0.scanFloat('#');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.subString(95, 95);
      jSONReaderScanner0.putChar('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", (-874));
      char[] charArray0 = new char[6];
      int int0 = JSONLexer.NOT_MATCH_NAME;
      charArray0[0] = 'V';
      charArray0[1] = '$';
      charArray0[2] = '1';
      charArray0[3] = 'T';
      charArray0[4] = '1';
      jSONReaderScanner0.nextIdent();
      charArray0[5] = '1';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONReaderScanner0.scanStringArray(set0, '\'');
      jSONReaderScanner0.scanInt('T');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 850;
      JSONScanner jSONScanner0 = new JSONScanner("OrderedField", 850);
      char[] charArray0 = new char[6];
      SymbolTable symbolTable0 = new SymbolTable(10);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      charArray0[0] = '|';
      charArray0[1] = '>';
      charArray0[2] = '#';
      charArray0[3] = 'N';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"OrderedField\", pos 12, json : OrderedField
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 9978;
      JSONScanner.checkDate('}', '}', '}', 'A', 'A', 'A', 9962, 9978);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '}';
      charArray0[2] = 'A';
      charArray0[3] = '}';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "unclosed.str";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str", 25);
      jSONReaderScanner0.scanUUID('s');
      jSONReaderScanner0.getTimeZone();
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = '+';
      charArray0[3] = 's';
      charArray0[4] = 's';
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", (-883));
      char[] charArray0 = new char[6];
      jSONReaderScanner0.scanInt('T');
      charArray0[0] = 'V';
      charArray0[1] = '$';
      charArray0[2] = '1';
      charArray0[3] = 'T';
      charArray0[4] = '1';
      jSONReaderScanner0.nextIdent();
      charArray0[5] = '';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 788);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("a(l+]X-");
      jSONScanner0.indexOf('#', 47);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}[d?fSWa");
      char[] charArray0 = new char[1];
      char char0 = '|';
      charArray0[0] = '|';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.hasSpecial = false;
      jSONReaderScanner0.nextIdent();
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      int int0 = 7;
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-2), 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "*";
      int int0 = 58;
      JSONScanner jSONScanner0 = new JSONScanner("*", 58);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      char char0 = 'C';
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '8';
      charArray0[2] = '0';
      charArray0[3] = '+';
      int int0 = 127;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '#');
      jSONReaderScanner0.bytesValue();
      int int1 = (-3513);
      int int2 = 14;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1560));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ");
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      int int0 = (-508);
      jSONScanner0.token = (-508);
      charArray0[1] = '\\';
      charArray0[2] = '&';
      charArray0[3] = '}';
      charArray0[4] = '\"';
      charArray0[5] = 'v';
      charArray0[6] = 'b';
      charArray0[7] = 'm';
      jSONScanner0.scanDecimal('}');
      charArray0[8] = 'x';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.getLocale();
      int int1 = (-2503);
      jSONScanner0.isEnabled((-2503));
      jSONScanner0.indexOf('\\', 12);
      jSONScanner0.stringVal();
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanString('\\');
      Feature feature0 = Feature.IgnoreAutoType;
      jSONScanner0.isEnabled(feature0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "null";
      int int0 = 14;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 14);
      char char0 = 'L';
      jSONReaderScanner0.putChar('L');
      char char1 = '|';
      char[] charArray0 = null;
      JSONLexerBase.readString((char[]) null, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('|');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match | - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanFalse();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = '}';
      charArray0[2] = 'V';
      charArray0[3] = 'B';
      charArray0[4] = '\\';
      charArray0[5] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 255, 70);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";*m}#=pNKz7#}qK`0^", 17);
      jSONReaderScanner0.nextToken();
      assertEquals('*', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = ",j";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j", (-1));
      jSONReaderScanner0.scanLong('Q');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'U';
      charArray0[2] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '/';
      charArray0[2] = '$';
      charArray0[3] = '%';
      charArray0[4] = '1';
      charArray0[5] = 'D';
      charArray0[6] = 'A';
      charArray0[7] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 252);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      char char0 = 'Q';
      charArray0[1] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 809, 809);
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanDouble('Q');
      jSONReaderScanner0.indexOf('/', 809);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1), (-2329));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = 'H';
      charArray0[2] = 'Y';
      charArray0[3] = 'u';
      charArray0[4] = 'T';
      charArray0[5] = 'q';
      charArray0[6] = 'm';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('C');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-i;DJC1J8eVy");
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 'f';
      charArray0[2] = 'w';
      charArray0[3] = '}';
      charArray0[4] = 'F';
      charArray0[5] = 'y';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.nextToken(853);
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.bytesValue();
      jSONScanner0.numberString();
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'k';
      charArray0[2] = 'o';
      charArray0[3] = 'P';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19);
      char[] charArray1 = new char[6];
      charArray1[0] = 'P';
      charArray1[1] = 'o';
      charArray1[2] = 'P';
      charArray1[3] = 'P';
      charArray1[4] = 'f';
      charArray1[5] = 'k';
      jSONReaderScanner0.scanFieldDate(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("iS?yUZ+aF$y%W", (-1294));
      jSONScanner0.pos = 123;
      SymbolTable symbolTable0 = new SymbolTable(84);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '_');
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      char char0 = '';
      charArray0[1] = '';
      char[] charArray1 = new char[8];
      charArray1[0] = ')';
      charArray1[1] = '_';
      charArray1[2] = '$';
      charArray1[3] = ']';
      charArray1[4] = ')';
      charArray1[5] = ')';
      charArray1[6] = '';
      charArray1[7] = '';
      jSONScanner0.scanFieldDouble(charArray1);
      charArray0[2] = ')';
      charArray0[3] = 'G';
      char char1 = 'q';
      charArray0[4] = 'q';
      jSONScanner0.scanFieldBoolean(charArray0);
      charArray0[5] = '!';
      charArray0[6] = 'v';
      jSONScanner0.scanFieldLong(charArray0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.pos();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : pos 0, json : iS?yUZ+aF$y%W
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'o';
      charArray0[2] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 970);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.properties", 3643);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 3643);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new");
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = '/';
      charArray0[2] = 's';
      charArray0[3] = 'X';
      charArray0[4] = '/';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanDouble('Z');
      jSONReaderScanner0.eofPos = 3723;
      jSONReaderScanner0.pos = 2364;
      jSONReaderScanner0.putChar('Z');
      jSONReaderScanner0.indexOf('Z', 2364);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.subString(92, 92);
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = 'i';
      charArray0[2] = 'J';
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(255);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '#');
      jSONReaderScanner0.isEnabled((-2283), (-2283));
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1S\"gBikzvWLF", 323);
      jSONScanner0.scanDecimal('V');
      jSONScanner0.scanDecimal('B');
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.sp = (-297);
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.isEnabled(2674);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7GIh[B'6sD#", (-1));
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = 'B';
      charArray0[2] = 'V';
      charArray0[3] = 'V';
      charArray0[4] = 'B';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(1634, charArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-1678));
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed", 43);
      jSONScanner0.nextToken((-1300));
      SymbolTable symbolTable0 = null;
      jSONScanner0.scanSymbol((SymbolTable) null);
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 1323;
      JSONScanner jSONScanner0 = new JSONScanner("false", 1323);
      jSONScanner0.nextIdent();
      jSONScanner0.isBlankInput();
      jSONScanner0.longValue();
      char char0 = '7';
      char char1 = 'c';
      jSONScanner0.isRef();
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = 'c';
      Class<Object> class0 = Object.class;
      jSONScanner0.intValue();
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 5, json : false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      char char0 = '8';
      charArray0[1] = '8';
      charArray0[2] = 'M';
      char char1 = '9';
      charArray0[3] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, (-1499));
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextTokenWithChar('R');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")Ea`N5P=_q?_Eko=");
      Class<Object> class0 = Object.class;
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = 'c';
      charArray0[2] = '\\';
      charArray0[3] = 't';
      charArray0[4] = '/';
      charArray0[5] = '_';
      charArray0[6] = 'P';
      charArray0[7] = '.';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.features = 1694;
      jSONScanner0.newCollectionByType(class0);
      char char0 = jSONScanner0.next();
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals('E', char0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 't';
      charArray0[1] = '2';
      charArray0[2] = 'L';
      charArray0[3] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125, 9);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.token = 3660;
      jSONReaderScanner0.scanBoolean('4');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ty6&U", 20);
      jSONScanner0.info();
      jSONScanner0.isRef();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xBCiiAS'U", 45380);
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[0];
      jSONScanner0.sbuf = charArray0;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(45380);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. B
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 104);
      jSONScanner0.scanIdent();
      char char0 = 'o';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 5, json : false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = 'b';
      int int0 = 664;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 664);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.info();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.nextIdent();
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.timeZone = timeZone0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('b', (-2298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L", (-1437733547));
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = '!';
      charArray0[2] = '[';
      charArray0[3] = '';
      charArray0[4] = 'i';
      charArray0[5] = '\"';
      charArray0[6] = '?';
      charArray0[7] = '\"';
      SymbolTable symbolTable0 = new SymbolTable(786);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 97, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", 69);
      jSONScanner0.nextToken(100);
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = '4';
      int int0 = 40;
      int int1 = 116;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 116);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.scanString('c');
      jSONReaderScanner0.scanLong('?');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.matchField(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanSymbol((SymbolTable) null);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6+y$fJ93k");
      jSONScanner0.scanUUID('/');
      jSONScanner0.scanDecimal('y');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.stringVal();
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.close();
      jSONScanner0.getCurrent();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner.checkDate('3', '3', 'E', '3', 'I', 'I', 2419, 2419);
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = '3';
      charArray0[2] = 'P';
      charArray0[3] = 'E';
      charArray0[4] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2419, 3165);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(65);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'M');
      assertEquals(3165, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZiZD[C`{Q", (-44));
      Feature feature0 = Feature.UseObjectArray;
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = ' ';
      charArray0[2] = 'Q';
      charArray0[3] = '{';
      charArray0[4] = 'l';
      charArray0[5] = '@';
      charArray0[6] = 'e';
      charArray0[7] = 'f';
      charArray0[8] = ')';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.np = 3645;
      jSONScanner0.config(feature0, true);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\" Lr", (-1566));
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '*';
      charArray0[2] = '0';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$x`I*[w;vQ6P)#Cm");
      jSONScanner0.info();
      jSONScanner0.longValue();
      jSONScanner0.scanDouble('M');
      jSONScanner0.getCalendar();
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      jSONScanner0.scanFieldUUID(charArray0);
      charArray0[4] = 'M';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanString('`');
      jSONScanner0.bytesValue();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("J", (-133));
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      char[] charArray1 = new char[3];
      charArray1[0] = '{';
      charArray1[1] = '{';
      charArray1[2] = '{';
      jSONReaderScanner0.sbuf = charArray1;
      charArray0[1] = 'g';
      charArray0[2] = 'Q';
      charArray0[3] = 'W';
      charArray0[4] = ':';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 9996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner.checkDate('Z', 'c', 'c', 'c', 'Z', 'c', (-1575), (-1575));
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      jSONScanner0.scanInt('R');
      jSONScanner0.intValue();
      jSONScanner0.nextToken((-1571));
      jSONScanner0.scanUUID('8');
      jSONScanner0.scanString('y');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = '\\';
      charArray0[2] = 'j';
      charArray0[3] = '|';
      int int0 = 1303;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1303);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = '%';
      charArray0[2] = '*';
      charArray0[3] = '';
      charArray0[4] = '$';
      charArray0[5] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      Feature feature0 = Feature.SupportNonPublicField;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "~Pm0ePcNkAZ,";
      JSONScanner jSONScanner0 = new JSONScanner("~Pm0ePcNkAZ,", 432);
      jSONScanner0.scanNumber();
      jSONScanner0.intValue();
      jSONScanner0.stringVal();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 850);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8ZN", (-1137));
      jSONReaderScanner0.features = (-1137);
      jSONReaderScanner0.stringDefaultValue = "scan false error";
      jSONReaderScanner0.token();
      jSONReaderScanner0.scanInt('h');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanType("8ZN");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.matchStat();
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", (-3579));
      jSONScanner0.scanISO8601DateIfMatch(false);
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanInt('h');
      jSONScanner0.scanISO8601DateIfMatch(true);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.charAt(1045);
      char[] charArray0 = new char[8];
      charArray0[0] = '\u001A';
      charArray0[1] = '\u001A';
      charArray0[2] = '\u001A';
      charArray0[3] = '\u001A';
      charArray0[4] = '\u001A';
      charArray0[5] = '\u001A';
      charArray0[6] = '\u001A';
      charArray0[7] = '\u001A';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanBoolean('\u001A');
      JSONScanner jSONScanner0 = new JSONScanner("", 360);
      SymbolTable symbolTable0 = new SymbolTable(360);
      jSONScanner0.scanFieldStringArray(charArray0, 1045, symbolTable0);
      char char0 = 'k';
      JSONLexerBase.isWhitespace('k');
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      int int0 = 3082;
      SymbolTable symbolTable0 = new SymbolTable(3082);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 11;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float", 11);
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'S';
      charArray0[2] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.CANADA;
      locale1.getDisplayLanguage(locale0);
      locale0.getDisplayScript(locale1);
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.token();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[7];
      charArray1[0] = 'G';
      charArray1[1] = 'A';
      charArray1[2] = '|';
      charArray1[3] = 'S';
      charArray1[4] = 'S';
      charArray1[5] = 'A';
      charArray1[6] = 'A';
      jSONScanner0.sbuf = charArray1;
      jSONScanner0.charAt(10);
      assertEquals(0, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aBoYZI@c|@");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.mark(0);
      stringReader0.reset();
      stringReader0.mark(0);
      stringReader0.skip(0);
      char char0 = '=';
      jSONReaderScanner0.scanInt('=');
      jSONReaderScanner0.isBlankInput();
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName(false, (-1), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -1
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ", 32);
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '2';
      charArray0[2] = '3';
      charArray0[3] = 'q';
      charArray0[4] = '}';
      charArray0[5] = '0';
      charArray0[6] = '>';
      charArray0[7] = 'R';
      charArray0[8] = 's';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanDate('5');
      jSONScanner0.setToken(32);
      jSONScanner0.close();
      char[] charArray1 = new char[2];
      jSONScanner0.scanFieldDecimal(charArray1);
      charArray1[0] = '5';
      charArray1[1] = '5';
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = '^';
      charArray0[2] = 'j';
      charArray0[3] = '1';
      charArray0[4] = '|';
      charArray0[5] = 'j';
      charArray0[6] = 'k';
      charArray0[7] = '$';
      charArray0[8] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43, 108);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("mDgC9OP[`\u0002&>!a9[[");
      jSONScanner0.next();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      jSONScanner0.timeZone = timeZone0;
      jSONScanner0.matchField(charArray0);
      JSONScanner.charArrayCompare("7x]*&_ ", 0, charArray0);
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.isEnabled((-2841));
      jSONScanner0.next();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-2841));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 26085;
      JSONScanner jSONScanner0 = new JSONScanner("gkr'qGwm", 26085);
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = '^';
      charArray0[2] = 'v';
      charArray0[3] = 'a';
      charArray0[4] = '%';
      char char0 = '}';
      charArray0[5] = '}';
      charArray0[6] = 'Z';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. k
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EES");
      TimeZone timeZone0 = TimeZone.getDefault();
      MockDate mockDate0 = new MockDate(0, (-193), (-193), 0, (-193));
      mockDate0.setTime((-3032L));
      timeZone0.inDaylightTime(mockDate0);
      timeZone0.getOffset((long) 0);
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'D';
      charArray0[2] = 'r';
      charArray0[3] = '?';
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      TimeZone.setDefault(timeZone0);
      TimeZone.setDefault(timeZone0);
      jSONReaderScanner0.setTimeZone(timeZone0);
      jSONReaderScanner0.info();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108, 47);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 224);
      jSONReaderScanner0.eofPos = 224;
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.nextToken(224);
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.scanDecimal('q');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1[<~}jFA4<'", 2913);
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('q');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("9cm+r4LdjK");
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("k^w,UtKw", 32);
      jSONScanner0.scanStringArray((Collection<String>) null, 'P');
      jSONScanner0.isBlankInput();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-3264));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 76);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.getFeatures();
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 't';
      charArray0[2] = 's';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = 'y';
      charArray0[6] = ']';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 989, 2739);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char char0 = 'e';
      jSONScanner0.scanInt('e');
      char[] charArray0 = new char[1];
      jSONScanner0.scanFieldString(charArray0);
      charArray0[0] = 'z';
      jSONScanner0.features = 0;
      jSONScanner0.scanString('l');
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.ch = '2';
      int int0 = 3215;
      jSONScanner0.nextToken(3215);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TMzoO");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanType("unclosed");
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('a', 'a', 'a', 'w', 'w');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "Set";
      StringReader stringReader0 = new StringReader("Set");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanDate('Y');
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.timeZone = timeZone0;
      Locale locale0 = Locale.JAPANESE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      jSONReaderScanner0.scanStringArray(list1, 'Y');
      timeZone0.getDisplayName(locale0);
      // Undeclared exception!
      try { 
        timeZone0.getDisplayName(false, 16384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 16384
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KM% Tb2+04K5$");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = ' ';
      charArray0[0] = ' ';
      int int0 = 4096;
      int int1 = (-1906);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4096, (-1906));
      jSONReaderScanner0.scanType(";");
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : [
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("u'T");
      jSONScanner0.setToken((-2868));
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      jSONScanner0.next();
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 834);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'r';
      charArray0[2] = ')';
      charArray0[3] = 'U';
      charArray0[4] = 'N';
      charArray0[5] = 'L';
      charArray0[6] = ')';
      charArray0[7] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8);
      char[] charArray1 = new char[2];
      charArray1[0] = 'E';
      charArray1[1] = ')';
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      int int0 = jSONReaderScanner0.scanFieldInt(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONLexerBase.isWhitespace('(');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      jSONReaderScanner0.scanBoolean('F');
      jSONReaderScanner0.bytesValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n-%lzVSTQCA@bo:");
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = '<';
      charArray0[2] = '}';
      charArray0[3] = 'y';
      charArray0[4] = '_';
      charArray0[5] = '_';
      charArray0[6] = 'I';
      charArray0[7] = 'p';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'p';
      charArray1[1] = 'y';
      charArray1[2] = 'b';
      charArray1[3] = '<';
      charArray1[4] = '_';
      charArray1[5] = '}';
      charArray1[6] = '}';
      charArray1[7] = '<';
      charArray1[8] = 'b';
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("n-%lzVSTQCA@bo:", (-2), charArray1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")hb=");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 123);
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q_P*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      stringReader0.mark(0);
      jSONReaderScanner0.info();
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('q', char0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONException", 112);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = (-2670);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tmzoo", (-2670));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      jSONScanner0.scanIdent();
      int int0 = 62;
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      jSONScanner0.timeZone = timeZone0;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - e, info : pos 4, json : EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "ALg,=GB/j=dHp:_yx";
      int int0 = (-1338);
      JSONScanner jSONScanner0 = new JSONScanner("ALg,=GB/j=dHp:_yx", (-1338));
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'E';
      charArray0[2] = '%';
      charArray0[3] = 'E';
      charArray0[4] = '%';
      charArray0[5] = 'E';
      jSONScanner0.scanFieldInt(charArray0);
      char char0 = 'h';
      jSONScanner0.putChar('i');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('E', '%', 'i', 'h', 'i');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103);
      float float0 = jSONReaderScanner0.scanFloat('M');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'x';
      charArray0[2] = 'R';
      charArray0[3] = '#';
      charArray0[4] = 'y';
      charArray0[5] = 'I';
      charArray0[6] = '0';
      charArray0[7] = 's';
      charArray0[8] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 110);
      boolean boolean0 = jSONReaderScanner0.isEnabled(1145);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(110, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 361, (-2046));
      jSONReaderScanner0.scanString('l');
      jSONReaderScanner0.getCalendar();
      JSONScanner jSONScanner0 = new JSONScanner("", 855);
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('6', ' ', ']', ' ', 'l');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      char char0 = ']';
      charArray0[1] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 13);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-2519);
      JSONScanner jSONScanner0 = new JSONScanner("p;u=dAYq*c!FKJ3", (-2519));
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = 'k';
      charArray0[2] = 'g';
      charArray0[3] = ';';
      charArray0[4] = ')';
      jSONScanner0.scanDecimal(')');
      charArray0[5] = 'V';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('k', '6', 'T');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.isRef();
      stringReader0.markSupported();
      stringReader0.close();
      char char0 = '<';
      charArray0[0] = '<';
      charArray0[1] = 'P';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '5';
      char char0 = '\'';
      charArray0[2] = '\'';
      charArray0[3] = ':';
      charArray0[4] = '>';
      charArray0[5] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 82);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed.str");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.skipWhitespace();
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str");
      char[] charArray0 = null;
      int int0 = 808;
      jSONScanner0.matchStat = 49;
      jSONScanner0.nextToken(3172);
      SymbolTable symbolTable0 = new SymbolTable(808);
      int int1 = (-1727652445);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol((char[]) null, (-643), 808, (-3557));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", (-883));
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = '$';
      charArray0[2] = '1';
      charArray0[3] = 'T';
      charArray0[4] = '^';
      charArray0[5] = '';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("cy+[B#V]i", 50);
      SymbolTable symbolTable0 = new SymbolTable(3458);
      char char0 = 'p';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'p');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L");
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'm';
      charArray0[2] = 'w';
      charArray0[3] = '`';
      charArray0[4] = 'a';
      charArray0[5] = '/';
      charArray0[6] = 'f';
      charArray0[7] = 'y';
      jSONScanner0.scanIdent();
      charArray0[8] = 'W';
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-2467));
      char char0 = '>';
      jSONReaderScanner0.scanDate('>');
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2467));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IgnoreNonFieldGetter", 95);
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONScanner0.scanStringArray(hashSet0, '^');
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 754);
      jSONScanner0.scanUUID('\'');
      jSONScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d2z=,?\"", 1035);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONReaderScanner0.scanString();
      int int0 = 4096;
      char[] charArray0 = new char[8];
      char char0 = '>';
      charArray0[0] = '>';
      char char1 = '3';
      charArray0[1] = '3';
      charArray0[2] = 'Y';
      char char2 = 'v';
      charArray0[3] = 'v';
      char char3 = 'r';
      charArray0[4] = 'r';
      char char4 = 'H';
      charArray0[5] = 'H';
      char char5 = 'U';
      charArray0[6] = 'U';
      charArray0[7] = 'b';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(1035, 4096, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Qc<0zg)", 2239);
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = '`';
      charArray0[2] = 'I';
      charArray0[3] = 'b';
      charArray0[4] = 'S';
      charArray0[5] = 'Q';
      charArray0[6] = '#';
      charArray0[7] = 'd';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('\'');
      jSONReaderScanner0.getTimeZone();
      assertEquals(2239, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ");
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldString(charArray0);
      charArray0[0] = '&';
      charArray0[1] = 'K';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanLong('3');
      Locale locale0 = Locale.UK;
      jSONReaderScanner0.setLocale(locale0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("saR");
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(4195293, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BeanToArray");
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TMzoO 8hsG;", (-117));
      int int0 = 0;
      jSONScanner0.matchStat = 0;
      jSONScanner0.nextIdent();
      char char0 = '_';
      jSONScanner0.scanDouble('_');
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'y';
      charArray0[2] = 'c';
      charArray0[3] = 'r';
      charArray0[4] = 'D';
      charArray0[5] = 'H';
      charArray0[6] = ' ';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 87);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n");
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanUUID('!');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 55232;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n", 55232);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.resetStringPosition();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      JSONScanner jSONScanner0 = new JSONScanner("n", 112);
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, collection0);
      Locale.lookupTag(arrayList0, list0);
      locale0.stripExtensions();
      locale0.getExtension('n');
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.resetStringPosition();
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 531;
      JSONScanner jSONScanner0 = new JSONScanner("x9NCr$,&Es]7nMK", 531);
      jSONScanner0.scanDate('{');
      SymbolTable symbolTable0 = new SymbolTable(913);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
