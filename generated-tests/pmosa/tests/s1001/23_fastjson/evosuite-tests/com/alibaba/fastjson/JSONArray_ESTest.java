/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:39:28 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 16384;
      JSONArray jSONArray0 = new JSONArray(16384);
      // Undeclared exception!
      try { 
        jSONArray0.subList(16384, 16384);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 16384
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-3250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3250
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1995);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1995, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1379);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) mockHijrahDate0);
      boolean boolean0 = jSONArray1.removeAll(jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, object0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(object0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue(18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(2048);
      jSONArray0.fluentSet(0, integer0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      List<MockThaiBuddhistDate> list0 = jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) mockJapaneseDate0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      jSONArray2.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1500), 989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1500
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.retainAll(jSONArray0);
      Object object0 = new Object();
      JSONArray jSONArray3 = jSONArray2.fluentRemove(object0);
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(99999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-156);
      JSONArray jSONArray0 = new JSONArray();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<MockMinguoDate> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray0.get((-156));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 466;
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(773, object0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(object0);
      float float0 = jSONArray2.getFloatValue(18);
      assertEquals(775, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.fluentRetainAll(jSONArray0);
      String string0 = "";
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONArray1.retainAll(jSONArray0);
      String string1 = "";
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        JSON.parse(">] kYN`~(S.Lb)=SvL", parserConfig0, 1004);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : >] kYN`~(S.Lb)=SvL
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(106, jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(object0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue(106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"},{}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-27), object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(8064);
      Class<Method> class0 = Method.class;
      JSON.parseArray((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[2] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[3] = "1.2.46";
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) class0);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(106);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 106, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(106, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 107
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      String[] stringArray0 = new String[5];
      jSONArray0.DEFFAULT_DATE_FORMAT = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(79);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.indexOf(object0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getByte(106);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 106, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      int int0 = 195;
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(195, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 195, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      serializeConfig0.config(class0, serializerFeature0, true);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      serializeConfig0.getObjectWriter(class1);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Integer integer0 = new Integer(989);
      javaBeanSerializer0.getType();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.lastIndexOf(mockHijrahDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(237);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 237, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4444);
      Integer integer0 = new Integer(4444);
      jSONArray0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(4444);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4444, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.lastIndexOf(mockJapaneseDate0);
      int int0 = 0;
      jSONArray1.add(0, (Object) mockJapaneseDate0);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4444);
      byte byte0 = ObjectStreamConstants.TC_MAX;
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.lastIndexOf(mockJapaneseDate0);
      jSONArray2.add(0, (Object) jSONArray0);
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-686));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4);
      // Undeclared exception!
      try { 
        jSONArray0.remove(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1015;
      JSONArray jSONArray1 = new JSONArray(1015);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4444);
      byte byte0 = ObjectStreamConstants.TC_MAX;
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(2589);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2589, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4444);
      JSONArray jSONArray1 = new JSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(4413);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4413
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(122, jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray1.setRelatedArray(jSONArray0);
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      JSONArray jSONArray3 = new JSONArray(jSONArray1);
      jSONArray1.lastIndexOf(linkedList0);
      jSONArray2.getLongValue(94);
      // Undeclared exception!
      try { 
        jSONArray2.getTimestamp(122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(122, jSONArray0);
      JSONArray jSONArray3 = (JSONArray)jSONArray2.clone();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "InitStringFieldAsEmpty";
      stringArray0[4] = "";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[7] = "";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Class<Object> class1 = Object.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1, (Map<String, String>) null);
      javaBeanSerializer1.getBeforeFilters();
      javaBeanSerializer0.getType();
      jSONArray1.getObject(110, (Type) class1);
      // Undeclared exception!
      try { 
        jSONArray3.getLong((-446));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.equals(mockHijrahDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(122, jSONArray0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<>'ur";
      stringArray0[1] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[2] = "";
      stringArray0[3] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.MapSortField;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.writeJSONString((OutputStream) byteArrayOutputStream0, (Object) jSONArray2, 989, serializerFeatureArray0);
      JSON.DEFFAULT_DATE_FORMAT = ">] kYN`~(S.Lb)=SvL";
      stringArray0[6] = "";
      stringArray0[7] = "1.2.46";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1, map0);
      javaBeanSerializer0.getBeforeFilters();
      javaBeanSerializer0.getType();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getObject(115, (Type) parameterizedTypeImpl0);
      jSONArray0.getLong(79);
      int int0 = jSONArray2.size();
      assertEquals(123, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(103);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(103, jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.getIntValue(55);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(723);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 723, Size: 104
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3027);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[5] = ">] kYN`~(S.Lb)=SvL";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      com.alibaba.fastjson.util.ParameterizedTypeImpl parameterizedTypeImpl0 = new com.alibaba.fastjson.util.ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3027, (Object) null);
      jSONArray1.add(989, (Object) parameterizedTypeImpl0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1325));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      jSONArray0.fluentSet(122, jSONArray0);
      int int0 = 1;
      jSONArray0.getDoubleValue(1);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.setRelatedArray(jSONArray0);
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-441));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(122, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(122, jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.setRelatedArray(jSONArray0);
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(122);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONArray cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(122, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentAdd(object0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Object object1 = new Object();
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray3.getRelatedArray();
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.equals(mockHijrahDate0);
      jSONArray0.getComponentType();
      Object[] objectArray0 = jSONArray0.toArray();
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(122, jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      int int0 = Calendar.WEDNESDAY;
      jSONArray2.getBooleanValue(91);
      int int1 = Calendar.MONDAY;
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[1];
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1000);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1000, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(122, jSONArray0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.getIntValue(79);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.getShortValue(91);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.contains(mockHijrahDate0);
      jSONArray1.getDouble(0);
      assertEquals(123, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(119);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      int int0 = 2140;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 122);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      jSONArray0.fluentSet(2140, dataInputStream0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(2140);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.io.DataInputStream@24689b7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(119);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(119, jSONArray0);
      jSONArray0.setRelatedArray(jSONArray0);
      Integer integer0 = new Integer(989);
      jSONArray1.getBoolean(88);
      assertEquals(120, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray(122);
      JSONArray jSONArray1 = jSONArray0.fluentSet(122, jSONArray0);
      Integer integer0 = new Integer(122);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      JSONArray jSONArray1 = jSONArray0.fluentSet(122, jSONArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = ":KYg>";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = ">] kYN`~(S.Lb)=SvL";
      stringArray0[4] = ">] kYN`~(S.Lb)=SvL";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      jSONArray0.setComponentType((Type) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray1.getShortValue(91);
      LinkedHashSet<MockHijrahDate> linkedHashSet0 = new LinkedHashSet<MockHijrahDate>();
      jSONArray1.addAll(91, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      jSONArray0.fluentSet(122, jSONArray0);
      int int0 = Calendar.WEDNESDAY;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      JSONArray jSONArray1 = jSONArray0.fluentSet(122, jSONArray0);
      jSONArray0.fluentSet(106, jSONArray1);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"},null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(76);
      LinkedHashSet<Method> linkedHashSet0 = new LinkedHashSet<Method>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(76, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(76, (Object) linkedHashSet0);
      jSONArray2.add((Object) jSONArray0);
      jSONArray2.containsAll(linkedHashSet0);
      JSONObject jSONObject0 = new JSONObject((Map<String, Object>) null);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      assertEquals(158, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(122);
      LinkedList<MockMinguoDate> linkedList0 = new LinkedList<MockMinguoDate>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(122, jSONArray0);
      linkedList0.listIterator();
      jSONArray0.getDoubleValue(1);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.setRelatedArray(jSONArray0);
      MockJapaneseDate mockJapaneseDate1 = new MockJapaneseDate();
      jSONArray0.lastIndexOf(linkedList0);
      jSONArray1.getLongValue(94);
      jSONArray1.getLongValue(106);
      jSONArray1.getBoolean(94);
      jSONArray0.size();
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      // Undeclared exception!
      try { 
        jSONArray1.removeAll(linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(76);
      LinkedHashSet<Method> linkedHashSet0 = new LinkedHashSet<Method>();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(76, linkedHashSet0);
      jSONArray1.add((Object) jSONArray0);
      jSONArray0.containsAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.getJSONArray(76);
      jSONArray0.add((Object) jSONArray2);
      jSONArray2.containsAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray((-2962));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject[] jSONObjectArray0 = new JSONObject[2];
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObjectArray0[0] = jSONObject0;
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(jSONObject0);
      jSONObjectArray0[1] = jSONObject1;
      JSONObject[] jSONObjectArray1 = jSONArray0.toArray(jSONObjectArray0);
      assertSame(jSONObjectArray0, jSONObjectArray1);
  }
}
