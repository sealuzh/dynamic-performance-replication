/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:12:12 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-58);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.EmptyFileFilter";
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      classReader0.getInterfaces();
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader1, 4);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      char char0 = 't';
      char char1 = '';
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader("LocalVariableTable");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      classReader0.getInterfaces();
      classReader0.getSuperName();
      ClassReader classReader1 = new ClassReader(classReader0.b, 703, 1);
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter(classReader1, 716);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      char[] charArray0 = new char[3];
      classReader0.getInterfaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.EmptyFileFilter");
      charArray0[0] = 'V';
      char[] charArray1 = new char[7];
      charArray1[0] = 'V';
      classReader0.getAccess();
      // Undeclared exception!
      try { 
        classReader0.readClass(952, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46848
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      char[] charArray1 = new char[2];
      charArray1[0] = 'D';
      charArray1[1] = 'U';
      // Undeclared exception!
      try { 
        classReader0.readConst(47, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      int int0 = 0;
      classReader0.getClassName();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("E");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      char[] charArray0 = new char[3];
      String[] stringArray0 = classReader0.getInterfaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.EmptyFileFilter");
      charArray0[0] = 'V';
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.cr = classReader0;
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 199, "org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.EmptyFileFilter", stringArray0, false, false);
      MethodWriter methodWriter1 = methodWriter0.next;
      classWriter0.firstMethod = null;
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      classReader0.accept((ClassVisitor) classAdapter0, 2);
      char[] charArray1 = new char[7];
      charArray1[0] = 'V';
      // Undeclared exception!
      try { 
        classReader0.readConst(541, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 541
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      char[] charArray0 = new char[3];
      classReader0.getInterfaces();
      assertEquals(703, classReader0.header);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.EmptyFileFilter");
      Object object0 = new Object();
      String string0 = classReader0.getClassName();
      assertEquals("org/apache/commons/io/filefilter/EmptyFileFilter", string0);
      
      int int0 = classReader0.readByte(41);
      assertEquals(0, int0);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      long long0 = classReader0.readLong(1);
      assertEquals((-91551935198384384L), long0);
      
      short short0 = classReader0.readShort(1);
      assertEquals((short) (-326), short0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      char[] charArray0 = new char[3];
      classReader0.getInterfaces();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.EmptyFileFilter");
      charArray0[0] = 'V';
      ClassWriter classWriter0 = new ClassWriter(448);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      classReader0.accept((ClassVisitor) classAdapter0, 2);
      char[] charArray1 = new char[7];
      // Undeclared exception!
      try { 
        classReader0.readClass(131072, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Object");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = "java/lang/Throwable";
      ClassReader classReader1 = new ClassReader("java/lang/Throwable");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4463, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertNotSame(classReader0, classReader1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader0.b, 2, (-33));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1002
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(703, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(703, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(703, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(612, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertEquals(1057, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(classReader1, 4);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(612, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      assertEquals(1057, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(612, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      assertEquals(1057, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      classReader1.accept((ClassVisitor) classAdapter0, 2);
      assertNotSame(classReader1, classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(612, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1057, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '_';
      // Undeclared exception!
      try { 
        classReader1.getItem(131);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 131
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`$");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        classReader0.readConst(8, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(612, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      assertEquals(1057, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      classReader1.accept((ClassVisitor) classAdapter0, 2);
      assertNotSame(classReader1, classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(612, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1057, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      String[] stringArray1 = classReader1.getInterfaces();
      assertNotSame(classReader1, classReader0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(612, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(stringArray1);
      assertEquals(1057, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[7];
      String[] stringArray2 = classReader0.getInterfaces();
      assertNotSame(classReader0, classReader1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertNotNull(stringArray2);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      charArray0[0] = '_';
      // Undeclared exception!
      try { 
        classReader1.readConst(78, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.ClassReader");
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertNotNull(classReader0);
          assertEquals(33, classReader0.getAccess());
          
          ClassWriter classWriter0 = new ClassWriter(classReader0, 8070);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertNotNull(classWriter0);
          assertEquals(33, classReader0.getAccess());
          
          ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertNotNull(classAdapter0);
          assertEquals(33, classReader0.getAccess());
          
          classAdapter0.visitSource("wheel.asm.ClassReader", "LineNumberTable");
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(33, classReader0.getAccess());
          
          ClassAdapter classAdapter1 = new ClassAdapter(classWriter0);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertNotNull(classAdapter1);
          assertEquals(33, classReader0.getAccess());
          assertFalse(classAdapter1.equals((Object)classAdapter0));
          
          ClassAdapter classAdapter2 = new ClassAdapter(classAdapter0);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertNotNull(classAdapter2);
          assertEquals(33, classReader0.getAccess());
          assertFalse(classAdapter0.equals((Object)classAdapter1));
          assertFalse(classAdapter2.equals((Object)classAdapter0));
          assertFalse(classAdapter2.equals((Object)classAdapter1));
          
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          assertNotNull(fileSystemHandling0);
          
          Object object0 = new Object();
          assertNotNull(object0);
          
          String string0 = classReader0.getClassName();
          assertEquals("wheel/asm/ClassReader", string0);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(8070, classReader0.header);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertNotNull(string0);
          assertEquals(33, classReader0.getAccess());
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertNotNull(fileDescriptor0);
          assertFalse(fileDescriptor0.valid());
          
          MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
          assertNotNull(mockFileInputStream0);
          assertFalse(fileDescriptor0.valid());
          
          ClassReader classReader1 = null;
          try {
            classReader1 = new ClassReader(mockFileInputStream0);
            fail("Expecting exception: IOException");
          
          } catch(Throwable e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      assertNotNull(classAdapter0);
      
      ClassWriter classWriter1 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      classReader1.accept((ClassVisitor) classWriter0, (-1871));
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(703, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(703, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(703, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(classReader1, 8070);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassAdapter classAdapter0 = new ClassAdapter((ClassVisitor) null);
      assertNotNull(classAdapter0);
      
      ClassWriter classWriter1 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      classReader1.accept((ClassVisitor) classWriter0, (-1871));
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      int int0 = classWriter0.addType("");
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(1, int0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 't';
      // Undeclared exception!
      try { 
        classAdapter0.visitAnnotation("org/apache/commons/io/filefilter/AbstractFileFilter", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(703, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(703, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(703, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8070, classReader1.header);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      
      classReader1.accept((ClassVisitor) classAdapter0, 2);
      ClassAdapter classAdapter2 = new ClassAdapter(classWriter0);
      char[] charArray0 = new char[0];
      classReader0.readUTF8(8070, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertNotNull(stringArray0);
      assertEquals(33, classReader0.getAccess());
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(703, classReader0.header);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter0);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      
      classReader1.accept((ClassVisitor) classWriter0, 703);
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter0, classWriter1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter0.equals((Object)classWriter1));
      
      classWriter1.cr = classReader1;
      assertEquals(33, classReader1.getAccess());
      assertEquals(33, classWriter1.cr.getAccess());
      
      ClassAdapter classAdapter2 = new ClassAdapter(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter2);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter2.equals((Object)classAdapter0));
      assertFalse(classAdapter2.equals((Object)classAdapter1));
      
      ClassAdapter classAdapter3 = new ClassAdapter(classAdapter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classAdapter3);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter0.equals((Object)classAdapter1));
      assertFalse(classAdapter0.equals((Object)classAdapter2));
      assertFalse(classAdapter3.equals((Object)classAdapter0));
      assertFalse(classAdapter3.equals((Object)classAdapter2));
      assertFalse(classAdapter3.equals((Object)classAdapter1));
      
      classReader1.accept((ClassVisitor) classWriter0, (-36));
      Object object0 = new Object();
      classReader0.copyPool(classWriter1);
      classReader1.getSuperName();
      ClassReader classReader2 = new ClassReader(classReader1.b);
      ClassReader classReader3 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      classReader3.copyPool(classWriter1);
      classReader1.getSuperName();
      ClassReader classReader4 = new ClassReader(classReader3.b, 1607, 2);
      classReader4.readShort(classReader3.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.EmptyFileFilter");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(703, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      assertEquals(33, classReader0.getAccess());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.EmptyFileFilter");
      assertFalse(boolean0);
      
      String string0 = classReader0.getSuperName();
      assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", string0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(703, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(string0);
      assertEquals(33, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter0);
      
      ClassWriter classWriter1 = new ClassWriter(4);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      ClassAdapter classAdapter1 = new ClassAdapter(classAdapter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classAdapter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(classAdapter1.equals((Object)classAdapter0));
      
      classReader1.accept((ClassVisitor) classAdapter0, 2);
      ClassAdapter classAdapter2 = new ClassAdapter(classWriter0);
      ClassAdapter classAdapter3 = new ClassAdapter(classAdapter0);
      classReader0.accept((ClassVisitor) classWriter1, 8);
      Object object0 = new Object();
      classReader1.accept((ClassVisitor) classWriter1, 8);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)10;
      byteArray0[0] = byte0;
      ClassReader classReader2 = new ClassReader(byteArray0, classWriter0.COMPUTE_FRAMES, classReader1.header);
      classReader2.getAccess();
      classReader1.getSuperName();
      ClassReader classReader3 = new ClassReader(byteArray0);
      int int0 = 46;
      int int1 = 1727;
      ClassReader classReader4 = new ClassReader(classReader0.b, int0, int1);
      classReader4.copyPool(classWriter1);
      int int2 = 399;
      classReader3.accept((ClassVisitor) classAdapter0, int2);
  }
}
