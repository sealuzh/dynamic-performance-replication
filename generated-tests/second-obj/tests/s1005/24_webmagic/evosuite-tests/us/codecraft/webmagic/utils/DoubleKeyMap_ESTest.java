/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:29:33 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap0.newMap();
      doubleKeyMap0.get("");
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap0, class1);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("", (Map<Object, Integer>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>((Map<Integer, Map<Integer, Object>>) null);
      Map<Integer, Object> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap0.get("", "G}RU4yRtpgbX]B");
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap1.put((Object) null, (Object) "G}RU4yRtpgbX]B", ";P3'(&v_:1\"c|_^NY?-");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      Object object0 = new Object();
      String string0 = null;
      Map<Object, Object> map0 = new HashMap<Object, Object>();
      doubleKeyMap0.remove(" yO#+4Tv/");
      Object object1 = new Object();
      doubleKeyMap0.put((String) null, object1, (String) null);
      doubleKeyMap0.put((String) null, (Object) "sWM83H'vqX.Bk1", "\"mDZC!9+,");
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>(class1);
      doubleKeyMap1.get((String) null, "0><x8V|35;;_dmiz");
      doubleKeyMap0.get((String) null, (Object) hashMap0);
      Class<Map> class2 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<Object, Integer, String>(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1233));
      doubleKeyMap0.put((Object) hashMap0, integer0, (Object) null);
      Map<Map<Object, Object>, String> map0 = doubleKeyMap0.newMap();
      Integer integer1 = new Integer((-2255));
      doubleKeyMap0.get((Object) map0, integer1);
      HashMap<Map<Object, Object>, Map<Integer, Object>> hashMap1 = new HashMap<Map<Object, Object>, Map<Integer, Object>>();
      DoubleKeyMap<Map<Object, Object>, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, Integer, Object>(hashMap1);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      Object object0 = new Object();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap2.remove("", (Object) hashMap2);
      DoubleKeyMap<String, String, Object> doubleKeyMap3 = new DoubleKeyMap<String, String, Object>();
      Object object1 = new Object();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Object, Object>> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<Object, Object, Map<Object, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      int int0 = 861;
      Integer integer0 = new Integer(861);
      doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(map0, "", integer0);
      doubleKeyMap0.remove(map0, "");
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Integer, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(861);
      doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.remove(map0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      int int0 = 1492;
      Integer integer1 = new Integer(1492);
      doubleKeyMap0.put(map0, "\"F~3nr", integer1);
      doubleKeyMap0.remove(map0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Integer, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
