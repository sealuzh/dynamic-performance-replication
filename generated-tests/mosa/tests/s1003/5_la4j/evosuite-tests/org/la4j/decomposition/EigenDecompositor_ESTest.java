/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:02:31 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.DenseMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) (-1);
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      Matrix matrix0 = Matrix.from2DArray(doubleArray1);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-687.2920429858707);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 28;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(20, 20);
      double[][] doubleArray0 = new double[4][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.matrix = matrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) 1073735531;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[3] = (double) 1073735531;
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) 1073735532;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[3] = (double) 1073735532;
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      DenseVector denseVector0 = DenseVector.unit(3);
      assertEquals(3, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      assertEquals(3, denseVector0.length());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotNull(matrix0);
      
      Random.setNextRandom(3);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertEquals(3, denseVector0.length());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(3, denseVector0.length());
      assertEquals(3, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) 1073735522;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) 1073735522;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[18];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) 1073735522;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[3] = (double) 1073735522;
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(20, (-661.9421047140635));
      assertEquals(20, denseMatrix0.columns());
      assertEquals(20, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (-661.9421047140635);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-661.9421047140635);
      doubleArray2[3] = (double) 20;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[15];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 20;
      doubleArray0[3] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrixArray0);
      assertNotSame(matrix0, denseMatrix0);
      
      boolean boolean0 = eigenDecompositor0.applicableTo(denseMatrix0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertTrue(boolean0);
      assertEquals(20, denseMatrix0.columns());
      assertEquals(20, denseMatrix0.rows());
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-687.0);
      doubleArray1[1] = (-687.0);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-687.0);
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(19, 19);
      assertEquals(19, denseMatrix0.columns());
      assertEquals(19, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[2] = (double) 19;
      doubleArray2[4] = (double) 19;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 19.0;
      doubleArray3[3] = (double) 19;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[15];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 19.0;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrixArray0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = (-687.2920429858707);
      doubleArray1[3] = (double) 41;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-687.2920429858707);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[2] = (-0.22310832023432303);
      doubleArray3[3] = (double) 41;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-687.2920429858707);
      doubleArray4[1] = (-687.2920429858707);
      doubleArray4[4] = (double) 41;
      doubleArray4[5] = (double) 41;
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrixArray0);
      
      Matrix[] matrixArray1 = eigenDecompositor0.decompose();
      assertFalse(matrixArray1.equals((Object)matrixArray0));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrixArray1);
      assertNotSame(matrixArray1, matrixArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (-661.9421047140635);
      doubleArray1[3] = (double) 41;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[3] = (double) 41;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[15];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-661.9421047140635);
      doubleArray3[1] = 41.0;
      doubleArray0[3] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      
      Matrix matrix1 = Matrix.from2DArray(doubleArray0);
      assertTrue(matrix1.equals((Object)matrix0));
      assertEquals(4, matrix1.columns());
      assertEquals(4, matrix1.rows());
      assertNotNull(matrix1);
      assertNotSame(matrix1, matrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertTrue(matrix0.equals((Object)matrix1));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrixArray0);
      assertNotSame(matrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 19;
      doubleArray2[3] = (double) 19;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[15];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 19;
      doubleArray0[3] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(19, 19);
      assertEquals(19, denseMatrix0.rows());
      assertEquals(19, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[3] = (double) 19;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[15];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 19;
      doubleArray3[1] = 0.0;
      doubleArray0[3] = doubleArray3;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrixArray0);
      assertNotSame(matrix0, denseMatrix0);
      
      Random.setNextRandom(19);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(20, (-661.9421047140635));
      assertEquals(20, denseMatrix0.rows());
      assertEquals(20, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-661.9421047140635);
      doubleArray2[2] = (-661.9421047140635);
      doubleArray2[4] = (-661.9421047140635);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 20;
      doubleArray3[0] = 20.0;
      doubleArray3[3] = (double) 20;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[15];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-661.9421047140635);
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertNotNull(matrixArray0);
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(20, (-661.9421047140635));
      assertEquals(20, denseMatrix0.columns());
      assertEquals(20, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-661.9421047140635);
      doubleArray2[2] = (-661.9421047140635);
      doubleArray2[3] = (double) 20;
      doubleArray2[4] = (-661.9421047140635);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray2[0] = (double) 20;
      doubleArray3[0] = 20.0;
      doubleArray3[3] = (double) 20;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[15];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-661.9421047140635);
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      assertNotSame(matrix0, denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertEquals(4, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrixArray0);
      assertNotSame(matrix0, denseMatrix0);
  }
}
