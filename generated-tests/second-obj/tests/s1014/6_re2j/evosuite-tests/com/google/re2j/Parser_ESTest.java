/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:33:53 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 1125;
      try { 
        Parser.parse("),*p", 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      try { 
        Parser.parse("(?PQ", (-1987));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 85);
      regexp0.reinit();
      Regexp regexp1 = null;
      Regexp regexp2 = null;
      try {
        regexp2 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "%@(?(?-s#.)";
      try { 
        Parser.parse("%@(?(?-s#.)", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "+";
      try { 
        Parser.parse("+", 4152);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        Parser.parse("*yUz(BA- K&Do ;9", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p{0F}", 9);
      regexp0.toString();
      String string0 = regexp0.toString();
      assertEquals("(?i:P\\{0F\\})", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 545;
      try { 
        Parser.parse("(I", 545);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(I`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\n", 1460);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("|", 4152);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp((Regexp.Op) null);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp4 = new Regexp(regexp_Op1);
      assertNotNull(regexp4);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = new Regexp(regexp3);
      assertNotNull(regexp5);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp4));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1217;
      Regexp regexp0 = Parser.parse("^P", 1217);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("^P", 1217);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      int int1 = 88;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      regexpArray0[3] = regexp2;
      regexp1.flags = (-481);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1217, 88);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-383);
      String string0 = "(.";
      try { 
        Parser.parse("(.", (-383));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(.`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 116;
      try { 
        Parser.parse("j(", 116);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `j(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "(?(?P<(?(?(?5s(";
      int int0 = 1485;
      Regexp[] regexpArray0 = new Regexp[4];
      String string1 = ".8.\\2tW^>Q";
      Regexp regexp0 = Parser.parse(".8.\u0002tW^>Q", 1485);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp regexp0 = Parser.parse("-", (-655));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-577), (-357));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -577
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x0-xB$tFFFF}", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-1943);
      Regexp regexp0 = Parser.parse("{", (-1943));
      assertNotNull(regexp0);
      
      int int1 = 70;
      String string0 = "[::]";
      Regexp regexp1 = Parser.parse(string0, int1);
      assertNotNull(regexp1);
      assertFalse(int1 == int0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string1 = "Any";
      Regexp regexp2 = Parser.parse(string1, int1);
      assertNotNull(regexp2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int2 = 393;
      Regexp regexp3 = Parser.parse(string1, int0);
      assertNotNull(regexp3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      
      Regexp regexp4 = Parser.parse(string1, int2);
      assertNotNull(regexp4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      String string0 = "%$\\GVDx@Ngla=XPd}@";
      int int0 = 0;
      Regexp regexp0 = Parser.parse("%$GVDx@Ngla=XPd}@", 0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\G`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 64326;
      Regexp regexp0 = Parser.parse("$K", 88);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("$K", 64326);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      String string0 = "\\C";
      Regexp regexp2 = Parser.parse("C", 88);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      int int1 = (-457);
      Regexp regexp3 = Parser.parse(string0, int1);
      assertNotNull(regexp3);
      assertFalse(int1 == int0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      Regexp[] regexpArray0 = new Regexp[0];
      int int2 = (-1031);
      int int3 = 49;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int2, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1031
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "\\p1<L d";
      Regexp regexp0 = Parser.parse("p1<L d", (-51));
      assertNotNull(regexp0);
      
      int int0 = (-1614);
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 197;
      String string0 = "~?)PoKkE+POmI?\"d%:?";
      try { 
        Parser.parse("~?)PoKkE+POmI?\"d%:?", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-292);
      String string0 = "\\P\\x{3000}](?i:C-)^";
      try { 
        Parser.parse("Px{3000}](?i:C-)^", (-292));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid repeat count: `{3000}`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "[k";
      try { 
        Parser.parse("[k", 3317);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[k`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 40;
      String string0 = "yn-0H_PTNNy\\2A%4HXH";
      try { 
        Parser.parse("[:", 40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "0[";
      int int0 = 32;
      try { 
        Parser.parse("0[", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        Parser.parse("+&", 1125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp regexp0 = Parser.parse("U|", 81);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      regexp0.op = regexp_Op0;
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp regexp0 = Parser.parse("oc>|m", 1460);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp regexp0 = Parser.parse(";|^", 1243);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("p", 1243);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[4] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp2 = Parser.parse(";|^", 88);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      regexpArray0[3] = regexp2;
      Regexp[] regexpArray1 = regexp2.subs;
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 565;
      Regexp regexp0 = Parser.parse("^u\u0001<L d", 565);
      assertNotNull(regexp0);
      
      regexp0.flags = int0;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("[:V]", 20);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "[:";
      int int0 = 42;
      int int1 = 93;
      try { 
        Parser.parse("[:", 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "\\5";
      Regexp regexp0 = Parser.parse("\u0005", 1460);
      assertNotNull(regexp0);
      
      int int0 = 53;
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\5`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007RQ3B{2[jXX31]=tI", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp regexp0 = Parser.parse("", 1460);
      assertNotNull(regexp0);
      
      String string0 = "QUEST";
      int int0 = 124;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      
      int int1 = 44;
      Parser parser0 = new Parser(string0, int1);
      assertNotNull(parser0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", 2253);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 1797, 7247);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1797
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Parser parser0 = new Parser("P1<L d", 332);
      assertNotNull(parser0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("\\b", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = Parser.parse("\b", 332);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = regexp0.equals(object1);
      assertFalse(boolean0);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(object1, object0);
      
      regexp1.reinit();
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      
      Parser parser1 = new Parser("\b", (-3085));
      assertNotNull(parser1);
      assertFalse(parser1.equals((Object)parser0));
      
      Regexp regexp3 = Parser.parse("KQh<\",}IK", 3022);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      Regexp regexp4 = new Regexp(regexp0);
      assertNotNull(regexp4);
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = new Regexp(regexp4);
      assertNotNull(regexp5);
      assertFalse(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "Ob";
      int int0 = 61;
      Parser parser0 = new Parser("Ob", 61);
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      int int1 = 85;
      try { 
        Parser.parse("DAv I:)Ux`%", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{8 X%8T;{\"q}`0+L", (-1756));
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@", 1460);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string0 = regexp1.toString();
      assertEquals("@", string0);
      assertNotNull(string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = new Regexp(regexp3);
      assertNotNull(regexp4);
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      
      String string1 = regexp4.toString();
      assertEquals("@", string1);
      assertNotNull(string1);
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp4);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp4);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      
      Regexp regexp5 = new Regexp(regexp4);
      assertNotNull(regexp5);
      assertTrue(regexp0.equals((Object)regexp3));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp2));
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp4));
      assertTrue(regexp2.equals((Object)regexp3));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertTrue(regexp5.equals((Object)regexp4));
      
      regexp4.cap = 120;
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp4;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp3;
      regexp0.subs = regexpArray0;
      Parser parser0 = new Parser("@", 64);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      try { 
        Parser.parse("(?P<(?(?P<(?", (-28));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<(?(?P<(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|^e:", 1217);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 133;
      String string0 = "\\.+*?()|[]{}^$";
      int int1 = 1652;
      Parser parser0 = new Parser(".+*?()|[]{}^$", 1652);
      assertNotNull(parser0);
      
      String string1 = "Mandaic";
      Regexp regexp0 = Parser.parse("Mandaic", 133);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("6wAwk", (-5012));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      try { 
        Parser.parse(".+*?()|[]{}^$", 1652);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|E", (-16));
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("dS:uORvrl*HIl$#QNo", (-16));
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "\\t";
      int int0 = 4249;
      Parser parser0 = new Parser("\t", 4249);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("\t", 4249);
      assertNotNull(regexp0);
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 4249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      String string0 = "\\x{";
      Regexp regexp1 = Parser.parse("x{", 97);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      int int0 = (-63);
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\x{`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "[:\\x00-\\x{0FFFF}]";
      int int0 = 49;
      Regexp regexp0 = Parser.parse("[:x00-x{0FFFF}]", 49);
      assertNotNull(regexp0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = regexp0.equals(string0);
      assertFalse(boolean0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string1 = regexp0.toString();
      assertEquals("[0-\\{\\}\u017F\u212A]", string1);
      assertNotNull(string1);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp0, regexp1);
      
      int int1 = 118;
      Regexp regexp2 = Parser.parse(string0, int1);
      assertNotNull(regexp2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string2 = "(?-s";
      int int2 = 1634;
      Regexp regexp3 = Parser.parse(string2, int2);
      assertNotNull(regexp3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = int2;
      intArray0[1] = int0;
      intArray0[2] = int1;
      intArray0[3] = int0;
      int int3 = 1974;
      intArray0[4] = int3;
      intArray0[5] = int2;
      intArray0[6] = int2;
      intArray0[7] = int0;
      regexp2.runes = intArray0;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp3;
      regexpArray0[1] = regexp1;
      Regexp regexp4 = new Regexp(regexpArray0[1]);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      
      int int4 = 93;
      Regexp regexp5 = Parser.parse(string1, int4);
      assertNotNull(regexp5);
      assertFalse(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertFalse(regexp0.equals((Object)regexp4));
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp4);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-xT1{FFFF}", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "?";
      try { 
        Parser.parse("?", 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 197);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\f", 1460);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("[:", 1153);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexp0.max = (-16);
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-16), (-16));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp regexp2 = Parser.parse("p{", (-1156));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string0 = regexp2.toString();
      assertEquals("p\\{", string0);
      assertNotNull(string0);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "^\\x00-\\x{10FFFF}";
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("^x00-x{10FFFF}", (-2027));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp regexp3 = null;
      try {
        regexp3 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      try { 
        Parser.parse("Wh $[]TH", 1460);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[]TH`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1684);
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      String string0 = regexp1.toString();
      assertEquals("\\B", string0);
      assertNotNull(string0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("'4", (-1324));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      
      Regexp regexp5 = new Regexp(regexp4);
      assertNotNull(regexp5);
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      
      regexp0.reinit();
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp5));
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp6 = new Regexp(regexp_Op1);
      assertNotNull(regexp6);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      
      regexp0.reinit();
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp0.equals((Object)regexp4));
      assertTrue(regexp0.equals((Object)regexp5));
      assertTrue(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp6));
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp3));
      assertNotSame(regexp_Op0, regexp_Op1);
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp5);
      assertNotSame(regexp0, regexp6);
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp3);
      assertNotSame(regexp0, regexp4);
      
      Regexp regexp7 = new Regexp(regexp5);
      assertNotNull(regexp7);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertTrue(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp6));
      assertFalse(regexp5.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp2));
      assertTrue(regexp5.equals((Object)regexp4));
      assertTrue(regexp5.equals((Object)regexp1));
      assertTrue(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp6));
      assertTrue(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertTrue(regexp7.equals((Object)regexp1));
      assertTrue(regexp7.equals((Object)regexp2));
      assertTrue(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp5));
      
      Regexp regexp8 = Parser.parse("B", 121);
      assertNotNull(regexp8);
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp0));
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:.)", 68);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Parser.parse("()(:Pprs<(?(?(?(s(", 477);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      
      Regexp regexp2 = Parser.parse("'jN", 1345);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      String string0 = "\\P^$";
      int int0 = 94;
      Regexp regexp3 = Parser.parse("P^$", 94);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      
      regexp2.reinit();
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp3);
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      int int1 = 2437;
      Regexp regexp4 = new Regexp(regexp2);
      assertNotNull(regexp4);
      assertFalse(regexp2.equals((Object)regexp3));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      
      Regexp regexp5 = Parser.parse("P^$", (-276));
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      
      try { 
        Parser.parse(string0, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 2681;
      Regexp regexp0 = Parser.parse("w%e[gI", 63);
      assertNotNull(regexp0);
      
      try { 
        Parser.parse("w%e[gI", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[gI`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp regexp0 = Parser.parse("J|m", 0);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[3];
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3545, (-2619));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = " \\$~++W:L@_";
      try { 
        Parser.parse(" $~++W:L@_", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `++`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 4177;
      try { 
        Parser.parse("(?i:", 4177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 68;
      String string0 = "(?(?-s:.)";
      try { 
        Parser.parse("(?-s", 68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-s`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "\\D";
      int int0 = (-83);
      Regexp regexp0 = Parser.parse("x", (-83));
      assertNotNull(regexp0);
      
      String string1 = "Ar8";
      Regexp regexp1 = Parser.parse(string1, int0);
      assertNotNull(regexp1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      Regexp regexp4 = new Regexp(regexp1);
      assertNotNull(regexp4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      Regexp regexp5 = new Regexp(regexp_Op1);
      assertNotNull(regexp5);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      
      Regexp regexp6 = new Regexp(regexp5);
      assertNotNull(regexp6);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = 2;
      Regexp regexp7 = Parser.parse(string0, int1);
      assertNotNull(regexp7);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      assertNotSame(regexp7, regexp5);
      assertNotSame(regexp7, regexp4);
      assertNotSame(regexp7, regexp0);
      assertNotSame(regexp7, regexp2);
      assertNotSame(regexp7, regexp6);
      assertNotSame(regexp7, regexp3);
      assertNotSame(regexp7, regexp1);
      
      Parser parser0 = new Parser(string1, int1);
      assertNotNull(parser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = regexp4.equals(string1);
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(regexp1.equals((Object)regexp4));
      assertFalse(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)regexp3));
      assertFalse(regexp1.equals((Object)regexp6));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp6));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp7));
      assertFalse(regexp4.equals((Object)regexp0));
      assertTrue(regexp4.equals((Object)regexp1));
      assertNotSame(regexp1, regexp5);
      assertNotSame(regexp1, regexp4);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp7);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp6);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp6);
      assertNotSame(regexp4, regexp5);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp7);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      String string2 = "d8n`).1*lp#Fi";
      int int2 = 42862;
      Regexp regexp8 = Parser.parse(string2, int2);
      assertNotNull(regexp8);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp7));
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp3);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp7);
      
      int int3 = (-943);
      Regexp regexp9 = Parser.parse(string0, int3);
      assertNotNull(regexp9);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp1));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp6));
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp1);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp6);
      
      Regexp regexp10 = new Regexp(regexp7);
      assertNotNull(regexp10);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(regexp10.equals((Object)regexp0));
      assertFalse(regexp10.equals((Object)regexp1));
      assertTrue(regexp10.equals((Object)regexp7));
      assertFalse(regexp10.equals((Object)regexp6));
      assertFalse(regexp10.equals((Object)regexp3));
      assertFalse(regexp10.equals((Object)regexp9));
      assertFalse(regexp10.equals((Object)regexp2));
      assertFalse(regexp10.equals((Object)regexp4));
      assertFalse(regexp10.equals((Object)regexp8));
      assertFalse(regexp10.equals((Object)regexp5));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(regexp7.equals((Object)regexp8));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp9));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp0));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp1));
      
      Regexp regexp11 = new Regexp(regexp6);
      assertNotNull(regexp11);
      assertFalse(regexp11.equals((Object)regexp7));
      assertFalse(regexp11.equals((Object)regexp0));
      assertTrue(regexp11.equals((Object)regexp5));
      assertFalse(regexp11.equals((Object)regexp1));
      assertFalse(regexp11.equals((Object)regexp10));
      assertFalse(regexp11.equals((Object)regexp8));
      assertTrue(regexp11.equals((Object)regexp6));
      assertFalse(regexp11.equals((Object)regexp3));
      assertFalse(regexp11.equals((Object)regexp9));
      assertFalse(regexp11.equals((Object)regexp2));
      assertFalse(regexp11.equals((Object)regexp4));
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp9));
      assertTrue(regexp5.equals((Object)regexp6));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp8));
      assertFalse(regexp5.equals((Object)regexp10));
      assertFalse(regexp5.equals((Object)regexp7));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp10));
      assertFalse(regexp6.equals((Object)regexp8));
      assertFalse(regexp6.equals((Object)regexp7));
      assertFalse(regexp6.equals((Object)regexp9));
      assertFalse(regexp6.equals((Object)regexp0));
      
      String string3 = "[:lower:]";
      Parser parser1 = new Parser(string3, int3);
      assertNotNull(parser1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(parser1.equals((Object)parser0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 128602;
      int int1 = 133;
      Regexp regexp0 = Parser.parse("tG'Ia{81", 133);
      assertNotNull(regexp0);
      
      int int2 = 111;
      String string0 = "+(f%,r4XP;&u/R";
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[4] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 128602, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Id", 197);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("PPP04", (-3410));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Parser parser0 = new Parser("P1<L d", 622);
      assertNotNull(parser0);
      
      String string0 = regexp0.toString();
      assertEquals("(?i:ID)", string0);
      assertNotNull(string0);
      assertFalse(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 2689);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = Parser.subarray((Regexp[]) null, (-622), (-622));
      assertNotNull(regexpArray0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 4047, 2689);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = (-2727);
      String string0 = "|o0NAv)16F/u?gi=@N>";
      String string1 = "u9$^kw=3 ;>v48^P1";
      String string2 = "";
      Regexp regexp0 = Parser.parse("", 64262);
      assertNotNull(regexp0);
      
      String string3 = regexp0.toString();
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      regexp0.reinit();
      try { 
        Parser.parse("|o0NAv)16F/u?gi=@N>", 7620);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "{}rR/n~Q$D=u";
      int int0 = 12;
      try { 
        Parser.parse("[:C-^", 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:C-^`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-17);
      int int1 = 13;
      try { 
        Parser.parse("o@]|R>*E|S~aE;)MY", 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Parser parser0 = new Parser("6w#6B9u", 48);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("6w#6B9u", 48);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = Parser.parse("#XaUTS&TxA;", 48);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 3320;
      String string0 = "^h[^!y";
      try { 
        Parser.parse("^h[^!y", 3320);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^!y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "\\3s";
      Regexp regexp0 = Parser.parse("\u0003s", 0);
      assertNotNull(regexp0);
      
      int int0 = 7247;
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp1;
      int int1 = (-3814);
      Regexp regexp2 = Parser.parse(string0, int1);
      assertNotNull(regexp2);
      assertFalse(int1 == int0);
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp regexp3 = new Regexp(regexp1);
      assertNotNull(regexp3);
      assertFalse(int0 == int1);
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      
      String string1 = "invalid or unsupported Perl syntax";
      Regexp regexp4 = Parser.parse(string0, int0);
      assertNotNull(regexp4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertTrue(regexp4.equals((Object)regexp2));
      assertTrue(regexp4.equals((Object)regexp3));
      assertTrue(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      
      int int2 = 65;
      Regexp regexp5 = Parser.parse(string1, int2);
      assertNotNull(regexp5);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp4);
      
      Regexp regexp6 = new Regexp(regexp1);
      assertNotNull(regexp6);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp5));
      assertTrue(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertTrue(regexp6.equals((Object)regexp3));
      assertTrue(regexp6.equals((Object)regexp1));
      
      Regexp regexp7 = new Regexp(regexp5);
      assertNotNull(regexp7);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp6));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp4));
      assertTrue(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp0));
      
      Regexp regexp8 = new Regexp(regexp3);
      assertNotNull(regexp8);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(regexp1.equals((Object)regexp6));
      assertTrue(regexp1.equals((Object)regexp3));
      assertTrue(regexp1.equals((Object)regexp4));
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp5));
      assertFalse(regexp1.equals((Object)regexp7));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp5));
      assertFalse(regexp3.equals((Object)regexp7));
      assertTrue(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp4));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp6));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp8.equals((Object)regexp3));
      assertTrue(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp7));
      assertTrue(regexp8.equals((Object)regexp1));
      assertTrue(regexp8.equals((Object)regexp2));
      assertTrue(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "J2,HW2[Qui\\";
      int int0 = (-524);
      try { 
        Parser.parse("J2,HW2[Qui", (-524));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[Qui`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[4];
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      assertNotNull(regexp0);
      
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("\r", (-932));
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("VERTICAL_BAR", string0);
      assertNotNull(string0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertFalse(regexp0.equals((Object)regexp2));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("\r", (-4346));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp2));
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp2);
      
      regexpArray0[3] = regexp3;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-932), (-932));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Parser parser0 = new Parser("-]", 114);
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray1, (-4346), (-932));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4346
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = Parser.parse("#q,1+?;Bh=rFy:t", 66639);
      assertNotNull(regexp0);
      
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Parser parser0 = new Parser("missing closing ]", 287);
      assertNotNull(parser0);
      
      Regexp regexp2 = Parser.parse("448\"hB\u0003", 287);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      
      int int0 = 2417;
      Regexp regexp4 = Parser.parse("[:x{3000}]C-A", 97);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp2));
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp1);
      
      Regexp regexp5 = Parser.parse("ppZC-^", 2417);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp3);
      
      String string0 = "NU0so?5e9&_TP|1%%67";
      Regexp regexp6 = Parser.parse(string0, int0);
      assertNotNull(regexp6);
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp0));
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp2);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 112);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("D", 84);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("D", (-1473));
      assertNotNull(regexp2);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("D", string0);
      assertNotNull(string0);
      assertTrue(regexp0.equals((Object)regexp2));
      assertTrue(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp0, regexp2);
      
      Regexp regexp3 = new Regexp(regexp2);
      assertNotNull(regexp3);
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = Parser.parse("[^0-9]", 84);
      assertNotNull(regexp4);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      
      Regexp regexp5 = Parser.parse("[^0-9]", 112);
      assertNotNull(regexp5);
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      
      boolean boolean0 = regexp4.equals(regexp5);
      assertFalse(boolean0);
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp5));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp3));
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp5);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp0);
      assertNotSame(regexp5, regexp2);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp3);
      
      // Undeclared exception!
      try { 
        Parser.subarray((Regexp[]) null, 112, 613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pD%fSc#", (-761));
      assertNotNull(regexp0);
      
      regexp0.reinit();
      Parser parser0 = new Parser("D", (-761));
      assertNotNull(parser0);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, (-240), (-240));
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
      
      Regexp regexp1 = Parser.parse("z", (-2311));
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = Parser.parse("z", 154);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 154, (-240));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = (-1320);
      Regexp regexp0 = Parser.parse("u\u0004C]`", (-1320));
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[8];
      String string0 = "Z!I7vu{2mR6i";
      regexpArray0[0] = regexp0;
      int int1 = 9398;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z^x00-x{10FFvF}", 49);
      assertNotNull(regexp0);
      
      int int0 = 43782;
      regexp0.cap = int0;
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op1);
      assertNotNull(regexp1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      
      String string0 = "[:.eCv";
      Regexp regexp2 = Parser.parse(string0, int0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      String string1 = regexp1.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string1);
      assertNotNull(string1);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp2));
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp2);
      assertNotSame(regexp0, regexp1);
      
      int int1 = 11336;
      Regexp regexp3 = Parser.parse(string1, int1);
      assertNotNull(regexp3);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(regexp1.equals((Object)regexp2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp_Op1, regexp_Op0);
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp3);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      
      Regexp regexp4 = new Regexp(regexp_Op0);
      assertNotNull(regexp4);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      
      Regexp regexp5 = new Regexp(regexp4);
      assertNotNull(regexp5);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertFalse(regexp4.equals((Object)regexp0));
      assertFalse(regexp4.equals((Object)regexp3));
      assertTrue(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp2));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp0));
      
      int int2 = 2257;
      String string2 = "^n)]92";
      String string3 = "w2bTDA]C#";
      Regexp regexp6 = Parser.parse(string3, int1);
      assertNotNull(regexp6);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(regexp6.equals((Object)regexp4));
      assertFalse(regexp6.equals((Object)regexp5));
      assertFalse(regexp6.equals((Object)regexp1));
      assertFalse(regexp6.equals((Object)regexp0));
      assertFalse(regexp6.equals((Object)regexp3));
      assertFalse(regexp6.equals((Object)regexp2));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotSame(regexp6, regexp4);
      assertNotSame(regexp6, regexp5);
      assertNotSame(regexp6, regexp1);
      assertNotSame(regexp6, regexp0);
      assertNotSame(regexp6, regexp3);
      assertNotSame(regexp6, regexp2);
      
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      Regexp regexp7 = new Regexp(regexp_Op2);
      assertNotNull(regexp7);
      assertFalse(regexp_Op2.equals((Object)regexp_Op0));
      assertFalse(regexp_Op2.equals((Object)regexp_Op1));
      assertFalse(regexp7.equals((Object)regexp2));
      assertFalse(regexp7.equals((Object)regexp3));
      assertFalse(regexp7.equals((Object)regexp5));
      assertFalse(regexp7.equals((Object)regexp4));
      assertFalse(regexp7.equals((Object)regexp1));
      assertFalse(regexp7.equals((Object)regexp6));
      assertFalse(regexp7.equals((Object)regexp0));
      
      Regexp regexp8 = Parser.parse(string2, int0);
      assertNotNull(regexp8);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(regexp8.equals((Object)regexp4));
      assertFalse(regexp8.equals((Object)regexp6));
      assertFalse(regexp8.equals((Object)regexp1));
      assertFalse(regexp8.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp0));
      assertFalse(regexp8.equals((Object)regexp5));
      assertFalse(regexp8.equals((Object)regexp2));
      assertFalse(regexp8.equals((Object)regexp3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(regexp8, regexp4);
      assertNotSame(regexp8, regexp6);
      assertNotSame(regexp8, regexp1);
      assertNotSame(regexp8, regexp7);
      assertNotSame(regexp8, regexp0);
      assertNotSame(regexp8, regexp5);
      assertNotSame(regexp8, regexp2);
      assertNotSame(regexp8, regexp3);
      
      String string4 = "";
      int int3 = 82;
      Regexp regexp9 = Parser.parse(string4, int3);
      assertNotNull(regexp9);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(regexp9.equals((Object)regexp6));
      assertFalse(regexp9.equals((Object)regexp2));
      assertFalse(regexp9.equals((Object)regexp3));
      assertFalse(regexp9.equals((Object)regexp4));
      assertFalse(regexp9.equals((Object)regexp5));
      assertFalse(regexp9.equals((Object)regexp0));
      assertFalse(regexp9.equals((Object)regexp7));
      assertFalse(regexp9.equals((Object)regexp8));
      assertFalse(regexp9.equals((Object)regexp1));
      assertNotSame(regexp9, regexp6);
      assertNotSame(regexp9, regexp2);
      assertNotSame(regexp9, regexp3);
      assertNotSame(regexp9, regexp4);
      assertNotSame(regexp9, regexp5);
      assertNotSame(regexp9, regexp0);
      assertNotSame(regexp9, regexp7);
      assertNotSame(regexp9, regexp8);
      assertNotSame(regexp9, regexp1);
      
      try { 
        Parser.parse(string0, int2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:.eCv`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Parser parser0 = new Parser("OX[:::]", 2093);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("OX[:::]", 2093);
      assertNotNull(regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      regexp1.reinit();
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      regexp0.reinit();
      assertFalse(regexp0.equals((Object)regexp1));
      assertNotSame(regexp0, regexp1);
      
      Regexp regexp2 = Parser.parse("Px{10FFFF}", 119);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      assertNotSame(regexp2, regexp0);
      assertNotSame(regexp2, regexp1);
      
      Regexp regexp3 = Parser.parse("Any", (-429));
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp0));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 545;
      Regexp regexp0 = Parser.parse("^u\u0001<L d", 545);
      assertNotNull(regexp0);
      
      String string0 = "(I";
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(I`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pZC-^", 1485);
      assertNotNull(regexp0);
      
      Regexp[] regexpArray0 = new Regexp[2];
      String string0 = regexp0.toString();
      assertEquals("(?i:PZC-)^", string0);
      assertNotNull(string0);
      
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp[] regexpArray1 = new Regexp[3];
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      
      regexp0.cap = 1485;
      Regexp[] regexpArray2 = Parser.subarray(regexpArray1, 1485, 1485);
      assertNotNull(regexpArray2);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertFalse(regexpArray2.equals((Object)regexpArray1));
      assertFalse(regexpArray2.equals((Object)regexpArray0));
      assertNotSame(regexpArray1, regexpArray0);
      assertNotSame(regexpArray1, regexpArray2);
      assertNotSame(regexpArray2, regexpArray1);
      assertNotSame(regexpArray2, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pZC-^", (-1320));
      assertNotNull(regexp0);
      
      String string0 = regexp0.toString();
      assertEquals("pZC-\\A", string0);
      assertNotNull(string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp1));
      
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "[:?Z-Ch'";
      int int0 = (-3551);
      try { 
        Parser.parse("[:?Z-Ch'", (-3551));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `Z-C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Regexp regexp0 = Parser.parse("h9NrL?35M5\u0004", 1317);
      assertNotNull(regexp0);
      
      regexp0.flags = 1317;
      boolean boolean0 = regexp0.equals("(?x;g?(P<R?");
      assertFalse(boolean0);
      
      regexp0.max = 1317;
      boolean boolean1 = regexp0.equals("h9NrL?35M5\u0004");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = (-1320);
      int int1 = 1238;
      String string0 = "\\pZC-^";
      String string1 = ",p99z\\0[95:";
      try { 
        Parser.parse(",p99z\u0000[95:", 66609);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[95:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p{0FFF}", (-524));
      assertNotNull(regexp0);
      
      String string0 = "Z>+~#*c5d";
      Regexp regexp1 = new Regexp(regexp0);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      
      boolean boolean0 = regexp1.equals(string0);
      assertFalse(boolean0);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp0, regexp1);
      assertNotSame(regexp1, regexp0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      int int0 = 3277;
      String string0 = "\\d";
      Regexp regexp0 = Parser.parse("d", 3277);
      assertNotNull(regexp0);
      
      int int1 = 1;
      Regexp regexp1 = Parser.parse("d", 1);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp0);
      assertNotNull(regexp2);
      assertTrue(regexp0.equals((Object)regexp1));
      assertTrue(regexp2.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      
      boolean boolean0 = regexp1.equals(string0);
      assertFalse(boolean0);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(regexp1.equals((Object)regexp2));
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp1, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op1);
      assertNotNull(regexp0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      
      int[] intArray0 = new int[4];
      regexp0.runes = intArray0;
      boolean boolean0 = regexp0.equals(regexp_Op1);
      assertFalse(boolean0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotSame(regexp_Op1, regexp_Op0);
      
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertNotNull(string0);
      assertFalse(regexp_Op1.equals((Object)regexp_Op0));
      assertNotSame(regexp_Op1, regexp_Op0);
      
      Regexp regexp1 = Parser.parse("[^x00-x{10FFFF}]", 11336);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = new Regexp(regexp_Op0);
      assertNotNull(regexp3);
      assertFalse(regexp_Op0.equals((Object)regexp_Op1));
      assertFalse(regexp3.equals((Object)regexp1));
      assertTrue(regexp3.equals((Object)regexp2));
      assertFalse(regexp3.equals((Object)regexp0));
      
      int int0 = 123;
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexp3.max = 11336;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp3;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 123, 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      try { 
        Parser.parse("7xb[-(gl-YEO$", (-1499));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `l-Y`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      int int0 = (-1475);
      Regexp regexp0 = Parser.parse("\u0007%Q3B{2[jXX3]tI", (-1475));
      assertNotNull(regexp0);
      
      String string0 = "g";
      Regexp regexp1 = Parser.parse(string0, int0);
      assertNotNull(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp regexp2 = new Regexp(regexp1);
      assertNotNull(regexp2);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      String string1 = regexp2.toString();
      assertEquals("(?i:G)", string1);
      assertNotNull(string1);
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(regexp1, regexp0);
      assertNotSame(regexp1, regexp2);
      assertNotSame(regexp2, regexp1);
      assertNotSame(regexp2, regexp0);
      
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotNull(regexpArray1);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
      assertNotSame(regexpArray0, regexpArray1);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = "a[-_!c@";
      int int0 = 4452;
      try { 
        Parser.parse("a[-_!c@", 4452);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-_!c@`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^u\fL d", 545);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("^u\fL d", 545);
      assertNotNull(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertNotSame(regexp1, regexp0);
      
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp1));
      assertFalse(regexp2.equals((Object)regexp0));
      
      Regexp regexp3 = Parser.parse("^u\fL d", 545);
      assertNotNull(regexp3);
      assertFalse(regexp3.equals((Object)regexp2));
      assertTrue(regexp3.equals((Object)regexp0));
      assertTrue(regexp3.equals((Object)regexp1));
      assertNotSame(regexp3, regexp2);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
  }
}
