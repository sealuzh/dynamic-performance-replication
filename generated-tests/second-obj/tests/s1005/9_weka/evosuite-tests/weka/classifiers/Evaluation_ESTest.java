/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:11:57 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BorderLayout;
import java.awt.Label;
import java.io.CharArrayReader;
import java.io.File;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Properties;
import java.util.Random;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.accessibility.AccessibleAction;
import javax.swing.JSplitPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.RandomForest;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%aFS#H;;PAK>u";
      stringArray0[1] = "34:)o.(QxRC(s,n0<Q";
      stringArray0[2] = "{s-K5JNCz1tb{uSD)t";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-642.9072623), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(723.306799151, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 723
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      evaluation0.getHeader();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1726));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/DatabaseUtils.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      evaluation0.toSummaryString(true);
      evaluation0.KBRelativeInformation();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.REVISION = (-838);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
      evaluation0.toSummaryString(".arff", false);
      evaluation0.weightedPrecision();
      evaluation0.areaUnderROC((-838));
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      ZeroR zeroR0 = new ZeroR();
      RandomForest randomForest0 = new RandomForest();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.equals(multiClassClassifier0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctIncorrect();
      String string0 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      evaluation0.unweightedMacroFmeasure();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader0.setOutputFilename(false);
      instances0.parallelStream();
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      evaluation0.SFMeanPriorEntropy();
      evaluation0.rootMeanSquaredError();
      evaluation0.numTrueNegatives(12);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      ZeroR zeroR0 = new ZeroR();
      RandomForest randomForest0 = new RandomForest();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.equals(costSensitiveClassifier0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctIncorrect();
      String string0 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      Evaluation.handleCostOption("", 1241);
      evaluation0.numTrueNegatives(1241);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.relativeAbsoluteError();
      testInstances0.setNumNumeric(1932);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.errorRate();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.setDiscardPredictions(false);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances2 = new Instances(instances0, 2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/DatabaseUtils.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.setPriors(instances1);
      evaluation0.SFMeanEntropyGain();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.toSummaryString(".arff", false);
      evaluation0.numFalsePositives(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      evaluation0.m_Unclassified = (double) (byte)0;
      instances0.deleteAttributeType((byte)0);
      double double0 = evaluation0.m_SumClass;
      TestInstances testInstances0 = new TestInstances();
      evaluation0.toClassDetailsString();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      System.setCurrentTimeMillis(120L);
      evaluation0.areaUnderPRC((-1));
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.unweightedMacroFmeasure();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      DenseInstance denseInstance0 = new DenseInstance((byte)2);
      byte[] byteArray1 = new byte[8];
      denseInstance0.setDataset(instances0);
      byteArray1[4] = (byte)2;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)2;
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.kappa();
      evaluation0.toClassDetailsString();
      BinarySparseInstance.main((String[]) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.matthewsCorrelationCoefficient(3363);
      System.setCurrentTimeMillis((byte)2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(17);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-344.645);
      doubleArray0[3] = (-344.645);
      doubleArray0[4] = 10.0;
      doubleArray0[5] = 10.0;
      doubleArray0[6] = 10.0;
      doubleArray0[7] = 10.0;
      DenseInstance denseInstance0 = new DenseInstance(10.0, doubleArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getClassPriors();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString(1781);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Evaluation.makeOptionString(filteredClassifier0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0:KUOk{a<";
      Evaluation.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.m_ClassPriors = null;
      evaluation0.totalCost();
      evaluation0.toSummaryString();
      MultiScheme multiScheme0 = new MultiScheme();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      try { 
        Evaluation.evaluateModel((Classifier) multiScheme0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.MultiScheme:
         // 
         // -X <number of folds>
         // \tUse cross validation for model selection using the
         // \tgiven number of folds. (default 0, is to
         // \tuse training error)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -B <classifier specification>
         // \tFull class name of classifier to include, followed
         // \tby scheme options. May be specified multiple times.
         // \t(default: \"weka.classifiers.rules.ZeroR\")
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) evaluation0;
      objectArray0[1] = (Object) textDirectoryLoader0;
      objectArray0[2] = (Object) textDirectoryLoader0;
      Integer integer0 = new Integer(41);
      evaluation0.meanAbsoluteError();
      evaluation0.precision(41);
      evaluation0.numInstances();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedFalseNegativeRate();
      int[] intArray0 = new int[4];
      intArray0[0] = 41;
      intArray0[1] = 41;
      intArray0[2] = 41;
      intArray0[3] = 41;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Evaluation.getGlobalInfo(inputMappedClassifier0);
      evaluation0.getDiscardPredictions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.confusionMatrix();
      evaluation0.priorEntropy();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.errorRate();
      evaluation0.pctUnclassified();
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      Instances instances2 = testInstances0.generate("Kappa statistic                    ");
      SparseInstance sparseInstance0 = new SparseInstance(535);
      testInstances0.setOptions(testInstances0.DEFAULT_WORDS);
      evaluation0.sizeOfPredictedRegions();
      sparseInstance0.toStringNoWeight(2);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances2);
      double double1 = evaluation0.m_SumPriorSqrErr;
      evaluation0.toSummaryString();
      evaluation0.getRevision();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.REVISION = (-842);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
      String string0 = DefaultEditorKit.pageUpAction;
      evaluation0.weightedPrecision();
      evaluation0.areaUnderROC((-842));
      evaluation0.toMatrixString();
      evaluation0.KBInformation();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Instances instances1 = new Instances(instances0, (-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOptions();
      instances0.parallelStream();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      costSensitiveClassifier1.getCostMatrixSource();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier1, instances0, 1275, (Random) mockRandom0, (Object[]) costSensitiveClassifier1.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = gaussianProcesses0.getOptions();
      AbstractClassifier.runClassifier(cVParameterSelection0, stringArray0);
      evaluation0.fMeasure(2);
      evaluation0.toCumulativeMarginDistributionString();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.getDiscardPredictions();
      instances0.stringFreeStructure();
      SparseInstance sparseInstance0 = new SparseInstance(0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      Evaluation evaluation0 = new Evaluation(instances0);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_SumClassPredicted = (double) 1;
      evaluation0.fMeasure(0);
      try { 
        evaluation0.evaluateModel((Classifier) gaussianProcesses0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.getRandomNumberGenerator(711L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setMultiInstance(false);
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.addNumericTrainClass((-1478.3249459), 1951.6506686968);
      Float float0 = new Float((double) (-2));
      evaluation0.weightedTruePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, denseInstance0, (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.toMatrixString();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.sizeOfPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      ZeroR zeroR0 = new ZeroR();
      RandomForest randomForest0 = new RandomForest();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.equals(multiClassClassifier0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.toSummaryString("metr", true);
      evaluation0.kappa();
      evaluation0.SFEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctIncorrect();
      evaluation0.toCumulativeMarginDistributionString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      byte[] byteArray0 = new byte[7];
      DenseInstance denseInstance0 = new DenseInstance((byte)0);
      denseInstance0.setDataset(instances0);
      double[] doubleArray0 = new double[2];
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)4, (int[]) null, (-1085));
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.weightedAreaUnderROC();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(true);
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = multiScheme0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumNumeric((-1));
      instances0.parallelStream();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 35;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[6] = (-2);
      intArray0[7] = (-1);
      intArray0[8] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(900.73688, intArray0, (-1));
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.setDiscardPredictions(true);
      evaluation0.KBInformation();
      evaluation0.confusionMatrix();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "XiP/&%9;>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      String string0 = "setCostMatrix";
      int int0 = 31;
      double[] doubleArray0 = new double[4];
      evaluation0.m_PriorEstimator = null;
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) 31;
      doubleArray0[2] = (-24.69166372345);
      doubleArray0[3] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(31);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)5;
      double double0 = evaluation0.m_SumClass;
      String string0 = AccessibleAction.INCREMENT;
      evaluation0.setPriors(instances0);
      evaluation0.m_MissingClass = 0.0;
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.kappa();
      evaluation0.falsePositiveRate((byte)0);
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.numTrueNegatives((byte)5);
      Double double2 = new Double((byte)0);
      String string1 = BorderLayout.WEST;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Version.MAJOR = 13;
      MockRandom mockRandom0 = new MockRandom((-13L));
      double double3 = KStarConstants.FLOOR1;
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, (int) (byte)5, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      testInstances0.getWords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getCapabilities();
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      Version.REVISION = (-842);
      evaluation0.weightedFalsePositiveRate();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      evaluation0.useNoPriors();
      stringArray0[2] = ".arff";
      stringArray0[3] = "@data";
      TextDirectoryLoader.main(stringArray0);
      String string0 = DefaultEditorKit.pageUpAction;
      evaluation0.weightedPrecision();
      evaluation0.areaUnderROC((-842));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)4;
      instances0.deleteAttributeType((byte)4);
      evaluation0.weightedTruePositiveRate();
      evaluation0.toSummaryString("-d <name of output file>A", true);
      evaluation0.setPriors(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.kappa();
      textDirectoryLoader0.listOptions();
      evaluation0.KBInformation();
      double double0 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom((-4L));
      Object[] objectArray0 = new Object[0];
      Evaluation.makeOptionString(logitBoost0, true);
      evaluation0.weightedMatthewsCorrelation();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[5] = (byte)5;
      instances0.deleteAttributeType((byte)5);
      double double0 = evaluation0.m_SumClass;
      evaluation0.toSummaryString("-d <name of output file>A", true);
      evaluation0.setPriors(instances0);
      evaluation0.setDiscardPredictions(true);
      LogitBoost logitBoost0 = new LogitBoost();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = gaussianProcesses0.getOptions();
      AbstractClassifier.runClassifier(logitBoost0, stringArray0);
      evaluation0.fMeasure((byte)5);
      evaluation0.toCumulativeMarginDistributionString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.getDiscardPredictions();
      evaluation0.addNumericTrainClass(0, 0.0);
      evaluation0.SFMeanEntropyGain();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Evaluation.getGlobalInfo(inputMappedClassifier0);
      evaluation0.getDiscardPredictions();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.confusionMatrix();
      evaluation0.priorEntropy();
      evaluation0.pctCorrect();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte byte0 = (byte)4;
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      byte[] byteArray1 = new byte[8];
      denseInstance0.setDataset(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      double[] doubleArray0 = new double[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      evaluation0.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
      evaluation0.m_ClassIsNominal = true;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.REVISION = (-842);
      evaluation0.weightedFalsePositiveRate();
      instances0.deleteWithMissing((-842));
      evaluation0.toCumulativeMarginDistributionString();
      String string0 = XML.TAG_PREDICTED_LABEL;
      evaluation0.weightedPrecision();
      evaluation0.areaUnderROC((-842));
      evaluation0.toMatrixString();
      evaluation0.priorEntropy();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.SFMeanEntropyGain();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.KBRelativeInformation();
      evaluation0.SFPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      String string0 = AccessibleAction.INCREMENT;
      Instances instances1 = new Instances(instances0, 2605);
      DenseInstance denseInstance0 = new DenseInstance(2605);
      denseInstance0.setDataset(instances1);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.updatePriors(denseInstance0);
      evaluation0.KBRelativeInformation();
      evaluation0.numFalseNegatives(1);
      evaluation0.avgCost();
      evaluation0.pctIncorrect();
      double double1 = evaluation0.m_SumPriorAbsErr;
      evaluation0.toMatrixString();
      evaluation0.makeDistribution(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      RandomForest randomForest0 = new RandomForest();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.equals(logitBoost0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.weightedPrecision();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1995440801));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1995440801
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      testInstances0.getWords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.addNumericTrainClass((-1), 1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.getDiscardPredictions();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.relativeAbsoluteError();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      textDirectoryLoader0.setDebug(false);
      textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setOutputFilename(false);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = gaussianProcesses0.getOptions();
      AbstractClassifier.runClassifier(gaussianProcesses0, stringArray0);
      evaluation0.toCumulativeMarginDistributionString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.getDiscardPredictions();
      evaluation0.addNumericTrainClass(0, 0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      textDirectoryLoader0.setOutputFilename(false);
      byte byte0 = (byte)4;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      System.setCurrentTimeMillis((byte)4);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) instances0;
      try { 
        evaluation0.evaluateModel((Classifier) logitBoost0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Instances cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      textDirectoryLoader0.setOutputFilename(false);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = gaussianProcesses0.getOptions();
      AbstractClassifier.runClassifier(gaussianProcesses0, stringArray0);
      evaluation0.fMeasure(0);
      evaluation0.toCumulativeMarginDistributionString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.getDiscardPredictions();
      evaluation0.addNumericTrainClass(723.306799151, 723.306799151);
      evaluation0.SFMeanEntropyGain();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      String string0 = ScrollPaneConstants.LOWER_LEADING_CORNER;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.addNumericTrainClass((-1), 1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      evaluation0.getDiscardPredictions();
      evaluation0.SFMeanSchemeEntropy();
      serializedClassifier0.listOptions();
      evaluation0.addNumericTrainClass(2, (-2938.819113));
      evaluation0.addNumericTrainClass(628.568964, (-2));
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      evaluation0.KBRelativeInformation();
      evaluation0.incorrect();
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/DatabaseUtils.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.addNumericTrainClass((-1), 1);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, " ");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      AllFilter allFilter0 = new AllFilter();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-2), 2);
      Float float0 = new Float((-2938.819113));
      evaluation0.weightedTruePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toCumulativeMarginDistributionString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom1 = new MockRandom();
      evaluation1.m_ConfusionMatrix = null;
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.equals(adaBoostM1_0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      databaseLoader0.getKeys();
      evaluation2.weightedMatthewsCorrelation();
      evaluation2.setDiscardPredictions(false);
      try { 
        evaluation1.toClassDetailsString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      testInstances0.setRelationalClassFormat(instances0);
      evaluation0.toClassDetailsString();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-92));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      testInstances0.getWords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.addNumericTrainClass((-1), 1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String string0 = DefaultEditorKit.selectionDownAction;
      evaluation0.getDiscardPredictions();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.relativeAbsoluteError();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.m_SumPredicted;
      testInstances0.getRelationalClassFormat();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("getSuppressMappingReport", (Instances) null, (-1698), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: getSuppressMappingReport
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      FilteredClassifier filteredClassifier1 = new FilteredClassifier();
      filteredClassifier1.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      instances0.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      instances0.listIterator();
      costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation0.getDiscardPredictions();
      CostMatrix costMatrix1 = new CostMatrix(1);
      try { 
        costMatrix0.getElement(2, (-1127281206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrixSource();
      instances0.deleteAttributeType((-1114383320));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.FLOOR;
      evaluation0.toSummaryString(".arff", false);
      evaluation0.setDiscardPredictions(false);
      AbstractClassifier.runClassifier(costSensitiveClassifier0, (String[]) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getOptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.addNumericTrainClass(1, (-1114383320));
      evaluation0.addNumericTrainClass((-1114383320), 2);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      evaluation0.getDiscardPredictions();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.relativeAbsoluteError();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setSeed(13);
      costSensitiveClassifier0.getCostMatrixSource();
      Instances instances0 = testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.equals((Object) null);
      MockRandom mockRandom0 = new MockRandom();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      byte[] byteArray1 = new byte[8];
      denseInstance0.setDataset(instances0);
      instances0.add((Instance) denseInstance0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      OneR oneR0 = new OneR();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      try { 
        evaluation0.evaluateModel((Classifier) oneR0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ArrayDeque<Label> arrayDeque0 = new ArrayDeque<Label>();
      instances0.removeAll(arrayDeque0);
      DenseInstance denseInstance0 = new DenseInstance(3273);
      denseInstance0.setDataset(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom((-1085));
      evaluation0.SFMeanSchemeEntropy();
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) denseInstance0;
      objectArray0[2] = (Object) denseInstance0;
      objectArray0[3] = (Object) logitBoost0;
      objectArray0[5] = (Object) instances0;
      evaluation0.m_NumFolds = 41;
      objectArray0[6] = (Object) evaluation0;
      evaluation0.evaluateModel((Classifier) logitBoost0, instances0, objectArray0);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.meanAbsoluteError();
      evaluation0.setDiscardPredictions(true);
      evaluation0.weightedTruePositiveRate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)111;
      Instances instances1 = new Instances(instances0);
      denseInstance0.setDataset(instances1);
      byteArray1[2] = (byte)111;
      byteArray1[4] = (byte)111;
      byteArray1[6] = (byte)5;
      byteArray1[7] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      double[] doubleArray0 = new double[2];
      evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      evaluation0.SFSchemeEntropy();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
      evaluation0.weightedTruePositiveRate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[4];
      DenseInstance denseInstance0 = new DenseInstance((byte)0);
      denseInstance0.setDataset(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.kappa();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[0] = "@data";
      stringArray0[4] = "@relation";
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation1.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom((byte)0);
      evaluation1.SFMeanSchemeEntropy();
      Object[] objectArray0 = new Object[0];
      evaluation1.evaluateModel((Classifier) logitBoost0, instances0, objectArray0);
      evaluation1.weightedFalseNegativeRate();
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)4;
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      denseInstance0.setDataset(instances0);
      double[] doubleArray0 = new double[2];
      evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      evaluation0.toSummaryString(false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.relativeAbsoluteError();
      double double0 = NimbusStyle.SMALL_SCALE;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.weightedAreaUnderPRC();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[6] = (double) (-1);
      doubleArray0[0] = 0.0;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, (-405.099652444723));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      textDirectoryLoader0.setSource(file0);
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getModelHeader(instances0);
      TestInstances testInstances1 = new TestInstances();
      evaluation0.KBMeanInformation();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.areaUnderROC(4);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      ZeroR zeroR0 = new ZeroR();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctIncorrect();
      try { 
        Evaluation.handleCostOption("@relation", (-796));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      testInstances0.getWords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.addNumericTrainClass((-1), 1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.relativeAbsoluteError();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.errorRate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      testInstances0.getWords();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.addNumericTrainClass((-1), 1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      evaluation0.getDiscardPredictions();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.addNumericTrainClass(2, (-2938.819113));
      evaluation0.kappa();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation1.SFMeanEntropyGain();
      evaluation1.pctIncorrect();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation1.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteWithMissing((-206797271));
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      denseInstance0.setDataset(instances0);
      evaluation0.updatePriors(denseInstance0);
      Instances instances1 = textDirectoryLoader0.getStructure();
      instances1.checkInstance(denseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UnaryOperator.identity();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      denseInstance0.setClassValue((double) (byte)4);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.SFMeanPriorEntropy();
      try { 
        evaluation0.updateStatsForPredictor((byte)4, denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
      instances0.delete();
      instances0.deleteWithMissing(7);
      DenseInstance denseInstance0 = new DenseInstance(2);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      instances0.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      instances0.listIterator();
      evaluation0.useNoPriors();
      evaluation0.errorRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3136);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      evaluation0.pctIncorrect();
      String string0 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      try { 
        Evaluation.handleCostOption("@relation", (-1911892412));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      byte byte0 = (byte)4;
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DenseInstance denseInstance1 = new DenseInstance(2918);
      denseInstance0.setDataset(instances0);
      instances0.add((Instance) denseInstance1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka.classifiers.pmml.consumer.NeuralNetwork");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1085);
      doubleArray0[1] = (double) (-1085);
      doubleArray0[2] = (double) (-1085);
      doubleArray0[3] = (double) (-1085);
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = (double) (-1085);
      doubleArray0[6] = (double) 2918;
      evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      double double0 = KStarConstants.INITIAL_STEP;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yZcSWG");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      evaluation0.addNumericTrainClass((-1073.75), (-56.04967184225));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.falseNegativeRate((byte)4);
      try { 
        Evaluation.handleCostOption("\tSets the percentage for the train/test set split, e.g., 66.\n", (-2485));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.rootRelativeSquaredError();
      evaluation0.falseNegativeRate((byte)4);
      evaluation0.weightedTruePositiveRate();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "l{vf[!|l$;rq-@Li1')";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".arff";
      stringArray0[5] = ".bsi";
      try { 
        Evaluation.evaluateModel("l{vf[!|l$;rq-@Li1')", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name l{vf[!|l$;rq-@Li1').
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.trueNegativeRate((-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-405.099652444723);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1);
      evaluation0.updateMargins(doubleArray0, 2, (-128.666723));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation0.toCumulativeMarginDistributionString();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Instances instances1 = testInstances0.generate("Z&9wV^?5+U}8+fonM");
      try { 
        libSVMLoader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.trueNegativeRate((-2));
      instances0.getRandomNumberGenerator(0L);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2, (-128.666723));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      DenseInstance denseInstance0 = new DenseInstance((byte)67);
      byte[] byteArray1 = new byte[8];
      denseInstance0.setDataset(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      double[] doubleArray0 = new double[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.correlationCoefficient();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      // Undeclared exception!
      try { 
        evaluation0.areaUnderPRC((-1085));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.evaluation.NumericPrediction cannot be cast to weka.classifiers.evaluation.NominalPrediction
         //
         verifyException("weka.classifiers.evaluation.ThresholdCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      byte[] byteArray1 = new byte[8];
      denseInstance0.setDataset(instances0);
      instances0.add((Instance) denseInstance0);
      denseInstance0.setClassValue(1800.23220013233);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      double[] doubleArray0 = new double[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1800
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      instances0.deleteAttributeType((byte)4);
      evaluation0.weightedTruePositiveRate();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = "constructMappedInstance";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "getEstimatorType";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      evaluation0.meanPriorAbsoluteError();
      evaluation1.weightedFalseNegativeRate();
      evaluation0.meanAbsoluteError();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.areaUnderPRC((byte)4);
      evaluation1.truePositiveRate(484);
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedAreaUnderPRC();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.KBRelativeInformation();
      evaluation0.SFPriorEntropy();
      textDirectoryLoader0.reset();
      evaluation0.toMatrixString("Sets the method used to measure the distance between two clusters.\nSINGLE:\n find single link distance aka minimum link, which is the closest distance between any item in cluster1 and any item in cluster2\nCOMPLETE:\n find complete link distance aka maximum link, which is the largest distance between any item in cluster1 and any item in cluster2\nADJCOMLPETE:\n as COMPLETE, but with adjustment, which is the largest within cluster distance\nAVERAGE:\n finds average distance between the elements of the two clusters\nMEAN: \n calculates the mean distance of a merged cluster (akak Group-average agglomerative clustering)\nCENTROID:\n finds the distance of the centroids of the clusters\nWARD:\n finds the distance of the change in caused by merging the cluster. The information of a cluster is calculated as the error sum of squares of the centroids of the cluster and its members.\nNEIGHBOR_JOINING\n use neighbor joining algorithm.");
      AllFilter allFilter0 = new AllFilter();
      MockRandom mockRandom0 = new MockRandom();
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.addNumericTrainClass(Double.NaN, Double.NaN);
      Float float0 = new Float((-1761.9));
      evaluation0.weightedTruePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DenseInstance denseInstance0 = new DenseInstance(1);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints((int) (byte)4, (int) (byte)5);
      evaluation0.toClassDetailsString();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.getRandomNumberGenerator(711L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setMultiInstance(false);
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      evaluation0.SFEntropyGain();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.SFMeanEntropyGain();
      Double double0 = new Double(1461.02739961501);
      M5P m5P0 = new M5P();
      AbstractClassifier.runClassifier(m5P0, testInstances0.DEFAULT_WORDS);
      String string0 = JSplitPane.ONE_TOUCH_EXPANDABLE_PROPERTY;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedFalseNegativeRate();
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.priorEntropy();
      testInstances0.getWords();
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.SFEntropyGain();
      MockRandom mockRandom0 = new MockRandom(2220L);
      double double1 = evaluation0.m_MinTarget;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((byte)5);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        linearNNSearch0.nearestNeighbour(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yZcSWG");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.getGlobalInfo(serializedClassifier0);
      evaluation0.addNumericTrainClass((-1073.75), (-56.04967184225));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.rootRelativeSquaredError();
      evaluation0.falseNegativeRate((byte)4);
      evaluation0.relativeAbsoluteError();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      try { 
        Evaluation.evaluateModel("T2O\"&7M3((B.^[p[(", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name T2O\"&7M3((B.^[p[(.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Instances instances2 = inputMappedClassifier1.getModelHeader(instances1);
      TestInstances testInstances2 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Evaluation evaluation1 = new Evaluation(instances2);
      // Undeclared exception!
      try { 
        evaluation1.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      inputMappedClassifier0.getModelHeader(instances0);
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
      instances0.deleteWithMissing((int) (byte)4);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      instances0.listIterator();
      evaluation0.errorRate();
      regressionByDiscretization0.listOptions();
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'l';
      charArray0[2] = 'o';
      evaluation0.num2ShortID(497, charArray0, 24);
      evaluation0.SFMeanSchemeEntropy();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.numFalsePositives(2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.SMALL = (-2017.5930709584);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.SFSchemeEntropy();
      instances0.deleteWithMissing(7);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.parallelStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      instances0.listIterator();
      evaluation0.errorRate();
      char[] charArray0 = new char[2];
      regressionByDiscretization0.listOptions();
      regressionByDiscretization0.setNumBins((-1846193343));
      charArray0[0] = 'o';
      charArray0[1] = 'l';
      evaluation0.num2ShortID(1, charArray0, 0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toSummaryString("@relation", true);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      byte[] byteArray0 = new byte[7];
      Utils.log2 = 1353.9745154466127;
      instances0.deleteAttributeType(80);
      double double0 = evaluation0.m_SumClass;
      TestInstances testInstances0 = new TestInstances();
      evaluation0.toClassDetailsString();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      System.setCurrentTimeMillis(80);
      evaluation0.areaUnderPRC(80);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.unweightedMacroFmeasure();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 99.0;
      doubleArray0[2] = 1353.9745154466127;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = Double.NaN;
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      evaluation0.KBMeanInformation();
      byteArray0[3] = (byte)67;
      DenseInstance denseInstance0 = new DenseInstance((byte)67);
      byte[] byteArray1 = new byte[8];
      denseInstance0.setDataset(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      double[] doubleArray0 = new double[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.correlationCoefficient();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      evaluation0.correct();
      evaluation0.precision((-1085));
      // Undeclared exception!
      try { 
        evaluation0.areaUnderPRC((-1085));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1085
         //
         verifyException("weka.classifiers.evaluation.ThresholdCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      DenseInstance denseInstance0 = new DenseInstance((byte)67);
      byte[] byteArray1 = new byte[8];
      denseInstance0.setDataset(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      double[] doubleArray0 = new double[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.correlationCoefficient();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      AbstractClassifier.makeCopy((Classifier) null);
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DenseInstance denseInstance0 = new DenseInstance((byte)4);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getEstimatorType");
      Capabilities.forInstances(instances1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 162.509145523589;
      doubleArray0[4] = (double) (-2);
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte byte0 = (byte)67;
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)67;
      DenseInstance denseInstance0 = new DenseInstance((byte)67);
      byte[] byteArray1 = new byte[8];
      denseInstance0.setDataset(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      double[] doubleArray0 = new double[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      double double0 = KStarConstants.INITIAL_STEP;
      evaluation0.m_ClassIsNominal = false;
      evaluation0.correlationCoefficient();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
      double double1 = 654.35207742799;
      try { 
        evaluation0.toMatrixString("@relation");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
