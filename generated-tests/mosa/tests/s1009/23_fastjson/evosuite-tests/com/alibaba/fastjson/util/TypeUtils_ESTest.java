/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:49:26 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.io.File;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.Month;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Spliterator;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import java.util.function.ToIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Point point0 = new Point();
      TypeUtils.toLocale("Y`N05d|#ZF*@{|w;JM");
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.unwrapOptional(class0);
      ConcurrentHashMap<InternalError, SQLRecoverableException> concurrentHashMap0 = new ConcurrentHashMap<InternalError, SQLRecoverableException>();
      Class<String> class1 = String.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) concurrentHashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "N", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getSerializeFeatures(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLNonTransientConnectionException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@$+0", "Ljava.util.concurrent.ConcurrentSkipListSet", (-1622));
      sQLNonTransientException0.fillInStackTrace();
      TypeUtils.isHibernateInitialized(sQLNonTransientException0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      WeakHashMap<MapDeserializer, ChoiceFormat> weakHashMap0 = new WeakHashMap<MapDeserializer, ChoiceFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.castToBytes("N");
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(atomicLong0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isPath(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<RenderingHints> class1 = RenderingHints.class;
      TypeUtils.isPath(class1);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class2);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, true);
      assertTrue(concurrentHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      TypeUtils.isNumber("actualTypeArguments");
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Date> class0 = Date.class;
      TypeUtils.isProxy(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Field> class0 = Field.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      Integer integer0 = new Integer(5);
      LinkedHashMap<InternalError, InternalError> linkedHashMap0 = new LinkedHashMap<InternalError, InternalError>();
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getSerializeFeatures(class0);
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class1 = TypeUtils.loadClass("Z", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      MockThread.dumpStack();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader0, true);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.fnv1a_64_lower("!`");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : interface javax.persistence.ManyToMany
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.castToBytes("N");
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.awt.Color");
      assertEquals(3667406880279837568L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Point point0 = new Point();
      Locale locale0 = TypeUtils.toLocale("Y`N05d|#ZF*@{|w;JM");
      assertEquals("", locale0.getVariant());
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.clearClassMapping();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.castToTimestamp((Object) null);
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "InitStringFieldAsEmpty", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Field> class0 = Field.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(2016);
      AtomicLong atomicLong0 = new AtomicLong(2016);
      Time time0 = TypeUtils.castToSqlTime(atomicLong0);
      assertEquals("00:00:02", time0.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class<?> class2 = TypeUtils.getRawClass(class1);
      Object object0 = null;
      TypeUtils.castToFloat((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<Field> class0 = Field.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(2016);
      Class<Calendar> class1 = Calendar.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      ParserConfig parserConfig0 = new ParserConfig();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("fastjson.parser.deny");
      assertEquals(0, sQLTimeoutException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+`,7 ZySLWr*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      TypeUtils.fnv1a_64_lower("Q<=pC9M=RA*+Gk");
      Class<Object> class0 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<java.util.Date> class1 = java.util.Date.class;
      parserConfig0.checkAutoType("Q<=pC9M=RA*+Gk", class1, (-1132));
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "Q<=pC9M=RA*+Gk", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      Class<Point> class0 = Point.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("toS", weakHashMap0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("toS", "toS", sQLClientInfoException0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) weakHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Locale locale0 = new Locale("Ljava.awt.Rectangle", "O?DKDJ#");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : ljava.awt.rectangle_O?DKDJ#
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Function<String, String> function0 = Function.identity();
      hashtable0.computeIfAbsent("'0rw+", function0);
      Type[] typeArray0 = new Type[1];
      TypeUtils.loadClass("'0rw+", (ClassLoader) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "'0rw+", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Point point0 = new Point();
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.getKoltinConstructorParameters(class0);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      String string0 = treeMap0.put("$GmPAW?Y@<(svCRT", "$GmPAW?Y@<(svCRT");
      assertEquals(1, treeMap0.size());
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, treeMap0, false, propertyNamingStrategy0);
      assertEquals(1, treeMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.JSONPath$Operator", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.JSONPath$Operator -> java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string0 = hashtable0.computeIfAbsent("'0rw+", function0);
      assertEquals("'0rw+", string0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNotNull(string0);
      
      Type[] typeArray0 = new Type[1];
      Class<?> class0 = TypeUtils.loadClass("'0rw+", (ClassLoader) null);
      assertNull(class0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertNotNull(parserConfig1);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertNotNull(decimalFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormat0, (Type) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      String string0 = hashtable0.computeIfAbsent("", function1);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNull(string0);
      
      Class<?> class0 = TypeUtils.loadClass("/lYN69t$;[7R", (ClassLoader) null);
      assertNull(class0);
      
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, typeArray0[3]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockGregorianCalendar0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@34e63b41
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Class<String> class0 = String.class;
      Integer integer0 = new Integer((-5));
      assertEquals((-5), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      LinkedHashMap<SQLTransactionRollbackException, TimeDeserializer> linkedHashMap0 = new LinkedHashMap<SQLTransactionRollbackException, TimeDeserializer>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Type[] typeArray0 = new Type[1];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ha");
      assertEquals("java.sql.SQLTransactionRollbackException: ha", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("ha", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertNotNull(timeDeserializer0);
      
      TimeDeserializer timeDeserializer1 = linkedHashMap0.put(sQLTransactionRollbackException0, timeDeserializer0);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals("java.sql.SQLTransactionRollbackException: ha", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("ha", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      assertNull(timeDeserializer1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0L, atomicLong0.get());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertNotNull(atomicLong0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      String string0 = TypeUtils.decapitalize("0}$.'M");
      assertEquals("0}$.'M", string0);
      assertNotNull(string0);
      
      boolean boolean1 = TypeUtils.isNumber("0}$.'M");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<MockCalendar> class0 = MockCalendar.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      Class<IllegalStateException> class0 = IllegalStateException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      Class<JSONObject> class0 = JSONObject.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("kotlin.ranges.CharRange", (Throwable) null);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Spliterator<Throwable> spliterator0 = sQLIntegrityConstraintViolationException0.spliterator();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(spliterator0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.fillInStackTrace();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException1.toString());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.fillInStackTrace();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException2.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: kotlin.ranges.CharRange", sQLIntegrityConstraintViolationException2.toString());
      assertNull(sQLIntegrityConstraintViolationException2.getSQLState());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException2, sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException2, sQLIntegrityConstraintViolationException1);
      assertNotNull(sQLIntegrityConstraintViolationException2);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<MockJapaneseDate>[] classArray0 = (Class<MockJapaneseDate>[]) Array.newInstance(Class.class, 0);
      parserConfig0.initJavaBeanDeserializers(classArray0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      ParserConfig.global = parserConfig0;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertTrue(ParserConfig.global.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) sQLIntegrityConstraintViolationException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double((-743.81252162));
      assertEquals((-743.81252162), (double)double0, 0.01);
      assertNotNull(double0);
      
      double double1 = Double.min(0.0, (-743.81252162));
      assertEquals((-743.81252162), double1, 0.01);
      
      double double2 = Double.sum((-743.81252162), (-1.0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-744.81252162), double2, 0.01);
      
      double double3 = Double.min((-743.81252162), (-743.81252162));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals((-743.81252162), double3, 0.01);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(double0);
      assertEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((byte)25, bigInteger0.byteValue());
      assertEquals((short) (-743), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      boolean boolean0 = TypeUtils.isNumber("n.$5P+h_l");
      assertFalse(boolean0);
      
      String string0 = TypeUtils.decapitalize("n.$5P+h_l");
      assertEquals("n.$5P+h_l", string0);
      assertNotNull(string0);
      
      boolean boolean1 = TypeUtils.isNumber("(Ht>mKA>p+vBoJDh");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = new Integer(657);
      assertEquals(657, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = TypeUtils.castToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertNotNull(atomicLong0);
      
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      boolean boolean0 = TypeUtils.isNumber("2e[");
      assertFalse(boolean0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point0, point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, line2D_Double0.x2, 0.01);
      assertEquals(0.0, line2D_Double0.x1, 0.01);
      assertEquals(0.0, line2D_Double0.y2, 0.01);
      assertEquals(0.0, line2D_Double0.y1, 0.01);
      assertNotNull(line2D_Double0);
      
      Locale locale0 = TypeUtils.toLocale("");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertNotNull(atomicLong0);
      
      Long long0 = TypeUtils.castToLong(atomicLong0);
      assertEquals(0L, (long)long0);
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      MockThread.dumpStack();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<String> class0 = String.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      aSMClassLoader0.setDefaultAssertionStatus(false);
      Class<?> class1 = TypeUtils.loadClass((String) null, (ClassLoader) aSMDeserializerFactory0.classLoader);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertNotNull(atomicLong0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = TypeUtils.decapitalize("0}$.'M");
      assertEquals("0}$.'M", string0);
      assertNotNull(string0);
      
      boolean boolean2 = TypeUtils.isNumber("0}$.'M");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedHashSet<JavaObjectDeserializer> linkedHashSet0 = new LinkedHashSet<JavaObjectDeserializer>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Method> class0 = Method.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, false);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Field field0 = ParserConfig.getFieldFromCache("Ljava.awt.Font", hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(field0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Byte byte0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      String string0 = hashtable0.computeIfAbsent("'0rw+", function0);
      assertEquals("'0rw+", string0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNotNull(string0);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Type[] typeArray0 = new Type[1];
      int int0 = 2016;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(2016);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<AtomicLong> class1 = AtomicLong.class;
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0, true);
      assertTrue(list1.equals((Object)list0));
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) list1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.atomic.AtomicLong
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      Class<?> class0 = TypeUtils.loadClass("[S", (ClassLoader) null);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("class [S", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: fastjson.parser.autoTypeSupport", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      LinkedHashMap<SQLFeatureNotSupportedException, Float> linkedHashMap0 = new LinkedHashMap<SQLFeatureNotSupportedException, Float>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals("class [B", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      long long0 = TypeUtils.fnv1a_64("hIPB");
      assertEquals(35929031234247123L, long0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class [B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+'x`,7 ZySLWr*");
      assertFalse(boolean0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "q");
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SecurityException> class0 = SecurityException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      Class<Rectangle> class1 = Rectangle.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      Constructor<SQLDataException>[] constructorArray0 = (Constructor<SQLDataException>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
      
      Class<?> class2 = TypeUtils.getRawClass(class0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.EnumDeserializer", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      assertTrue(weakHashMap1.equals((Object)weakHashMap0));
      assertNotNull(weakHashMap1);
      
      String string0 = weakHashMap1.put("cX^<Y$a+lxDkBivE", "fastjson.compatibleWithJavaBean");
      assertFalse(weakHashMap1.equals((Object)weakHashMap0));
      assertNotSame(weakHashMap1, weakHashMap0);
      assertNull(string0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertFalse(weakHashMap0.equals((Object)weakHashMap1));
      assertNotSame(weakHashMap0, weakHashMap1);
      assertNotNull(serializeBeanInfo0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Annotation> class0 = Annotation.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNull(annotation0);
      
      String string0 = TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      assertEquals("lorg.springframework.util.LinkedMultiValueMap", string0);
      assertNotNull(string0);
      
      Class<?> class2 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Class<?> class0 = TypeUtils.loadClass("groovy.lang.MetaClass", classLoader0, true);
      assertNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "groovy.lang.MetaClass", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("cX^<Y$a+lxDkBivE", "fastjson.compatibleWithJavaBean");
      assertNull(string0);
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("L`C>&$E%@]<", classLoader1, true);
      assertSame(classLoader1, classLoader0);
      assertNull(class0);
      
      InstantiationError instantiationError0 = new InstantiationError();
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      assertNotNull(instantiationError0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("L`C>&$E%@]<");
      assertEquals("L`C>&$E%@]<", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("L`C>&$E%@]<");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      assertNotNull(mapDeserializer0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float((-1523.3841803073763));
      assertEquals((-1523.3842F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Double double0 = TypeUtils.castToDouble(float0);
      assertEquals((-1523.3841552734375), (double)double0, 0.01);
      assertNotNull(double0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNull(threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("BC6qj0>i<`ut<K{");
      assertEquals("java.lang.OutOfMemoryError: BC6qj0>i<`ut<K{", outOfMemoryError0.toString());
      assertEquals("BC6qj0>i<`ut<K{", outOfMemoryError0.getMessage());
      assertNotNull(outOfMemoryError0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "BC6qj0>i<`ut<K{");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<?> class1 = TypeUtils.loadClass("getclone", classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      assertNotNull(atomicLong0);
      
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      long long1 = TypeUtils.fnv1a_64("ke");
      assertFalse(long1 == long0);
      assertEquals(630014698265410845L, long1);
      
      Integer integer0 = new Integer(508);
      assertEquals(508, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      Month month0 = Month.JUNE;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(508, month0, (-1568), 277, 129, (-1568));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -1568
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isSynthetic());
      assertEquals("class java.util.concurrent.TimeUnit", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(17409, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      long long0 = TypeUtils.fnv1a_64("l&X>yQ.?i~");
      assertEquals((-1828874540418813433L), long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : N
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      Long long0 = new Long((byte)22);
      assertEquals(22L, (long)long0);
      assertNotNull(long0);
      
      WeakHashMap<SQLNonTransientConnectionException, MockDateFormat> weakHashMap0 = new WeakHashMap<SQLNonTransientConnectionException, MockDateFormat>();
      assertNotNull(weakHashMap0);
      
      Collection<MockDateFormat> collection0 = weakHashMap0.values();
      assertNotNull(collection0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("9RfAcvD");
      assertEquals("9RfAcvD", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: 9RfAcvD", noSuchMethodError0.toString());
      assertNotNull(noSuchMethodError0);
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNotNull(numberFormatException0);
      
      MockDateFormat mockDateFormat0 = weakHashMap0.remove((Object) numberFormatException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
      assertNull(mockDateFormat0);
      
      JSONObject jSONObject0 = new JSONObject(2438);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNotNull(jSONObject0);
      
      Double double0 = jSONObject0.getDouble("kotlin.ranges.ClosedDoubleRange");
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertNull(double0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      String string0 = TypeUtils.decapitalize("com.google.common.collect.HashMultimap");
      assertEquals("com.google.common.collect.HashMultimap", string0);
      assertNotNull(string0);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertNotNull(atomicLong0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      String string0 = hashtable0.computeIfAbsent("'0rw+", function0);
      assertEquals("'0rw+", string0);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
      assertNotNull(string0);
      
      Class<Double> class0 = Double.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNull(type0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      int int0 = weakHashMap0.size();
      assertEquals(0, int0);
      
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      VerifyError verifyError0 = new VerifyError();
      assertNull(verifyError0.getMessage());
      assertEquals("java.lang.VerifyError", verifyError0.toString());
      assertNotNull(verifyError0);
      
      Class<Double> class1 = Double.TYPE;
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("double", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<Long> class2 = Long.TYPE;
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("long", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) verifyError0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(false);
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      classLoader0.setDefaultAssertionStatus(false);
      Class<?> class1 = TypeUtils.loadClass("", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.sql.Date", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(481);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getX");
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getX", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: getX", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Class<Integer> class2 = Integer.TYPE;
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertEquals("int", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getX", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: getX", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: getX", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: getX", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLSyntaxErrorException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientConnectionException: getX
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@$+0", "Ljava.util.concurrent.ConcurrentSkipListSet", (-1622));
      assertEquals("java.sql.SQLNonTransientException: @$+0", sQLNonTransientException0.toString());
      assertEquals((-1622), sQLNonTransientException0.getErrorCode());
      assertEquals("@$+0", sQLNonTransientException0.getMessage());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)sQLNonTransientException0.fillInStackTrace();
      assertEquals("java.sql.SQLNonTransientException: @$+0", sQLNonTransientException0.toString());
      assertEquals((-1622), sQLNonTransientException0.getErrorCode());
      assertEquals("@$+0", sQLNonTransientException0.getMessage());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: @$+0", sQLNonTransientException1.toString());
      assertEquals((-1622), sQLNonTransientException1.getErrorCode());
      assertEquals("@$+0", sQLNonTransientException1.getMessage());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", sQLNonTransientException1.getSQLState());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      assertNotNull(sQLNonTransientException1);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(sQLNonTransientException0);
      assertTrue(boolean0);
      assertEquals("java.sql.SQLNonTransientException: @$+0", sQLNonTransientException0.toString());
      assertEquals((-1622), sQLNonTransientException0.getErrorCode());
      assertEquals("@$+0", sQLNonTransientException0.getMessage());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListSet", sQLNonTransientException0.getSQLState());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      assertFalse(class1.isPrimitive());
      assertEquals("class java.sql.SQLTransientException", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      String string0 = File.separator;
      assertEquals("/", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLNonTransientException: @$+0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("o", classLoader0, false);
      assertSame(classLoader0, classLoader1);
      assertNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertNotNull(type1);
      
      long long0 = TypeUtils.fnv1a_64_lower("o");
      assertEquals((-5808550276084140354L), long0);
      
      Character character0 = TypeUtils.castToChar("o");
      assertEquals('o', (char)character0);
      assertNotNull(character0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+'x`,7 ZySLWr*");
      assertFalse(boolean0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("cX^<Y$a+lxDkBivE", "fastjson.compatibleWithJavaBean");
      assertNull(string0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("(B)Ljava/lang/Byte;");
      assertEquals("(B)Ljava/lang/Byte;", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("(B)Ljava/lang/Byte;", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("(B)Ljava/lang/Byte;", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("(B)Ljava/lang/Byte;", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("2dGF", classLoader1, false);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("(B)Ljava/lang/Byte;", threadGroup0.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNull(class0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(B)Ljava/lang/Byte;", "2dGF");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: (B)Ljava/lang/Byte;", sQLTransientConnectionException0.toString());
      assertEquals("2dGF", sQLTransientConnectionException0.getSQLState());
      assertEquals("(B)Ljava/lang/Byte;", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("(B)Ljava/lang/Byte;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : (B)Ljava/lang/Byte;
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("%JrWD4S%]y2ez", "%JrWD4S%]y2ez");
      assertNull(string0);
      
      String string1 = weakHashMap0.put("%JrWD4S%]y2ez", "O+Cs%PTYN");
      assertEquals("%JrWD4S%]y2ez", string1);
      assertNotNull(string1);
      
      boolean boolean0 = weakHashMap0.containsValue(class0);
      assertFalse(boolean0);
      
      String string2 = weakHashMap0.put("O+Cs%PTYN", (String) null);
      assertNull(string2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      parserConfig0.addDeny((String) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "O+Cs%PTYN", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O+Cs%PTYN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("+'x`,7 ZySLWr*");
      assertFalse(boolean0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("getX");
      assertEquals("java.sql.SQLNonTransientConnectionException: getX", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("getX", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.compatibleWithJavaBean", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      String string0 = weakHashMap0.put("%JrWD4S%]y2ez", "%JrWD4S%]y2ez");
      assertNull(string0);
      
      boolean boolean0 = weakHashMap0.containsValue(class0);
      assertFalse(boolean0);
      
      double double0 = Double.sum(397.7925769299078, 397.7925769299078);
      assertEquals(795.5851538598156, double0, 0.01);
      
      Hashtable<AtomicInteger, DateFormatSymbols> hashtable0 = new Hashtable<AtomicInteger, DateFormatSymbols>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
      
      boolean boolean1 = TypeUtils.isNumber("n.$5P+h_l");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = TypeUtils.decapitalize(",mB#TRr,?yu=D");
      assertEquals(",mB#TRr,?yu=D", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("buildMethod not found.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = TypeUtils.decapitalize("!U.hHD5i4@k**psZ%y");
      assertEquals("!U.hHD5i4@k**psZ%y", string0);
      assertNotNull(string0);
      
      boolean boolean2 = TypeUtils.isNumber("buildMethod not found.");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      WeakHashMap<SQLNonTransientConnectionException, MockDateFormat> weakHashMap0 = new WeakHashMap<SQLNonTransientConnectionException, MockDateFormat>();
      assertNotNull(weakHashMap0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("2[9M='");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 2[9M='
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      String string0 = "'0rw+";
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      String string1 = hashtable0.computeIfAbsent("'0rw+", function0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("'0rw+", string1);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      assertNotNull(string1);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("'0rw+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : '0rw+
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Locale locale0 = TypeUtils.toLocale("Y`N05d|#ZF*@{|w;JM");
      assertEquals("", locale0.getCountry());
      assertEquals("y`n05d|#zf*@{|w;jm", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("y`n05d|#zf*@{|w;jm", locale0.toString());
      assertNotNull(locale0);
      
      HashSet<MockMinguoDate> hashSet0 = new HashSet<MockMinguoDate>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      assertNull(illegalAccessError0.getMessage());
      assertEquals("java.lang.IllegalAccessError", illegalAccessError0.toString());
      assertNotNull(illegalAccessError0);
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      assertNotNull(sqlDateDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sqlDateDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.sql.Date", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(3658);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Class<SimpleDateFormat> class2 = SimpleDateFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(serializeBeanInfo0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertNotNull(mockSimpleDateFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0L, atomicLong0.get());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertNotNull(atomicLong0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("interface java.util.List", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(1537, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertNotNull(class0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(8);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Class<Timestamp> class1 = Timestamp.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      Class<DataTruncation> class3 = DataTruncation.class;
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation1 = TypeUtils.getAnnotation((Class<?>) class3, class4);
      assertSame(class4, class2);
      assertNull(annotation1);
      
      long long0 = TypeUtils.fnv1a_64_lower("#");
      assertEquals((-5808625042874858702L), long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertNotNull(atomicLong0);
      
      double double0 = Double.sum(0.0, 3386.37263809919);
      assertEquals(3386.37263809919, double0, 0.01);
      
      Hashtable<AtomicInteger, DateFormatSymbols> hashtable0 = new Hashtable<AtomicInteger, DateFormatSymbols>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Short short0 = TypeUtils.castToShort(atomicLong0);
      assertEquals((short)0, (short)short0);
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertNotNull(short0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(96);
      assertEquals(96.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(96.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(96, atomicInteger0.intValue());
      assertEquals(96L, atomicInteger0.longValue());
      assertEquals((byte)96, atomicInteger0.byteValue());
      assertEquals("96", atomicInteger0.toString());
      assertEquals(96, atomicInteger0.get());
      assertEquals((short)96, atomicInteger0.shortValue());
      assertNotNull(atomicInteger0);
      
      BiFunction<Object, Object, DateFormatSymbols> biFunction0 = (BiFunction<Object, Object, DateFormatSymbols>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.clear();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      DateFormatSymbols dateFormatSymbols0 = hashtable0.computeIfPresent(atomicInteger0, biFunction0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(96.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(96.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(96, atomicInteger0.intValue());
      assertEquals(96L, atomicInteger0.longValue());
      assertEquals((byte)96, atomicInteger0.byteValue());
      assertEquals("96", atomicInteger0.toString());
      assertEquals(96, atomicInteger0.get());
      assertEquals((short)96, atomicInteger0.shortValue());
      assertNull(dateFormatSymbols0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(hashtable0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      WeakHashMap<SQLNonTransientConnectionException, MockDateFormat> weakHashMap1 = new WeakHashMap<SQLNonTransientConnectionException, MockDateFormat>();
      assertNotNull(weakHashMap1);
      
      Collection<MockDateFormat> collection0 = weakHashMap1.values();
      assertNotNull(collection0);
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("9RfAcvD");
      assertEquals("java.lang.NoSuchMethodError: 9RfAcvD", noSuchMethodError0.toString());
      assertEquals("9RfAcvD", noSuchMethodError0.getMessage());
      assertNotNull(noSuchMethodError0);
      
      MockDateFormat mockDateFormat0 = weakHashMap1.remove((Object) "9RfAcvD");
      assertNull(mockDateFormat0);
      
      java.util.Date date0 = TypeUtils.castToDate(long0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      String string0 = TypeUtils.decapitalize("9RfAcvD");
      assertEquals("9RfAcvD", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = TypeUtils.loadClass("IRts}93XR!=z/y", (ClassLoader) null, false);
      assertNull(class1);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(13);
      assertEquals(13.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(13.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("13", atomicInteger0.toString());
      assertEquals(13, atomicInteger0.intValue());
      assertEquals((short)13, atomicInteger0.shortValue());
      assertEquals((byte)13, atomicInteger0.byteValue());
      assertEquals(13L, atomicInteger0.longValue());
      assertEquals(13, atomicInteger0.get());
      assertNotNull(atomicInteger0);
      
      boolean boolean1 = atomicInteger0.weakCompareAndSet((-1092), 104);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(13.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(13.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("13", atomicInteger0.toString());
      assertEquals(13, atomicInteger0.intValue());
      assertEquals((short)13, atomicInteger0.shortValue());
      assertEquals((byte)13, atomicInteger0.byteValue());
      assertEquals(13L, atomicInteger0.longValue());
      assertEquals(13, atomicInteger0.get());
      
      int int0 = atomicInteger0.getAndIncrement();
      assertEquals(13, int0);
      assertEquals(14.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals("14", atomicInteger0.toString());
      assertEquals(14, atomicInteger0.intValue());
      assertEquals(14L, atomicInteger0.longValue());
      assertEquals((byte)14, atomicInteger0.byteValue());
      assertEquals(14, atomicInteger0.get());
      assertEquals((short)14, atomicInteger0.shortValue());
      assertEquals(14.0, atomicInteger0.doubleValue(), 0.01);
      
      atomicInteger0.lazySet((-3137));
      assertEquals((-3137.0), atomicInteger0.doubleValue(), 0.01);
      assertEquals((-3137.0F), atomicInteger0.floatValue(), 0.01F);
      assertEquals("-3137", atomicInteger0.toString());
      assertEquals((-3137L), atomicInteger0.longValue());
      assertEquals((-3137), atomicInteger0.intValue());
      assertEquals((byte) (-65), atomicInteger0.byteValue());
      assertEquals((short) (-3137), atomicInteger0.shortValue());
      assertEquals((-3137), atomicInteger0.get());
      
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(intUnaryOperator0).applyAsInt(anyInt());
      int int1 = atomicInteger0.updateAndGet(intUnaryOperator0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)0, atomicInteger0.shortValue());
      
      java.util.Date date0 = TypeUtils.castToDate(atomicInteger0);
      assertEquals("0", atomicInteger0.toString());
      assertEquals(0.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(0, atomicInteger0.intValue());
      assertEquals((byte)0, atomicInteger0.byteValue());
      assertEquals(0L, atomicInteger0.longValue());
      assertEquals(0, atomicInteger0.get());
      assertEquals(0.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals((short)0, atomicInteger0.shortValue());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized((Object) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      TypeUtils.clearClassMapping();
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      TypeUtils.clearClassMapping();
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNull(numberFormatException0.getMessage());
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNotNull(numberFormatException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals("0", atomicLong0.toString());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
      assertNotNull(atomicLong0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals("0", atomicLong0.toString());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertNotNull(atomicLong0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("2e[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2e[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertNotNull(atomicLong0);
      
      String string0 = "2e[";
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("ke");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ke\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Class<DataTruncation> class0 = DataTruncation.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getClassFromMapping("");
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertSame(class2, class0);
      assertNull(annotation0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(date0);
      
      String string0 = ")Z";
      long long0 = TypeUtils.fnv1a_64(")Z");
      assertEquals(566727908469702746L, long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertNotNull(atomicLong0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = TypeUtils.decapitalize("2e[");
      assertEquals("2e[", string0);
      assertNotNull(string0);
      
      boolean boolean3 = TypeUtils.isNumber("W dm{+7VF'");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      LinkedHashSet<JavaObjectDeserializer> linkedHashSet0 = new LinkedHashSet<JavaObjectDeserializer>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("0}$.'M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0}$.'M
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      BiFunction<String, Object, Field> biFunction0 = (BiFunction<String, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("apuN9,?~");
      assertEquals("apuN9,?~", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("u#.Z}");
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      Class<Point> class1 = Point.class;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy1);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertNotNull(serializeBeanInfo1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("0", atomicLong0.toString());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertNotNull(atomicLong0);
      
      Float float0 = TypeUtils.castToFloat(atomicLong0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("0", atomicLong0.toString());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertNotNull(float0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("int", class1.toString());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("class [I", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isArray());
      assertFalse(class2.isEnum());
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      long long1 = TypeUtils.fnv1a_64("ke");
      assertFalse(long1 == long0);
      assertEquals(630014698265410845L, long1);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(1034);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      Map<String, String> map0 = null;
      Class<Timestamp> class0 = Timestamp.class;
      boolean boolean0 = true;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) list0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [date, day, hours, minutes, month, nanos, seconds, time, timezoneOffset, year]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<Rectangle> class0 = Rectangle.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray1);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("apuN9,?~");
      assertEquals("apuN9,?~", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("Lorg.springframework.util.LinkedMultiValueMap");
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      Class<Point> class1 = Point.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy1);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      assertNotNull(serializeBeanInfo1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertNotNull(atomicLong0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ng|-X");
      assertEquals((-633680734710962202L), long0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01);
      assertNotNull(gridBagConstraints0);
      
      gridBagConstraints0.gridx = (-2235);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.GridBagConstraints@32294ef2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "5!NuWEi\\uQ&M:b*:";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, true, false);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(javaBeanInfo0);
      
      ObjectDeserializer objectDeserializer0 = aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertNotNull(objectDeserializer0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class1 = TypeUtils.loadClass(string0, (ClassLoader) aSMClassLoader0, true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      classLoader0.setDefaultAssertionStatus(true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("J~tb!Dm0[");
      assertEquals("J~tb!Dm0[", noSuchFieldException0.getMessage());
      assertEquals("java.lang.NoSuchFieldException: J~tb!Dm0[", noSuchFieldException0.toString());
      assertNotNull(noSuchFieldException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(noSuchFieldException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchFieldException: J~tb!Dm0[
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertNotNull(atomicLong0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("");
      assertEquals("", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "+uc=py? o");
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("", threadGroup0.getName());
      assertEquals("+uc=py? o", threadGroup1.getName());
      assertNotNull(threadGroup1);
      
      MockThread mockThread0 = new MockThread();
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "+uc=py? o", (-1L));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("", threadGroup0.getName());
      assertEquals("+uc=py? o", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(mockThread1);
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("", threadGroup0.getName());
      assertEquals("+uc=py? o", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("", threadGroup0.getName());
      assertEquals("+uc=py? o", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("_", (ClassLoader) aSMClassLoader0, true);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("", threadGroup0.getName());
      assertEquals("+uc=py? o", threadGroup1.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      long long0 = TypeUtils.fnv1a_64_lower("org.springframework.security.core.authority.SimpleGrantedAuthority");
      assertEquals((-1395451905772472730L), long0);
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
      
      Class<StringCharacterIterator> class3 = StringCharacterIterator.class;
      Annotation annotation1 = TypeUtils.getAnnotation((Class<?>) class3, class2);
      assertNull(annotation1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0L, atomicLong0.get());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      assertNotNull(atomicLong0);
      
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(36);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<BigDecimal> class0 = BigDecimal.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0);
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      MockThread.dumpStack();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader2);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(aSMDeserializerFactory0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(aSMDeserializerFactory1);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader3 = classLoader2.getParent();
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader3);
      
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader0, false);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(class0.isPrimitive());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertEquals(9729, class0.getModifiers());
      assertTrue(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(thread0.isInterrupted());
      assertFalse(thread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(class0.isPrimitive());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertEquals(9729, class0.getModifiers());
      assertTrue(class0.isAnnotation());
      assertTrue(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertNull(type0);
      
      long long0 = TypeUtils.fnv1a_64_lower("6TX");
      assertEquals(4411799305952493805L, long0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MessageFormat messageFormat0 = new MessageFormat("expect ':' at ", locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(messageFormat0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.text.MessageFormat@91aef2e0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals(0L, atomicLong0.longValue());
      assertNotNull(atomicLong0);
      
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      long long1 = TypeUtils.fnv1a_64("ke");
      assertFalse(long1 == long0);
      assertEquals(630014698265410845L, long1);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(1034);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader0 = aSMClassLoader0.getParent();
      assertNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("", (ClassLoader) null, true);
      assertNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      long long2 = TypeUtils.fnv1a_64_lower("z;=-@0^o'C#GX }3P");
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(8902380818200638882L, long2);
      
      Byte byte0 = TypeUtils.castToByte("");
      assertNull(byte0);
      
      Class<Annotation> class1 = Annotation.class;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class2, class1);
      assertNull(annotation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(757, true, true, 757, 757);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(dataTruncation0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      Class<FieldInfo> class0 = FieldInfo.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(serializeBeanInfo0);
      
      Class<Integer> class1 = Integer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("ZpTBlM_3fySw");
      assertEquals("ZpTBlM_3fySw", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("Zv-(ukSvdw%|?");
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(mockThread0);
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class2 = TypeUtils.loadClass("methodName", classLoader1, false);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class2);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      SQLWarning sQLWarning0 = new SQLWarning("FF)sxC/3[9m|/dzN", "T=j)p~2dSq4Kv", (-1933437815));
      assertEquals("T=j)p~2dSq4Kv", sQLWarning0.getSQLState());
      assertEquals((-1933437815), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: FF)sxC/3[9m|/dzN", sQLWarning0.toString());
      assertEquals("FF)sxC/3[9m|/dzN", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLWarning0);
      assertEquals("T=j)p~2dSq4Kv", sQLWarning0.getSQLState());
      assertEquals((-1933437815), sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: FF)sxC/3[9m|/dzN", sQLWarning0.toString());
      assertEquals("FF)sxC/3[9m|/dzN", sQLWarning0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLWarning: FF)sxC/3[9m|/dzN", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLWarning: FF)sxC/3[9m|/dzN", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLIntegrityConstraintViolationException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLIntegrityConstraintViolationException: java.sql.SQLWarning: FF)sxC/3[9m|/dzN
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<Field> class0 = Field.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(2016);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      Class<Calendar> class1 = Calendar.class;
      ThreadGroup threadGroup0 = new ThreadGroup("apuN9,?~");
      assertEquals("apuN9,?~", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("apuN9,?~");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : Thread[apuN9,?~,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      classLoader1.setClassAssertionStatus((String) null, true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("Dqyh");
      assertEquals("Dqyh", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread("L`C>&$E%@]<");
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader2, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"URLs\":[{\"authority\":\"\",\"content\":{},\"defaultPort\":-1,\"file\":\"/tmp/EvoSuite_pathingJar6443433939518706689.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertNotNull(atomicLong0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("hashCode", classLoader1, true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(class0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      long long0 = TypeUtils.fnv1a_64_lower("N");
      assertEquals((-5808549176572512143L), long0);
      
      InstantiationException instantiationException0 = new InstantiationException();
      assertEquals("java.lang.InstantiationException", instantiationException0.toString());
      assertNull(instantiationException0.getMessage());
      assertNotNull(instantiationException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(instantiationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.InstantiationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      WeakHashMap<SQLNonTransientConnectionException, MockDateFormat> weakHashMap0 = new WeakHashMap<SQLNonTransientConnectionException, MockDateFormat>();
      assertNotNull(weakHashMap0);
      
      boolean boolean0 = weakHashMap0.isEmpty();
      assertTrue(boolean0);
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class3);
      assertNull(annotation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("isEmpty");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: isEmpty", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("isEmpty", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.awt.Point[x=0,y=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Date> class0 = Date.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.Date", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
      
      ConcurrentHashMap<String, ClientInfoStatus> concurrentHashMap0 = new ConcurrentHashMap<String, ClientInfoStatus>();
      assertTrue(concurrentHashMap0.isEmpty());
      assertNotNull(concurrentHashMap0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (Throwable) null);
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      assertNotNull(weakHashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.util.OptionalLong", weakHashMap0, sQLTransientException0);
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.util.OptionalLong", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.util.OptionalLong", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.32", timestamp0.toString());
      assertNotNull(timestamp0);
      
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
      
      boolean boolean2 = TypeUtils.isNumber("fziTiXz1r;");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertNotNull(atomicLong0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      String string0 = TypeUtils.decapitalize("0}$.'M");
      assertEquals("0}$.'M", string0);
      assertNotNull(string0);
      
      boolean boolean1 = TypeUtils.isNumber("0}$.'M");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertNotNull(thread0);
      
      MockThread mockThread0 = new MockThread(thread0);
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(mockThread0);
      
      MockThread.dumpStack();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("javax.persistence.ManyToMany", classLoader0, true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(thread0.isDaemon());
      assertFalse(thread0.isInterrupted());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isInterface());
      assertEquals(9729, class0.getModifiers());
      assertEquals("interface javax.persistence.ManyToMany", class0.toString());
      assertTrue(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<Character> class1 = Character.TYPE;
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Class class2 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class2.isInterface());
      assertEquals("class [C", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isArray());
      assertNotNull(class2);
      
      long long0 = TypeUtils.fnv1a_64_lower("!`");
      assertEquals(559081904608637252L, long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : interface javax.persistence.ManyToMany
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class0 = TypeUtils.loadClass("", classLoader0);
      assertNull(class0);
      
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = TypeUtils.cast((Object) null, class1, parserConfig0);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      assertNotNull(linkedHashMap0);
      
      Class<Field> class0 = Field.class;
      Point point0 = new Point();
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      long long0 = TypeUtils.fnv1a_64("Gu\"O");
      assertEquals(1991625118451530714L, long0);
      
      String string0 = "ke";
      long long1 = TypeUtils.fnv1a_64("1+}!0R[kS1I");
      assertFalse(long1 == long0);
      assertEquals(6356418589717583091L, long1);
      
      int int0 = 1690;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(1690);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<?> class0 = TypeUtils.loadClass("ke", (ClassLoader) aSMClassLoader0, true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertNull(class0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("1+}!0R[kS1I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1+}!0R[kS1I
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "clazz is null";
      Class<?> class0 = TypeUtils.loadClass("clazz is null");
      assertNull(class0);
      
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte)107;
      byteArray0[6] = (byte)107;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ParserConfig parserConfig0 = null;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      ThreadGroup threadGroup0 = new ThreadGroup("N%H3?gxwi`");
      assertEquals("N%H3?gxwi`", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Locale locale0 = JSON.defaultLocale;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      parserConfig0.setAsmEnable(false);
      assertFalse(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      AtomicInteger atomicInteger0 = new AtomicInteger(58);
      assertEquals(58.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(58.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals(58L, atomicInteger0.longValue());
      assertEquals((short)58, atomicInteger0.shortValue());
      assertEquals("58", atomicInteger0.toString());
      assertEquals((byte)58, atomicInteger0.byteValue());
      assertEquals(58, atomicInteger0.intValue());
      assertEquals(58, atomicInteger0.get());
      assertNotNull(atomicInteger0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) atomicInteger0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<Field> class0 = Field.class;
      Point point0 = new Point();
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      
      point0.setLocation(90, 90);
      assertEquals(90.0, point0.getY(), 0.01);
      assertEquals(90.0, point0.getX(), 0.01);
      assertEquals(90, point0.x);
      assertEquals(90, point0.y);
      
      Double double0 = new Double(90);
      assertEquals(90.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(double0);
      assertEquals("1970-01-01 00:00:00.09", timestamp0.toString());
      assertEquals(90000000, timestamp0.getNanos());
      assertNotNull(timestamp0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, ")@ z6k4Q", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertNotNull(atomicLong0);
      
      Class<Point> class0 = Point.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<Annotation> class2 = Annotation.class;
      Class<Insets> class3 = Insets.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class3, class2);
      assertNull(annotation0);
      
      String string0 = TypeUtils.decapitalize("QeFOQP");
      assertEquals("qeFOQP", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("qeFOQP");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-110);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte) (-110), (byte)0}, byteArray0);
      assertEquals(16, bitSet0.length());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 4, 9, 12, 15}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertNotNull(atomicLong0);
      
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      long long1 = TypeUtils.fnv1a_64("ke");
      assertFalse(long1 == long0);
      assertEquals(630014698265410845L, long1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      long long2 = TypeUtils.fnv1a_64_lower("[char");
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-6590995272499666146L), long2);
      
      AtomicLong atomicLong1 = new AtomicLong((-1L));
      assertFalse(atomicLong1.equals((Object)atomicLong0));
      assertEquals((short) (-1), atomicLong1.shortValue());
      assertEquals((-1.0), atomicLong1.doubleValue(), 0.01);
      assertEquals((-1.0F), atomicLong1.floatValue(), 0.01F);
      assertEquals((byte) (-1), atomicLong1.byteValue());
      assertEquals((-1), atomicLong1.intValue());
      assertEquals((-1L), atomicLong1.get());
      assertEquals((-1L), atomicLong1.longValue());
      assertEquals("-1", atomicLong1.toString());
      assertNotNull(atomicLong1);
      
      Byte byte0 = TypeUtils.castToByte(atomicLong1);
      assertFalse(atomicLong1.equals((Object)atomicLong0));
      assertEquals((byte) (-1), (byte)byte0);
      assertEquals((short) (-1), atomicLong1.shortValue());
      assertEquals((-1.0), atomicLong1.doubleValue(), 0.01);
      assertEquals((-1.0F), atomicLong1.floatValue(), 0.01F);
      assertEquals((byte) (-1), atomicLong1.byteValue());
      assertEquals((-1), atomicLong1.intValue());
      assertEquals((-1L), atomicLong1.get());
      assertEquals((-1L), atomicLong1.longValue());
      assertEquals("-1", atomicLong1.toString());
      assertNotSame(atomicLong1, atomicLong0);
      assertNotNull(byte0);
      
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
      
      boolean boolean0 = TypeUtils.isNumber("d@9^hL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<TimeUnit> class0 = TimeUnit.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Class<Double> class1 = Double.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("Dqyh");
      assertEquals("Dqyh", threadGroup0.getName());
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread(",NM1Z^KElfrDB.wuJb");
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotNull(mockThread0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : Thread[,NM1Z^KElfrDB.wuJb,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertNotNull(linkedHashMap0);
      
      Class<Field> class0 = Field.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(2016);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertNotNull(identityHashMap0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(throwableDeserializer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) list0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean0);
      
      Class<IllegalStateException> class1 = IllegalStateException.class;
      int int1 = TypeUtils.getSerializeFeatures(class1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Type type0 = null;
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
      
      Type type2 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type2);
      
      Class<Insets> class0 = Insets.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNotNull(parserConfig0);
      
      String string0 = "TF` c*7";
      Class<?> class1 = parserConfig0.checkAutoType("TF` c*7", class0, (-32768));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertNull(class1);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertNotNull(typeUtils0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<LinkageError> class0 = LinkageError.class;
      Class<Float> class1 = Float.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1034);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertNotNull(identityHashMap0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(parserConfig0);
      
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer0);
      
      ThrowableDeserializer throwableDeserializer1 = new ThrowableDeserializer(parserConfig0, class0);
      assertFalse(throwableDeserializer1.equals((Object)throwableDeserializer0));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer1.getFastMatchToken());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertNotNull(throwableDeserializer1);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@13
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong();
      assertEquals(0L, atomicLong0.get());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertNotNull(atomicLong0);
      
      long long0 = TypeUtils.fnv1a_64("2e[");
      assertEquals(7006850157503679665L, long0);
      
      long long1 = TypeUtils.fnv1a_64("ke");
      assertFalse(long1 == long0);
      assertEquals(630014698265410845L, long1);
      
      int int0 = 1042;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(1042);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      Class<Annotation> class0 = Annotation.class;
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertSame(class2, class0);
      assertNull(annotation0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class2;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      typeArray0[8] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class2);
      assertNotNull(parameterizedTypeImpl0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertNotNull(aSMDeserializerFactory1);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      String string0 = "java.awt.Rectangle";
      Class<Point>[] classArray0 = (Class<Point>[]) Array.newInstance(Class.class, 9);
      Class<Point> class3 = Point.class;
      classArray0[0] = class3;
      Class<Point> class4 = Point.class;
      classArray0[1] = class4;
      Class<Point> class5 = Point.class;
      classArray0[2] = class5;
      Class<Point> class6 = Point.class;
      classArray0[3] = class6;
      Class<Point> class7 = Point.class;
      classArray0[4] = class7;
      Class<Point> class8 = Point.class;
      classArray0[5] = class8;
      Class<Point> class9 = Point.class;
      classArray0[6] = class9;
      Class<Point> class10 = Point.class;
      classArray0[7] = class10;
      Class<Point> class11 = Point.class;
      classArray0[8] = class11;
      // Undeclared exception!
      try { 
        parserConfig0.initJavaBeanDeserializers(classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm deserializer error, java.awt.Point
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNotNull(parserConfig0);
      
      Byte byte0 = TypeUtils.cast((Object) "", (Type) class0, parserConfig0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertNull(byte0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
