/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:18:04 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.reflect.Member;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RWUt)\"RIJ=R\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RWUt)\"RIJ=R\"M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal type: ");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.format((-1703), 0, false, '|');
      assertEquals("-1703", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = Utility.clearBit(1336, 1336);
      assertEquals(1336, int0);
      
      String string0 = Utility.classOrInterface((-2958));
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String string1 = Utility.replace("<clinit>", "Nk@i,aE=", "Nk@i,aE=");
      assertEquals("<clinit>", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.accessToString((-2774));
      try { 
        Utility.typeOfSignature("private static synchronized native abstract synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private static synchronized native abstract synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "-LisN^Q!vC6SU^wP";
      try { 
        Utility.typeOfSignature("-LisN^Q!vC6SU^wP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -LisN^Q!vC6SU^wP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "=Yr69";
      try { 
        Utility.typeOfSignature("=Yr69");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Yr69
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZN");
      assertEquals((byte)4, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)4;
      String string0 = Utility.compactClassName("ZN", "Mn;/NSRKlMny>C", true);
      assertEquals("ZN", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.replace("+E;$HHg<3<xqNE", "+E;$HHg<3<xqNE", "+E;$HHg<3<xqNE");
      try { 
        Utility.typeOfSignature("+E;$HHg<3<xqNE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E;$HHg<3<xqNE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("RWUt)\"RIJ=R\"M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"RIJ=R\"M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.compactClassName("\t\t<");
      assertEquals("\t\t<", string0);
      
      Utility.getSignature("The array of names must not be null");
      String string1 = Utility.getSignature("java.lang.9 cAhy|9D^gh)3");
      assertEquals("Ljava/lang/9;", string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature(")ewclra%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )ewclra%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.typeOfSignature("The filters must not be null");
      try { 
        Utility.methodSignatureReturnType("The filters must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filters must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b3$ad$f8$f8", string0);
      
      int int0 = Utility.clearBit(2, 246);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.isJavaIdentifierPart('D');
      try { 
        Utility.methodSignatureArgumentTypes("/+T!]R@<Y}Yos^l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /+T!]R@<Y}Yos^l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)91;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.compactClassName("J<n{ q#&^onfQ\"4Gw");
      byte byte0 = Utility.typeOfSignature("J<n{ q#&^onfQ\"4Gw");
      assertEquals((byte)11, byte0);
      
      String string0 = Utility.compactClassName("invokeinterface", "`1*{a*zA;4'^Ut", true);
      assertEquals("invokeinterface", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: breakpoint
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.compactClassName("'", false);
      try { 
        Utility.decode("'", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-86);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 aa", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.setBit(0, 1599);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)123;
      Utility.typeOfSignature("SEf");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("Lxma'*t,;W;", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.compactClassName("OlG^FToK!xi");
      assertEquals("OlG^FToK!xi", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "OlG^FToK!xi";
      objectArray0[1] = (Object) "OlG^FToK!xi";
      objectArray0[2] = (Object) "OlG^FToK!xi";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"OlG^FToK!xi\", \"OlG^FToK!xi\", \"OlG^FToK!xi\"}", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[32];
      byteArray0[8] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.classOrInterface((-1239));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2147, 2147);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2147, 1094);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.classOrInterface((-1125));
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)15;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)72, (-1125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-100), (int) (byte) (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)19;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1233), (int) (byte)68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-24);
      String string0 = Utility.compactClassName("Invalid class name ", false);
      assertEquals("Invalid class name ", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iaload", string1);
      
      String string2 = Utility.convertString("multianewarray");
      assertEquals("multianewarray", string2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "0ODw\"]g;),-{Vn8W";
      try { 
        Utility.typeOfSignature("0ODw\"]g;),-{Vn8W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0ODw\"]g;),-{Vn8W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte byte0 = ElementValue.ANNOTATION;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)64;
      Utility.replace("ZN", "ZN", "ZN");
      Utility.methodSignatureReturnType("ZN");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.getSignature("F]");
      char char0 = 'M';
      Utility.isJavaIdentifierPart('M');
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      stringArray0[0] = "LF];";
      stringArray0[1] = "4";
      Utility.methodTypeToSignature("LF];", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(LLF];;L4;)LLF];;", "F]", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;L4;)LLF];;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-124);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-124), (byte) (-124));
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 565;
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("^N32", stringArray0);
      Utility.methodSignatureArgumentTypes("()L^N32;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("yz5>@!//");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `yz5>@!//'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      Utility.methodTypeToSignature("E", stringArray0);
      Utility.format(751, 751, true, ' ');
      Utility.typeOfSignature("SEf");
      Utility.methodSignatureArgumentTypes("(LE;LE;)LE;", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("KsRDg", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KsRDg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.methodSignatureReturnType("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L$l$8b$I$A$A$A$A$A$A$A;V", true);
      String string1 = Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.compactClassName("java.lang.LFG");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LFG", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LFG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.getSignature("+E;$HHg<3<xqNE");
      byte byte0 = ObjectStreamConstants.SC_ENUM;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+E;$HHg<3<xqNE");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, 179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[6];
      byteArray1[3] = (byte)91;
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte) (-106);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E.q]d:Tg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E.q]d:Tg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantClass constantClass0 = new ConstantClass(53);
      try { 
        Utility.typeOfSignature("<init>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <init>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat((-1353.701F));
      String string0 = Utility.convertString("a:sM{0:}F;]4r!'");
      assertEquals("a:sM{0:}F;]4r!\\'", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.getSignature("%AxS-B/7wVXK");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "L%AxS-B/7wVXK;";
      stringArray0[1] = "L%AxS-B/7wVXK;";
      String string0 = Utility.methodTypeToSignature("L%AxS-B/7wVXK;", stringArray0);
      assertEquals("(LL%AxS-B/7wVXK;;LL%AxS-B/7wVXK;;)LL%AxS-B/7wVXK;;", string0);
      
      boolean boolean0 = Utility.isSet((-2115), 32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short short0 = Constants.ACC_ANNOTATION;
      Utility.compactClassName("}|qY^?|g'lf:]$UdM8i");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.getSignature("[fiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [fiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "xzrRL/>f-PL";
      stringArray0[1] = "xzrRL/>f-PL";
      stringArray0[2] = "xzrRL/>f-PL";
      stringArray0[3] = ".[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("xzrRL/>f-PL", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)15;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.getSignature("@;%J^1n<Bz[1F4cz>_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[1F4cz>_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",].T>yrrH7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,].T>yrrH7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.convertString(",].T>yrrH7");
      assertEquals(",].T>yrrH7", string0);
      
      String string1 = Utility.methodTypeToSignature(",].T>yrrH7", (String[]) null);
      assertEquals("()L,]/T>yrrH7;", string1);
      
      int int0 = Utility.setBit((-2774), (-2774));
      assertEquals((-2774), int0);
      
      String string2 = Utility.format((-2774), (-653), false, 'E');
      assertEquals("-2774", string2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Utility.accessToString((-1098), true);
      assertEquals("private protected final transient native strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lputfield;V");
      String string0 = Utility.convertString("Lputfield;V");
      assertEquals("Lputfield;V", string0);
      
      byte byte0 = Utility.typeOfSignature("Lputfield;V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte) (-83);
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte) (-83);
      byteArray1[5] = (byte) (-83);
      byteArray1[6] = (byte) (-83);
      byteArray1[7] = (byte) (-83);
      byteArray1[8] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-24);
      byteArray0[5] = (byte) (-74);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      Utility.compactClassName("char");
      try { 
        Utility.methodSignatureReturnType("E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.signatureToString("CONSTANT_Long");
      Utility.compactClassName("I&t8O][N", "I&t8O][N", true);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 11, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.clearBit((-2774), 5);
      Utility.format((-2806), 5, false, 'q');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      Utility.compactClassName("0KG|w[bxyz&Y", "0KG|w[bxyz&Y", true);
      Utility.searchOpcode(":");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString(".oy(Agbf#}P;2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.oy(Agbf#}P;2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      Utility.methodTypeToSignature("E", stringArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)97, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.compactClassName("}|qY^?|g'lf:]$UdM8i");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.searchOpcode("k ");
      byte byte0 = (byte) (-59);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dgAq_J|&.?U[qBM6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dgAq_J|&.?U[qBM6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Utility.compactClassName("short");
      assertEquals("short", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "short";
      String string1 = Utility.getSignature("short");
      assertEquals("S", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = Utility.clearBit(173, 173);
      assertEquals(173, int0);
      
      String string0 = Utility.methodSignatureReturnType("FS|+kZY%'jNJ\"E|F", true);
      assertEquals("float", string0);
      
      String string1 = Utility.compactClassName("FS|+kZY%'jNJ\"E|F", "FS|+kZY%'jNJ\"E|F", true);
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "float";
      objectArray0[1] = (Object) "FS|+kZY%'jNJ\"E|F";
      objectArray0[2] = (Object) "FS|+kZY%'jNJ\"E|F";
      objectArray0[3] = (Object) "FS|+kZY%'jNJ\"E|F";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{float, FS|+kZY%'jNJ\"E|F, FS|+kZY%'jNJ\"E|F, FS|+kZY%'jNJ\"E|F, , }", string2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nkr*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nkr*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.convertString("$N&");
      assertEquals("$N&", string0);
      
      String string1 = Utility.compactClassName("$N&", "$N&", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.format(166, 166, false, '\'');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 104, (-1372));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.signatureToString("Illegally nested brackets:");
      assertEquals("int", string0);
      
      int int0 = Utility.clearBit(9, 9);
      assertEquals(9, int0);
      
      String string1 = Utility.compactClassName("6iS}FD%", "CONSTANT_Long", false);
      assertEquals("6iS}FD%", string1);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string2 = Utility.convertString("CONSTANT_Long");
      assertEquals("CONSTANT_Long", string2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-51);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-51), 157);
      constantArray0[0] = (Constant) constantMethodref0;
      constantMethodref0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-51), 93);
      Utility.methodTypeToSignature("0:    astore\t\t%183\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    astore\t\t%183\n2:    <illegal opcode>\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", "CONSTANT_Methodref[10](class_index = -51, name_and_type_index = 157)", "CONSTANT_Methodref[10](class_index = -51, name_and_type_index = 157)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    astore\t\t%183
         // 2:    <illegal opcode>
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)72;
      String string1 = Utility.getSignature("\t\t#");
      assertEquals("L#;", string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      String string1 = Utility.classOrInterface(13);
      assertEquals("class", string1);
      
      short short0 = Utility.searchOpcode("ret");
      assertEquals((short)169, short0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-59);
      byteArray0[5] = (byte) (-120);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)28, 99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.classOrInterface((-1125));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1125), (-1125));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3391, 192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.toString();
      Utility.compactClassName("");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)47, 224);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-769), (-2557));
      char char0 = 'H';
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 172, (-769));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "E";
      stringArray0[1] = "E";
      Utility.methodTypeToSignature("E", stringArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)28);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)28, 10);
      constantMethodType1.copy();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3606), 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("SAME_LOCALS_1_STACK_EXTENDED", false);
      Utility.convertString("'Q34Xb");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "Q[v\\I3MVukC";
      try { 
        Utility.methodSignatureReturnType("Q[vI3MVukC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q[vI3MVukC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte byte0 = (byte) (-40);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte) (-40));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = false;
      Utility.format(48, (-1983510520), false, 'X');
      try { 
        Utility.typeOfSignature("48");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 48
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        Utility.typeOfSignature("ARd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ARd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.searchOpcode("k ");
      byte[] byteArray0 = new byte[3];
      try { 
        Utility.typeOfSignature("YE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[8];
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.format(27, (-1983510520), false, 'X');
      try { 
        Utility.typeOfSignature("27");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 27
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.format(751, 751, true, ' ');
      try { 
        Utility.typeOfSignature
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      boolean boolean0 = true;
      Utility.format((-321), (-321), false, 'B');
      Utility.typeOfSignature("Deprecated attribute with length > 0");
      try { 
        Utility.methodSignatureReturnType("-321", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-321'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte byte0 = Constants.T_FLOAT;
      Utility.typeOfSignature("Bl");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Bl");
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)8;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("getfield", "?>...");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"?>...\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.getSignature("}|qY^?|g'lf:]$UdM8i");
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)23;
      byteArray0[6] = (byte)23;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}|qY^?|g'lf:]$UdM8i");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(UK)9/-Uq(yUvy{7e", "L}|qY^?|g'lf:]$UdM8i;", "(UK)9/-Uq(yUvy{7e", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UK)9/-Uq(yUvy{7e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      Utility.methodTypeToSignature("Visiting non-standard PMGClass object", (String[]) null);
      Utility.methodSignatureToString("()LVisiting;", "", "", true);
      ConstantLong constantLong0 = new ConstantLong((-408L));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = Utility.isSet(0, 0);
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-24);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("x", stringArray0);
      assertEquals("()Lx;", string1);
      
      String string2 = Utility.methodSignatureToString("()Lx;", ";xP[#'l", " arg", false);
      assertEquals(" arg x ;xP[#'l()", string2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = (-321);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[8];
      int int1 = 751;
      Utility.format((-321), 751, false, 'X');
      try { 
        Utility.typeOfSignature
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)103;
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("BootstrapMethod(");
      Utility.clearBit((byte)78, (-125));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.searchOpcode("~OS10M7f:7<");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-74);
      Utility.compactClassName("invokeinterface", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, (int) (byte)19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.compactClassName("}|qY^?|g'lf:]$UdM8i");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.accept(emptyVisitor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.format('e', (-1983510520), false, 'e');
      try { 
        Utility.typeOfSignature("101");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 101
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1979), (-1979));
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInvokeDynamic0.copy();
      constantPool0.toString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      Utility.codeToString(byteArray0, constantPool0, (-1979), (-1906));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Field.getComparator();
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "0ODw\"]g;),-{Vn8W";
      Utility.convertString("0ODw\"]g;),-{Vn8W");
      String string1 = "java.lang.final synchronized";
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.final synchronized");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.final synchronized'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2567, (-381));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-381), 34);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantInvokeDynamic1.toString();
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-807), 2079, true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1979), (-1979));
      Constant[] constantArray0 = new Constant[10];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      constantInvokeDynamic0.copy();
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "char";
      stringArray0[1] = "1)null\n2)null\n3)null\n4)CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1979, name_and_type_index = -1979)\n5)null\n6)null\n7)null\n8)null\n9)null\n";
      stringArray0[2] = "char";
      stringArray0[8] = "char";
      stringArray0[5] = "1)null\n2)null\n3)null\n4)CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1979, name_and_type_index = -1979)\n5)null\n6)null\n7)null\n8)null\n9)null\n";
      stringArray0[6] = "char";
      stringArray0[7] = "char";
      stringArray0[8] = "char";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Class ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.format(166, 166, false, '\'');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      try { 
        Utility.typeOfSignature("5;*iS~<`j{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5;*iS~<`j{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-60);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      Utility.signatureToString("V", true);
      Utility.compactClassName("V", "void", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.format(34, (byte)68, false, 'H');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH34");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH34
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Xnlg^Vp[HAopT^6my|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xnlg^Vp[HAopT^6my|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String string0 = "}|qY^?i|g'lf:]$UdM8i";
      short short0 = Constants.ACC_ANNOTATION;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string2 = Constants.ILLEGAL_TYPE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U76)-{%dI_");
      constantPool0.setConstantPool(constantArray0);
      boolean boolean0 = true;
      Utility.printArray((Object[]) constantArray0, true, false);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)79, (byte)79);
      constantInvokeDynamic0.setNameAndTypeIndex((byte)79);
      constantPool1.toString();
      Utility.compactClassName("<illegal type>");
      Utility.convertString("<illegal type>");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)79, (-398));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-95);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5173, 51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "Warning: adding byte =O0 in ";
      try { 
        Utility.typeOfSignature("Warning: adding byte =O0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: adding byte =O0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1979), (-1979));
      Utility.compactClassName("A]0'=TA>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      byteSequence0.readByte();
      constantArray0[7] = (Constant) constantInvokeDynamic0;
      constantArray0[8] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-128);
      byteArray0[3] = (byte) (-47);
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)120;
      byteArray0[8] = (byte)62;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      Utility.compactClassName("putstatic", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object object0 = new Object();
      Pattern.quote("aH4k] $<~0Jfdu2N{");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)36, (-1637));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[2] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 162, (int) (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZyZFf9ALT]|");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V FS#S1ntLOig");
      Utility.typeOfSignature("ZyZFf9ALT]|");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1276, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.getSignature("F]");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "istore_1";
      stringArray0[1] = "4";
      Utility.methodTypeToSignature("LF];", stringArray0);
      Utility.methodSignatureToString("(Listore_1;L4;)LLF];;", "F]", "", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2147, 2147);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2147, 1094);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      constantArray0[7] = (Constant) constantInvokeDynamic0;
      constantArray0[8] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3512, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short short0 = Constants.FREM;
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)7;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z{6hLUao-;3q;~r0");
      byteArray0[1] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[3] = (byte) (-70);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z{6hLUao-;3q;~r0");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)7, (int) (byte)7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d{");
      Utility.compactClassName(" arg");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byte byte0 = (byte) (-86);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.mark(52);
      byteSequence0.reset();
      Integer integer0 = new Integer(195);
      Utility.equals(byteArray0, byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-86), 123);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 82, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.format(166, 166, false, '7');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.reset();
      Utility.convertString("-w_q9HI");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-w_q9HI";
      stringArray0[1] = "-w_q9HI";
      stringArray0[2] = "newarray";
      // Undeclared exception!
      try { 
        Utility.signatureToString("PrCk&l_*", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PrCk&l_*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpge");
      String string0 = "~OS10M7f:7<";
      int int0 = (-1355);
      Utility.clearBit((-1355), (-1355));
      Utility.compactClassName("~OS10M7f:7<", "7)g9ETM:2Ru`", true);
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "N<@i,oE=";
      Utility.compactClassName("N<@i,oE=");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1979), (-1979));
      byte byte0 = (byte)54;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, (-3288));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-4);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-5714), (int) (byte)59);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("0:    dup_x2\n1:    <illegal opcode>\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    dup_x2
         // 1:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QwRGf7&6v");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.decode("ur-R$EUJ", false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("QwRGf7&6v", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("Z?R$");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<clinit>");
      Utility.format((byte)59, 31, false, '`');
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = Utility.decode("Z?R$", false);
      Utility.convertString("Z?R$");
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.reset();
      Utility.compactClassName("Z?R$", "", false);
      // Undeclared exception!
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-4), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2319), (-2319));
      constantInvokeDynamic0.setNameAndTypeIndex(731);
      constantInvokeDynamic0.setNameAndTypeIndex(197);
      Constant[] constantArray0 = new Constant[1];
      constantInvokeDynamic0.toString();
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger((-2319));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      Utility.format(940, 512, true, '&');
      try { 
        Utility.typeOfSignature
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Utility.accessToString(57);
      byte[] byteArray0 = new byte[2];
      ConstantInteger constantInteger0 = new ConstantInteger(57);
      ConstantLong constantLong0 = new ConstantLong(57);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0, false, false);
      Utility.isJavaIdentifierPart('_');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_x";
      stringArray0[1] = "_x";
      stringArray0[2] = "";
      stringArray0[3] = "X:d[R";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("_x", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte byte0 = (byte) (-120);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte) (-120));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(147);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1286));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass1 = new ConstantClass(1823);
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), 1823);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      byte byte0 = (byte)19;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byte byte1 = (byte)42;
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Constant[] constantArray0 = null;
      byte byte0 = (byte) (-3);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), 59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = "org.apache.commons.io.filefilter.CanReadFileFilter";
      Utility.convertString("0:    <illegal opcode>\n");
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Constants.CONSTRUCTOR_NAME;
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)60, (int) (byte) (-10));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.classOrInterface(155);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2494);
      Field.getComparator();
      Utility.typeOfSignature("Clone Not Supported");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("WG,1d_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WG,1d_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1979), (-1979));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-99);
      ConstantClass constantClass0 = new ConstantClass((-1979));
      // Undeclared exception!
      try { 
        Utility.signatureToString("LS<+,XM;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LS<+,XM;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      byte[] byteArray0 = new byte[1];
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<clinit>";
      stringArray0[1] = "<clinit>";
      stringArray0[2] = "0|X";
      Utility.methodTypeToSignature("0|X", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L<clinit>;L<clinit>;L0|X;)L0|X;", "(L<clinit>;L<clinit>;L0|X;)L0|X;", "z)EXS~WM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `clinit>;L<clinit>;L0|X;)L0|X;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("MethodParameters");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MethodParameters'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.methodSignatureReturnType("Deprecated attribute with length > 0", true);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      short short0 = Constants.ALOAD_2;
      Utility.compactClassName("FS|+kZY%'jNJ\"E|F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FS|+kZY%'jNJ\"E|F");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FS|+kZY%'jNJ\"E|F");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FS|+kZY%'jNJ\"E|F");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (int) (byte)50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1L);
      try { 
        Utility.typeOfSignature("M7B3Fjn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M7B3Fjn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-4);
      String string0 = "RC?\"~l{zD}jfFPt";
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("RC?\"~l{zD}jfFPt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RC?\"~l{zD}jfFPt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Invalid signature: `");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.convertString("y]B&S)wh");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid signature: `", ">j^", "getstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-769), (-2557));
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!SkVVPu");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantPool0.dump(dataOutputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      constantInvokeDynamic0.dump(dataOutputStream0);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 102, (int) (byte)25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)68;
      boolean boolean0 = false;
      Utility.format((byte)0, (byte)68, false, '&');
      try { 
        Utility.typeOfSignature("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1125), (-1125));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1125), (-1125));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInteger constantInteger0 = new ConstantInteger((-1125));
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{null, \"CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1125, name_and_type_index = -1125)\", null, \"CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1125, name_and_type_index = -1125)\"}");
      constantInvokeDynamic0.setNameAndTypeIndex((-1125));
      constantPool0.toString();
      Utility.compactClassName("{null, \"CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1125, name_and_type_index = -1125)\", null, \"CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1125, name_and_type_index = -1125)\"}");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1845, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Pl<6KfLN:3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pl<6KfLN:3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Hcq&,!.yNgUY!&NdIm[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hcq&,!.yNgUY!&NdIm['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.classOrInterface((-1125));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1125), (-1125));
      String string0 = Utility.format((-1125), 1089, true, 'H');
      Utility.compactClassName("float", string0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("QDUn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QDUn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.format(34, (byte) (-126), false, 'I');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("34");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 34
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[6] = (byte) (-47);
      byteArray0[1] = (byte)120;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)62;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "YpH;:|fr2";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "YpH;:|fr2";
      int int0 = 2295;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2295, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)107;
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.compactClassName("J<n{ q#&^onfQ\"4Gw");
      Utility.typeOfSignature("J<n{ q#&^onfQ\"4Gw");
      Utility.signatureToString("J<n{ q#&^onfQ\"4Gw", true);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)43;
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-128);
      byteArray0[6] = (byte) (-47);
      byteArray0[1] = (byte)120;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 57, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short short0 = Constants.F2D;
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((short)141, 195);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.toString();
      Constant[] constantArray1 = new Constant[2];
      constantArray1[0] = (Constant) constantInvokeDynamic0;
      constantArray1[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool2 = new ConstantPool(constantArray1);
      constantPool1.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-63), 147);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1114), (int) (byte) (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    dload_2
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[1] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2459), 50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_2
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.classOrInterface(202);
      int int0 = (-2557);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-769), (-2557));
      Utility.format((-769), 202, false, 'H');
      Utility.compactClassName(":", "", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("O6<.O_fj@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O6<.O_fj@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byte byte0 = (byte) (-47);
      byteArray0[6] = (byte) (-47);
      byte byte1 = (byte)120;
      byteArray0[1] = (byte)120;
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = ElementValue.STRING;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)115, (byte)115);
      Utility.compactClassName("`<GLe?T<[JZc.If", "`<GLe?T<[JZc.If", false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Pattern.quote((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byte byte0 = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-77);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte1 = (byte) (-65);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 139, (int) (byte)12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.classOrInterface(202);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-769), (-2557));
      Utility.format((-769), 202, false, 'H');
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 102, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.classOrInterface((-1125));
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1125), (-1125));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1125), (-1125));
      ConstantInteger constantInteger0 = new ConstantInteger((-752));
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)112, (int) (byte)112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      String string0 = Constants.ILLEGAL_OPCODE;
      byte byte0 = (byte) (-94);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)98;
      constantLong0.setBytes(1L);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 182, 206);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short short0 = Constants.ALOAD_2;
      Utility.compactClassName("}|qY^?|g'lf:]$UdM8i");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((short)44, (short)44);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 50, (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Fb21:4sLNqdtP(](");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("Fb21:4sLNqdtP(](");
      try { 
        Utility.methodSignatureArgumentTypes("java.lang..4feNX:J~x", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang..4feNX:J~x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)73);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)97, 120);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)73, (byte)15);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(165, (-530));
      constantFieldref1.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 79, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short short0 = Constants.ACC_ANNOTATION;
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantPool0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[5] = (byte) (-63);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2279, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 193. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Pattern.MULTILINE;
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = "$l$8b$I$A$A$A$A$A$A$A";
      Utility.methodTypeToSignature("Erd8", stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$cj*!d7/", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.compactClassName("", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)82;
      byteArray0[7] = (byte) (-40);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)36;
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, 3391);
      Utility.classOrInterface(30);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Utility.decode("_4MM$m7", false);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[6] = (byte) (-47);
      byteArray0[1] = (byte)120;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)62;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.methodSignatureReturnType("YpH;:|fr2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YpH;:|fr2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ConstantLong constantLong0 = new ConstantLong((-1250L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readUnsignedShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.convertString("?");
      Utility.codeToString(byteArray0, constantPool0, (-2334), 40, true);
      try { 
        Utility.typeOfSignature("%66y3,r'?'m)sWf|.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %66y3,r'?'m)sWf|.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Object object0 = new Object();
      Pattern.quote("MM");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 60, (-28), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "N<@i,oE=";
      Utility.compactClassName("N<@i,oE=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)86, 55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)86);
      String string1 = "{'.Z1<+qo";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<init>", "Dont call getValueDouble() on a non DOUBLE ElementValue", "{'.Z1<+qo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <init>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.classOrInterface(167);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(167);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[6];
      constantArray0[5] = (Constant) constantMethodType0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 173, 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49344. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short short0 = Constants.ACC_ANNOTATION;
      Utility.compactClassName("", "}|qY^?i|g'lf:]$UdM8i", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      short short0 = Constants.ACC_ANNOTATION;
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Object object0 = new Object();
      Pattern.quote("yI4");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.compactClassName("|`{z$Az^bT=\tj|@6_");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[0] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPool0.copy();
      Utility.printArray((Object[]) constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-79);
      byteArray1[1] = (byte) (-79);
      byteArray1[0] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 91, (int) (byte) (-79), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = (byte)66;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)66;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.convertString("OBxbSx5L[ec4[A#@@");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Dr wabxP_b";
      stringArray0[1] = "OBxbSx5L[ec4[A#@@";
      stringArray0[2] = "OBxbSx5\\L[ec4[A#@@";
      stringArray0[3] = "OBxbSx5\\L[ec4[A#@@";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Dr wabxP_b", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[ec4[A#@@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte byte0 = (byte) (-103);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object0 = new Object();
      Pattern.quote("MM");
      ConstantMethodType constantMethodType0 = new ConstantMethodType(12);
      Field.getComparator();
      String string0 = "@K1{3].|xR";
      try { 
        Utility.typeOfSignature("@K1{3].|xR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @K1{3].|xR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.compactClassName("invokedynamic", "AHzQ", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte) (-19);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 185, 78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte) (-98);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Object object0 = new Object();
      Utility.codeToString(byteArray0, constantPool0, (-1067), 1836);
      Utility.printArray((Object[]) constantArray0, true, true);
      Utility.searchOpcode("0:    ireturn\n1:    ifle\t\t#1\n");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.compactClassName("o", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)120;
      byteArray0[3] = (byte) (-75);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), 230);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unreachable default case reached!");
      String string1 = "N<@i,oE=";
      Utility.compactClassName("N<@i,oE=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("N<@i,oE=", false);
      try { 
        Utility.typeOfSignature("N<@i,oE=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N<@i,oE=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(1L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      constantLong0.setBytes(11L);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 182, 206);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-40);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte) (-91));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-91);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    fstore_3\n1:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    fstore_3
         // 1:    <illegal opcode>
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.classOrInterface(202);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-769), 188);
      constantInvokeDynamic0.toString();
      Utility.format((-769), 202, false, 'H');
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h&(tN 1-SlT");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, 629);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 191. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("09 00 0c 0");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/09 00 0c 0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "09 00 0c 0");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-123), 2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.createFolder(evoSuiteFile0);
      short short0 = Constants.ACC_ANNOTATION;
      Utility.compactClassName("}|qY^?i|g'lf:]$UdM8i");
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string1 = Constants.ILLEGAL_TYPE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U76)-{%dI_");
      mockFileOutputStream0.write((int) (short)8192);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)65;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, (-3003));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short short0 = Constants.MONITORENTER;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      byteArray0[1] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)96, (int) (short)194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = false;
      Utility.classOrInterface(117);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(117);
      Field.getComparator();
      byte byte0 = Constants.CONSTANT_String;
      byte[] byteArray0 = Utility.decode("class", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)8, 1199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(270, 270);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Object object0 = new Object();
      Pattern.quote(")\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)15, (int) (byte)74, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.replace("Nkr*", "Nkr*", "Nkr*");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte)55;
      Utility.equals(byteArray0, byteArray1);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byte byte0 = (byte)95;
      byteArray0[2] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      constantPool0.copy();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "char";
      stringArray0[1] = "1)null\n2)null\n3)null\n4)null\n";
      stringArray0[5] = "1)null\n2)null\n3)null\n4)null\n";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2060, 850);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1979), (-1979));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V{C/Gam'H \"u%d2iC");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-99);
      ConstantClass constantClass0 = new ConstantClass(2096);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(50);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Yud_HIb*ij04VT");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Invalid method signature: ");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-88);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(64, (byte) (-88));
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = null;
      int int0 = 964;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 964, 565);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.toString();
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-61));
      constantPool0.constantToString((Constant) constantInteger0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 84, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1125), (-1125));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1125), (-1125));
      ConstantInteger constantInteger0 = new ConstantInteger((-752));
      ConstantLong constantLong0 = new ConstantLong((-752));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.setConstantPool(constantArray0);
      Utility.printArray((Object[]) constantArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)79;
      constantInvokeDynamic0.setNameAndTypeIndex((byte)79);
      constantPool0.toString();
      Utility.compactClassName(")ewclra%");
      Utility.convertString("1)CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1125, name_and_type_index = 79)\n2)null\n3)CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1125, name_and_type_index = 79)\n");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)79;
      Utility.equals(byteArray1, byteArray0);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-966), (-1979));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((-966), 195);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[0] = (byte) (-63);
      byteArray0[2] = (byte) (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1979), (-2245));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 177. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = " &(Y";
      String string1 = "6,)R#v8$M";
      try { 
        Utility.typeOfSignature("6,)R#v8$M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6,)R#v8$M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2182, 254);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2182, 2182);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = Pattern.LITERAL;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 254, (int) (byte)51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-56);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 48, 4706);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.createFolder(evoSuiteFile0);
      short short0 = Constants.ACC_ANNOTATION;
      Utility.compactClassName("}|qY^?i|g'lf:]$UdM8i");
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string1 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-120);
      byteArray0[3] = (byte)87;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-109));
      constantMethodType0.accept(emptyVisitor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-109), (int) (byte) (-109));
      try { 
        constantPool0.getConstant((int) (byte) (-109), (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -109. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), (-4078));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      Utility.compactClassName("istore_3", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-371);
      Utility.codeToString(byteArray0, constantPool0, (-371), (int) (byte)78, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f)fhM ? a", "Invalid signature: ", "istore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f)fhM ? a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-105);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1986, 256);
      Locale locale0 = Locale.FRENCH;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool0.copy();
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 50, 3022);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1979), (-1979));
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      Pattern.quote("MM");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte) (-82);
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[8] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[1] = (byte) (-36);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte) (-36);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, 366, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)89;
      byteArray0[3] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ConstantPool constantPool1 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1024, (-970), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "*)~m_ %dJUq^%A^p'";
      try { 
        Utility.typeOfSignature("*)~m_ %dJUq^%A^p'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )~m_ %dJUq^%A^p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      byte byte0 = (byte)32;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte byte1 = (byte)17;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)29, (int) (byte)29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1448), (-3734));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(175);
      Constant[] constantArray0 = new Constant[5];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodType0.accept(emptyVisitor0);
      constantArray0[3] = (Constant) constantMethodType0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, 88, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Pattern.quote("\"");
      Utility.clearBit(2730, 1024);
      Utility.typeOfSignature("V-]1;~uW._T:_");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.accessToString(87);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(byteSequence1);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((-2593), 87, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-112), (-3734));
      try { 
        Utility.typeOfMethodSignature("0:    ineg\n1:    d2f\n2:    d2f\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    ineg
         // 1:    d2f
         // 2:    d2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1658), (-1658));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V{C/Gam'H \"u%d2iC");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/09 00 0c 0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "V");
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte) (-87);
      Utility.codeToString(byteArray0, constantPool0, (-2599), (int) (byte) (-40), true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byteArray0[1] = (byte) (-98);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      constantPool0.copy();
      Utility.isSet(86, 4);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (int) (byte) (-116));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      Utility.searchOpcode(" ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{}", "l=0wUpm)-@sZ7_", "{}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.compactClassName("<illegal opcode>", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpl
         // 1:    dcmpl
         // 2:    fcmpg
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!g_ha(.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: g_ha(.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-54);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)120, (-1603));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "1)CONSTANT_InvokeDynamic";
      byte byte0 = ElementValue.PRIMITIVE_FLOAT;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)70;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Object object0 = new Object();
      Pattern.quote("1)CONSTANT_InvokeDynamic");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-899), (int) (byte)70, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-60);
      byteArray0[5] = (byte) (-117);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)81, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("+Z\" f :6PNEl{sK");
      Utility.typeOfSignature("+Z\" f :6PNEl{sK");
      Method.getComparator();
      String string0 = "V";
      Utility.typeOfSignature("V");
      boolean boolean0 = false;
      try { 
        Utility.typeOfSignature("8a4n^2D>Rj 2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8a4n^2D>Rj 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1979), (-1979));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ifgt");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInvokeDynamic0.copy();
      Object object0 = new Object();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-92), (int) (byte) (-92), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2147, 2147);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2147, 1094);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      constantArray0[7] = (Constant) constantInvokeDynamic0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 160, 2051);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 48284. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.baseWireHandle;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = Pattern.MULTILINE;
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      Utility.printArray((Object[]) stringArray0, false);
      Field.getComparator();
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("p>B?^A_", "d~/LIES", "impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p>B?^A_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-120);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), (int) (byte) (-125));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte) (-89);
      byteArray1[7] = (byte) (-89);
      byteArray1[8] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("goto\t\t#0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto\t\t#0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte)77;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)98, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1986, 256);
      Locale locale0 = Locale.FRENCH;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wide");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wide");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".class");
      ConstantPool constantPool2 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-90), (int) (byte) (-68));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    newarray\t\t<char>
         // 2:    f2d
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      constantPool0.copy();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1)null\n2)null\n3)null\n4)null\n";
      stringArray0[1] = "1)null\n2)null\n3)null\n4)null\n";
      stringArray0[8] = "1)null\n2)null\n3)null\n4)null\n";
      stringArray0[5] = "1)null\n2)null\n3)null\n4)null\n";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2025, 850);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)68;
      Utility.format(68, (byte)68, true, 'A');
      Utility.accessToString((int) (byte)68);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)68);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, true);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "protected volatile";
      objectArray0[2] = (Object) constantMethodType0;
      objectArray0[3] = (Object) constantMethodType0;
      objectArray0[4] = (Object) constantMethodType0;
      Utility.printArray(objectArray0, true);
      Field.getComparator();
      try { 
        Utility.typeOfSignature("#Za7<P9|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Za7<P9|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)104;
      byteArray0[4] = (byte)89;
      byteArray0[3] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      int int0 = (-1198);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 40, (-1198));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-40);
      constantPool1.setConstantPool(constantArray0);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)116;
      constantPool0.setConstantPool(constantArray0);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)37;
      byteArray0[7] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 3292, (int) (byte)37);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte)80;
      byteArray0[3] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 156, (int) (byte) (-54), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("09 00 0c 0");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/09 00 0c 0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "09 00 0c 0");
      Utility.convertString("<illegal opcode>");
      byte byte0 = (byte) (-86);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-35);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(2164, (byte)123);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantInvokeDynamic0.setNameAndTypeIndex((byte)123);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "09 00 0c 0");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-93);
      byteArray1[1] = (byte) (-35);
      byteArray1[2] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 1997, (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-35), 52, false);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      byteArray0[5] = (byte) (-40);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1262, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j<.");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)88;
      byteArray0[3] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.setBit((-91), (byte)54);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)54);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray1;
      Utility.printArray(objectArray0);
      Utility.format((-91), 109, false, '4');
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V{C/Gam'H \"u%d2iC");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/09 00 0c 0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "V");
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[1] = (byte)53;
      byteArray0[3] = (byte) (-87);
      Utility.codeToString(byteArray0, constantPool0, (-2599), (int) (byte) (-40), true);
      Utility.getSignature("1)null\n2)null\n3)null\n");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      short short0 = Constants.ALOAD_2;
      Utility.compactClassName("}|qY^?|g'lf:]$UdM8i");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byte byte0 = (byte)33;
      byteArray0[3] = (byte)33;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}|qY^?|g'lf:]$UdM8i");
      String string0 = "(UK)9/\\-Uq(yUvy{7e";
      Pattern.quote("(UK)9/-Uq(yUvy{7e");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q(UK)9/-Uq(yUvy{7eE");
      ConstantPool constantPool0 = null;
      int int0 = 3512;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, 3512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.classOrInterface((-2268));
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString('\'');
      constantArray0[1] = (Constant) constantString0;
      byte byte0 = (byte)89;
      byte byte1 = (byte)51;
      int int0 = (-361);
      boolean boolean0 = false;
      Utility.format((-361), (-2268), false, 'N');
      try { 
        Utility.typeOfSignature("'1mc:r{qkwIG%@?}]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '1mc:r{qkwIG%@?}]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Constants.ILLEGAL_TYPE;
      short short0 = Constants.LDC2_W_QUICK;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short)205, (int) (short)205, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)88;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i*");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i*");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i*");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), 1499);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-76);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "\t<";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("\t<", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-1);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (-2238));
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1422), 64);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 204, (int) (byte) (-40));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)39;
      String string0 = Constants.ILLEGAL_TYPE;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isSet((byte) (-2), (-2440));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokeinterface", "invokeinterface", "=L6!^X\"xmeqYzdR-", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeinterface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      constantPool0.copy();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "chGr";
      stringArray0[1] = "1)null\n2)null\n3)null\n4)null\n";
      stringArray0[0] = "1)null\n2)null\n3)null\n4)null\n";
      stringArray0[5] = "1)null\n2)null\n3)null\n4)null\n";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byte byte0 = (byte) (-99);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2025, 850);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1984, 1984);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid signature: ");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1984, 3307);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte)32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(64, (byte) (-124));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2814, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      Utility.classOrInterface(1368);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(186);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "!V~b57";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!V~b57");
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-64);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1772, (int) (byte) (-64));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-94);
      byteArray0[5] = (byte)25;
      byteArray0[7] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 156, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      constantPool0.copy();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "char";
      stringArray0[1] = "1)null\n2)null\n3)null\n4)null\n";
      stringArray0[5] = "1)null\n2)null\n3)null\n4)null\n";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfMethodSignature("(=4Esp`^U0e49NUgN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (=4Esp`^U0e49NUgN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/09 00 0c 0");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "V");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-19);
      constantPool0.copy();
      byteArray0[0] = (byte) (-87);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      classLoader0.setPackageAssertionStatus("Z KIRvFgb8<k(ta|", true);
      ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      classLoader0.setClassAssertionStatus("V", true);
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.getParent();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      Utility.codeToString(byteArray0, constantPool0, (-2595), (int) (byte) (-19), true);
      byte[] byteArray1 = Utility.decode("0:    ret\t\t%237\n2:    nop\n3:    nop\n4:    nop\n", false);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 2814, (-3023));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ixor");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J3W*G7}V4NP]6W?X5EF");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ixor");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-101);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.codeToString(byteArray0, constantPool0, (-2814), 114);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.encode(byteArray0, false);
      Utility.convertString("uh)i3+y{y_i9h");
      // Undeclared exception!
      try { 
        Utility.signatureToString("x-d!Ij!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `x-d!Ij!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedShort();
      constantPool0.copy();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-39);
      byteArray0[5] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteSequence0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 85);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(175);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.searchOpcode("<6<9@0G");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-62);
      Utility.equals(byteArray0, byteArray0);
      Utility.replace("a", "a", "<6<9@0G");
      Utility.encode(byteArray0, true);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1017), 61);
      constantPool0.copy();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte)88;
      byteArray1[3] = (byte) (-62);
      byteArray1[4] = (byte) (-78);
      byteArray1[5] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (short) (-1), (-1231));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22722. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("09 00 0c 0");
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/09 00 0c 0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ", low = ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Byte code error: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ", low = ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), 1499);
      // Undeclared exception!
      try { 
        Utility.signatureToString("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)119;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, (int) (byte)119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(80);
      byte[] byteArray0 = Utility.decode("<illegal opcode>", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(197, 80);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantInvokeDynamic1.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), 3557);
      Utility.getSignature("tableswitch");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "i`T@lE";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i`T@lE");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("i`T@lE", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i`T@lE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
