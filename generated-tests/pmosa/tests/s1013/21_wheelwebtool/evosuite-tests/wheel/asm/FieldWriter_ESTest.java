/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:25:45 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "T\"0^", "lI?WyL[lH\"^S", "T\"0^", "lI?WyL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter1.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newClass("_WJ6$fR/a>YfOj");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32768), "_WJ6$fR/a>YfOj", "lI?ryL[lH\"^S", "_WJ6$fR/a>YfOj", "lI?ryL[lH\"^S");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("lI?ryL[lH\"^S", false);
      Attribute attribute0 = new Attribute("lI?ryL[lH\"^S");
      fieldWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "T\"0^", "lI?WyL[lH\"^S", "T\"0^", "lI?WyL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      fieldWriter0.visitAnnotation("T\"0^", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newClass("_WJ6$fR/a>YfOj");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32768), "T\"0^", "lI?ryL[lH\"^S", "T\"0^", "lI?ryL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter1.pool;
      byteVector0.put12(2, 3);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("lI?ryL[lH\"^S", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1153));
      classWriter0.newInteger(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "2jX8fwwXG", "aV{6NRV", "2jX8fwwXG", "2jX8fwwXG");
      fieldWriter0.visitAnnotation("(PI", true);
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putShort(1);
      ByteVector byteVector2 = byteVector1.putByte(2);
      fieldWriter0.put(byteVector1);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 2078, "", "", "", byteVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ByteVector@1
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32768), "T\"0^", "lI?ryL[lH\"^S", "T\"0^", "lI?ryL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter1.pool;
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      classWriter0.newClass("_WJ6$fR/a>YfOj");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "lI?ryL[lH\"^S", "L8.fM=<*", "lI?ryL[lH\"^S", "lI?ryL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(1);
      ByteVector byteVector0 = classWriter1.pool;
      ByteVector byteVector1 = byteVector0.put12(1, 188);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("T\"0^", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1272), "k>-P =e#E?53*u", "k>-P =e#E?53*u", "The strings must not be null", "double");
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Type.FLOAT;
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "", "lI?ryL[lH\"^S", (String) null, "");
      ClassWriter classWriter1 = new ClassWriter(1);
      ClassWriter classWriter2 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter2.pool;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter1.visit(0, 7, "RuntimeInvisibleAnnotations", "java/lang/Class", (String) null, stringArray0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("", false);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = Type.FLOAT;
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      Object object0 = label1.info;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 6, "_WJ6$fR/a>YfOj", "lI?ryL[lH\"^S", "lI?ryL[lH\"^S", (Object) null);
      ClassWriter classWriter1 = new ClassWriter(1);
      ByteVector byteVector0 = classWriter1.pool;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "";
      stringArray0[3] = "lI?ryL[lH\"^S";
      stringArray0[4] = "lI?ryL[lH\"^S";
      stringArray0[5] = "_WJ6$fR/a>YfOj";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "lI?ryL[lH\"^S";
      classWriter0.visit(171, 171, "", "lI?ryL[lH\"^S", "", stringArray0);
      fieldWriter0.put(byteVector0);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("1", false);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("java/lang/String", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32768), "l(fT?[zG", "T\"0^", (String) null, "lI?ryL[lH\"^S");
      ByteVector byteVector0 = classWriter0.pool;
      classWriter0.addType("lI?ryL[lH\"^S");
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      ByteVector byteVector1 = byteVector0.putLong(1);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "double", "double", "", (Object) null);
      ClassWriter classWriter1 = new ClassWriter((-2104));
      ClassWriter classWriter2 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter0.pool;
      classWriter2.visit(3095, (-3432), "double", "", "I)]Z@", (String[]) null);
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = Type.FLOAT;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32769), "_WJ6$fR/a>YfOj", "lI?ryL[lH\"^S", "_WJ6$fR/a>YfOj", "lI?ryL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "lI?ryL[lH\"^S";
      stringArray0[1] = "6>+s/";
      stringArray0[2] = "lI?ryL[lH\"^S";
      stringArray0[3] = "lI?ryL[lH\"^S";
      stringArray0[4] = "";
      stringArray0[5] = "v>]_+}";
      classWriter1.visitMethod((-32769), "6>+s/", "", "v>]_+}", stringArray0);
      ByteVector byteVector0 = classWriter1.pool;
      String[] stringArray1 = new String[8];
      stringArray1[0] = "The strings must not be null";
      stringArray1[1] = "";
      stringArray1[2] = "_WJ6$fR/a>YfOj";
      classWriter0.invalidFrames = true;
      stringArray1[3] = "";
      stringArray1[4] = "_WJ6$fR/a>YfOj";
      stringArray1[5] = "The strings must not be null";
      stringArray1[6] = "_WJ6$fR/a>YfOj";
      stringArray1[7] = "1";
      classWriter0.visit((-412), (-412), "RuntimeVisibleAnnotations", "The strings must not be null", "The strings must not be null", stringArray1);
      int int1 = fieldWriter0.getSize();
      assertEquals(30, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = Type.FLOAT;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-32769), "_W/J6$fR/a>YfOj", "lI?ryL[lH\"^S", "_W/J6$fR/a>YfOj", "lI?ryL[lH\"^S");
      ClassWriter classWriter1 = new ClassWriter(0);
      ByteVector byteVector0 = classWriter1.pool;
      fieldWriter0.put(byteVector0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit(2, 131072, "1", "", "", stringArray0);
      classWriter0.visit((-405), 0, "", "ConstantValue", "", stringArray0);
      fieldWriter0.put(byteVector0);
      int int1 = fieldWriter0.getSize();
      assertEquals(30, int1);
  }
}
