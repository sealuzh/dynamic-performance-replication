/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:42:03 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[G");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1IIiC_");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("1", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.literal();
      assertEquals(27, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_Nk[F");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.literal();
      xPathLexer0.consume((-1693));
      assertEquals("_Nk[F", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K 1>");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("[ ", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(1, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K5 1a>");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("K5", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      xPathLexer0.dollar();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer2 = new XPathLexer("j/9!");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer2.slashes();
      xPathLexer1.whitespace();
      String string0 = "J,)";
      Token token1 = xPathLexer1.dots();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (26) (<)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getXPath();
      xPathLexer0.setXPath("[ (26) (<)");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(" ", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.star();
      Token token4 = xPathLexer0.not();
      assertEquals("2", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("6", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dWo>3!l8");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("d", token0.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token0);
      
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.whitespace();
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNull(token1);
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token2 = xPathLexer1.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer4.div();
      Token token4 = xPathLexer5.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer4.or();
      boolean boolean0 = xPathLexer3.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.consume(6);
      xPathLexer0.minus();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("xdsPM");
      xPathLexer1.leftBracket();
      xPathLexer0.mod();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("xdsPM");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F0>=t&71F*)/+{8e1");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("F0", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(">", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" ]Rduo^M");
      XPathLexer xPathLexer1 = new XPathLexer(" ]Rduo^M");
      xPathLexer1.dollar();
      Token token0 = xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer2.getXPath();
      xPathLexer2.currentPosition();
      xPathLexer1.relationalOperator();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer0.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "!9e2D)";
      String string1 = "G@[Oigk|}Q5]r2]Y";
      xPathLexer0.setXPath("G@[Oigk|}Q5]r2]Y");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dots();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[H\"CM[9+8");
      xPathLexer0.setXPath("[H\"CM[9+8");
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer2.setXPath("[H\"CM[9+8");
      xPathLexer0.or();
      xPathLexer2.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer2.consume();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E39q#.\"LY");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.colon();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (18) (9)");
      token0.toString();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.whitespace();
      xPathLexer1.at();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`F");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("3v~6M\"T$6f\"x(A");
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      assertEquals("3v~6M\"T$6f\"x(A", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[H\"CM[9+8");
      xPathLexer0.setXPath("[H\"CM[9+8");
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer1.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer1.consume();
      assertNull(xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setXPath("");
      xPathLexer0.literal();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("w");
      xPathLexer2.nextToken();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer1.and();
      xPathLexer1.or();
      Token token1 = xPathLexer1.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`F");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("/", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("`F", token3.getTokenText());
      assertEquals((-1), token3.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar(':');
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('-');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{7Y0");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("{7Y0");
      xPathLexer2.nextToken();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "ogD";
      XPathLexer xPathLexer0 = new XPathLexer("ogD");
      Token token0 = xPathLexer0.colon();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer1.whitespace();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.setXPath("!9e2D)");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("!9e2D)");
      assertEquals("!9e2D)", xPathLexer1.getXPath());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xdsPM");
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.number();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2+juG'");
      XPathLexer xPathLexer1 = new XPathLexer("2+juG'");
      Token token0 = xPathLexer1.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("2+juG'");
      Token token1 = xPathLexer1.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("+", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.pipe();
      assertEquals("2", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":?t8L'X;qcquI=<`");
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.consume((-1845));
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer2.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume(6);
      xPathLexer0.isIdentifierStartChar('');
      XPathLexer xPathLexer1 = new XPathLexer("Oh%+");
      Token token0 = xPathLexer1.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("O", token0.getTokenText());
      
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.currentPosition();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals("%+", token4.getTokenText());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer1.minus();
      assertEquals("%", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">?,}\"8l<i*");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YH^6");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("Y", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("H", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("^", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("6", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">lk");
      Token token0 = xPathLexer0.not();
      assertEquals(">", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("lk", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K|lUe_R=B7");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.dots();
      Token token0 = xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer("K|lUe_R=B7");
      xPathLexer1.dollar();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Uy");
      XPathLexer xPathLexer1 = new XPathLexer("Uy");
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("q");
      xPathLexer3.slashes();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VmT");
      xPathLexer0.setXPath("8Sk]SH&~wdrL<");
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("8Sk]SH&~wdrL<");
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals("8", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("VmT");
      boolean boolean0 = xPathLexer3.isIdentifierStartChar('s');
      assertTrue(boolean0);
      
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("8", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E39q#.\"LY");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (19) (E3)");
      xPathLexer1.isIdentifierChar('Z');
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.whitespace();
      xPathLexer1.at();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!Yn8F)");
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('t');
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("Y", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("n8F)", token2.getTokenText());
      
      xPathLexer0.star();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("8F", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("!Yn8F)");
      Token token4 = xPathLexer1.star();
      assertEquals("", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals(")", token5.getTokenText());
      
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xK5 1a>");
      Token token0 = xPathLexer0.plus();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("K5", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(" ", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (5) (x)", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (26) ())", string0);
      
      xPathLexer0.rightParen();
      Token token1 = xPathLexer0.plus();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.consume(3);
      xPathLexer0.setPreviousToken(token1);
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      
      Token token7 = xPathLexer2.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('S');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("w>wf@9sh@S?");
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("w>", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token8 = xPathLexer1.equals();
      assertEquals("w", token8.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer1.or();
      Token token9 = xPathLexer1.plus();
      assertEquals("f", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token6);
      Token token10 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      assertNotNull(token10);
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer2.leftParen();
      assertEquals(1, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token12 = xPathLexer1.nextToken();
      assertEquals("@", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_B?-");
      xPathLexer0.setXPath("_B?-");
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`F");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("/", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("i\"gwXH:6G3[pH3");
      xPathLexer2.or();
      Token token1 = xPathLexer0.dots();
      assertEquals("`", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("F", token2.getTokenText());
      assertNotNull(token2);
      
      Token token3 = xPathLexer3.nextToken();
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("bduX%()y");
      Token token4 = xPathLexer5.notEquals();
      assertEquals("bd", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer5.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token5 = xPathLexer6.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "<YME3mHx>,,*84\"z";
      XPathLexer xPathLexer0 = new XPathLexer("<YME3mHx>,,*84\"z");
      Token token0 = xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      xPathLexer0.consume((-2483));
      XPathLexer xPathLexer2 = new XPathLexer("`");
      xPathLexer1.operatorName();
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      String string1 = "E";
      XPathLexer xPathLexer1 = new XPathLexer("E");
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.or();
      Token token0 = xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer3.number();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("j!#9[!v[Lx\"O=Nf[g");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("j", token3.getTokenText());
      
      Token token4 = xPathLexer3.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "-},<Fw";
      XPathLexer xPathLexer0 = new XPathLexer("-},<Fw");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.at();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V=mA");
      xPathLexer0.nextToken();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer1.plus();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" ]Rduo^M");
      Token token0 = xPathLexer0.star();
      assertEquals(" ", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer(" ]Rduo^M");
      Token token1 = xPathLexer1.pipe();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("]", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.setXPath(" ]Rduo^M");
      String string0 = token1.toString();
      assertEquals("[ (17) ( )", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uD;J");
      xPathLexer0.div();
      Token token0 = xPathLexer0.comma();
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      token0.toString();
      xPathLexer0.div();
      Token token2 = xPathLexer0.slashes();
      assertEquals(";", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (32) (u)", string0);
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.setPreviousToken(token0);
      int int0 = xPathLexer0.endPosition();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2ju0'");
      xPathLexer0.or();
      Token token0 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getXPath();
      xPathLexer0.currentPosition();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Jb:of]'7F");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("JjVMY{&_xh%_F");
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.pipe();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("=");
      xPathLexer1.pipe();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer1.setXPath("=");
      xPathLexer1.nextToken();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      xPathLexer0.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.consume();
      Token token0 = xPathLexer3.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KKdbpzp9kTpK");
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.rightBracket();
      xPathLexer1.and();
      xPathLexer0.consume();
      xPathLexer0.div();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("amT");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.plus();
      String string0 = "";
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.setPreviousToken(token0);
      xPathLexer1.whitespace();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*)^}`Ox");
      XPathLexer xPathLexer1 = new XPathLexer("K5 1a>");
      Token token0 = xPathLexer1.minus();
      assertEquals("K", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("5", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("*", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer1.div();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals(")", token3.getTokenText());
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(" 1", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer1.setXPath("{7Y0");
      xPathLexer0.setXPath("dF9u>S");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.and();
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("dF9u", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("{7Y0");
      xPathLexer2.mod();
      xPathLexer1.getPreviousToken();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V=mA");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("V=mA");
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("V=mA");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9{p:-w`vs}/m$AZCz");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.number();
      xPathLexer0.setXPath("Ii,a]|eN1B+y:?7~2");
      xPathLexer1.and();
      xPathLexer0.number();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("9{p:-w`vs}/m$AZCz");
      xPathLexer1.div();
      XPathLexer xPathLexer3 = new XPathLexer("g:?trL'XF;RcquI=<`");
      Token token0 = xPathLexer2.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer3.leftBracket();
      assertEquals("g", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals(":", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("Ii", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("Ii,a]|eN1B+y:?7~2");
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("g:?trL'XF;qRcquI=<`");
      xPathLexer1.pipe();
      xPathLexer1.at();
      xPathLexer0.getXPath();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer("e So[H|");
      xPathLexer2.minus();
      xPathLexer2.plus();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = " ]Rduo^M";
      XPathLexer xPathLexer0 = new XPathLexer(" ]Rduo^M");
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      Token token0 = xPathLexer1.pipe();
      xPathLexer1.plus();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("R&hX~A9*tf.");
      Token token0 = xPathLexer0.plus();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (5) (R)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.notEquals();
      assertEquals("&h", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("X", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("~", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.plus();
      Token token4 = xPathLexer0.identifier();
      assertEquals("9", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(20, token5.getTokenType());
      assertEquals("*", token5.getTokenText());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("tf", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals(".", token7.getTokenText());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":?t8L'XF;qRcquI=<`");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.minus();
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("t", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("8", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("L", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("X9v[uYl|+b");
      xPathLexer0.or();
      xPathLexer1.rightParen();
      xPathLexer0.dots();
      xPathLexer0.div();
      xPathLexer0.getXPath();
      String string0 = "4";
      XPathLexer xPathLexer2 = new XPathLexer("4");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.mod();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer5.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g:?t8L'XF;qRcquI=<`");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.plus();
      xPathLexer1.setXPath("^U");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.consume((-3294));
      // Undeclared exception!
      try { 
        xPathLexer1.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";mh");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      Token token1 = xPathLexer0.comma();
      token1.toString();
      String string0 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KKdbpzp9kpK");
      xPathLexer0.minus();
      xPathLexer0.whitespace();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.leftParen();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.consume((-50));
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume((-50));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("og)D");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("og)D");
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("og", token1.getTokenText());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer3 = new XPathLexer("O:aMEV!}I4\"8n3K");
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.literal();
      XPathLexer xPathLexer6 = new XPathLexer("nF6u");
      Token token2 = xPathLexer3.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer3.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token4 = xPathLexer7.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer6.plus();
      assertEquals("n", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("amT");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      Token token1 = xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("amT");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.rightBracket();
      xPathLexer1.and();
      xPathLexer1.consume();
      xPathLexer1.div();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ly");
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token0 = xPathLexer0.comma();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V=mA");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("V=mA");
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setXPath("<");
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("QENT?BJ:m7q");
      xPathLexer3.operatorName();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer8 = new XPathLexer("<");
      Token token1 = xPathLexer6.nextToken();
      assertEquals("QENT", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token2 = xPathLexer6.identifierOrOperatorName();
      assertNull(token2);
      
      XPathLexer xPathLexer10 = new XPathLexer();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer3.consume();
      Token token3 = xPathLexer4.dots();
      assertEquals("<", token3.getTokenText());
      
      xPathLexer9.consume();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("=", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Jb:of]'7F");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("J", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("b", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar(']');
      XPathLexer xPathLexer1 = new XPathLexer("JjVMY{&_xh%_F");
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">?,}\"8l<i*");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.mod();
      token0.toString();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      xPathLexer0.pipe();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("lk");
      Token token2 = xPathLexer1.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("k", token3.getTokenText());
      
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/`F");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("/`F");
      xPathLexer1.number();
      Token token0 = xPathLexer1.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      xPathLexer0.consume(6);
      xPathLexer0.div();
      xPathLexer0.number();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer("3bm3[3VvPm");
      Token token1 = xPathLexer2.nextToken();
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("3bm3[3VvPm");
      Token token2 = xPathLexer3.leftBracket();
      assertEquals("3", token2.getTokenText());
      
      xPathLexer3.mod();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token4 = xPathLexer2.equals();
      assertEquals("b", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer3.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("b", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.consume();
      Token token6 = xPathLexer4.leftBracket();
      assertEquals(3, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.consume(0);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("BfB-}y08Q=]~");
      Token token0 = xPathLexer4.nextToken();
      assertEquals("BfB-", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer1.setPreviousToken((Token) null);
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.number();
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer("BfB-}y08Q=]~");
      Token token1 = xPathLexer7.number();
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("BfB-}y08Q=]~");
      xPathLexer5.operatorName();
      xPathLexer6.operatorName();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token2 = xPathLexer7.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("B", token2.getTokenText());
      
      XPathLexer xPathLexer10 = new XPathLexer();
      XPathLexer xPathLexer11 = new XPathLexer();
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer5.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer3.star();
      assertEquals(20, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "&<..v;r'";
      XPathLexer xPathLexer0 = new XPathLexer("&<..v;r'");
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.number();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("X>Bl2YM%`z6QbA");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.consume((-1149));
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      Token token1 = xPathLexer1.at();
      xPathLexer1.mod();
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.currentPosition();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.slashes();
      xPathLexer2.div();
      xPathLexer3.relationalOperator();
      xPathLexer5.setPreviousToken(token1);
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-1149));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("g:?trL'XF;qRcquI=<`");
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.mod();
      xPathLexer1.not();
      xPathLexer0.mod();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken((Token) null);
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("$Hjl['fltme");
      xPathLexer3.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer3.rightParen();
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token1 = xPathLexer6.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer6.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer3.not();
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("c_J &L");
      Token token4 = xPathLexer4.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer5.or();
      xPathLexer0.mod();
      Token token5 = xPathLexer7.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("c_J", token5.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.or();
      Token token6 = xPathLexer8.plus();
      assertEquals(5, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.at();
      xPathLexer0.setXPath(")");
      xPathLexer0.whitespace();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setXPath("");
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.identifier();
      xPathLexer0.consume();
      xPathLexer1.whitespace();
      xPathLexer0.and();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0b)FW#}K#?@");
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.dots();
      assertEquals("b", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(2, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("F", token3.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('{');
      assertFalse(boolean0);
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.at();
      assertEquals("W", token4.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (16) (0)", string0);
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("#", token6.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token7 = xPathLexer0.colon();
      assertEquals("}", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("e So[H|");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&<..vKr'");
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("&<..vKr'");
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.identifier();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer1.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("NEj4[22/Z\"4ndhh");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("2", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.comma();
      assertEquals("Z", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("\"4", token4.getTokenText());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals("h", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      assertEquals("h", token7.getTokenText());
      
      xPathLexer0.rightParen();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".sf<tzX$!K9:x}hBgTH");
      xPathLexer0.or();
      Token token0 = xPathLexer0.number();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.getXPath();
      xPathLexer0.currentPosition();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.equals();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer(".sf<tzX$!K9:x}hBgTH");
      xPathLexer0.slashes();
      xPathLexer2.consume();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(945);
      XPathLexer xPathLexer1 = new XPathLexer("&<..v;r'");
      Token token0 = xPathLexer1.star();
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer1.relationalOperator();
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("&<..v;r'");
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer3.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("&", token3.getTokenText());
      
      Token token4 = xPathLexer1.number();
      assertEquals(31, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      xPathLexer2.div();
      XPathLexer xPathLexer4 = new XPathLexer(":LC");
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dollar();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.div();
      boolean boolean0 = xPathLexer7.hasMoreChars();
      assertFalse(boolean0);
      
      Token token6 = xPathLexer2.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer3.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer7.rightBracket();
      assertEquals(4, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<");
      xPathLexer0.rightParen();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.setXPath("<");
      XPathLexer xPathLexer1 = new XPathLexer("<");
      xPathLexer1.nextToken();
      xPathLexer0.consume();
      xPathLexer1.dots();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.or();
      Token token0 = xPathLexer1.rightBracket();
      xPathLexer0.and();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      String string0 = "Z$C.Y]O_SK^? w@h";
      XPathLexer xPathLexer0 = new XPathLexer("Z$C.Y]O_SK^? w@h");
      xPathLexer0.number();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
