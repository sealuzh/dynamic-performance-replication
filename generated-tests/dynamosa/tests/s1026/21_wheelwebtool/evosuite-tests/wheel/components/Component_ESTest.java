/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 17:17:01 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.LocalDate;
import java.time.Month;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.Component;
import wheel.components.ComponentCreator;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mn]^%";
      Component component0 = errorPage0.area(stringArray0);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "cWeZC]/$z&a)X./", "cWeZC]/$z&a)X./");
      fileInput0.hashCode();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("~:WL;MJgFX2K76Y");
      Form form0 = new Form(errorPage0, "~:WL;MJgFX2K76Y", actionExpression0);
      TextArea textArea0 = new TextArea(form0, (String) null, "+212");
      // Undeclared exception!
      try { 
        textArea0.submit("+212");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("~:WL;MJgFX2K76Y");
      Form form0 = new Form(errorPage0, "~:WL;MJgFX2K76Y", actionExpression0);
      TextArea textArea0 = new TextArea(form0, "#Bn7L", "#Bn7L");
      // Undeclared exception!
      try { 
        textArea0.radio("o7Pm7n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      Component component0 = errorPage0.label((Object) xmlEntityRef0);
      assertEquals("~:WL;MJgFX2K76Y", xmlEntityRef0.getComponentId());
      assertTrue(component0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "~:WL;MJgFX2K76Y");
      table0.wrapSelf();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      Component component0 = errorPage0.var((Object) tableBlock0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "TableBlock_2", "textarea");
      Component component0 = hidden0.up(1);
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      TableRow tableRow0 = new TableRow(component0);
      Component component1 = tableRow0.td();
      assertEquals("Block_2", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "A Form must always have a given componentId.");
      Component component0 = table0.sub((Object) "A Form must always have a given componentId.");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strike();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "TableBlock_1", "TableBlock_1");
      Component component0 = errorPage0.span((Object) textArea0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.small();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.samp();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.s(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      Component component1 = component0.s();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("Block_%3");
      Form form0 = new Form(errorPage0, "Block_%3", actionExpression0);
      FormElement formElement0 = form0.reset("");
      assertTrue(formElement0._isGeneratedId());
      assertFalse(actionExpression0.isSubmissible());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      Table table0 = (Table)block0.table();
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0.requestFocus();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      Component component1 = component0.renderHint("org.mvel.ast.BlockNode");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("Block_%3");
      Form form0 = new Form(errorPage0, "Block_%3", actionExpression0);
      Component component0 = errorPage0.a((Object) actionExpression0);
      assertTrue(component0._isGeneratedId());
      
      form0.reset("Block_%3");
      assertFalse(actionExpression0.isSubmissible());
      
      Component component1 = errorPage0.remove("Block_%3");
      assertEquals("wheel_ErrorPage", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      tableBlock0.placeholder("wheel.components.ActionExpression@0000000005");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      InitialFieldValue initialFieldValue0 = new InitialFieldValue(">9BXA6&LBRR/+Unl^");
      Component component0 = errorPage0.p((Object) initialFieldValue0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("~:WL;MJgFX2K76Y");
      Form form0 = new Form(errorPage0, "~:WL;MJgFX2K76Y", actionExpression0);
      form0.numberInput("d!OZAW%0;]xht)Lec;'");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      Component component1 = component0.nbsp();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.nbsp();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.meta();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.map("Q");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "tt");
      ActionExpression actionExpression0 = new ActionExpression("java.lang.String@0000000021");
      Component component0 = tableBlock0.li((Object) actionExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.li();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("' qTGOuJQo+l~H.x`:");
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "Jrbi?x?{]CLwt4Q.a", "Jrbi?x?{]CLwt4Q.a", stringSelectModel0, elExpression0);
      Table table0 = new Table(radioGroup0, (String) null);
      Object object0 = new Object();
      table0.kbd(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.i();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("int");
      component0.hidden("param");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("b");
      Form form0 = new Form(errorPage0, "u:zuy@", actionExpression0);
      Any any0 = new Any(form0, "u:zuy@");
      NumberInput numberInput0 = new NumberInput(any0, "", "");
      Block block0 = new Block(numberInput0, "");
      Long long0 = new Long((-1098L));
      block0.h4((Object) long0);
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", block0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h4();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h3();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.code();
      Component component1 = component0.h2();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h1();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      xmlEntityRef0.getParent();
      assertEquals("iSlqea\"", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      tableBlock0.getComponentId();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "*/x", "*/x");
      radio0.getAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("link");
      errorPage0.form("strike", actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      NumberInput numberInput0 = new NumberInput(component0, (String) null, "read property cache: ");
      ActionExpression actionExpression0 = new ActionExpression("R:{Kgi");
      Form form0 = new Form(numberInput0, "read property cache: ", actionExpression0);
      ElExpression elExpression0 = new ElExpression("I,kN>L]$@;");
      form0.fileInput("0`,lygM-}@S7 ", elExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("Block_%3");
      Form form0 = new Form(errorPage0, "Block_%3", actionExpression0);
      form0.fileInput("Block_%3");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.fieldset();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label((Object) "AUi6wtQ3z&^#z");
      Table table0 = new Table(component0, "iSlqea\"");
      TableBlock tableBlock0 = table0.colgroup();
      Component component1 = tableBlock0.end("iSlqea\"");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      TextArea textArea0 = new TextArea(tableRow0, "yes", "Can't add components to a component that is not an instance of IContainer.");
      Component component0 = textArea0.end();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = new Boolean(false);
      Component component0 = errorPage0.dt((Object) boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Component component0 = table0.dl();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "enctype", "iSlqea\"");
      Component component0 = errorPage0.dd((Object) checkbox0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dd();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("reader must be set before parsing is started");
      component0.dateInput("reader must be set before parsing is started", "reader must be set before parsing is started");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, "~:WL;MJgFX2K76Y");
      Component component0 = label0.code((Object) "");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = new Boolean("zE'@11-gj.])");
      Component component0 = errorPage0.cite((Object) boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("~:WL;MJgFX2K76Y");
      Form form0 = new Form(errorPage0, "~:WL;MJgFX2K76Y", actionExpression0);
      Table table0 = new Table(form0, (String) null);
      table0.checkbox("~:WL;MJgFX2K76Y");
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("int");
      component0.buttonInput("int");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      Component component1 = component0.big();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "tt", "yes");
      Table table0 = new Table(textArea0, "/:vkY");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.addInternalRenderHint("");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("#");
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.addFirst(xmlEntityRef0);
      assertEquals("#", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "linksToDomain");
      errorPage0.add(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form(";_O]{");
      Table table0 = new Table(component0, ";_O]{");
      TableBlock tableBlock0 = table0.colgroup();
      Component component1 = tableBlock0.actionBinding("shortValue");
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr((Object) "");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Bo-$9B;", "Bo-$9B;");
      boolean boolean0 = checkbox0._isGeneratedId();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.wBlock((CharSequence) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Component component0 = errorPage0.wBlock(charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Form form0 = new Form("wheel.components.ActionExpression@0000000005");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.var(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.u(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.title((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Form form0 = new Form("`j\"B;AHpT+5vHqZO");
      // Undeclared exception!
      try { 
        form0.textarea((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Form form0 = new Form("`j\"B;AHpT+5vHqZO");
      // Undeclared exception!
      try { 
        form0.textarea("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.textInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.text((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "enctype", "enctype");
      // Undeclared exception!
      try { 
        textArea0.submit((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "label");
      // Undeclared exception!
      try { 
        textArea0.submit("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!_<BrA@_");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.strike(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      Component component0 = errorPage0.small((Object) charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.select((String) null, dynamicSelectModel0, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      CharBuffer charBuffer0 = CharBuffer.allocate(20);
      // Undeclared exception!
      try { 
        errorPage0.select("var", dynamicSelectModel0, charBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "var", "Could not evaluate finder expression ' ");
      // Undeclared exception!
      try { 
        textArea0.select("4", (ISelectModel) null, "4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.select("", dynamicSelectModel0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Hidden", "Hidden");
      // Undeclared exception!
      try { 
        checkbox0.samp((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Object object0 = new Object();
      Component component0 = tableRow0.samp(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.s((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.reset((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Component component0 = xmlEntityRef0.renderHint((CharSequence) null);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.renderHint("");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      Component component1 = errorPage0.remove(component0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "|w)lyCQ MYUvw.|u|", "|w)lyCQ MYUvw.|u|");
      // Undeclared exception!
      try { 
        checkbox0.remove((Component) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = (Text)errorPage0.rawText((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0.isCdata());
      assertTrue(text0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.radioGroup("Rz", dynamicSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("zj!zrmN!.8zNN2t");
      // Undeclared exception!
      try { 
        xmlEntityRef0.radioGroup("dPN$4*@l`Z^q:^83", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      ElExpression elExpression0 = new ElExpression((String) null);
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        xmlEntityRef0.radioGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression("|K]");
      // Undeclared exception!
      try { 
        xmlEntityRef0.radioGroup("", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "~{2{F'&uF?yi+q{d", "~{2{F'&uF?yi+q{d");
      // Undeclared exception!
      try { 
        textArea0.radio((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        xmlEntityRef0.q((Object) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Bo-$9B;", "Bo-$9B;");
      TextArea textArea0 = new TextArea(checkbox0, "O$_B7", "Bo-$9B;");
      // Undeclared exception!
      try { 
        textArea0.pre((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre((Object) charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.passwordInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.passwordInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringBuffer stringBuffer0 = new StringBuffer();
      Component component0 = errorPage0.param("SHTuuL/c=B.yF", stringBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Form form0 = new Form("q>Tgsh~-r");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.p(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput((String) null, (CharSequence) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput((String) null, (CharSequence) "'ot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ActionExpression actionExpression0 = new ActionExpression("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("", (CharSequence) actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "src", ".:");
      // Undeclared exception!
      try { 
        checkbox0.numberInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "cas=\"");
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("(}6/'", stringSelectModel0, charBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("", stringSelectModel0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ZJN+");
      // Undeclared exception!
      try { 
        xmlEntityRef0.message(" on the page.", (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        xmlEntityRef0.message((String) null, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        xmlEntityRef0.message("", objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.q();
      // Undeclared exception!
      try { 
        component0.message((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map((String) null);
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.map("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Form form0 = new Form("iSlqea\"");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        form0.legend(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.label(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.kbd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.ins(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.img("wheel.components.Component", (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.i((Object) "");
      Component component1 = component0.img("", "");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[6];
      Checkbox checkbox0 = new Checkbox(errorPage0, "TableBlock_1", "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        checkbox0.imageSubmit(stringArray0[3], stringArray0[3]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.imageSubmit("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "src", ".:");
      // Undeclared exception!
      try { 
        checkbox0.id((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHM9", "fqHM9");
      // Undeclared exception!
      try { 
        checkbox0.id("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      Month month0 = Month.MARCH;
      LocalDate localDate0 = MockLocalDate.of(26, month0, 26);
      // Undeclared exception!
      try { 
        checkbox0.i((Object) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vJkCY");
      // Undeclared exception!
      try { 
        textArea0.htmlText((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        numberInput0.htmlText(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.hidden((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.hidden("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vJkCY");
      // Undeclared exception!
      try { 
        textArea0.h6((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.small((Object) null);
      Component component1 = component0.button();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "blockquote");
      Component component2 = component1.h6((Object) charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component2._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.h5(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHM9", "fqHM9");
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      Radio radio0 = new Radio(tableBlock0, (String) null, "");
      Text text0 = new Text(checkbox0, radio0);
      // Undeclared exception!
      try { 
        text0.h4((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.h3((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.h3(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHM9", "fqHM9");
      // Undeclared exception!
      try { 
        checkbox0.h2((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.h2(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h1((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      Checkbox checkbox0 = new Checkbox(component0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        checkbox0.frame((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      ActionExpression actionExpression0 = new ActionExpression("");
      actionExpression0.submitForm(false);
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ActionExpression actionExpression0 = new ActionExpression("~:WL;MJgFX2K76Y");
      actionExpression0.submissible(true);
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("dfn");
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("b1]5df&ZO?#-<", actionExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.form("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.find("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        errorPage0.fileInput("kbd", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("textarea");
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.fileInput("", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be on START_TAG to checkffor empty element");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, (String) null, "parser must be on START_TAG to checkffor empty element");
      // Undeclared exception!
      try { 
        checkbox0.fileInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.fileInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      String string0 = component0.eval((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("null", string0);
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.vel.onvrsion.FloatCH$9");
      ComponentCreator componentCreator0 = xmlEntityRef0.create();
      boolean boolean0 = xmlEntityRef0.equals(componentCreator0);
      assertFalse(boolean0);
      assertEquals("org.vel.onvrsion.FloatCH$9", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("M");
      // Undeclared exception!
      try { 
        xmlEntityRef0.entity((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("9!ZIWu+Ydy1pQ!']");
      // Undeclared exception!
      try { 
        xmlEntityRef0.entity("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.end("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      Checkbox checkbox0 = new Checkbox(tableBlock0, "[jog&~,<IW:Qr//T", "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        checkbox0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.encode("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.em(object0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KToIKd", (String) null);
      checkbox0.el((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        component0.dt(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.dfn((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "parser ;ust be on START_TAG to check for empty elem3nt", "parser ;ust be on START_TAG to check for empty elem3nt");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        checkbox0.dfn(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Component component0 = errorPage0.del(object0);
      Component component1 = component0.cite();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Bo-$9B;", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.dd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "'if", "legend");
      // Undeclared exception!
      try { 
        radio0.dateInput("~:WL;MJgFX2K76Y", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "TableBlock_2", "TableBlock_2");
      // Undeclared exception!
      try { 
        radio0.dateInput("", "'G6Jg9LL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try { 
        errorPage0.dateFormat("]:", dynamicSelectModel0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5();
      // Undeclared exception!
      try { 
        component0.dateFormat((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to initialize SimpleDateFormat with pattern 'null'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Component component0 = xmlEntityRef0.clasS((CharSequence) null);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      Checkbox checkbox0 = new Checkbox(tableBlock0, "*:^).UZK'n", "code");
      checkbox0.clasS("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Component component0 = xmlEntityRef0.clasS(charBuffer0);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "eslM2x5tvRFpD7C`+pQ", "eslM2x5tvRFpD7C`+pQ");
      DynamicSelectModel dynamicSelectModel0 = checkbox0.selectModel();
      // Undeclared exception!
      try { 
        checkbox0.checkboxGroup("java.lang.String@0000100007", dynamicSelectModel0, (ElExpression) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, "~:WL;MJgFX2K76Y");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("K=-mepi[O");
      DynamicSelectModel dynamicSelectModel0 = label0.selectModel();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkboxGroup("025", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      ElExpression elExpression0 = new ElExpression("wheel.components.ActionExpression@0000000005");
      // Undeclared exception!
      try { 
        xmlEntityRef0.checkboxGroup((String) null, dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label((Object) "AUi6wtQ3z&^#z");
      Table table0 = new Table(component0, "iSlqea\"");
      ElExpression elExpression0 = new ElExpression("TableBlock_1");
      Checkbox checkbox0 = new Checkbox(table0, "\"C*D9-~nVd\"N", "h");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        checkbox0.checkboxGroup("", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, (String) null, "_v<");
      // Undeclared exception!
      try { 
        checkbox0.checkbox((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KToIKd", (String) null);
      Label label0 = new Label(checkbox0, errorPage0);
      // Undeclared exception!
      try { 
        label0.buttonInput((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.buttonInput("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Component component0 = errorPage0.big((Object) charBuffer0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("TableBlock_2");
      // Undeclared exception!
      try { 
        xmlEntityRef0.bdo((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.bdo(charBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      Component component0 = tableBlock0.base("~:WL;MJgFX2K76Y");
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.b((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(">");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.b(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Component component0 = xmlEntityRef0.attribute("~:WL;MJgFX2K76Y", (CharSequence) null);
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "~:WL;MJgFX2K76Y", "");
      Component component0 = textArea0.attribute((String) null, "b1]5df&ZO?#-<");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.attribute("", "");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.address((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Component component0 = xmlEntityRef0.addInternalRenderHint((String) null);
      assertEquals("iSlqea\"", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Label label0 = new Label(checkbox0, errorPage0);
      Table table0 = new Table(label0, "3b:_sr8[^/6");
      TableBlock tableBlock0 = table0.tfoot();
      ActionExpression actionExpression0 = new ActionExpression("");
      Component component0 = tableBlock0.actionBinding(actionExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("V_>9N)-/4Kv");
      actionExpression0.submitForm(false);
      Table table0 = new Table(errorPage0, "U\":8b;zx");
      TableBlock tableBlock0 = table0.tbody();
      Component component0 = tableBlock0.actionBinding(actionExpression0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Form form0 = new Form((String) null);
      Component component0 = form0.actionBinding((String) null);
      assertEquals("wheel_components_Form", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0.actionBinding("");
      List<ActionExpression> list0 = xmlEntityRef0._getActions();
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.action((String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      tableRow0.action("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      CharBuffer charBuffer0 = CharBuffer.allocate(65523);
      Component component0 = errorPage0.acronym((Object) charBuffer0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("div");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.abbr(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KToIKd", (String) null);
      Label label0 = new Label(errorPage0, checkbox0);
      Component component0 = label0.a((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      CharBuffer charBuffer0 = CharBuffer.allocate(1815);
      Component component0 = errorPage0.a((Object) charBuffer0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Form form0 = new Form("`j\"B;AHpT+5vHqZO");
      // Undeclared exception!
      try { 
        form0._wrapComponentId((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._wrapComponentId("");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Bo-$9B;", "parser must be on START_TAG to check for empty element");
      checkbox0._setParent((Component) null);
      assertFalse(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      errorPage0._setParent(tableRow0);
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      xmlEntityRef0._setGeneratedId(false);
      assertEquals("wheel_components_XmlEntityRef", xmlEntityRef0.getComponentId());
      assertFalse(xmlEntityRef0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setComponentId((String) null);
      assertFalse(errorPage0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setComponentId("");
      assertTrue(errorPage0.isPage());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      xmlEntityRef0._getForm(false);
      assertEquals("iSlqea\"", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("M{RVG");
      Component component0 = errorPage0.label((Object) xmlEntityRef0);
      Object object0 = new Object();
      component0._applyFormat(object0);
      assertTrue(component0._isGeneratedId());
      assertEquals("M{RVG", xmlEntityRef0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "org.mvel.conversion.CharCH$1");
      TableBlock tableBlock0 = table0.colgroup();
      // Undeclared exception!
      try { 
        tableBlock0.wrapSelf();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "can't parse float value '", "can't parse float value '");
      // Undeclared exception!
      try { 
        checkbox0.wBlock("can't parse float value '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("HA{EkR4/5GiO+5");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wBlock("HA{EkR4/5GiO+5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.var((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("em");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "~:WL;MJgFX2K76Y", "N )S'EM09l96");
      // Undeclared exception!
      try { 
        checkbox0.var((Object) "N )S'EM09l96");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "~:WL;MJgFX2K76Y", "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        textArea0.var();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("\"cDqfGy5J];Ys");
      // Undeclared exception!
      try { 
        xmlEntityRef0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("only one colon is allowed in attribute name when namespaces are enabled");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "only one colon is allowed in attribute name when namespaces are enabled", "only one colon is allowed in attribute name when namespaces are enabled");
      // Undeclared exception!
      try { 
        checkbox0.var();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHM9", "fqHM9");
      // Undeclared exception!
      try { 
        checkbox0.ul();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.ul();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("8z");
      // Undeclared exception!
      try { 
        errorPage0.u((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression 8z in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.u((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      // Undeclared exception!
      try { 
        numberInput0.u();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "org.mvel.conversion.IntegerCH$4", "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        textInput0.u();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "TableBlock_2", "TableBlock_2");
      Hidden hidden0 = new Hidden(errorPage0, "TableBlock_2", "TableBlock_2");
      // Undeclared exception!
      try { 
        hidden0.tt((Object) checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.PropertyAccessException");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tt((Object) "org.mvel.PropertyAccessException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.tt((Object) "iSlqea\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "@<", "@<");
      // Undeclared exception!
      try { 
        checkbox0.tt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("AO");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hE4&m4Vua$9");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "FR&GY%BXUs&|o#s", "hE4&m4Vua$9");
      // Undeclared exception!
      try { 
        checkbox0.tt();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<");
      // Undeclared exception!
      try { 
        xmlEntityRef0.title("<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Form form0 = new Form("PF,/{Qbf-T4mZ78");
      Checkbox checkbox0 = new Checkbox(form0, "I{", "I{");
      TextArea textArea0 = new TextArea(checkbox0, "I{", "I{");
      // Undeclared exception!
      try { 
        textArea0.title("#.-6u{%l-3AZ0");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Form form0 = new Form("iSlqea\"");
      // Undeclared exception!
      try { 
        form0.textarea("iSlqea\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Form form0 = new Form("oq");
      // Undeclared exception!
      try { 
        form0.textInput("4Y|mW?%:4b5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("ICONST_NULL");
      // Undeclared exception!
      try { 
        errorPage0.text(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression ICONST_NULL in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("PF,/{Qbf-T4mZ78");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "PF,/{Qbf-T4mZ78", "PF,/{Qbf-T4mZ78");
      ElExpression elExpression0 = new ElExpression("Failed to build renderable page or component.");
      // Undeclared exception!
      try { 
        textArea0.text(elExpression0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJYPP2+776Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "ag;JK@kf ';P", "ag;JK@kf ';P");
      // Undeclared exception!
      try { 
        checkbox0.table();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sup();
      Radio radio0 = new Radio(component0, "&T?0uP%\"hm", "&T?0uP%\"hm");
      // Undeclared exception!
      try { 
        radio0.sup((Object) component0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Bo-$9B;", "Bo-$9B;");
      Radio radio0 = new Radio(checkbox0, "Bo-$9B;", "Bo-$9B;");
      // Undeclared exception!
      try { 
        radio0.sup((Object) "Bo-$9B;");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      // Undeclared exception!
      try { 
        checkbox0.sup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("@<");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sup();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Form form0 = new Form("Image_1");
      TextArea textArea0 = new TextArea(form0, "Image_1", "Image_1");
      // Undeclared exception!
      try { 
        textArea0.submit("Image_1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "$", "el:");
      // Undeclared exception!
      try { 
        checkbox0.sub((Object) "el:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("PF,/{Qbf-T4mZ78");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "PF,/{Qbf-T4mZ78", "PF,/{Qbf-T4mZ78");
      // Undeclared exception!
      try { 
        textArea0.sub((Object) "PF,/{Qbf-T4mZ78");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "I\"`1W|+t[", "I\"`1W|+t[");
      // Undeclared exception!
      try { 
        checkbox0.sub();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.sub();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "a", "a");
      // Undeclared exception!
      try { 
        textArea0.style();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.style();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "a", "a");
      // Undeclared exception!
      try { 
        checkbox0.strong((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "iSlqea\"", 2, 2);
      // Undeclared exception!
      try { 
        textInput0.strong((Object) charBuffer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHM9", "fqHM9");
      // Undeclared exception!
      try { 
        checkbox0.strong();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "q");
      // Undeclared exception!
      try { 
        checkbox0.strong();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.strike((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.strike((Object) hidden0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Could not find component with id '", "Could not find component with id '");
      // Undeclared exception!
      try { 
        checkbox0.strike();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "character reference (with hex value) may not contain ", "character reference (with hex value) may not contain ");
      // Undeclared exception!
      try { 
        checkbox0.span((Object) "character reference (with hex value) may not contain ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "", "TableBlock_2");
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        checkbox0.span((Object) errorPage0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[2];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.span();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("PF,/{Qbf-T4mZ78");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "PF,/{Qbf-T4mZ78", "PF,/{Qbf-T4mZ78");
      // Undeclared exception!
      try { 
        textArea0.span();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[2];
      Component component0 = errorPage0.area(stringArray0);
      Link link0 = new Link(component0, errorPage0);
      // Undeclared exception!
      try { 
        component0.small((Object) link0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("only one colon is allowed in attribute name when namespaces are enabled");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "only one colon is allowed in attribute name when namespaces are enabled", "only one colon is allowed in attribute name when namespaces are enabled");
      // Undeclared exception!
      try { 
        xmlEntityRef0.small((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "~:WL;MJgFX2K76Y", "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        textArea0.small();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Form form0 = new Form((String) null);
      Checkbox checkbox0 = new Checkbox(form0, "wl)", "wl)");
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        checkbox0.select("_wrapper", dynamicSelectModel0, "wl)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Block_3", "Tr component can be added only to a TableBlock.");
      // Undeclared exception!
      try { 
        checkbox0.script();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "", "TableBlock_2");
      // Undeclared exception!
      try { 
        checkbox0.script();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;M|JgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp((Object) "~:WL;M|JgFX2K76Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("textarea");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "textarea", "q8l#CL3 _H<15-G");
      TextArea textArea0 = new TextArea(checkbox0, "uw", "q8l#CL3 _H<15-G");
      // Undeclared exception!
      try { 
        textArea0.samp((Object) checkbox0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "@!", "@!");
      // Undeclared exception!
      try { 
        checkbox0.samp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.samp();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "a", "a");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        checkbox0.s(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "iSlqea\"", "_v<");
      // Undeclared exception!
      try { 
        textArea0.s((Object) "o?#u>-l?QdqU&Hp:Ud");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "Wuf_eiyup<Xm|f5^", "Wuf_eiyup<Xm|f5^");
      // Undeclared exception!
      try { 
        fileInput0.s();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "hBB}IXA06>jC", "Wuf_eiyup<Xm|f5^");
      TextArea textArea1 = new TextArea(textArea0, "/CocB{L2Wi4dhnK", "hBB}IXA06>jC");
      // Undeclared exception!
      try { 
        textArea1.s();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Form form0 = new Form("Blofk_%3");
      // Undeclared exception!
      try { 
        form0.reset("Blofk_%3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("parser must be on START_TAG to checkffor empty element");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "", "process DOCDECL feature can only be changed before parsing");
      // Undeclared exception!
      try { 
        checkbox0.requestFocus();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("TableBlock_1");
      // Undeclared exception!
      try { 
        errorPage0.rawText(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression TableBlock_1 in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("PF,/{Qbf-T4mZ78");
      // Undeclared exception!
      try { 
        xmlEntityRef0.rawText("PF,/{Qbf-T4mZ78");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "ag;JK@kf ';P", "ag;JK@kf ';P");
      // Undeclared exception!
      try { 
        checkbox0.rawText(xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Form form0 = new Form("INVOKEINTERFACE org/mvel/ExecutableStatement.getValue");
      Hidden hidden0 = new Hidden(form0, "g9F.4oz3", "g9F.4oz3");
      TextArea textArea0 = new TextArea(hidden0, "hBB}IXA06>jC", "hBB}IXA06>jC");
      // Undeclared exception!
      try { 
        textArea0.radio("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Bo-$9B;", "Bo-$9B;");
      Radio radio0 = new Radio(checkbox0, "Bo-$9B;", "output stream can not be null");
      // Undeclared exception!
      try { 
        radio0.q((Object) checkbox0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "class=\"", "class=\"");
      // Undeclared exception!
      try { 
        checkbox0.q();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Label label0 = new Label(checkbox0, errorPage0);
      Map<String, Component> map0 = label0.getComponents();
      // Undeclared exception!
      try { 
        checkbox0.pre((Object) map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "a", "a");
      // Undeclared exception!
      try { 
        textArea0.pre();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hE4&m4Vua$9");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Form form0 = new Form((String) null);
      Checkbox checkbox0 = new Checkbox(form0, "wl)", "wl)");
      // Undeclared exception!
      try { 
        checkbox0.pre();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.placeholder("~:WL;MJgFX2K76Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Image_1");
      // Undeclared exception!
      try { 
        xmlEntityRef0.placeholder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Form form0 = new Form("Image_1");
      // Undeclared exception!
      try { 
        form0.passwordInput("b s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "$wJCecZ@v[", "$wJCecZ@v[");
      // Undeclared exception!
      try { 
        textArea0.param("$wJCecZ@v[", "$wJCecZ@v[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.param((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("t(extarNa");
      ElExpression elExpression0 = new ElExpression("t(extarNa");
      Radio radio0 = new Radio(xmlEntityRef0, "t(extarNa", "t(extarNa");
      // Undeclared exception!
      try { 
        radio0.param("t(extarNa", elExpression0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, (String) null, "x>WzUT");
      // Undeclared exception!
      try { 
        textArea0.p((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "~:WL;MJgFX2K76Y", "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        textArea0.p();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6}qoU5mypku4!nP");
      // Undeclared exception!
      try { 
        xmlEntityRef0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Radio radio0 = new Radio(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        radio0.p();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "c", "c");
      // Undeclared exception!
      try { 
        checkbox0.ol();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "c", "c");
      // Undeclared exception!
      try { 
        checkbox0.ol();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hE4&m4Vua$9");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "T\"", "T\"");
      // Undeclared exception!
      try { 
        checkbox0.ol();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "TableBlock_2", "TableBlock_2");
      // Undeclared exception!
      try { 
        radio0.object();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!$97");
      // Undeclared exception!
      try { 
        xmlEntityRef0.object();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Form form0 = new Form((String) null);
      Checkbox checkbox0 = new Checkbox(form0, "wl)", "wl)");
      // Undeclared exception!
      try { 
        checkbox0.object();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Form form0 = new Form((String) null);
      Checkbox checkbox0 = new Checkbox(form0, "wl)", "wl)");
      // Undeclared exception!
      try { 
        checkbox0.numberInput("if", (CharSequence) "wl)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Form form0 = new Form("repeated /in tag declaation");
      // Undeclared exception!
      try { 
        form0.numberInput(" +qBq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "j0M1_zO?khA(", "j0M1_zO?khA(");
      // Undeclared exception!
      try { 
        checkbox0.noscript();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(":1EmH}U^7Y?");
      // Undeclared exception!
      try { 
        xmlEntityRef0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hE4&m4Vua$9");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "hE4&m4Vua$9", "hE4&m4Vua$9");
      // Undeclared exception!
      try { 
        checkbox0.noscript();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      // Undeclared exception!
      try { 
        checkbox0.noframes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.FloatCH$9");
      // Undeclared exception!
      try { 
        xmlEntityRef0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Bo-$9B;", "Bo-$9B;");
      Radio radio0 = new Radio(checkbox0, "Bo-$9B;", "output stream can not be null");
      // Undeclared exception!
      try { 
        radio0.noframes();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Form form0 = new Form("iSlqGea\"");
      // Undeclared exception!
      try { 
        form0.nbsp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Form form0 = new Form("Image_1");
      // Undeclared exception!
      try { 
        form0.multiSelect((String) null, (ISelectModel) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "1_L[phHO:a", "yes");
      // Undeclared exception!
      try { 
        textArea0.meta();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextInput textInput0 = new TextInput(xmlEntityRef0, "org.mvel.conversion.StringArrayCH", "iSlqea\"");
      // Undeclared exception!
      try { 
        textInput0.meta();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        errorPage0.message("J5y3UufQ[7w+r;q&mD", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.message("9uU@(nTO0(4if");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.link();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.link();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel.conversion.StringArrayCH", "org.mvel.conversion.StringArrayCH");
      // Undeclared exception!
      try { 
        checkbox0.li((Object) "org.mvel.conversion.StringArrayCH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "iSlqea\"", "_v<");
      // Undeclared exception!
      try { 
        textArea0.li((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "R;2R {;LL$|eE", "R;2R {;LL$|eE");
      // Undeclared exception!
      try { 
        checkbox0.li();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "3`4TjlK2", "3`4TjlK2");
      Checkbox checkbox0 = new Checkbox(submit0, "3`4TjlK2", "iD>_`r2<!hc<>|D");
      // Undeclared exception!
      try { 
        checkbox0.li();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Text text0 = new Text(errorPage0, (Object) null);
      // Undeclared exception!
      try { 
        text0.legend((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.legend((Object) "iSlqea\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Text_1", "org.mvel.conversion.ByteCH$3");
      // Undeclared exception!
      try { 
        checkbox0.legend();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.legend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "b,b4", "G#x");
      ElExpression elExpression0 = new ElExpression("org.mvel.conversion.BooleanCH$1");
      RadioGroup radioGroup0 = new RadioGroup(textArea0, "G#x", "java.lang.String@0000000021", (ISelectModel) null, elExpression0);
      TextInput textInput0 = new TextInput(radioGroup0, "TableBlock_2", "h");
      // Undeclared exception!
      try { 
        textInput0.legend();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Component component0 = tableRow0.samp((Object) errorPage0);
      Checkbox checkbox0 = new Checkbox(component0, "6^dN6?li<*5|^}", "Z+1u:G.9R7R.rd@}#:");
      Integer integer0 = new Integer(971);
      // Undeclared exception!
      try { 
        checkbox0.label((Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        checkbox0.label((Object) short0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "cas=\"", "cas=\"");
      // Undeclared exception!
      try { 
        checkbox0.label();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "!|xB5%]er?`k|T@f", "org.mvel.st.PreFixIncNode");
      // Undeclared exception!
      try { 
        textArea0.label();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "$wJCecZ@v[", " was not closed");
      // Undeclared exception!
      try { 
        textArea0.kbd((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.kbd((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "a", "a");
      // Undeclared exception!
      try { 
        textArea0.kbd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.kbd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hE4&mlG4Vua$9");
      TextArea textArea0 = new TextArea(xmlEntityRef0, (String) null, "bYuJN (r-s8M");
      // Undeclared exception!
      try { 
        textArea0.kbd();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ins((Object) "~:WL;MJgFX2K76Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Radio radio0 = new Radio(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        radio0.ins((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      // Undeclared exception!
      try { 
        textArea0.ins();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("t(extarNa");
      Radio radio0 = new Radio(xmlEntityRef0, "t(extarNa", "t(extarNa");
      // Undeclared exception!
      try { 
        radio0.ins();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "Td component can be added only to a TableRow.", "The size must be non-negative");
      // Undeclared exception!
      try { 
        textArea0.img(" )21EOpx|%!|", "BB3OB2kJ`?V99");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.img("+[`pG", "~:WL;MJgFX2K76Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "iSlqea\"", "AUi6wtQ3z&^#z");
      // Undeclared exception!
      try { 
        textArea0.img("iSlqea\"", "tr");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Form form0 = new Form("7IYX=gdT(1P;N");
      // Undeclared exception!
      try { 
        form0.imageSubmit("del", "D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.iframe();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("PF,/{QbfAT4mZ78");
      // Undeclared exception!
      try { 
        xmlEntityRef0.iframe();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "4AYKVP", "<");
      // Undeclared exception!
      try { 
        textArea0.iframe();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("id=\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "id=\"", "id=\"");
      // Undeclared exception!
      try { 
        checkbox0.id("id=\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Ap2liRp0e");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i((Object) "Ap2liRp0e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Block_2", "Block_2");
      // Undeclared exception!
      try { 
        checkbox0.i();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Radio radio0 = new Radio(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        radio0.i();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.htmlText("~:WL;MJgFX2K76Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("#");
      Hidden hidden0 = new Hidden(xmlEntityRef0, "s7u#GL\"\"JZ", "optgroup");
      // Undeclared exception!
      try { 
        hidden0.htmlText("optgroup");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[2];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.hr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.hr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("(;");
      // Undeclared exception!
      try { 
        xmlEntityRef0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000006");
      Submit submit0 = new Submit(xmlEntityRef0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      // Undeclared exception!
      try { 
        submit0.head();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hE4&m4Vua$9");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "hE4&m4Vua$9", "hE4&m4Vua$9");
      // Undeclared exception!
      try { 
        checkbox0.h6((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHMk9", "fqHMk9");
      // Undeclared exception!
      try { 
        checkbox0.h6();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.h6();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Radio radio0 = new Radio(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        radio0.h6();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "tt", "tt");
      // Undeclared exception!
      try { 
        checkbox0.h5((Object) "tt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h5((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      // Undeclared exception!
      try { 
        textArea0.h5();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("small");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000021");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, (String) null, "java.lang.String@0000000021");
      // Undeclared exception!
      try { 
        fileInput0.h4();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hE4&m4Vua$9");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "hE4&m4Vua$9", "hE4&m4Vua$9");
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("hE4&m4Vua$9");
      // Undeclared exception!
      try { 
        checkbox0.h3((Object) initialFieldValue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "class=\"", "class=\"");
      // Undeclared exception!
      try { 
        checkbox0.h3();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.h3();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("div");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h2((Object) "div");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ",x*b[gaaW_Z~-Y!7{", ",x*b[gaaW_Z~-Y!7{");
      // Undeclared exception!
      try { 
        checkbox0.h2();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.h2();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "a", "a");
      ElExpression elExpression0 = new ElExpression("C5p54|CI1\"Mbx");
      // Undeclared exception!
      try { 
        textArea0.h1((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression C5p54|CI1\"Mbx in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Class");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlEntityRef0.h1(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      // Undeclared exception!
      try { 
        checkbox0.h1();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Form form0 = new Form((String) null);
      TextInput textInput0 = new TextInput(form0, "}", "}");
      // Undeclared exception!
      try { 
        textInput0.h1();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.getPage();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "|w)yCQ MYUvw.|u|", "|w)yCQ MYUvw.|u|");
      // Undeclared exception!
      try { 
        checkbox0.frame("|w)yCQ MYUvw.|u|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.frame("iSlqea\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "class=\"", "class=\"");
      ActionExpression actionExpression0 = new ActionExpression("class=\"");
      // Undeclared exception!
      try { 
        checkbox0.form("class=\"", actionExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression((String) null);
      // Undeclared exception!
      try { 
        errorPage0.form((String) null, actionExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      Radio radio0 = new Radio(xmlEntityRef0, "~:WL;MJgFX2K76Y", "java.lang.String@0000000018");
      // Undeclared exception!
      try { 
        radio0.form("~:WL;MJgFX2K76Y", (ActionExpression) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      // Undeclared exception!
      try { 
        numberInput0.form("vtD-E%\"KToIKd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.form("TableBlock_2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.form((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.sup();
      ElExpression elExpression0 = new ElExpression("$[utIEkF-$");
      // Undeclared exception!
      errorPage0.findAll(elExpression0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.sup();
      ElExpression elExpression0 = new ElExpression("5;c]Ht4xRk");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.sup();
      // Undeclared exception!
      try { 
        errorPage0.findAll((ElExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.sup();
      ElExpression elExpression0 = new ElExpression("=~#;bzrp_o1=+");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mvel.MVELInterpretedRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.fileInput((String) null, (ElExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Form form0 = new Form("repeated /in tag declaation");
      // Undeclared exception!
      try { 
        form0.fileInput("}iu|ryAEFEZ<bYT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "@!", "@!");
      // Undeclared exception!
      try { 
        checkbox0.fieldset();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Form form0 = new Form(") is not allowed in output");
      TextArea textArea0 = new TextArea(form0, "yes", "/:vJkCY");
      // Undeclared exception!
      try { 
        textArea0.fieldset();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "|K]", "|K]");
      // Undeclared exception!
      try { 
        numberInput0.em((Object) "yes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Float float0 = new Float((-3754.0237025));
      NumberInput numberInput0 = new NumberInput(xmlEntityRef0, "|K]", "iSlqea\"");
      // Undeclared exception!
      try { 
        numberInput0.em((Object) float0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHM9", "[rLxyMpGrFg}$g:c");
      Block block0 = new Block(checkbox0, "[rLxyMpGrFg}$g:c");
      TableBlock tableBlock0 = new TableBlock(block0);
      Any any0 = tableBlock0.col();
      Radio radio0 = new Radio(any0, " 1C S;U$", (String) null);
      // Undeclared exception!
      try { 
        radio0.em();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("#@<`");
      // Undeclared exception!
      try { 
        xmlEntityRef0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Form form0 = new Form("repeated / in tag declaration");
      Checkbox checkbox0 = new Checkbox(form0, "repeated / in tag declaration", "repeated / in tag declaration");
      // Undeclared exception!
      try { 
        checkbox0.em();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.dt((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "@!", "@!");
      // Undeclared exception!
      try { 
        checkbox0.dt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("only one colon is allowed in attribute name when namespaces are enabled");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "only one colon is allowed in attribute name when namespaces are enabled", "only one colon is allowed in attribute name when namespaces are enabled");
      // Undeclared exception!
      try { 
        checkbox0.dt();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "@!", "@!");
      // Undeclared exception!
      try { 
        checkbox0.dl();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSHTlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSHTlqea\"", "iSHTlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.dl();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("div");
      // Undeclared exception!
      try { 
        xmlEntityRef0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Radio radio0 = new Radio(xmlEntityRef0, "iSlqea\"", "LmYmO7PI+oK}rOu");
      // Undeclared exception!
      try { 
        radio0.div();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "DK");
      // Undeclared exception!
      try { 
        checkbox0.dfn((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "code", "code");
      // Undeclared exception!
      try { 
        textArea0.dfn();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dfn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6}qoU5mypku4!nP");
      FileInput fileInput0 = new FileInput(xmlEntityRef0, "7'#=F<~vT", "dBqe`2zB}=S");
      // Undeclared exception!
      try { 
        fileInput0.dfn();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("http://xmlpull.org/v1/doc/features.html#xml-roundtrip");
      // Undeclared exception!
      try { 
        errorPage0.del((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression http://xmlpull.org/v1/doc/features.html#xml-roundtrip in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "~5Y_\"i*Hc5pk/");
      // Undeclared exception!
      try { 
        checkbox0.del((Object) "iSlqea\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "", "!:V1\"9JF3wU");
      // Undeclared exception!
      try { 
        submit0.del();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(") is not allowed in output");
      // Undeclared exception!
      try { 
        xmlEntityRef0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.del();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel.conversion.StringArrayCH", "org.mvel.conversion.StringArrayCH");
      Map<String, Component> map0 = checkbox0.getComponents();
      // Undeclared exception!
      try { 
        checkbox0.dd((Object) map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("4$;4B)yo6/SP;[{");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "4$;4B)yo6/SP;[{", "java.lang.String@0000000021");
      TextInput textInput0 = new TextInput(checkbox0, "T5", "java.lang.String@0000000021");
      // Undeclared exception!
      try { 
        checkbox0.dd((Object) textInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "a", "a");
      // Undeclared exception!
      try { 
        textArea0.dd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Form form0 = new Form("~:WL;MJYPP2+776Y");
      // Undeclared exception!
      try { 
        form0.dateInput((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "~:WL;MJgFX2K76Y", "~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        textArea0.code((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "TableBlock_2", "TableBlock_2");
      // Undeclared exception!
      try { 
        radio0.code();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("only one colon is allowed in attribute name when namespaces are enabled");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "only one colon is allowed in attribute name when namespaces are enabled", "only one colon is allowed in attribute name when namespaces are enabled");
      // Undeclared exception!
      try { 
        checkbox0.code();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      Radio radio0 = new Radio(component0, "Block_3", "Block_3");
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Block_3");
      // Undeclared exception!
      try { 
        radio0.cite((Object) xmlEntityRef0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Form form0 = new Form("`j\"B;AHpT+5vHqZO");
      Checkbox checkbox0 = new Checkbox(form0, "U", "java.lang.String@0000000021");
      // Undeclared exception!
      try { 
        checkbox0.cite((Object) "U");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.cite();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "TableBlock_2", "TableBlock_2");
      ElExpression elExpression0 = new ElExpression("TableBlock_2");
      // Undeclared exception!
      try { 
        checkbox0.checkboxGroup("TableBlock_2", (ISelectModel) null, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Form form0 = new Form("repeated /in tag declaation");
      Checkbox checkbox0 = new Checkbox(form0, "repeated /in tag declaation", " +qBq");
      // Undeclared exception!
      try { 
        checkbox0.checkbox(" +qBq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Form form0 = new Form("Image_1");
      // Undeclared exception!
      try { 
        form0.buttonInput("Image_1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      // Undeclared exception!
      try { 
        textArea0.button();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.button();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.button();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("m");
      // Undeclared exception!
      try { 
        xmlEntityRef0.br();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("Block_%3");
      Form form0 = new Form(errorPage0, "Block_%3", actionExpression0);
      FormElement formElement0 = form0.reset("Block_%3");
      DateInput dateInput0 = new DateInput(formElement0, (String) null, "~", "Block_%3");
      // Undeclared exception!
      try { 
        dateInput0.blockquote();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.blockquote();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "yes", "/:vJkCY");
      // Undeclared exception!
      try { 
        textArea0.big((Object) textArea0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("CIO{@sum0?U1Y<Q{J");
      // Undeclared exception!
      try { 
        xmlEntityRef0.big((Object) errorPage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      TextInput textInput0 = new TextInput((Component) null, "iSlqea\"", "bpX!NJc}^Gx");
      // Undeclared exception!
      try { 
        checkbox0.big((Object) textInput0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "Wuf_eiyup<Xm|f5^", "Wuf_eiyup<Xm|f5^");
      // Undeclared exception!
      try { 
        textArea0.big();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "$wJCecZ@v[", "$wJCecZ@v[");
      // Undeclared exception!
      try { 
        textArea0.bdo("$wJCecZ@v[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "Bo-$9B;", "Bo-$9B;");
      Checkbox checkbox0 = new Checkbox(radio0, "Bo-$9B;", "Bo-$9B;");
      // Undeclared exception!
      try { 
        checkbox0.bdo("Bo-$9B;");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "TableBlock_2", "TableBlock_2");
      Locale locale0 = Locale.ENGLISH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      // Undeclared exception!
      try { 
        radio0.b((Object) calendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.br();
      // Undeclared exception!
      try { 
        component0.b();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "iSlqea\"", "AUi6wtQ3z&^#z");
      // Undeclared exception!
      try { 
        textArea0.b();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "@!", "@!");
      ElExpression elExpression0 = new ElExpression("table");
      // Undeclared exception!
      try { 
        checkbox0.attribute("'wKEFa7'{4bs(.gi8p", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression table in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "cas=\"", "cas=\"");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        checkbox0.area(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.area((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[4];
      Component component0 = errorPage0.area(stringArray0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        component0.address(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("texrea");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "!L2/+fa4SB", "!L2/+fa4SB");
      // Undeclared exception!
      try { 
        checkbox0.address((Object) xmlEntityRef0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "TableBlock_2", "TableBlock_2");
      // Undeclared exception!
      try { 
        checkbox0.address();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.address();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.add(xmlEntityRef0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.add((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.actionBinding((ActionExpression) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("^5<smwyc(xyujo");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym((Object) "^5<smwyc(xyujo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.param("iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        component0.acronym();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:E^dMJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("textarea");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "textarea", "textarea");
      // Undeclared exception!
      try { 
        checkbox0.acronym();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "$wJCecZ@v[", "$wJCecZ@v[");
      Hidden hidden0 = new Hidden(textArea0, (String) null, "$wJCecZ@v[");
      Float float0 = new Float((-667.7087F));
      // Undeclared exception!
      try { 
        hidden0.abbr((Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, (String) null, "uZH:G-J9qcdr{0PX");
      NumberInput numberInput0 = new NumberInput(textInput0, "org.mvel.math.JDK14CompatabilityMath", "Could not encode string '");
      // Undeclared exception!
      try { 
        numberInput0.abbr((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "TableBlock_2", "TableBlock_2");
      // Undeclared exception!
      try { 
        checkbox0.abbr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("LcJe:Xg3S");
      // Undeclared exception!
      try { 
        errorPage0.a((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression LcJe:Xg3S in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.a((Object) "iSlqea\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "a", "a");
      // Undeclared exception!
      try { 
        textArea0.a();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.a();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6}qoU5mypku4!nP");
      // Undeclared exception!
      try { 
        xmlEntityRef0._wrapComponentId("ASM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHMk9", "fqHMk9");
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      Radio radio0 = new Radio(tableBlock0, (String) null, "_");
      // Undeclared exception!
      try { 
        radio0._applyFormat((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, (Object) null);
      Component component0 = label0.i((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel.conversion.StringArrayCH", "org.mvel.conversion.StringArrayCH");
      checkbox0._wrapComponentId("9Ti!$SO'|Qc");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      ActionExpression actionExpression0 = new ActionExpression("wheel.components.Component");
      Form form0 = new Form(textArea0, "org.mvel.ast.BlockNode", actionExpression0);
      form0.addFormElement(textArea0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.button();
      component0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      Checkbox checkbox0 = new Checkbox(numberInput0, "vtD-E%\"KToIKd", "vtD-E%\"KToIKd");
      StandaloneComponent standaloneComponent0 = checkbox0.getPage();
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.getPage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "f<MLX(2~z57x}l");
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("cH");
      ElExpression elExpression0 = new ElExpression("caption");
      RadioGroup radioGroup0 = new RadioGroup(table0, "f<MLX(2~z57x}l", "f<MLX(2~z57x}l", dynamicSelectModel1, elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("/vocB{L2Wi4dhnK");
      // Undeclared exception!
      try { 
        xmlEntityRef0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      StandaloneComponent standaloneComponent0 = errorPage0._getTopLevelComponent(true);
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000007");
      Form form0 = xmlEntityRef0._getForm(true);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("7(=au");
      Form form0 = new Form(errorPage0, "shortValue", actionExpression0);
      form0.reset("null pointer exception in property: ");
      form0.buildComponent();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(actionExpression0.isSubmissible());
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      RadioGroup radioGroup0 = new RadioGroup(errorPage0, "@~%:YxxX%&:Rat", "!/ANXvuY1$", (ISelectModel) null, (ElExpression) null);
      radioGroup0.i((Object) errorPage0);
      // Undeclared exception!
      try { 
        radioGroup0.buildComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.RadioGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      component0._getChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Block_3");
      xmlEntityRef0.actionBinding("'`C#!");
      ActionExpression actionExpression0 = xmlEntityRef0._getAction();
      assertEquals("Block_3", actionExpression0.getSourceId());
      assertNotNull(actionExpression0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("@<");
      String[] stringArray0 = new String[6];
      Component component0 = xmlEntityRef0.attributes(stringArray0);
      assertEquals("@<", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("vhE4&mVu$9");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        xmlEntityRef0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.ol();
      Component component1 = component0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Component component0 = xmlEntityRef0.attributes((String[]) null);
      assertEquals("iSlqea\"", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      checkbox0.getEngine();
      assertEquals("iSlqea\"", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHMk9", "fqHMk9");
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      tableBlock0.afterAdd();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("@<");
      xmlEntityRef0._setGeneratedId(true);
      assertTrue(xmlEntityRef0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      boolean boolean0 = component0._isGeneratedId();
      assertTrue(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.meta();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.date();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      Component component0 = textArea0.end();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, " ", "a");
      Component component0 = radio0.end(" ");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "a", "a");
      // Undeclared exception!
      try { 
        radio0.end("a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'a'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      TextArea textArea0 = new TextArea(tableBlock0, "~:WL;MJgFX2K76Y", "~:WL;MJgFX2K76Y");
      Component component0 = textArea0.end("div");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Radio radio0 = new Radio(errorPage0, "a", "a");
      // Undeclared exception!
      try { 
        radio0.end("3)K~:^xOKa,p fB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression '3)K~:^xOKa,p fB'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      TextInput textInput0 = new TextInput(xmlEntityRef0, "CT@wpy-s%/1 _", "CT@wpy-s%/1 _");
      // Undeclared exception!
      try { 
        textInput0.end((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Long long0 = new Long(0L);
      errorPage0.dateFormat("6G", long0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "fqHM9", "fqHM9");
      TableBlock tableBlock0 = new TableBlock(checkbox0);
      Radio radio0 = new Radio(tableBlock0, (String) null, "");
      Text text0 = new Text(checkbox0, radio0);
      Locale locale0 = Locale.FRANCE;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      text0.dateFormat("", calendar0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(text0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("org.mvel.ast.BlockNode");
      errorPage0.eval(elExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "org.mvel.conversion.StringArrayCH", "org.mvel.conversion.StringArrayCH");
      ElExpression elExpression0 = new ElExpression((String) null);
      Text text0 = new Text(checkbox0, elExpression0);
      assertTrue(text0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.sup();
      ElExpression elExpression0 = new ElExpression("org.mvel.ast.BlockNode");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      component0.bdo("PF,/{Qbf-T4mZ78");
      // Undeclared exception!
      try { 
        errorPage0.find("The suffix must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id The suffix must not be null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.wBlock("PF,/{Qbf-T4mZ78");
      Component component1 = component0.noframes();
      assertEquals("Block_1", component0.getComponentId());
      
      Component component2 = errorPage0.find("Block_3");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertSame(component2, component1);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.find((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      assertTrue(component0._isGeneratedId());
      
      Table table0 = new Table(errorPage0, "W\"C=IzVKt6knEY");
      table0.id("W\"C=IzVKt6knEY");
      table0.get("W\"C=IzVKt6knEY");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id ''.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.up(52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      Component component0 = xmlEntityRef0.up((-2021344809));
      assertEquals("wheel_components_XmlEntityRef", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "TableBlock_nA3");
      TableBlock tableBlock0 = table0.colgroup();
      TableBlock tableBlock1 = table0.tbody();
      Component component0 = tableBlock0.wrapSelf();
      assertFalse(component0.equals((Object)tableBlock1));
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ErrorPage errorPage1 = new ErrorPage();
      boolean boolean0 = errorPage1.equals(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage1.getComponentId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      boolean boolean0 = errorPage0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!dmOCfm");
      Component component0 = xmlEntityRef0.actionBinding("fieldset");
      component0._clear();
      ActionExpression actionExpression0 = xmlEntityRef0._getAction();
      assertEquals("!dmOCfm", xmlEntityRef0.getComponentId());
      assertNull(actionExpression0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("<");
      Component component0 = xmlEntityRef0.addInternalRenderHint("<");
      assertEquals("<", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("z");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      xmlEntityRef0.internalRenderHints = (List<String>) linkedList0;
      Component component0 = xmlEntityRef0.addInternalRenderHint("z");
      assertEquals("z", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.rawText("R&G19BX^ys&|#s");
      Checkbox checkbox0 = new Checkbox(component0, "G$%A7)s|7", "R&G19BX^ys&|#s");
      // Undeclared exception!
      try { 
        errorPage0.addFirst(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      Component component1 = errorPage0.addFirst(component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6}qoU5mypku4!nP");
      // Undeclared exception!
      try { 
        xmlEntityRef0.getComponents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      component0._getVisibleForm(true);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Form form0 = new Form("Block_2");
      Checkbox checkbox0 = new Checkbox(form0, "Block_2", "Block_2");
      Form form1 = checkbox0._getVisibleForm(false);
      assertNotNull(form1);
      assertEquals("Block_2", form1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Form form0 = new Form("ol");
      Form form1 = form0._getVisibleForm(true);
      assertEquals("ol", form1.getComponentId());
      assertNotNull(form1);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = (Block)errorPage0.h6();
      assertTrue(block0._isGeneratedId());
      
      block0.id("D49^K*|W??Jo#%6a{)K");
      assertFalse(block0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.h6();
      ErrorPage errorPage1 = (ErrorPage)errorPage0.id("D49^K*|W??Jo#%6a{)K");
      assertTrue(errorPage1.isPage());
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "org.mvel.ast.BlockNode", "org.mvel.ast.BlockNode");
      ActionExpression actionExpression0 = new ActionExpression("wheel.components.Component");
      Form form0 = new Form(textArea0, "org.mvel.ast.BlockNode", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("B:1NKt9j3a");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.style();
      // Undeclared exception!
      try { 
        errorPage0.remove("basePackageForPages");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Component with id basePackageForPages does not exist.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<CharSequence> list0 = errorPage0._getRenderHints();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      List<CharSequence> list0 = component0._getRenderHints();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("org.mvel.util.ThisLiteral");
      List<Component> list0 = errorPage0.findAll(elExpression0);
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("code");
      assertFalse(component0._isGeneratedId());
      
      errorPage0.find("code");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(":1EmH}U^7Y?");
      xmlEntityRef0._getAction();
      assertEquals(":1EmH}U^7Y?", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("noscript");
      actionExpression0.submissible(true);
      ActionExpression actionExpression1 = new ActionExpression("noscript");
      TableBlock tableBlock0 = new TableBlock(errorPage0, "i&!l8oh7?,787C");
      tableBlock0.actionBinding(actionExpression0);
      Component component0 = tableBlock0.actionBinding(actionExpression1);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, "~:WL;MJgFX2K76Y");
      ActionExpression actionExpression0 = new ActionExpression("o>H#CS/~Exu;t,");
      tableBlock0.actionBinding(actionExpression0);
      actionExpression0.submissible(true);
      Component component0 = tableBlock0.actionBinding(actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("~:WL;MJgFX2K76Y", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("int");
      Component component1 = component0.actionBinding("int");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "@!", "@!");
      String[] stringArray0 = new String[8];
      Component component0 = checkbox0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        errorPage0.area(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[2];
      Component component0 = errorPage0.area(stringArray0);
      component0._clear();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("_1$/mIT/vA|Qws$5");
      // Undeclared exception!
      try { 
        errorPage0.renderHint(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression _1$/mIT/vA|Qws$5 in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.code();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("div");
      // Undeclared exception!
      try { 
        xmlEntityRef0.em((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("PF,/{Qbf-T4mZ78");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.del((Object) "iSlqea\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.sup();
      ElExpression elExpression0 = new ElExpression("");
      // Undeclared exception!
      try { 
        errorPage0.findAll(elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Finder expression didn't evaluate to a boolean value.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.noscript();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mel.asm.Item");
      // Undeclared exception!
      try { 
        xmlEntityRef0.addFirst((Component) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("5");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "5", "5");
      // Undeclared exception!
      try { 
        xmlEntityRef0.label((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;M(|FX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ol();
      component0.b();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong((Object) "~:WL;MJYPP2+776Y");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setParent(errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address((Object) "a");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("small");
      xmlEntityRef0._getActions();
      assertEquals("small", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      // Undeclared exception!
      try { 
        component0.body();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("v*[3*bKI0HeQNwlVs@d");
      // Undeclared exception!
      try { 
        xmlEntityRef0.textarea("v*[3*bKI0HeQNwlVs@d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "dt", "dt");
      // Undeclared exception!
      try { 
        checkbox0.br();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ")IVg", ")IVg");
      // Undeclared exception!
      try { 
        checkbox0.table();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Bo$$9B;");
      xmlEntityRef0.action("Bo$$9B;");
      assertEquals("Bo$$9B;", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea'\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.link();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.cite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("A6Yr\"7i\" q|Uk");
      // Undeclared exception!
      try { 
        xmlEntityRef0.big();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.iframe();
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Form form0 = new Form("L%y7pQ{z]=/");
      // Undeclared exception!
      try { 
        form0.message("eb_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Double double0 = new Double(526.6);
      Component component0 = errorPage0.h1((Object) double0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("}9k-K#@ouE@fW|yvA");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.u();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.hr();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.script();
      Component component1 = component0.pre((Object) errorPage0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(":1EmH}U^7Y?");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Component with id ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sub((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Boolean boolean0 = Boolean.TRUE;
      Text text0 = (Text)errorPage0.htmlText(boolean0);
      assertTrue(text0._isGeneratedId());
      assertTrue(text0.isHtml());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.li((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("uY:WlM56Dx");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.bdo("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("erctype");
      // Undeclared exception!
      try { 
        errorPage0.h3((Object) elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression erctype in class wheel.ErrorPage
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.code((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dt();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Class");
      // Undeclared exception!
      try { 
        xmlEntityRef0.text("Class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("ob}eyt");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h4((Object) "ob}eyt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.h4();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.span((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.b();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.entity("iSlqea\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "iSlqea\"", "iSlqea\"");
      // Undeclared exception!
      try { 
        checkbox0.encode("iSlqea\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.var((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.pre();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.object();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.acronym();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.tt((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "FR&GY%BXUs&|o#s", "FR&GY%BXUs&|o#s");
      // Undeclared exception!
      try { 
        checkbox0.remove((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.div();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em();
      assertTrue(component0._isGeneratedId());
      
      List<RenderableComponent> list0 = errorPage0._getRenderableChildren();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("xij");
      // Undeclared exception!
      try { 
        xmlEntityRef0.nbsp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.getComponentName();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("ErrorPage", string0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("@<");
      // Undeclared exception!
      try { 
        xmlEntityRef0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef((String) null);
      // Undeclared exception!
      try { 
        xmlEntityRef0.base((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("4$;4B)yo6/SP;[{");
      // Undeclared exception!
      try { 
        xmlEntityRef0.strike((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DateInput dateInput0 = new DateInput(errorPage0, (String) null, (String) null, (CharSequence) null);
      // Undeclared exception!
      try { 
        dateInput0.q((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.a();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.del();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("/");
      // Undeclared exception!
      try { 
        xmlEntityRef0.li();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address();
      Component component1 = component0.entity("");
      assertEquals("wheel_components_XmlEntityRef", component1.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6}qoU5mypku4!nP");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      errorPage0.legend((Object) component0);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Xhid");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("p");
      Form form0 = new Form("Jm;5)|pFD[WB6LR,");
      Checkbox checkbox0 = new Checkbox(form0, "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", "; ctx=");
      // Undeclared exception!
      try { 
        checkbox0.checkboxGroup("p", (ISelectModel) null, elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[0];
      Component component0 = errorPage0.area(stringArray0);
      // Undeclared exception!
      try { 
        component0.i((Object) errorPage0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      xmlEntityRef0._setComponentId("~:WL;MJgFX2K76Y");
      assertNull(xmlEntityRef0.defaultTagName());
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("org.mvel.conversion.String#rrayCH");
      xmlEntityRef0.getAttributes();
      assertEquals("org.mvel.conversion.String#rrayCH", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.blockquote();
      Component component1 = component0.getParent();
      assertEquals("wheel_ErrorPage", component1.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.strong();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ins((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.el("$c2G");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.p();
      assertEquals("Block_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.area((String[]) null);
      Radio radio0 = new Radio(component0, "java.lang.String@0000000011", "href");
      // Undeclared exception!
      try { 
        radio0.div();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextArea textArea0 = new TextArea(errorPage0, "<@<0@24F0Jzt {-<", "");
      // Undeclared exception!
      try { 
        textArea0.acronym((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iSlqea\"");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h6();
      Component component1 = component0.clasS("D49^K*|W??Jo#%6a{)K");
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("@<");
      // Undeclared exception!
      try { 
        xmlEntityRef0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.requestFocus();
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.form("code");
      Component component1 = component0.var();
      assertEquals("code", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Class");
      // Undeclared exception!
      try { 
        xmlEntityRef0.sup((Object) "Class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("!_BrA@+_");
      // Undeclared exception!
      try { 
        xmlEntityRef0.small();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("div");
      // Undeclared exception!
      try { 
        xmlEntityRef0.frame("div");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("span");
      // Undeclared exception!
      try { 
        xmlEntityRef0.samp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Label_1");
      // Undeclared exception!
      try { 
        xmlEntityRef0.label();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("~:WL;MJgFX2K76Y");
      // Undeclared exception!
      try { 
        xmlEntityRef0.map("~:WL;MJgFX2K76Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.dfn((Object) "");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("enctype");
      // Undeclared exception!
      try { 
        xmlEntityRef0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "", "parser must be on START_TAG to check for empty element");
      // Undeclared exception!
      try { 
        checkbox0.h6((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      // Undeclared exception!
      try { 
        errorPage0.multiSelect("7(=u", dynamicSelectModel0, "7(=u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.legend();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._getXhtmlAttributes();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("6}qoU5mypku4!nP");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dt((Object) "6}qoU5mypku4!nP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("/vocB{L2Wi4dhnK");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
