/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 12:26:41 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.MenuBar;
import java.awt.MenuComponent;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.beans.VetoableChangeListener;
import java.io.PrintStream;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.Segment;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.GraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFState;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.XML11NonValidatingConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getToolTipText();
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.setYearChooser((JYearChooser) null);
      int int1 = SwingConstants.VERTICAL;
      JDayChooser jDayChooser1 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      jDayChooser1.setMaxDayCharacters(4);
      jDayChooser0.setMonth(4);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, (-4301L), 1150, 42, 'Z');
      InputEvent.getModifiersExText(1);
      keyEvent0.consume();
      KeyEvent.getKeyModifiersText(1);
      InputEvent.getModifiersExText(42);
      KeyEvent.getKeyModifiersText(840);
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.keyPressed(keyEvent0);
      JDayChooser jDayChooser4 = new JDayChooser();
      jDayChooser1.getBaseline(42, 22);
      assertEquals(4, jDayChooser1.getMaxDayCharacters());
      
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      int int0 = SwingConstants.SOUTH_EAST;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(4);
      SystemColor systemColor0 = SystemColor.textText;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getCursor();
      jDayChooser1.setMaxDayCharacters(4);
      JDayChooser jDayChooser2 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 4, 4, 35, 'Z');
      KeyEvent.getKeyText(4959);
      Color.getColor("day", (Color) systemColor0);
      jDayChooser2.keyPressed(keyEvent0);
      jDayChooser2.setDecorationBackgroundColor(systemColor0);
      jDayChooser2.getFont();
      Segment segment0 = new Segment();
      jDayChooser2.setFont((Font) null);
      System.setCurrentTimeMillis(10);
      jDayChooser0.setFocus();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      InputEvent.getModifiersExText(12);
      KeyEvent.getKeyModifiersText(2252);
      jDayChooser1.keyPressed(keyEvent0);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser0.getBaseline(4163, 2252);
      jDayChooser2.keyReleased(keyEvent0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, jDayChooser2.getDay());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      KeyStroke.getKeyStroke("day");
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.setMaxDayCharacters(186);
      jDayChooser0.drawWeeks();
      jDayChooser0.getLocale();
      SystemColor systemColor0 = SystemColor.infoText;
      System.setCurrentTimeMillis((-2369L));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth(186);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      assertTrue(jDayChooser2.isDayBordersVisible());
      
      jDayChooser2.setDayBordersVisible(false);
      Color color0 = Color.YELLOW;
      jDayChooser1.setForeground(systemColor0);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser1.getWeekdayForeground();
      Date date1 = jDayChooser3.getMaxSelectableDate();
      jDayChooser1.setSelectableDateRange(date0, date1);
      jDayChooser3.isDecorationBordersVisible();
      assertTrue(jDayChooser3.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.drawWeeks();
      Locale locale0 = jDayChooser0.getLocale();
      SystemColor systemColor0 = SystemColor.infoText;
      System.setCurrentTimeMillis(5);
      jDayChooser0.setMonth(5);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.setMinSelectableDate(date0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-7), (-1382L), 5, 5, '7');
      KeyEvent.getKeyText((-1215));
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser1.setMonthChooser(jMonthChooser0);
      Color.getColor("\uFB41", (Color) systemColor0);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser1.setSelectableDateRange(jDayChooser0.defaultMaxSelectableDate, jDayChooser0.defaultMaxSelectableDate);
      jDayChooser1.getFont();
      Segment segment0 = new Segment();
      jDayChooser0.setFont((Font) null);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 0, 0, 5, (-1551), 'g');
      System.setCurrentTimeMillis((-1382L));
      jDayChooser1.setFocus();
      locale0.getUnicodeLocaleKeys();
      int int0 = jDayChooser0.day;
      jDayChooser1.setLocale(locale0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser1.initDecorations();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolTipText();
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.getDaysInMonth();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setRequestFocusEnabled(true);
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser1.getMinimumSize();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(4);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setMonth(4);
      JDayChooser jDayChooser4 = new JDayChooser(false);
      jDayChooser0.getFocusListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, (-4301L), 1147, 42, 'Z');
      KeyEvent.getKeyModifiersText(45);
      jDayChooser3.keyPressed(keyEvent0);
      JDayChooser jDayChooser5 = new JDayChooser(false);
      JDayChooser jDayChooser6 = new JDayChooser();
      jDayChooser5.keyTyped(keyEvent0);
      jDayChooser1.getWeekdayForeground();
      assertEquals(4, jDayChooser1.getMaxDayCharacters());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser5, (-942), false);
      jDayChooser4.focusGained(focusEvent0);
      java.sql.Date date0 = new java.sql.Date((-2237L));
      jDayChooser5.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser5.getDay());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGraphics2D0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      sVGGraphics2D0.drawLine((-1177), 755, 3, 3);
      coreDocumentImpl0.normalize();
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      jDayChooser0.getDaysInMonth();
      Color color0 = new Color(3);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.isDayBordersVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 46, 1336L, 907, 3, ' ', 3);
      keyEvent0.setKeyCode((-1177));
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      jDayChooser1.createVolatileImage(3, 31, imageCapabilities0);
      int int0 = SwingConstants.RIGHT;
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.ROOT;
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser1.getDay());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "ISO-8859-1";
      stringArray0[3] = "ISO-8859-1";
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.keyTyped(keyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWidth();
      jDayChooser0.setDay(1276);
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getDaysInMonth();
      AWTKeyStroke.getAWTKeyStroke(652, 33, true);
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setMaxDayCharacters(12);
      jDayChooser0.setMonth(28);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z.&(gC");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 0, 33, 12, 33, 'X');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 12, (-10L), 1276, 28, 'z');
      jDayChooser1.keyPressed(keyEvent1);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      System.setCurrentTimeMillis((-411L));
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.drawWeeks();
      jDayChooser0.getLocale();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setRequestFocusEnabled(false);
      SystemColor systemColor0 = SystemColor.textText;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMaxDayCharacters((-2523));
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser0.setMonth((-1050));
      JDayChooser jDayChooser4 = new JDayChooser(true);
      jDayChooser0.getFocusListeners();
      assertEquals(14, jDayChooser0.getDay());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-1050), (-4301L), 0, (-17), 'Z');
      KeyEvent.getKeyModifiersText((-1050));
      jDayChooser3.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser3.getDay());
      
      JDayChooser jDayChooser5 = new JDayChooser(true);
      JDayChooser jDayChooser6 = new JDayChooser();
      jDayChooser2.keyTyped(keyEvent0);
      jDayChooser6.setMonthChooser((JMonthChooser) null);
      jDayChooser5.setForeground(systemColor0);
      assertFalse(jDayChooser5.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getToolTipText();
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.getDaysInMonth();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setRequestFocusEnabled(true);
      SystemColor systemColor0 = SystemColor.textText;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters((-2503));
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setMonth(4);
      JDayChooser jDayChooser4 = new JDayChooser(false);
      jDayChooser1.getFocusListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser3, 42, (-882L), 4, 1400, 'Z');
      KeyEvent.getKeyModifiersText(1488);
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser jDayChooser5 = new JDayChooser(false);
      System.setCurrentTimeMillis((-1254L));
      JDayChooser jDayChooser6 = new JDayChooser();
      jDayChooser5.keyTyped(keyEvent0);
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertEquals(14, jDayChooser3.getDay());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getWidth();
      jDayChooser0.getToolTipText();
      jDayChooser0.setDay(1276);
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      jDayChooser0.setMonth(26);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setRequestFocusEnabled(false);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2436), 4, 238, 4, '8');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser2.addMouseWheelListener((MouseWheelListener) null);
      Color color0 = new Color(1276);
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getDockingColor();
      jDayChooser0.isDayBordersVisible();
      Color color1 = jDayChooser2.getDecorationBackgroundColor();
      keyEvent0.setKeyChar('s');
      jDayChooser1.isDecorationBordersVisible();
      jDayChooser0.initDecorations();
      jDayChooser1.setSundayForeground(color1);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
      
      jDayChooser2.updateUI();
      assertEquals(14, jDayChooser2.getDay());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      
      int int1 = JComponent.WHEN_FOCUSED;
      AWTKeyStroke.getAWTKeyStroke(342, 44, true);
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setMonth(657);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-257), 2, (-1274), 44, 'K');
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "s#%R.C>-s1)xGMCni9";
      stringArray0[2] = "s#%R.C>-s1)xGMCni9";
      jDayChooser1.addMouseWheelListener((MouseWheelListener) null);
      Color color0 = new Color((-2144));
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getDockingColor();
      jDayChooser0.setForeground((Color) null);
      jDayChooser1.isDayBordersVisible();
      jDayChooser1.getDecorationBackgroundColor();
      jDayChooser1.isDecorationBordersVisible();
      jDayChooser1.initDecorations();
      jDayChooser0.setSundayForeground((Color) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Q");
      mockPrintStream0.append('%');
      jDayChooser0.list((PrintStream) mockPrintStream0, 37);
      jDayChooser0.getDayPanel();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      ParsePosition parsePosition0 = new ParsePosition(37);
      DateFormat.getTimeInstance();
      mockSimpleDateFormat0.parse("Dialog Plain 11", parsePosition0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.updateUI();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.drawWeeks();
      SystemColor systemColor0 = SystemColor.infoText;
      System.setCurrentTimeMillis(5);
      jDayChooser0.setMonth(5);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDayBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-7), 5, 5, (-7), 'j');
      KeyEvent.getKeyText(5);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser1.getFont();
      Segment segment0 = new Segment();
      PDFState pDFState0 = new PDFState();
      AffineTransform affineTransform0 = GraphicsNode.IDENTITY;
      jDayChooser1.setFont((Font) null);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, (-1551), 0, 5, 0, 'j');
      System.setCurrentTimeMillis(0);
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.day;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 0);
      jDayChooser1.focusLost(focusEvent0);
      jDayChooser0.setSelectableDateRange(date1, date1);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1276);
      jDayChooser0.getWidth();
      jDayChooser0.getToolTipText();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDay(1276);
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      jDayChooser0.setMonth(26);
      Font.getFont("28");
      Segment segment0 = new Segment();
      PDFState pDFState0 = new PDFState();
      AffineTransform affineTransform0 = GraphicsNode.IDENTITY;
      Font font0 = new Font((Map<? extends AttributedCharacterIterator.Attribute, ?>) null);
      jDayChooser0.setFont(font0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 26, (-367L), 4, 28, '$');
      System.setCurrentTimeMillis(0);
      jDayChooser0.setFocus();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDay();
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDay(0);
      jDayChooser1.keyTyped(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getConditionForKeyStroke((KeyStroke) null);
      jDayChooser0.setEnabled(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      Color color0 = Color.white;
      jDayChooser0.setMonth((-1));
      Result result0 = new Result(3);
      jDayChooser0.setLocation(4, 3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      color0.brighter();
      Color color1 = new Color(7);
      jDayChooser0.setForeground(color1);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setSundayForeground(color0);
      Font font0 = new Font("[<E%'V", 3, 4);
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      int int0 = SwingConstants.SOUTH_EAST;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setMaxDayCharacters(33);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser0.setLocation(45, 1079);
      Color color0 = Color.YELLOW;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setFont((Font) null);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setBounds(5, 5, 0, 0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getLocale();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      System.setCurrentTimeMillis(5);
      jDayChooser0.setMonth(0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      
      KeyEvent.getKeyText(5);
      KeyEvent.getKeyText(0);
      JDayChooser jDayChooser2 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 242, 5, 0, 0, '_', 4);
      jDayChooser2.keyPressed(keyEvent0);
      jDayChooser2.setMonth(3708);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser3.new DecoratorButton();
      assertEquals(1, jDayChooser3.getDay());
      
      jDayChooser2.drawDays();
      JDayChooser jDayChooser4 = new JDayChooser(false);
      jDayChooser4.getWeekdayForeground();
      jDayChooser4.setMonth((-1296));
      jDayChooser4.getDayPanel();
      assertTrue(jDayChooser4.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setBounds(5, 5, 0, 0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getLocale();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      System.setCurrentTimeMillis(5);
      jDayChooser0.setMonth(0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDayBordersVisible(false);
      Date date1 = jDayChooser1.setMinSelectableDate(date0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 19, 5, 3, 19, 'j');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setSelectableDateRange(date0, date1);
      Font font0 = Font.decode("28");
      Segment segment0 = new Segment();
      PDFState pDFState0 = new PDFState();
      AffineTransform affineTransform0 = pDFState0.getTransform();
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      FontRenderContext fontRenderContext0 = graphicContext0.getFontRenderContext();
      font0.getLineMetrics((CharacterIterator) segment0, 3, (-1551), fontRenderContext0);
      jDayChooser1.setFont(font0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, (-1551), 0, 0, 0, '$');
      jDayChooser0.keyReleased(keyEvent1);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = null;
      JYearChooser jYearChooser0 = new JYearChooser();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "year");
      jDayChooser0.yearChooser = jYearChooser0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "23");
      jDayChooser0.focusLost((FocusEvent) null);
      Color color0 = null;
      jDayChooser0.setForeground((Color) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "year";
      stringArray0[2] = "year";
      stringArray0[3] = "year";
      HsqlProperties hsqlProperties0 = HsqlProperties.argArrayToProps(stringArray0, "23");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font.getFont("og.apache.xml.utils.resXResources");
      jDayChooser0.setFont((Font) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-861), (-861), (-861), (-861), 'T');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.drawWeeks();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      float[] floatArray0 = new float[22];
      systemColor0.getColorSpace();
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      systemColor0.getRGBColorComponents(floatArray0);
      System.setCurrentTimeMillis(1L);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMonth(0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      SystemColor systemColor1 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.setWeekdayForeground(systemColor1);
      jDayChooser0.getDayPanel();
      jDayChooser0.drawWeeks();
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGraphics2D0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      coreDocumentImpl0.normalize();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.paint(sVGGraphics2D0);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-937), (-1913L), 160, 3, ' ');
      keyEvent0.setKeyCode((-2395));
      keyEvent0.setKeyCode(28);
      InputEvent.getMaskForButton(3);
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getMaxSelectableDate();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(27);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'H';
      charArray0[2] = '^';
      charArray0[3] = 'Q';
      charArray0[4] = '\"';
      charArray0[5] = '3';
      charArray0[6] = '<';
      charArray0[7] = 'z';
      symbolTable0.hash(charArray0, 27, (-927));
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(xMLGrammarPoolImpl0);
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration(symbolTable0, cachingParserPool_SynchronizedGrammarPool0);
      xML11NonValidatingConfiguration0.getLocale();
      Locale locale0 = Locale.US;
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getLocale();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 394, 1L, (-927), 394, 'Q');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      Locale locale0 = Locale.ITALIAN;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 535, 1834L, 5, 535, '&');
      keyEvent0.paramString();
      keyEvent0.consume();
      keyEvent0.setKeyCode(5);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Graphics graphics0 = sVGGraphics2D0.create(14, (-1537), 14, (-1537));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      int int0 = SwingConstants.HORIZONTAL;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ISO-8859-1";
      Color color0 = sVGGraphics2D0.getColor();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1914);
      floatArray0[1] = (float) 1499;
      floatArray0[2] = (float) (-1914);
      floatArray0[3] = (-1.0F);
      jDayChooser_DecoratorButton0.getPropertyChangeListeners();
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) 3;
      floatArray0[7] = (float) 14;
      floatArray0[8] = (float) (-1537);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.keyReleased((KeyEvent) null);
      // Undeclared exception!
      try { 
        graphics0.drawImage((Image) null, 11, 0, 11, 1499, (-1914), 1499, (-1914), 3, color0, (ImageObserver) jDayChooser_DecoratorButton0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(3, 0, 0, 3, 0, 3);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getLocale();
      int int0 = SwingConstants.NORTH;
      jDayChooser0.setDay(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setBounds(5, 5, (-29), (-29));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.drawWeeks();
      Locale locale0 = jDayChooser0.getLocale();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) 5;
      floatArray0[2] = (float) (-29);
      floatArray0[3] = (-2877.3F);
      floatArray0[4] = (float) 5;
      systemColor0.getRGBColorComponents(floatArray0);
      System.setCurrentTimeMillis(5);
      jDayChooser0.setMonth((-29));
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMonth(3136);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Result.newRollbackToSavepointRequest(",!W");
      jDayChooser0.setMonth(2100);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setSundayForeground(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 41, 41, 3106, 3136, '.');
      jDayChooser1.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(0, 3, 0);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getLocale();
      int int1 = SwingConstants.NORTH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setAlwaysFireDayProperty(false);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMaxDayCharacters(0);
      jDayChooser2.setLocation(1077, 1077);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      MockDate mockDate1 = (MockDate)jDayChooser0.minSelectableDate;
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "JDayChooser", 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1276);
      jDayChooser0.paintImmediately(1276, 1276, 1276, 30);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 18, 30, 18, 1276, '!');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(1276);
      jDayChooser0.setDay(30);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(0, 3, 0);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getLocale();
      int int0 = SwingConstants.NORTH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setLocation(0, 10);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      MockDate mockDate1 = (MockDate)jDayChooser0.minSelectableDate;
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      int int1 = (-1255);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "day", (-1255));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1276);
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(1276, 9, 1276);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      Locale locale0 = jDayChooser0.getLocale();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getFont();
      jDayChooser0.setMonth(1276);
      jDayChooser0.setLocale(locale0);
      JEditorPane jEditorPane0 = new JEditorPane();
      Color color0 = jEditorPane0.getDisabledTextColor();
      Color.getColor("day", color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      TimeZone timeZone0 = TimeZone.getTimeZone("day");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setCalendar(calendar0);
      jDayChooser1.setCalendar(calendar0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setYear((-794));
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = SwingConstants.NORTH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Center");
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setLocation(1276, 1);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.KERNING;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, "p{D18c:JI", 1);
      jDayChooser0.setMonth(611);
      Locale locale0 = Locale.forLanguageTag("Center");
      jDayChooser0.setLocale(locale0);
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        jTabbedPane0.getBackgroundAt(10057);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10057, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1276);
      jDayChooser0.paintImmediately(1276, 1276, 1276, 30);
      jDayChooser0.setMonth(1276);
      jDayChooser0.setDay(307);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser0.firePropertyChange("23", true, true);
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      JList<MockGregorianCalendar> jList0 = new JList<MockGregorianCalendar>(stack0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setFocus();
      JButton jButton0 = new JButton("23");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 3410, "<mlPvp=lI!13EylV", 1276, 40);
      jDayChooser0.actionPerformed(actionEvent0);
      assertEquals(23, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1276);
      jDayChooser0.paintImmediately(1276, 1276, 1276, 30);
      jDayChooser0.setMonth(1276);
      jDayChooser0.setDay(307);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser0.firePropertyChange("23", true, true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 30, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      JList<MockGregorianCalendar> jList0 = new JList<MockGregorianCalendar>(stack0);
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setFocus();
      ActionEvent actionEvent0 = new ActionEvent(color0, 190, "23", 478L, 30);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.plaf.ColorUIResource cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = SwingConstants.NORTH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "area");
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setMaxDayCharacters(2688);
      jDayChooser0.setLocation((-1945), 1);
      Color color0 = Color.YELLOW;
      jDayChooser0.setForeground(color0);
      Color color1 = Color.cyan;
      jDayChooser0.setDecorationBackgroundColor(color1);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate((Date) null);
      System.setCurrentTimeMillis((-165));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-793));
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.firePropertyChange("found end of document ", true, false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-793), false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDayBordersVisible();
      jDayChooser1.setMonth(6);
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser1.setForeground(color0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setBounds(5, 5, 0, 0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getLocale();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      Color color0 = jDayChooser2.getWeekdayForeground();
      jDayChooser2.firePropertyChange("day", false, false);
      jDayChooser1.remove((MenuComponent) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, 0, true, jDayChooser2);
      jDayChooser2.focusGained(focusEvent0);
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertEquals(90, color0.getGreen());
      
      JDayChooser jDayChooser3 = new JDayChooser();
      JDayChooser jDayChooser4 = new JDayChooser(false);
      jDayChooser4.isDayBordersVisible();
      jDayChooser1.setMonth(47);
      jDayChooser3.setDayBordersVisible(false);
      jDayChooser2.focusLost(focusEvent0);
      jDayChooser3.setDayBordersVisible(true);
      assertEquals(14, jDayChooser3.getDay());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.addFocusListener(defaultCaret0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.focusGained((FocusEvent) null);
      Color color0 = Color.WHITE;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-7.2F);
      floatArray0[2] = 601.3797F;
      floatArray0[3] = 2088.346F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-3091.5225F);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      floatArray0[8] = 0.0F;
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      System.setCurrentTimeMillis((-2684L));
      jDayChooser0.setMonth((-673));
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.drawWeeks();
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(2552, 2552, 2552);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getLocale();
      color0.getRGBComponents((float[]) null);
      Color color1 = Color.RED;
      jDayChooser0.setWeekdayForeground(color1);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setMonth(2552);
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 14, false, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 4294977024L, 14, 14, '0');
      jDayChooser0.keyTyped(keyEvent0);
      int int1 = jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, int1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = SwingConstants.NORTH;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p{D18c:JI");
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.setLocation((-165), (-2059));
      Color color0 = Color.YELLOW;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      System.setCurrentTimeMillis((-165));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-1278), 3284, 3284, 14, '');
      keyEvent0.setKeyCode(2002);
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setBounds(5, 5, 0, 0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getLocale();
      jDayChooser0.init();
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setWeekdayForeground(systemColor0);
      ActionEvent actionEvent0 = new ActionEvent(date0, 0, "qE]QJ,,+xfEys.", (-4L), 0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Date cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setWeekOfYearVisible(false);
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setBounds(5, 5, 0, 0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getLocale();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setWeekdayForeground(systemColor0);
      System.setCurrentTimeMillis(5);
      jDayChooser0.setMonth(1329);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMinSelectableDate(date1);
      jDayChooser0.addListeners(0);
      jDayChooser0.setMonth(5);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(0, 3, 0);
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      GraphicContext graphicContext0 = new GraphicContext();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 2, 1, 2, '1', 1);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyReleased(keyEvent0);
      jDayChooser0.setFocus();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-1520), 1, 0, 6, 't');
      jDayChooser0.keyReleased(keyEvent1);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser1.setMonthChooser((JMonthChooser) null);
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayLanguage();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 535, 1834L, 5, 535, '&');
      keyEvent0.setKeyCode(90);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayLanguage();
      jDayChooser0.setMonth((-1868));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1868), true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayLanguage();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jDayChooser0.setFocus();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (-1544), (-1516L), 5843, 5843, '');
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      SymbolTable symbolTable0 = new SymbolTable();
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
      xML11NonValidatingConfiguration0.getLocale();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 420, (-3773L), 1103, 464, 'e');
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDayBordersVisible();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("PjM<aP1:,Ho8S+O");
      jDayChooser0.setAlignmentY(0.0F);
      int int0 = 835;
      ActionEvent actionEvent0 = new ActionEvent("14", 835, "PjM<aP1:,Ho8S+O", (-1));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(10);
      jDayChooser0.getMaxSelectableDate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10, 2265L, (-325), (-95), 'q');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setYear(372);
      assertEquals(10, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(10);
      jDayChooser0.setAlwaysFireDayProperty(false);
      int int0 = 100;
      Font font0 = new Font("Zzw~4oWg;LnrV&x-gO9", (-3809), 15);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setFont(font0);
      jDayChooser1.setFocus();
      jDayChooser0.setAlignmentY(100);
      ActionEvent actionEvent0 = new ActionEvent("dHRO(CF", (-3809), "dHRO(CF", 3);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(238, color0.getBlue());
      
      jDayChooser0.drawWeeks();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl(true);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      Graphics graphics0 = sVGGraphics2D0.create(14, 14, 3284, 41);
      jDayChooser_DecoratorButton0.paint(graphics0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getRootPane();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(464);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      SymbolTable symbolTable0 = new SymbolTable();
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration(symbolTable0, cachingParserPool_SynchronizedGrammarPool0);
      xML11NonValidatingConfiguration0.getLocale();
      Locale locale0 = Locale.US;
      SystemColor systemColor0 = SystemColor.infoText;
      Color color0 = systemColor0.brighter();
      jDayChooser0.setForeground(color0);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getVisibleRect();
      jDayChooser0.setAlignmentX(0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 177);
      jDayChooser0.setWeekOfYearVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(10116, 1027, 37);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-1257);
      jDayChooser0.setDay((-1257));
      boolean boolean1 = true;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int1 = 4790;
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 4790, "day", 10);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Windows";
      stringArray0[1] = "day";
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayLanguage();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3428), 2101L, (-301), (-3428), 'l');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getRootPane();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(464);
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      SymbolTable symbolTable0 = new SymbolTable();
      CachingParserPool.SynchronizedGrammarPool cachingParserPool_SynchronizedGrammarPool0 = new CachingParserPool.SynchronizedGrammarPool(cachingParserPool_ShadowedGrammarPool0);
      XML11NonValidatingConfiguration xML11NonValidatingConfiguration0 = new XML11NonValidatingConfiguration(symbolTable0, cachingParserPool_SynchronizedGrammarPool0);
      xML11NonValidatingConfiguration0.getLocale();
      Locale locale0 = Locale.US;
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.grabFocus();
      jDayChooser0.initDecorations();
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.addListeners(32);
      int int0 = 1730;
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 32, 32, 2096, (-1583), (-1191), 717, 8, 2096, false, 1730, (-5452), (-2737));
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.focusGained((FocusEvent) null);
      Color color0 = Color.WHITE;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-7.2F);
      floatArray0[2] = 601.3797F;
      floatArray0[3] = 2088.346F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-3091.5225F);
      floatArray0[8] = 0.0F;
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      System.setCurrentTimeMillis((-2684L));
      jDayChooser0.setMonth((-673));
      jDayChooser0.setDayBordersVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 663, 327L, 663, 663, 'a', (MenuElement[]) null, menuSelectionManager0);
      menuKeyEvent0.setKeyChar('a');
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2241, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1276);
      int int0 = 9999;
      jDayChooser0.paintImmediately(1276, 1276, 9999, 30);
      jDayChooser0.setMonth(1276);
      jDayChooser0.setDay(1276);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getDecorationBackgroundColor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 1798, "jqHc");
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 34, true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMaxDayCharacters(160);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Windows";
      stringArray0[1] = "day";
      Locale locale0 = Locale.ITALIAN;
      locale0.getDisplayLanguage();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jDayChooser0.setDay(17);
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      jDayChooser0.getToolkit();
      jDayChooser0.isDayBordersVisible();
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser0.setSundayForeground(systemColor0);
      // Undeclared exception!
      try { 
        java.sql.Date.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setDecorationBordersVisible(true);
      String string0 = ": wS";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = ": wS";
      stringArray0[2] = ": wS";
      stringArray0[3] = ": wS";
      stringArray0[4] = ": wS";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = ": wS";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getRootPane();
      jDayChooser0.setMonth(7);
      Locale locale0 = Locale.FRANCE;
      locale0.getDisplayLanguage();
      jDayChooser0.getInputMap();
      int int0 = 1330;
      jDayChooser0.focusGained((FocusEvent) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
      jDayChooser0.setSundayForeground(color0);
      // Undeclared exception!
      try { 
        java.sql.Date.valueOf("zI?ww]8;}8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "West";
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 167;
      Rectangle rectangle0 = new Rectangle(197, 2090, 197, 167);
      jDayChooser0.getBounds(rectangle0);
      Toolkit toolkit0 = jDayChooser0.getToolkit();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getDecorationBackgroundColor();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ActionEvent actionEvent0 = new ActionEvent(toolkit0, 167, "jqHc");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sun.awt.HeadlessToolkit cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[5];
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      stringArray0[2] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "day";
      jDayChooser0.setEnabled(true);
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getConditionForKeyStroke((KeyStroke) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p{D18c:JI");
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setMaxDayCharacters((-1));
      jDayChooser0.setLocation((-165), (-2059));
      Color color0 = Color.YELLOW;
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      System.setCurrentTimeMillis((-165));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getConditionForKeyStroke((KeyStroke) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDay((-1));
      jDayChooser0.getMaxDayCharacters();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.firePropertyChange((String) null, false, false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 36, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultTableModel0;
      defaultTableModel0.setColumnIdentifiers(objectArray0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      Color color0 = jTable0.getSelectionBackground();
      jDayChooser0.setWeekdayForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color1 = Color.BLUE;
      jDayChooser1.setWeekdayForeground(color1);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBounds((Rectangle) null);
      jDayChooser0.getToolkit();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(false);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.sundayForeground = color0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 0, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setComponentOrientation((ComponentOrientation) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getAutoscrolls();
      jDayChooser_DecoratorButton0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser_DecoratorButton0.isDoubleBuffered();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser_DecoratorButton0.removeContainerListener((ContainerListener) null);
      jDayChooser0.setBounds((-2129), 362, 362, 522);
      jDayChooser0.setAlwaysFireDayProperty(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, (-2067), 0, 'n');
      jDayChooser0.getY();
      jDayChooser0.add((Component) jDayChooser_DecoratorButton0);
      keyEvent0.setKeyCode(0);
      jDayChooser0.getX();
      keyEvent0.getExtendedKeyCode();
      KeyEvent.getExtendedKeyCodeForChar(0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.updateUI();
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      Locale locale0 = Locale.ROOT;
      ComponentOrientation.getOrientation(locale0);
      jMonthChooser0.applyComponentOrientation(componentOrientation0);
      jMonthChooser0.resetKeyboardActions();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setFocus();
      jDayChooser0.setFocus();
      jDayChooser0.setWeekOfYearVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, 783, 0L, 783, 783, 'h');
      jDayChooser0.getY();
      jDayChooser0.add((Component) jMonthChooser0);
      keyEvent0.setKeyCode((-262));
      jDayChooser0.getX();
      keyEvent0.getExtendedKeyCode();
      KeyEvent.getExtendedKeyCodeForChar(19);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JYearChooser jYearChooser1 = new JYearChooser();
      jDayChooser1.setYearChooser(jYearChooser1);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser1.setDecorationBackgroundVisible(true);
      int int0 = jDayChooser1.getDaysInMonth();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getLocale();
      FocusEvent focusEvent0 = new FocusEvent(jMonthChooser0, 754, true);
      focusEvent0.getOppositeComponent();
      FocusEvent focusEvent1 = new FocusEvent(jMonthChooser0, 754, true);
      jDayChooser0.focusGained(focusEvent1);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(0, 3, 0);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getLocale();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(4178);
      jDayChooser1.initDecorations();
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBounds((Rectangle) null);
      jDayChooser0.getToolkit();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      Locale locale0 = Locale.UK;
      ComponentOrientation.getOrientation(locale0);
      Locale locale1 = Locale.FRENCH;
      locale1.getDisplayName(locale0);
      ComponentOrientation.getOrientation(locale0);
      ComponentOrientation.getOrientation(locale0);
      Button button0 = null;
      try {
        button0 = new Button("month");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getRootPane();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setMonth(7);
      Locale locale0 = Locale.FRANCE;
      locale0.getDisplayLanguage();
      Locale.setDefault(locale0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getGraphics();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setYear(36);
      jDayChooser0.getMinSelectableDate();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getSundayForeground();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      int int0 = (-2206);
      // Undeclared exception!
      try { 
        jDayChooser2.addListeners((-2206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setBounds(5, 5, 0, 0);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getLocale();
      jDayChooser0.init();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1250), 0, 2131, 309, '5');
      jDayChooser0.keyReleased(keyEvent0);
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1337), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke("day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.getConditionForKeyStroke((KeyStroke) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p{D18c:JI");
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(36);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.firePropertyChange("94e.6Wf[", false, false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 28, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDayBordersVisible();
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 1, 1, 1, 'C');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.keyTyped((KeyEvent) null);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-4240));
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaxSelectableDate();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      jMonthChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-4240);
      color0.getRGBComponents(floatArray0);
      floatArray0[1] = (float) 14;
      floatArray0[2] = (float) (-4240);
      floatArray0[3] = (float) (-4240);
      floatArray0[4] = (float) (-4240);
      floatArray0[5] = (float) (-4240);
      color0.getComponents(floatArray0);
      color0.getColorSpace();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getDayPanel();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      int int0 = (-1082);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jPanel0, 0, 1L, 0, (-1082), ':', (-1082));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getRootPane();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMonth(0);
      Locale locale0 = Locale.FRANCE;
      locale0.getDisplayLanguage();
      Locale.setDefault(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.repaint(1L, 0, 0, 0, 106);
      jDayChooser0.setAlwaysFireDayProperty(false);
      boolean boolean0 = true;
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      try { 
        jMonthChooser0.getMousePosition(false);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2488), false, jDayChooser0);
      jDayChooser0.getClientProperty(focusEvent0);
      focusEvent0.setSource((Object) null);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getToolkit();
      MockDate mockDate0 = new MockDate(0, 3, 0);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.getLocale();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBounds((Rectangle) null);
      jDayChooser0.getToolkit();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxDayCharacters((-2489));
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMaxDayCharacters((-3599));
      int int0 = 190;
      jDayChooser0.setLocation((-3599), 190);
      jDayChooser0.getSundayForeground();
      jDayChooser0.init();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getGraphics();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setYear(190);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(190);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaximumSize();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setFocus();
      jDayChooser0.setDay(3112);
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getVisibleRect();
      Color color0 = MapView.standardNodeTextColor;
      Color.getColor("day", 0);
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-399), (-399), (-1888), (-1888), '@', (-1888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke.getKeyStroke((String) null);
      jDayChooser0.setDay(1444);
      jDayChooser0.getToolTipText();
      int int0 = 1730;
      int int1 = 23;
      jDayChooser0.paintImmediately(1730, 23, 1730, 30);
      char char0 = '!';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1444, 23, 3, '!', '!');
      KeyEvent.getKeyText(30);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3359));
      jDayChooser0.addVetoableChangeListener((VetoableChangeListener) null);
      assertEquals(14, jDayChooser0.getDay());
      
      JSpinner jSpinner0 = new JSpinner();
      jDayChooser0.setDay((-3352));
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      KeyStroke.getKeyStroke("P,m((X+,~M^");
      int int0 = SwingConstants.SOUTH_EAST;
      JDayChooser jDayChooser1 = new JDayChooser();
      int int1 = 207;
      jDayChooser1.setMaxDayCharacters(207);
      jDayChooser1.getConditionForKeyStroke((KeyStroke) null);
      KeyStroke.getKeyStroke("day");
      SystemColor systemColor0 = SystemColor.textText;
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMaxDayCharacters(4);
      jDayChooser2.setMonth(1511);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 4, (-257), 44, 35, 'Z');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.addMouseWheelListener((MouseWheelListener) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      SymbolTable symbolTable0 = new SymbolTable();
      Locale locale0 = Locale.US;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getFont();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 0L, 535, 10076, 'v');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ImageProducer imageProducer0 = null;
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("accessories.plugins.time.JDayChooser$1", (String) null, "?");
      Document document0 = sVGDOMImplementation0.createDocument("v", "freemind.modes.mindmapmode.attributeactors.AssignAttributeDialog", genericDocumentType0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(document0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The current document is unable to create an element of the requested type (namespace: http://www.w3.org/2000/svg, name: g).
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange(".7Oo>Ega<Yu|NDyrCr", 0.0F, 2287.128F);
      boolean boolean0 = false;
      jDayChooser0.setWeekOfYearVisible(false);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 348, 348, 348, 1835, '^', 1835);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JRootPane jRootPane0 = new JRootPane();
      jDayChooser0.isDayBordersVisible();
      Locale locale0 = Locale.FRANCE;
      locale0.getDisplayLanguage();
      Locale.setDefault(locale0);
      jDayChooser0.addListeners(13);
      jDayChooser0.setWeekOfYearVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-383), 0L, (-1757), 13, 'R');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.repaint(639, 41, 41, 41);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMaxDayCharacters((-3599));
      jDayChooser0.setLocation((-3599), 190);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setForeground(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(0, color0.getGreen());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      Locale locale0 = Locale.ROOT;
      ComponentOrientation.getOrientation(locale0);
      jMonthChooser0.applyComponentOrientation(componentOrientation0);
      jMonthChooser0.resetKeyboardActions();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setFocus();
      jDayChooser0.setFocus();
      boolean boolean0 = true;
      jDayChooser0.setWeekOfYearVisible(true);
      Object[] objectArray0 = null;
      DefaultTableModel defaultTableModel0 = null;
      try {
        defaultTableModel0 = new DefaultTableModel((Object[]) null, (-2595));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2595
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 3038;
      String string0 = "K#\\5KdO";
      MindMapMode mindMapMode0 = new MindMapMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Sj#l0p";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuBar menuBar0 = null;
      try {
        menuBar0 = new MenuBar();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
