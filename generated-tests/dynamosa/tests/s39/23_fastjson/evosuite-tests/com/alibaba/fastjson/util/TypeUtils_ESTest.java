/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:08:33 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.ReferenceCodec;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLTransactionRollbackException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      java.util.IdentityHashMap<String, Object> identityHashMap0 = new java.util.IdentityHashMap<String, Object>();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      DateFormatSymbols dateFormatSymbols0 = TypeUtils.castToJavaBean((Map<String, Object>) identityHashMap0, class0, parserConfig0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[B", classLoader0);
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("boolean", classLoader0);
      assertEquals("boolean", class0.toString());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.io.Serializable");
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("[byte");
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      Class<?> class1 = TypeUtils.getClass((Type) propertyProcessableDeserializer0.type);
      assertEquals("interface com.alibaba.fastjson.parser.deserializer.PropertyProcessable", class1.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<UUID> class0 = UUID.class;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      Hashtable<VerifyError, Throwable> hashtable0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(hashtable0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("currentSerialVersion", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "fastjson.parser.autoTypeSupport", 106L);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Insets insets0 = new Insets(0, 0, (-1620283815), 5);
      boolean boolean0 = TypeUtils.isHibernateInitialized(insets0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Field[] fieldArray0 = new Field[0];
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "java/lang/String", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Field[] fieldArray0 = new Field[1];
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "fastjson.parser.deny", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class0);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = TypeUtils.decapitalize("java.lang.Byte@0000000001");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, map0, false, (PropertyNamingStrategy) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, parserConfig0.propertyNamingStrategy);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      identityHashMap0.put("PATTERN_ZONE_NAME", (Field) null);
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>(identityHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, map0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(1, 1);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>(hashtable0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, false, parserConfig0.propertyNamingStrategy);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, true, (PropertyNamingStrategy) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) propertyProcessableDeserializer0.type, jSONType0, map0, (Map<String, Field>) linkedHashMap0, false, (PropertyNamingStrategy) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      String string0 = TypeUtils.castToString(mockNullPointerException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Date date0 = new Date(1L);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(date0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : 1970-01-01
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<PageAttributes> class0 = PageAttributes.class;
      PageAttributes pageAttributes0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(pageAttributes0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("toS");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: toS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<StackTraceElement> class0 = StackTraceElement.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      Class<StackTraceElement> class0 = StackTraceElement.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) mockNullPointerException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.Object@5131a7eb
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PageAttributes pageAttributes0 = new PageAttributes();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(pageAttributes0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.text.MockDateFormat@9b21da
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("@").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"code\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Insets insets0 = new Insets(2488, (-1721179179), 6, 732);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints(1756, 1756, 368, 368, (-2304.36844949292), 4778643221139785114L, 1756, 2315, insets0, 368, (-216));
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(gridBagConstraints0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<NumberFormat> class0 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLClientInfoException0, class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.setAutoTypeSupport(true);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) javaObjectDeserializer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Float> class0 = Float.TYPE;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, parserConfig0.propertyNamingStrategy, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Annotation> class0 = Annotation.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) concurrentHashMap0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) null, false, (PropertyNamingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      DataTruncation dataTruncation0 = new DataTruncation(4, true, true, (-2784), 4);
      Type[] typeArray0 = new Type[9];
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[7]);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      TypeUtils.cast((Object) dataTruncation0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<Float> class1 = Float.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertTrue(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "j", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      Type type0 = TypeUtils.getGenericParamType(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      instantiationException0.fillInStackTrace();
      instantiationException0.fillInStackTrace();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      Class<Byte> class1 = Byte.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<AtomicLong> class2 = AtomicLong.class;
      parserConfig0.getDeserializer((Class<?>) class2, (Type) class2);
      DateCodec dateCodec0 = new DateCodec();
      ReferenceCodec referenceCodec0 = new ReferenceCodec();
      parserConfig0.putDeserializer(class0, dateCodec0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      treeMap0.clone();
      ParserConfig.getFieldFromCache("27:yIP", treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("java.lang.Byte@0000000001", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.lang.Byte@0000000001
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "rrXd");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("Ljava/lang/Object;", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "U");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("long", classLoader0, true);
      assertEquals("long", class0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "j", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockNullPointerException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.NoSuchMethodError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("1.2.46");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(concurrentHashMap0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Constructor<JavaObjectDeserializer>[] constructorArray0 = (Constructor<JavaObjectDeserializer>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      jSONObject0.fluentPut("yyyy-MM-dd HH:mm:ss", sqlDateDeserializer0);
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      RuleBasedCollator ruleBasedCollator0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertNull(ruleBasedCollator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("p}5hAFUy_");
      assertEquals((-4217469537294083262L), long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("u/\":h1(S*).\"");
      assertEquals(4778643221139785114L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("j");
      TypeUtils.isHibernateInitialized(jSONReaderScanner0);
      boolean boolean0 = TypeUtils.isHibernateInitialized("getgetCause");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [I", class1.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Short> class0 = Short.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertEquals("short", class1.toString());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      Class class1 = (Class)FieldInfo.getFieldType(class0, class0, class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Object> class0 = Object.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLException>[] classArray0 = (Class<SQLException>[]) Array.newInstance(Class.class, 3);
      Class<SQLException> class0 = SQLException.class;
      classArray0[0] = class0;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      //  // Unstable assertion: assertTrue(parserConfig0.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RenderingHints> class0 = RenderingHints.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      byte[] byteArray0 = JSON.toJSONBytes((Object) serializeConfig0, serializeConfig0, (-19), serializerFeatureArray0);
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) weakHashMap0, true, parserConfig0.propertyNamingStrategy);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Double> class0 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Point> class0 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) treeMap0, false, parserConfig0.propertyNamingStrategy);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<NumberFormat> class0 = NumberFormat.class;
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      Type[] typeArray0 = new Type[4];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockNullPointerException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. org.evosuite.runtime.mock.java.lang.MockNullPointerException -> java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TypeUtils.fnv1a_64("b#");
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass("java.time.LocalDateTime", classLoader0, true);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "rrXd");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.time.LocalDateTime", classLoader0, false);
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass(";", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[^0_RJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("boolean");
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass((String) null, (ClassLoader) null, false);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      JSON.toJSONBytes((Object) propertyProcessableDeserializer0, serializeConfig0, (-33), serializerFeatureArray0);
      Class<Currency> class1 = Currency.class;
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>(54, (byte)119);
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      DateFormatSymbols dateFormatSymbols0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, (ParserConfig) null);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type[] typeArray0 = new Type[7];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[6]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f449711f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Long long0 = new Long(60);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) long0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Boolean boolean0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      AtomicLong atomicLong0 = new AtomicLong((-1L));
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) atomicLong0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "java.lang.InstantiationException@0000000001", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("dDpjk");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Locale locale0 = TypeUtils.toLocale("~BR%pT<D#9|G_ina8l");
      assertEquals("~br%pt<d#9|g_INA8L", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "JGpVnfZ", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.Object@2ca6e032
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TreeMap<JSONPDeserializer, ChoiceFormat> treeMap0 = new TreeMap<JSONPDeserializer, ChoiceFormat>();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = TypeUtils.castToJavaBean((Object) treeMap0, class0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      NoSuchMethodError noSuchMethodError0 = TypeUtils.cast((Object) null, class0, parserConfig0);
      assertNull(noSuchMethodError0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Boolean boolean0 = TypeUtils.castToBoolean(bigInteger0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.text.DateFormatSymbols@47a4483a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("@MU`9N9m");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-3), (byte) (-1), (byte) (-1), (byte) (-26)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("5?H(>?OZ6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5?H(>?OZ6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      Integer integer0 = TypeUtils.castToInt(byte0);
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      Long long0 = TypeUtils.castToLong(byte0);
      assertEquals(2L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedHashMap<Insets, BatchUpdateException> linkedHashMap0 = new LinkedHashMap<Insets, BatchUpdateException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("*1;B*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("4?+@A;.t&8!1^& 7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 4?+@A;.t&8!1^& 7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Short short0 = new Short((short)106);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(short0);
      assertEquals("1970-01-01 00:00:00.106", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(mockNullPointerException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("^HFj@1~AfS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ^HFj@1~AfS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("ijaOiDut?htVW");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoClassDefFoundError: ijaOiDut?htVW
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger((-1272));
      Double double0 = TypeUtils.castToDouble(atomicInteger0);
      assertEquals((-1272.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("int");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLDataException: int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("a4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      Float float0 = TypeUtils.castToFloat(byte0);
      assertEquals(2.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : interface com.alibaba.fastjson.parser.deserializer.PropertyProcessable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(bigInteger0);
      assertEquals((byte)10, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("ffU8QD;/6kFRa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ffU8QD;/6kFRa\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("");
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("getMinimalDaysInFirstWeek");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : getMinimalDaysInFirstWeek
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("@MU`9N9m");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      //  // Unstable assertion: assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean(object0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(4, list0.size());
  }
}
