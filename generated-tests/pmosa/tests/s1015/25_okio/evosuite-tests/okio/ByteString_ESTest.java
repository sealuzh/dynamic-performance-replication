/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:02:33 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "$C=-*4$Gy-";
      ByteString byteString0 = ByteString.encodeUtf8("$C=-*4$Gy-");
      byteString0.EMPTY.base64();
      ByteString.decodeBase64("$C=-*4$Gy-");
      int int0 = 964;
      ByteString byteString1 = byteString0.md5();
      byteString1.EMPTY.base64();
      // Undeclared exception!
      try { 
        byteString0.substring(964);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = new byte[0];
      byteString0.EMPTY.startsWith(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pipe pipe0 = new Pipe(3215L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      byteString0.EMPTY.endsWith(byteArray0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.toString();
      byteString1.EMPTY.utf8();
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString0.equals(byteArray0);
      byteString0.asByteBuffer();
      String string0 = byteString0.utf8();
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.substring(346, 28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(2)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      int int0 = 90;
      byteString0.EMPTY.hashCode = 90;
      ByteString byteString1 = byteString0.sha512();
      byteString1.EMPTY.toString();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("`QZ4YYV w6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: `
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)36;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-801), (int) (byte)36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=-801 byteCount=36
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      int int0 = byteString0.indexOf(byteString1, (-550));
      assertEquals(0, int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-84);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      HashingSink hashingSink1 = HashingSink.hmacSha256(bufferedSink0, byteString0);
      ByteString byteString1 = hashingSink1.hash();
      byte[] byteArray1 = byteString1.internalArray();
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      boolean boolean0 = byteString0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-103);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = (-1111);
      byteString0.sha1();
      byteString0.EMPTY.rangeEquals((int) (byte) (-30), byteArray0, (-3601), (-3753));
      // Undeclared exception!
      try { 
        byteString0.getByte((byte) (-30));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("", 572);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-30);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.hex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("g2I! 0{;Fy5>|x>2(5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: g
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, 12);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.asByteBuffer();
      byteString0.hashCode();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("FS9\"NWBK$.>%q(g", 1028);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      byteString0.EMPTY.base64Url();
      ByteString byteString1 = hashingSource0.hash();
      byteString1.EMPTY.base64Url();
      ByteString byteString2 = byteString1.md5();
      ByteString byteString3 = byteString1.EMPTY.hmacSha1(byteString2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteString3.rangeEquals(1028, byteArray0, (int) (byte)0, 0);
      byteString1.lastIndexOf(byteString0, (-4692));
      byteString1.hashCode();
      ByteString.decodeBase64("");
      ByteString byteString4 = ByteString.decodeBase64("byteString == null");
      assertNull(byteString4);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString[] byteStringArray0 = new ByteString[2];
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(0);
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString2 = options0.get(0);
      byteString1.EMPTY.hmacSha512(byteString0);
      byteString2.utf8();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\uFFFD\u001D\uFFFD\u064F\u0000\uFFFD\u0004\uFFFD\t\uFFFD\uFFFD\uFFFDB~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: \uFFFD
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      HashingSink hashingSink1 = HashingSink.md5(realBufferedSink0);
      HashingSink hashingSink2 = HashingSink.sha512(hashingSink1);
      ByteString byteString1 = hashingSink2.hash();
      byteString1.toString();
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)98, (int) (byte) (-122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      byteString0.EMPTY.base64Url();
      ByteString byteString1 = hashingSource0.hash();
      byteString1.EMPTY.base64Url();
      ByteString byteString2 = byteString1.md5();
      ByteString byteString3 = byteString1.EMPTY.hmacSha1(byteString2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      boolean boolean0 = byteString3.rangeEquals(0, byteArray0, (int) (byte)116, 0);
      assertFalse(boolean0);
      
      int int0 = byteString1.lastIndexOf(byteString0, (-4692));
      int int1 = byteString1.hashCode();
      assertFalse(int1 == int0);
      
      byteString2.indexOf(byteString3, 56);
      int int2 = byteString1.indexOf(byteArray0, (int) (byte)116);
      assertTrue(int2 == int0);
      
      boolean boolean1 = byteString2.rangeEquals((int) (byte) (-50), byteString3, 987, (-1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = ByteString.decodeHex("");
      byteString1.hashCode();
      ByteString byteString3 = new ByteString(byteArray0);
      boolean boolean0 = byteString3.startsWith(byteString2);
      assertTrue(byteString3.equals((Object)byteString0));
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-88), (byte) (-88), (byte) (-122), (byte)34, (byte)77, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("KnhFG< jGEEmM`AYt'z");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.hex();
      assertEquals("4b6e6846470c006a4745456d4d60405974077a", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.toAsciiLowercase();
      byteString0.EMPTY.utf8();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(byteString0.equals((Object)byteString2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("$C=-*U$Gy-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: $
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("FS9\"NWBK$.>%q(g", 1028);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      byteString0.EMPTY.base64Url();
      ByteString byteString1 = hashingSource0.hash();
      byteString1.EMPTY.base64Url();
      ByteString byteString2 = byteString1.md5();
      ByteString byteString3 = byteString1.EMPTY.hmacSha1(byteString2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      byteString3.rangeEquals(0, byteArray0, (int) (byte)0, 0);
      byteString1.lastIndexOf(byteString0, (-4692));
      byteString1.hashCode();
      ByteString byteString4 = ByteString.decodeHex("");
      Charset charset0 = Charset.defaultCharset();
      byteString4.EMPTY.string(charset0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("delegate == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString0.equals("[text=");
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte)53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)33;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R:W_hL#@1$GY$.k\"");
      byteString0.startsWith(byteArray0);
      Buffer buffer0 = null;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("[text=R#!]");
      byteBuffer0.putInt((int) (byte)35);
      ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        byteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)76;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = ByteString.decodeHex("");
      Buffer buffer0 = new Buffer();
      byteString2.EMPTY.write(buffer0);
      byteString1.hashCode();
      ByteString byteString3 = new ByteString(byteArray0);
      boolean boolean0 = byteString1.startsWith(byteString3);
      assertFalse(boolean0);
      
      byteString3.hmacSha1(byteString0);
      assertTrue(byteString3.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("FS9\"NWBK$.>%q(g", 1028);
      assertEquals(15, int0);
      
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      byteString0.EMPTY.base64Url();
      ByteString byteString1 = hashingSource0.hash();
      byteString1.EMPTY.base64Url();
      ByteString byteString2 = byteString1.md5();
      ByteString byteString3 = byteString1.EMPTY.hmacSha1(byteString2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)0;
      boolean boolean0 = byteString3.rangeEquals(0, byteArray0, (int) (byte)0, 0);
      byteString1.lastIndexOf(byteString0, (-4692));
      byteString1.hashCode();
      ByteString.decodeHex("");
      Charset.defaultCharset();
      boolean boolean1 = byteString3.startsWith(byteString0);
      assertFalse(boolean1 == boolean0);
      
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-121);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString1.string(charset0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0001I>\uFFFDYj\uFFFD");
      byteString0.write(mockPrintStream0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("w");
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.md5();
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString2 = realBufferedSource0.readByteString(0L);
      ByteString byteString3 = byteString2.sha256();
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        ByteString.read(mockFileInputStream0, 101);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-33);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(gzipSource0, byteString1);
      ByteString byteString2 = hashingSource0.hash();
      byteString2.indexOf(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A4D>bO,*GJ[9*Z?X `");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[0] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(1888L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteString.codePointIndexToCharIndex("", 37);
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)1;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)40);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-121);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=0b460660866086]", string0);
      
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("[hex=01492690597287]", charset0);
      ByteString byteString2 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteString2);
      assertTrue(boolean0);
      
      boolean boolean1 = byteString1.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-43);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiUppercase();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("#>Pf&|~_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: #
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5]6[WH#7:Y_z");
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A4D>bO,*GJ[9*Z?X `");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[0] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(1888L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals((-1), int0);
      
      int int1 = byteString0.lastIndexOf(byteString1);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)98;
      byteArray0[4] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.decodeHex("");
      assertEquals(0, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("_7nvmB*@eH;KbpJY{2");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A4D>bO,*GJ[9*Z?X `");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte) (-122);
      byteArray1[3] = (byte)77;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray1);
      byteString0.asByteBuffer();
      byteString0.toAsciiLowercase();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("A4D>bO,*GJ[9*Z?X `");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: >
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(2615L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      HashingSink hashingSink2 = HashingSink.sha512(hashingSink1);
      ByteString byteString1 = hashingSink2.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=ca8eebe86eeac8c0ab840880066080060600e4080c86b80c8ea4a60b0e6ce6ce46000bec8088a0c0aa8eb800866eec0a6ec6ebc0464b6a8ba8e8e06aa6060aee]", string0);
      
      ByteString byteString2 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString3 = realBufferedSource0.readByteString();
      byteString3.toString();
      ByteString byteString4 = hashingSink0.hash();
      int int0 = byteString4.lastIndexOf(byteArray0);
      int int1 = byteString0.lastIndexOf(byteString2, 11);
      assertTrue(byteString2.equals((Object)byteString4));
      assertTrue(int1 == int0);
      
      boolean boolean0 = byteString3.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-108);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString2 = ByteString.decodeHex("");
      byteString2.hashCode();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString2.startsWith(byteString1);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
      
      int int1 = byteString3.indexOf(byteArray0, 53);
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(2611L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      ByteString byteString1 = hashingSink1.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=ca8eebe86eeac8c0ab840880066080060600e4080c86b80c8ea4a60b0e6ce6ce46000bec8088a0c0aa8eb800866eec0a6ec6ebc0464b6a8ba8e8e06aa6060aee]", string0);
      
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.decodeHex("");
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)59;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.startsWith(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertArrayEquals(new byte[] {(byte)100, (byte)20, (byte) (-58), (byte)97, (byte)9, (byte) (-1), (byte)0, (byte)59}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(2615L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      HashingSink hashingSink1 = HashingSink.md5(hashingSink0);
      HashingSink hashingSink2 = HashingSink.sha512(hashingSink1);
      ByteString byteString1 = hashingSink2.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=ca8eebe86eeac8c0ab840880066080060600e4080c86b80c8ea4a60b0e6ce6ce46000bec8088a0c0aa8eb800866eec0a6ec6ebc0464b6a8ba8e8e06aa6060aee]", string0);
      
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      ByteString byteString3 = hashingSink2.hash();
      int int0 = byteString3.indexOf(byteString1, (int) (byte)98);
      assertEquals((-1), int0);
      assertSame(byteString0, byteString2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      BufferedSink bufferedSink0 = buffer0.write((Source) hashingSource0, 0L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)3;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(bufferedSink0, byteString0);
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      ByteString byteString1 = hashingSink1.hash();
      BufferedSink bufferedSink1 = realBufferedSink0.write(byteString1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink1);
      HashingSink.md5(hashingSink0);
      HashingSink.sha512(bufferedSink0);
      ByteString byteString2 = hashingSink0.hash();
      byteString2.lastIndexOf(byteArray0);
      byteString2.toString();
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)114;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)114);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.indexOf(byteString1);
      byteString0.toString();
      byteString0.indexOf(byteString0, (int) (byte)114);
      Object object0 = new Object();
      Object object1 = new Object();
      byteString0.equals(object1);
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "charset == null");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(2615L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink.hmacSha512(buffer0, byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ByteString.read(dataInputStream0, (byte)0);
      // Undeclared exception!
      try { 
        byteString0.substring(2645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe(2615L);
      Buffer buffer0 = pipe0.buffer;
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ByteString byteString1 = ByteString.read(dataInputStream0, (byte)0);
      ByteString byteString2 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteString1, (int) (byte)0);
      assertEquals(0, int0);
      
      ByteString byteString3 = hashingSink0.hash();
      byteString2.equals(byteString3);
      assertTrue(byteString2.equals((Object)byteString0));
      
      byteString1.asByteBuffer();
      assertFalse(byteString1.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-112);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-106);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.toString();
      byteString0.substring((int) (byte)1);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((byte) (-112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -112
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 255);
      try { 
        ByteString.read(byteArrayInputStream0, 255);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      assertEquals(0, byteString1.size());
      
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      assertSame(byteString2, byteString0);
      
      ByteString byteString3 = ByteString.encodeUtf8("LI&");
      assertEquals(4, byteString3.size());
  }
}
