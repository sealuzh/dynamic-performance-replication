/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:10:11 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 2502;
      regexp0.cap = 2502;
      regexp0.equals(regexp_Op0);
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 20;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "";
      regexp1.max = 768;
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      regexp1.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "[invalid char class]";
      regexp1.runes = null;
      regexp0.flags = 3394;
      regexp1.equals(regexp0);
      regexp1.runes = null;
      regexp0.reinit();
      regexp1.maxCap();
      String string0 = "8~\"wI@}E<";
      regexp0.flags = 3394;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("8~\"wI@}E<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.8~\"wI@}E<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      boolean boolean0 = regexp0.equals(regexp_Op0);
      assertFalse(boolean0);
      
      int int0 = regexp1.flags;
      assertEquals(0, int0);
      
      regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp0.reinit();
      regexp1.equals(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.LITERAL;
      Regexp regexp4 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        regexp4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      String string0 = regexp0.toString();
      regexp0.subs = regexpArray0;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp_Op0.isPseudo();
      Regexp.Op.values();
      String string1 = regexp0.toString();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp0.reinit();
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp0.toString();
      Regexp regexp4 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp3;
      regexp4.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp4.maxCap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.min = (-1062);
      regexp0.max = (-1062);
      regexp0.toString();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      regexp0.equals(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      String string0 = regexp0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.equals(regexp1);
      regexp0.equals(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp_Op1.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp1.name;
      regexp1.maxCap();
      Regexp.Op.valueOf("LEFT_PAREN");
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.min = (-1062);
      regexp0.max = (-1062);
      regexp0.toString();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp1.max = (-3264);
      regexp1.subs = regexpArray0;
      regexp1.reinit();
      regexp1.toString();
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp0.op = regexp_Op0;
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
      
      regexp0.reinit();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.equals(regexp0);
      regexp0.equals(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("\\z", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp0);
      regexp0.equals(regexp0);
      boolean boolean0 = regexp_Op0.isPseudo();
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.maxCap();
      String string0 = regexp1.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      
      regexp0.maxCap();
      int int0 = regexp1.maxCap();
      assertTrue(regexp1.equals((Object)regexp2));
      assertFalse(regexp1.equals((Object)regexp3));
      assertEquals(0, int0);
      
      boolean boolean1 = regexp_Op1.isPseudo();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      String string0 = regexp0.name;
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp1.reinit();
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexp3.name = "B";
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp1.op = regexp_Op2;
      Regexp.Op regexp_Op3 = Regexp.Op.ANY_CHAR;
      boolean boolean0 = regexp2.equals(regexp_Op3);
      assertFalse(boolean0);
      
      Regexp regexp4 = new Regexp(regexp_Op3);
      regexp4.toString();
      int int0 = regexp3.maxCap();
      assertEquals(0, int0);
      
      regexp2.reinit();
      regexp1.reinit();
      assertTrue(regexp1.equals((Object)regexp2));
      
      Regexp.Op.values();
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexp5.equals(regexp3);
      regexp4.toString();
      assertFalse(regexp4.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 2304;
      regexp1.reinit();
      regexp0.max = 12;
      regexp0.equals(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.toString();
      assertTrue(regexp2.equals((Object)regexp0));
      
      regexp0.toString();
      assertFalse(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 1346;
      regexp0.cap = 17;
      boolean boolean0 = regexp0.equals(regexp_Op0);
      regexp0.toString();
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3486;
      intArray0[2] = 3398;
      intArray0[3] = 2373;
      intArray0[4] = 11;
      intArray0[5] = 12;
      regexp1.runes = intArray0;
      regexp1.maxCap();
      regexp1.toString();
      String string0 = regexp0.name;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 3398;
      regexp0.min = 2217;
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.name = "+61izt}g<1kE?";
      regexp0.flags = 2217;
      regexp1.maxCap();
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.max = 2217;
      regexp1.equals(regexp2);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp4;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp2.subs = regexpArray0;
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("+61izt}g<1kE?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.+61izt}g<1kE?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3486;
      intArray0[1] = 3486;
      intArray0[2] = 3398;
      intArray0[3] = 2373;
      intArray0[4] = 11;
      intArray0[5] = 12;
      regexp1.runes = intArray0;
      regexp1.op = regexp_Op0;
      regexp1.toString();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp.Op.values();
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp2.equals(regexp3);
      regexp1.toString();
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?:)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?:)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp0.op = regexp_Op1;
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexp0.subs = regexpArray0;
      regexp1.max = 617;
      regexp0.cap = 2679;
      regexp1.cap = 2679;
      regexp0.cap = 1523;
      regexp1.flags = 1;
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("j\rqQJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.j\rqQJ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      intArray0[5] = 3486;
      intArray0[2] = 3398;
      intArray0[3] = 2355;
      intArray0[4] = 11;
      intArray0[5] = 12;
      regexp1.runes = intArray0;
      regexp1.name = "K9rIpW XE+\"e]-";
      regexp1.maxCap();
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.flags = 2355;
      regexp1.toString();
      regexp1.equals(regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      assertTrue(regexp0.equals((Object)regexp2));
      
      boolean boolean0 = regexp_Op1.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      regexp1.maxCap();
      regexp1.max = 0;
      regexp1.name = "v:Fk @a#ceJUUwmZ-|E";
      regexp1.reinit();
      regexp0.flags = 0;
      regexp1.maxCap();
      regexp0.maxCap();
      String string0 = "";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 125;
      regexp0.runes = intArray0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.equals("");
      boolean boolean0 = regexp0.equals(regexp1);
      boolean boolean1 = regexp0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.min = (-622);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3486;
      intArray0[2] = 3398;
      intArray0[3] = 3486;
      intArray0[4] = 11;
      intArray0[5] = 12;
      regexp1.runes = intArray0;
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.cap = 11;
      regexp2.flags = 11;
      regexp1.cap = 8994;
      regexp2.toString();
      regexp1.maxCap();
      regexp2.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.LITERAL;
      regexp_Op1.isPseudo();
      Regexp regexp3 = new Regexp(regexp1);
      regexp3.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[16];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp1;
      regexp2.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp2);
      // Undeclared exception!
      try { 
        regexp4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[2] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp2.maxCap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[22];
      regexpArray0[0] = regexp0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[20] = regexp2;
      regexp2.toString();
      regexp1.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp1);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      int[] intArray0 = new int[6];
      regexp0.min = 13;
      boolean boolean0 = regexp0.equals(regexp_Op0);
      assertFalse(boolean0);
      
      intArray0[5] = 3398;
      regexp0.runes = intArray0;
      intArray0[3] = 3398;
      intArray0[4] = 3398;
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.name = "a-_z(Xvm4@S1";
      regexp1.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      String string0 = regexp0.toString();
      assertEquals("[\\x00\\x00-\u0D46\u0D46]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 2936;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      String string0 = "TnU9.2fr5Al%%Fk";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("TnU9.2fr5Al%%Fk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.TnU9.2fr5Al%%Fk
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[13];
      intArray0[0] = (-2393);
      intArray0[2] = 3398;
      intArray0[3] = (-2393);
      Object object0 = new Object();
      regexp0.equals(object0);
      intArray0[4] = 13;
      intArray0[5] = 12;
      regexp1.runes = intArray0;
      regexp1.name = "K9rIpW XE+\"e]-";
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.toString();
      Regexp regexp3 = new Regexp(regexp1);
      Object object1 = new Object();
      regexp0.equals(object1);
      Regexp regexp4 = new Regexp(regexp2);
      int int0 = regexp4.flags;
      // Undeclared exception!
      try { 
        regexp4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp1;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[2] = regexp3;
      regexp2.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp2);
      // Undeclared exception!
      try { 
        regexp4.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[16];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp2;
      regexpArray0[7] = regexp1;
      regexp2.subs = regexpArray0;
      regexp2.toString();
      Regexp.Op regexp_Op2 = Regexp.Op.STAR;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexp2.reinit();
      regexp1.equals(regexp0);
      Regexp.Op regexp_Op3 = Regexp.Op.BEGIN_LINE;
      Regexp regexp4 = new Regexp(regexp_Op3);
      Regexp regexp5 = new Regexp(regexp0);
      Regexp regexp6 = new Regexp(regexp3);
      regexp0.equals(regexp2.subs);
      Regexp.Op.values();
      Regexp.Op regexp_Op4 = Regexp.Op.ALTERNATE;
      regexp_Op4.isPseudo();
      // Undeclared exception!
      try { 
        regexp3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[16];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[7] = regexp1;
      regexp2.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp2);
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexp2.toString();
      regexp3.reinit();
      assertNotSame(regexp3, regexp4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp regexp3 = new Regexp(regexp2);
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexp4.reinit();
      regexp2.equals(regexp_Op0);
      regexp2.toString();
      Regexp.Op.values();
      Object object0 = new Object();
      regexp4.equals(object0);
      Regexp regexp5 = new Regexp(regexp0);
      regexp1.min = 256;
      Regexp regexp6 = new Regexp(regexp_Op1);
      regexp6.equals("?m");
      Regexp regexp7 = new Regexp(regexp_Op0);
      Regexp.Op.values();
      Regexp regexp8 = new Regexp(regexp_Op0);
      Object object1 = new Object();
      regexp0.equals(regexp1);
      regexp5.maxCap();
      // Undeclared exception!
      try { 
        regexp5.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }
}
