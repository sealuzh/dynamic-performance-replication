/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:49:11 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.io.PipedWriter;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.CharBuffer;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Field> class0 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("4Kk:a]b7O2~0");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class1, (Object) defaultJSONParser0, (Object) "4Kk:a]b7O2~0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"4Kk:a]b7O2~0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      int int0 = 0;
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      SerializeWriter serializeWriter1 = serializeWriter0.append((CharSequence) charBuffer0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter1);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Class<Date> class1 = Date.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("P,Jn').+DCWIr");
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class2, (Object) float0, (Object) "P,Jn').+DCWIr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"P,Jn').+DCWIr\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      PipedWriter pipedWriter0 = new PipedWriter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializeWriter serializeWriter0 = new SerializeWriter(pipedWriter0, 65, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Double double0 = new Double(204.421);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      Float float0 = Float.valueOf((float) 65);
      dateCodec0.write(jSONSerializer0, float0, "G2e", parameterizedTypeImpl0, 65);
      assertEquals(2, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Class<Long> class0 = Long.class;
      Class<Method> class1 = Method.class;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "h";
      stringArray0[2] = "";
      JSON.DEFAULT_TYPE_KEY = "yyyyMMddHHmmssSSSZ";
      stringArray0[3] = "0000-00-00";
      stringArray0[4] = "com.alibaba.fastjson.JSONArray";
      stringArray0[5] = "autoType is not support. ";
      stringArray0[6] = "RS";
      JavaBeanInfo.getBuilderClass(class1, (JSONType) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("RS");
      Float float0 = new Float(0.0F);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      Object object0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) serializerFeature0, (Object) "0000-00-00");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      dateCodec0.getFastMatchToken();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      parserConfig0.setDefaultClassLoader(classLoader0);
      Type type0 = null;
      Integer integer0 = new Integer((-4510));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      int int0 = 43;
      SerializeConfig serializeConfig0 = new SerializeConfig(43);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      Short short0 = new Short((short)13);
      dateCodec0.write(jSONSerializer0, short0, parserConfig0, class0, 2);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      SerializeWriter serializeWriter1 = serializeWriter0.append((CharSequence) charBuffer0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter1);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Class<Date> class1 = Date.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("P,!n').M+DCWIr");
      Float float0 = new Float((float) 1);
      DateCodec dateCodec1 = new DateCodec();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        dateCodec1.cast(defaultJSONParser0, (Type) class2, (Object) mockMinguoDate0, (Object) ")E0*4FEIS-Mv\"y<=.g;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \")E0*4FEIS-Mv\"y<=.g;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Field> class0 = Field.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Wo-ch@d1(23Bn0h8|[ah");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "Wo-ch@d1(23Bn0h8|[ah", (Object) "/Date(0000-00-00T0:00:00.$00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(0000-00-00T0:00:00.$00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      SerializeWriter serializeWriter1 = serializeWriter0.append((CharSequence) charBuffer0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter1);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Class<Date> class1 = Date.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("P,!n').M+DCWIr");
      Float float0 = new Float((float) 1);
      DateCodec dateCodec1 = new DateCodec();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("P,!n').M+DCWIr");
      JSON.DEFFAULT_DATE_FORMAT = "t:xT:v=]pmb)";
      Float float1 = new Float((-3650.1F));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dateCodec1.cast(defaultJSONParser0, (Type) class1, object0, (Object) "/Date(SjhI3kS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(SjhI3kS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      dateCodec0.getFastMatchToken();
      ClassLoader.getSystemClassLoader();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("P,!n').M+DCWIr");
      DateCodec dateCodec1 = new DateCodec();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DateCodec dateCodec2 = DateCodec.instance;
      dateCodec2.cast(defaultJSONParser0, (Type) class0, (Object) dateCodec0, (Object) "0000-00-00T00:00:00");
      dateCodec1.getFastMatchToken();
      Double double0 = new Double(0.0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 19);
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      ZoneInfo zoneInfo0 = (ZoneInfo)jSONSerializer0.timeZone;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pz3J5_");
      Locale locale0 = jSONReaderScanner0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0, locale0);
      // Undeclared exception!
      try { 
        dateCodec2.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      int int0 = Opcodes.FCMPL;
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      Float float0 = new Float(0.0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      dateCodec0.write(jSONSerializer0, float0, jSONSerializer0, class0, 149);
      assertEquals(13, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      dateCodec0.getFastMatchToken();
      ClassLoader.getSystemClassLoader();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Double double0 = new Double(2);
      MockDate mockDate0 = new MockDate(2255, 2, (-2231), 704, 2, 704);
      Byte byte0 = new Byte((byte)39);
      dateCodec0.write(jSONSerializer0, mockDate0, byte0, class0, 20);
      Long long0 = new Long(2);
      dateCodec0.write(jSONSerializer0, double0, long0, class0, (-3209));
      System.setCurrentTimeMillis((-3209));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Field> class0 = Field.class;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter();
      SerializeWriter serializeWriter1 = new SerializeWriter(serializeWriter0, (-1894858226), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter1);
      Long long0 = new Long((-1894858226));
      dateCodec0.write(jSONSerializer0, long0, serializerFeature0, class0, (-1894858226));
      assertEquals(21, serializeWriter1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Locale locale0 = new Locale("2#Qj", "+Ph0x--");
      locale0.getDisplayScript();
      JSON.defaultLocale = locale0;
      dateCodec0.getFastMatchToken();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T0:00:00.$00");
      JSON.DEFAULT_TYPE_KEY = "0000-00-00T0:00:00.$00";
      Long long0 = new Long(313864100207897508L);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) long0, (Object) "0000-00-00T0:00:00.$00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0000-00-00T0:00:00.$00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      dateCodec0.getFastMatchToken();
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Long long0 = new Long((-3692L));
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MockDate mockDate0 = new MockDate(2, 2, (-917), (-1865463088), 41);
      Byte byte0 = new Byte((byte)38);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, mockDate0, byte0, class0, (-204));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Field> class0 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Double double0 = new Double((-1031.130779049786));
      SerializeWriter serializeWriter1 = new SerializeWriter(serializerFeatureArray0);
      Short short0 = new Short((short)32184);
      DateCodec dateCodec1 = new DateCodec();
      // Undeclared exception!
      try { 
        dateCodec1.write(jSONSerializer0, short0, serializerFeature4, class1, 3379);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }
}
