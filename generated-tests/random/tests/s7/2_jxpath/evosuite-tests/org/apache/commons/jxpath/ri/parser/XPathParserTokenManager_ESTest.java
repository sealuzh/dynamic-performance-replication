/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 15:57:26 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(".", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(82, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      assertNotNull(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6-+>@m(RCZ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream, false);
      assertNotNull(mockPrintStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 11, 11);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals('p', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 11);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 11. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qh@J6Gp,");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1973), (-1973));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.ReInit((SimpleCharStream) null);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jKAznzs(+,{");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      simpleCharStream0.backup(106);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3989, simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3989, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N0,I>WXuJf-");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 516, 516, 1820);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.ReInit((Reader) stringReader0, (-1457), 2, 516);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1457), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals((-1457), simpleCharStream0.getLine());
      assertEquals((-1457), simpleCharStream0.getBeginLine());
      assertEquals("N0", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-1457), token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals((-1457), token0.beginLine);
      assertEquals(78, token0.kind);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals((-1457), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals((-1457), simpleCharStream0.getLine());
      assertEquals((-1457), simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 86, 86);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, (-3126));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3126. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5*IH?tw\",9");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1101), (-1956));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_[VW7J~%~E1Y5`|K");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")^2Up");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-835), (-835));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-835));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -835. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instruction");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 121, 121, 121);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-1370));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1370. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)23);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1524), (byte) (-2), (byte) (-25));
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(5, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(5, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1524, column -2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"contains\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals("\"contains\"", token0.toString());
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(18, token0.kind);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)106, (byte)116, (byte) (-5), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-5), 5, (byte) (-103));
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)106, (byte)116, (byte) (-5), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(6, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)106, (byte)116, (byte) (-5), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(6, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)106, (byte)116, (byte) (-5), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals((-5), simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals((-5), simpleCharStream0.getLine());
      assertEquals((-5), simpleCharStream0.getEndLine());
      assertEquals("jt", token0.toString());
      assertEquals(6, byteArray0.length);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-5), token0.beginLine);
      assertEquals(5, token0.beginColumn);
      assertEquals((-5), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(6, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("descendant-or-self::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(20, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(20, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("descendant-or-self::", token0.toString());
      assertEquals(19, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(47, token0.kind);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 681, 1767);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1777, simpleCharStream0.getColumn());
      assertEquals(681, simpleCharStream0.getBeginLine());
      assertEquals(681, simpleCharStream0.getLine());
      assertEquals(1767, simpleCharStream0.getBeginColumn());
      assertEquals(1777, simpleCharStream0.getEndColumn());
      assertEquals(681, simpleCharStream0.getEndLine());
      assertEquals("following::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(1767, token0.beginColumn);
      assertEquals(42, token0.kind);
      assertEquals(1777, token0.endColumn);
      assertEquals(681, token0.endLine);
      assertEquals(681, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding-sibling::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 801, 801);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(801, simpleCharStream0.getBeginColumn());
      assertEquals(801, simpleCharStream0.getLine());
      assertEquals(801, simpleCharStream0.getBeginLine());
      assertEquals(819, simpleCharStream0.getColumn());
      assertEquals(819, simpleCharStream0.getEndColumn());
      assertEquals(801, simpleCharStream0.getEndLine());
      assertEquals("preceding-sibling::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(18, simpleCharStream0.bufpos);
      assertEquals(819, token0.endColumn);
      assertEquals(801, token0.endLine);
      assertEquals(801, token0.beginLine);
      assertEquals(46, token0.kind);
      assertEquals(801, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instruction");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 121, 121, 121);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(121, simpleCharStream0.getBeginColumn());
      assertEquals(121, simpleCharStream0.getBeginLine());
      assertEquals(142, simpleCharStream0.getColumn());
      assertEquals(121, simpleCharStream0.getEndLine());
      assertEquals(142, simpleCharStream0.getEndColumn());
      assertEquals(121, simpleCharStream0.getLine());
      assertEquals("processing-instruction", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(21, simpleCharStream0.bufpos);
      assertEquals(121, token0.endLine);
      assertEquals(142, token0.endColumn);
      assertEquals(121, token0.beginColumn);
      assertEquals(34, token0.kind);
      assertEquals(121, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 11, 11);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getEndLine());
      assertEquals('p', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndLine());
      assertEquals(19, simpleCharStream0.getColumn());
      assertEquals(19, simpleCharStream0.getEndColumn());
      assertEquals("receding", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(12, token0.beginColumn);
      assertEquals(19, token0.endColumn);
      assertEquals(11, token0.beginLine);
      assertEquals(11, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)5, (byte)41);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)114, (byte)47, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)114, (byte)47, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(9, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)114, (byte)47, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(9, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("r", token0.toString());
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jKAznzs(+,{");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.backup(106);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(3989, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{Ll8:!(}cB");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)122, (-420));
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(8, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(8, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-420), simpleCharStream0.getColumn());
      assertEquals((-420), simpleCharStream0.getEndColumn());
      assertEquals(122, simpleCharStream0.getEndLine());
      assertEquals(122, simpleCharStream0.getBeginLine());
      assertEquals((-420), simpleCharStream0.getBeginColumn());
      assertEquals(122, simpleCharStream0.getLine());
      assertEquals("z", token0.toString());
      assertEquals(8, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-420), token0.endColumn);
      assertEquals(122, token0.beginLine);
      assertEquals((-420), token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xeeL%FAfg/ci");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 37, 34, 34);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(37, simpleCharStream0.getColumn());
      assertEquals(37, simpleCharStream0.getEndLine());
      assertEquals(37, simpleCharStream0.getEndColumn());
      assertEquals(37, simpleCharStream0.getLine());
      assertEquals(34, simpleCharStream0.getBeginColumn());
      assertEquals(37, simpleCharStream0.getBeginLine());
      assertEquals("xeeL", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(37, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(34, token0.beginColumn);
      assertEquals(37, token0.endLine);
      assertEquals(37, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@w~D");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 785, 785, 785);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(785, simpleCharStream0.getColumn());
      assertEquals(785, simpleCharStream0.getLine());
      assertEquals(785, simpleCharStream0.getEndColumn());
      assertEquals(785, simpleCharStream0.getBeginColumn());
      assertEquals(785, simpleCharStream0.getBeginLine());
      assertEquals(785, simpleCharStream0.getEndLine());
      assertEquals("@", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(785, token0.beginColumn);
      assertEquals(785, token0.endColumn);
      assertEquals(86, token0.kind);
      assertEquals(785, token0.endLine);
      assertEquals(785, token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(786, simpleCharStream0.getColumn());
      assertEquals(786, simpleCharStream0.getEndColumn());
      assertEquals(785, simpleCharStream0.getLine());
      assertEquals(786, simpleCharStream0.getBeginColumn());
      assertEquals(785, simpleCharStream0.getBeginLine());
      assertEquals(785, simpleCharStream0.getEndLine());
      assertEquals("w", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(786, token1.beginColumn);
      assertEquals(786, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(785, token1.endLine);
      assertEquals(785, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1326, 1326, 1326);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1326, simpleCharStream0.getLine());
      assertEquals(1326, simpleCharStream0.getEndColumn());
      assertEquals(1326, simpleCharStream0.getBeginColumn());
      assertEquals(1326, simpleCharStream0.getBeginLine());
      assertEquals(1326, simpleCharStream0.getColumn());
      assertEquals(1326, simpleCharStream0.getEndLine());
      assertEquals("v", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1326, token0.endColumn);
      assertEquals(1326, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1326, token0.beginColumn);
      assertEquals(1326, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sx%yx");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 516, 516, 1820);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(517, simpleCharStream0.getEndColumn());
      assertEquals(516, simpleCharStream0.getLine());
      assertEquals(516, simpleCharStream0.getBeginLine());
      assertEquals(516, simpleCharStream0.getEndLine());
      assertEquals(517, simpleCharStream0.getColumn());
      assertEquals(516, simpleCharStream0.getBeginColumn());
      assertEquals("sx", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(516, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(517, token0.endColumn);
      assertEquals(516, token0.endLine);
      assertEquals(516, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q}q");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1608, 14);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(1608, simpleCharStream0.getEndLine());
      assertEquals(1608, simpleCharStream0.getBeginLine());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(1608, simpleCharStream0.getLine());
      assertEquals("q", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(14, token0.beginColumn);
      assertEquals(14, token0.endColumn);
      assertEquals(1608, token0.endLine);
      assertEquals(1608, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p.XO:@");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 8, 8, 8);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals("p.XO", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(8, token0.beginLine);
      assertEquals(8, token0.beginColumn);
      assertEquals(8, token0.endLine);
      assertEquals(11, token0.endColumn);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oo");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 47, 47);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(47, simpleCharStream0.getBeginColumn());
      assertEquals(47, simpleCharStream0.getLine());
      assertEquals(48, simpleCharStream0.getColumn());
      assertEquals(47, simpleCharStream0.getBeginLine());
      assertEquals(48, simpleCharStream0.getEndColumn());
      assertEquals(47, simpleCharStream0.getEndLine());
      assertEquals("oo", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(47, token0.endLine);
      assertEquals(48, token0.endColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(47, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 48, 1041);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1043, simpleCharStream0.getEndColumn());
      assertEquals(48, simpleCharStream0.getLine());
      assertEquals(48, simpleCharStream0.getBeginLine());
      assertEquals(1041, simpleCharStream0.getBeginColumn());
      assertEquals(1043, simpleCharStream0.getColumn());
      assertEquals(48, simpleCharStream0.getEndLine());
      assertEquals("not", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1041, token0.beginColumn);
      assertEquals(67, token0.kind);
      assertEquals(48, token0.endLine);
      assertEquals(48, token0.beginLine);
      assertEquals(1043, token0.endColumn);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1043, simpleCharStream0.getEndColumn());
      assertEquals(48, simpleCharStream0.getLine());
      assertEquals(48, simpleCharStream0.getBeginLine());
      assertEquals(1041, simpleCharStream0.getBeginColumn());
      assertEquals(1043, simpleCharStream0.getColumn());
      assertEquals(48, simpleCharStream0.getEndLine());
      assertEquals("not", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(48, token1.beginLine);
      assertEquals(48, token1.endLine);
      assertEquals(1041, token1.beginColumn);
      assertEquals(67, token1.kind);
      assertEquals(1043, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("last");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("last", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(48, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kQ\"TP");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1240, 1240, 1240);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1240, simpleCharStream0.getEndLine());
      assertEquals(1240, simpleCharStream0.getLine());
      assertEquals(1240, simpleCharStream0.getBeginLine());
      assertEquals(1241, simpleCharStream0.getColumn());
      assertEquals(1240, simpleCharStream0.getBeginColumn());
      assertEquals(1241, simpleCharStream0.getEndColumn());
      assertEquals("kQ", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1240, token0.beginLine);
      assertEquals(1240, token0.beginColumn);
      assertEquals(1241, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1240, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 11, 11);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = new char[5];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'p', 'r', 'e', 'c', 'e'}, charArray0);
      assertEquals(5, int0);
      assertEquals(5, charArray0.length);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(11, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals('d', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(11, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals("ing", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(11, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(14, token0.endColumn);
      assertEquals(11, token0.beginLine);
      assertEquals(12, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qh@J6Gp,");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1973), (-1973));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(81, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1973), simpleCharStream0.getBeginColumn());
      assertEquals((-1973), simpleCharStream0.getLine());
      assertEquals((-1973), simpleCharStream0.getEndLine());
      assertEquals((-1973), simpleCharStream0.getEndColumn());
      assertEquals((-1973), simpleCharStream0.getColumn());
      assertEquals((-1973), simpleCharStream0.getBeginLine());
      assertEquals("h", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1973), token0.endColumn);
      assertEquals((-1973), token0.endLine);
      assertEquals((-1973), token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals((-1973), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gn0x{x-pE1J2v[gVg");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, (-2561));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-2558), simpleCharStream0.getEndColumn());
      assertEquals((-2558), simpleCharStream0.getColumn());
      assertEquals((-2561), simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals("gn0x", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(5, token0.beginLine);
      assertEquals((-2561), token0.beginColumn);
      assertEquals(5, token0.endLine);
      assertEquals((-2558), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-322), 22);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(26, simpleCharStream0.getColumn());
      assertEquals((-322), simpleCharStream0.getBeginLine());
      assertEquals((-322), simpleCharStream0.getLine());
      assertEquals((-322), simpleCharStream0.getEndLine());
      assertEquals(26, simpleCharStream0.getEndColumn());
      assertEquals(22, simpleCharStream0.getBeginColumn());
      assertEquals("false", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(69, token0.kind);
      assertEquals((-322), token0.endLine);
      assertEquals(22, token0.beginColumn);
      assertEquals((-322), token0.beginLine);
      assertEquals(26, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("count");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1500), (-1500));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1496), simpleCharStream0.getEndColumn());
      assertEquals((-1500), simpleCharStream0.getBeginLine());
      assertEquals((-1500), simpleCharStream0.getLine());
      assertEquals((-1500), simpleCharStream0.getBeginColumn());
      assertEquals((-1500), simpleCharStream0.getEndLine());
      assertEquals((-1496), simpleCharStream0.getColumn());
      assertEquals("count", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals((-1496), token0.endColumn);
      assertEquals((-1500), token0.endLine);
      assertEquals(50, token0.kind);
      assertEquals((-1500), token0.beginLine);
      assertEquals((-1500), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_[VW7J~%~E1Y5`|K");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("_", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^sNLBkc=0");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 108, 108, 46);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 108, column 108.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("]", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)91, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("[", token0.toString());
      assertEquals(2, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(84, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V+!44hN$(_%t|EeT");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1475), (-1475));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1475), simpleCharStream0.getLine());
      assertEquals((-1475), simpleCharStream0.getBeginLine());
      assertEquals((-1475), simpleCharStream0.getColumn());
      assertEquals((-1475), simpleCharStream0.getEndLine());
      assertEquals((-1475), simpleCharStream0.getBeginColumn());
      assertEquals((-1475), simpleCharStream0.getEndColumn());
      assertEquals("V", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1475), token0.beginColumn);
      assertEquals((-1475), token0.endColumn);
      assertEquals((-1475), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals((-1475), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uhc'|");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-669), (-669));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-667), simpleCharStream0.getColumn());
      assertEquals((-669), simpleCharStream0.getLine());
      assertEquals((-669), simpleCharStream0.getBeginColumn());
      assertEquals((-669), simpleCharStream0.getBeginLine());
      assertEquals((-667), simpleCharStream0.getEndColumn());
      assertEquals((-669), simpleCharStream0.getEndLine());
      assertEquals("Uhc", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-669), token0.endLine);
      assertEquals((-669), token0.beginColumn);
      assertEquals((-669), token0.beginLine);
      assertEquals((-667), token0.endColumn);
      assertEquals(78, token0.kind);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -669, column -664.  Encountered: <EOF> after : \"\\'|\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S?ljR");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-744), 83);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(83, simpleCharStream0.getBeginColumn());
      assertEquals((-744), simpleCharStream0.getEndLine());
      assertEquals((-744), simpleCharStream0.getBeginLine());
      assertEquals(83, simpleCharStream0.getColumn());
      assertEquals(83, simpleCharStream0.getEndColumn());
      assertEquals((-744), simpleCharStream0.getLine());
      assertEquals("S", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(83, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-744), token0.endLine);
      assertEquals((-744), token0.beginLine);
      assertEquals(83, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qh@J6Gp,");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1973), (-1973));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1973), simpleCharStream0.getEndLine());
      assertEquals((-1972), simpleCharStream0.getEndColumn());
      assertEquals((-1972), simpleCharStream0.getColumn());
      assertEquals((-1973), simpleCharStream0.getBeginColumn());
      assertEquals((-1973), simpleCharStream0.getLine());
      assertEquals((-1973), simpleCharStream0.getBeginLine());
      assertEquals("Qh", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-1973), token0.beginLine);
      assertEquals((-1973), token0.beginColumn);
      assertEquals((-1972), token0.endColumn);
      assertEquals((-1973), token0.endLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)80}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)80, (byte)80, 2615);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)80}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)80}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)80}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(80, simpleCharStream0.getColumn());
      assertEquals(80, simpleCharStream0.getBeginLine());
      assertEquals(80, simpleCharStream0.getEndColumn());
      assertEquals(80, simpleCharStream0.getEndLine());
      assertEquals(80, simpleCharStream0.getBeginColumn());
      assertEquals(80, simpleCharStream0.getLine());
      assertEquals("P", token0.toString());
      assertEquals(1, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(80, token0.beginLine);
      assertEquals(80, token0.beginColumn);
      assertEquals(80, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(80, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jKAznzs(+,{");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals('j', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("KAznzs", token0.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(7, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Jl}&t_WikJ_R-%=JYX");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2147483646), 13, 3646);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-2147483646), simpleCharStream0.getLine());
      assertEquals((-2147483646), simpleCharStream0.getBeginLine());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals((-2147483646), simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals("Jl", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-2147483646), token0.beginLine);
      assertEquals(14, token0.endColumn);
      assertEquals((-2147483646), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ESa/ycU]E)R.cIT9");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 111, (-1395));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(111, simpleCharStream0.getBeginLine());
      assertEquals((-1393), simpleCharStream0.getEndColumn());
      assertEquals(111, simpleCharStream0.getEndLine());
      assertEquals((-1393), simpleCharStream0.getColumn());
      assertEquals((-1395), simpleCharStream0.getBeginColumn());
      assertEquals(111, simpleCharStream0.getLine());
      assertEquals("ESa", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-1393), token0.endColumn);
      assertEquals((-1395), token0.beginColumn);
      assertEquals(111, token0.endLine);
      assertEquals(111, token0.beginLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ce/t)0+");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1525), (-1525), 93);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1525), simpleCharStream0.getBeginColumn());
      assertEquals((-1525), simpleCharStream0.getEndLine());
      assertEquals((-1525), simpleCharStream0.getBeginLine());
      assertEquals((-1524), simpleCharStream0.getEndColumn());
      assertEquals((-1524), simpleCharStream0.getColumn());
      assertEquals((-1525), simpleCharStream0.getLine());
      assertEquals("Ce", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-1525), token0.beginLine);
      assertEquals((-1525), token0.beginColumn);
      assertEquals((-1525), token0.endLine);
      assertEquals((-1524), token0.endColumn);
      assertEquals(78, token0.kind);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-1523), simpleCharStream0.getBeginColumn());
      assertEquals((-1523), simpleCharStream0.getEndColumn());
      assertEquals((-1525), simpleCharStream0.getEndLine());
      assertEquals((-1525), simpleCharStream0.getBeginLine());
      assertEquals((-1523), simpleCharStream0.getColumn());
      assertEquals((-1525), simpleCharStream0.getLine());
      assertEquals("/", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-1525), token1.endLine);
      assertEquals((-1525), token1.beginLine);
      assertEquals((-1523), token1.beginColumn);
      assertEquals(6, token1.kind);
      assertEquals((-1523), token1.endColumn);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals((-1525), simpleCharStream0.getEndLine());
      assertEquals((-1525), simpleCharStream0.getBeginLine());
      assertEquals((-1522), simpleCharStream0.getBeginColumn());
      assertEquals((-1522), simpleCharStream0.getEndColumn());
      assertEquals((-1522), simpleCharStream0.getColumn());
      assertEquals((-1525), simpleCharStream0.getLine());
      assertEquals("t", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals((-1525), token2.endLine);
      assertEquals(78, token2.kind);
      assertEquals((-1522), token2.endColumn);
      assertEquals((-1522), token2.beginColumn);
      assertEquals((-1525), token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BWYUwTIWy_");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 104, 104, 52);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(104, simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(104, simpleCharStream0.getBeginColumn());
      assertEquals(104, simpleCharStream0.getBeginLine());
      assertEquals(104, simpleCharStream0.getLine());
      assertEquals("BWYUwTIWy_", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, simpleCharStream0.bufpos);
      assertEquals(113, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(104, token0.beginColumn);
      assertEquals(104, token0.endLine);
      assertEquals(104, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A=NX?a'*");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE, 3);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getEndLine());
      assertEquals("A", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals(Integer.MAX_VALUE, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S?ljR");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(83, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-744), 83);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -744, column 83.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">=\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(">=", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)61, (byte)61);
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(61, simpleCharStream0.getBeginColumn());
      assertEquals(61, simpleCharStream0.getBeginLine());
      assertEquals(61, simpleCharStream0.getColumn());
      assertEquals(61, simpleCharStream0.getLine());
      assertEquals(61, simpleCharStream0.getEndLine());
      assertEquals(61, simpleCharStream0.getEndColumn());
      assertEquals("=", token0.toString());
      assertEquals(1, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(61, token0.endLine);
      assertEquals(11, token0.kind);
      assertEquals(61, token0.beginLine);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<5tX'lr5l_wc%");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1843, 1843);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1843, simpleCharStream0.getEndLine());
      assertEquals(1843, simpleCharStream0.getBeginColumn());
      assertEquals(1843, simpleCharStream0.getColumn());
      assertEquals(1843, simpleCharStream0.getLine());
      assertEquals(1843, simpleCharStream0.getEndColumn());
      assertEquals(1843, simpleCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1843, token0.beginColumn);
      assertEquals(1843, token0.endColumn);
      assertEquals(1843, token0.endLine);
      assertEquals(1843, token0.beginLine);
      assertEquals(13, token0.kind);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";g");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7]%R3,uZBCrR");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3228), 60, 92);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-3228), simpleCharStream0.getBeginLine());
      assertEquals((-3228), simpleCharStream0.getLine());
      assertEquals(60, simpleCharStream0.getEndColumn());
      assertEquals(60, simpleCharStream0.getBeginColumn());
      assertEquals(60, simpleCharStream0.getColumn());
      assertEquals((-3228), simpleCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(60, token0.beginColumn);
      assertEquals((-3228), token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(60, token0.endColumn);
      assertEquals((-3228), token0.endLine);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 83);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 83. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5*IH?tw\",9");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1101), (-1956));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1956), simpleCharStream0.getBeginColumn());
      assertEquals((-1956), simpleCharStream0.getEndColumn());
      assertEquals((-1101), simpleCharStream0.getEndLine());
      assertEquals((-1956), simpleCharStream0.getColumn());
      assertEquals((-1101), simpleCharStream0.getBeginLine());
      assertEquals((-1101), simpleCharStream0.getLine());
      assertEquals("5", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1956), token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals((-1956), token0.endColumn);
      assertEquals((-1101), token0.endLine);
      assertEquals((-1101), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("4", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2.XO:@");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 8, 8, 8);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals("2.", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(20, token0.kind);
      assertEquals(8, token0.beginLine);
      assertEquals(8, token0.beginColumn);
      assertEquals(8, token0.endLine);
      assertEquals(9, token0.endColumn);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'_aJ5P|zx1X]3HY");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charArray0.length);
      
      int int0 = stringReader0.read(charBuffer0);
      assertArrayEquals(new char[] {'\'', '_', 'a', 'J', '5', 'P', '|', 'z', 'x'}, charArray0);
      assertEquals(9, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, int0);
      assertEquals(9, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("1", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(20, token0.kind);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0{+',42BDuN1g");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("0", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-HbFNVR#iL]y62:aq");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("-", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(10, token0.kind);
      assertEquals(1, token0.endLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals("HbFNVR", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(7, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+N^xj|iA|v`A8G[ake");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("+", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(9, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("N", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")^2Up");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-835), (-835));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-835), simpleCharStream0.getColumn());
      assertEquals((-835), simpleCharStream0.getBeginLine());
      assertEquals((-835), simpleCharStream0.getEndColumn());
      assertEquals((-835), simpleCharStream0.getEndLine());
      assertEquals((-835), simpleCharStream0.getBeginColumn());
      assertEquals((-835), simpleCharStream0.getLine());
      assertEquals(")", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-835), token0.endColumn);
      assertEquals((-835), token0.endLine);
      assertEquals((-835), token0.beginLine);
      assertEquals(81, token0.kind);
      assertEquals((-835), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 120, (-5499));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 120, column -5498.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bNv&Brs]!Te");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, Integer.MAX_VALUE, (-665));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getBeginLine());
      assertEquals((-663), simpleCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getEndLine());
      assertEquals((-665), simpleCharStream0.getBeginColumn());
      assertEquals((-663), simpleCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, simpleCharStream0.getLine());
      assertEquals("bNv", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-665), token0.beginColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals((-663), token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(78, token0.kind);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2147483647, column -662.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Gf%5Fx+\"{|");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\")\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\")\"", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(18, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",/H1E 6");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 121, 61);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(61, simpleCharStream0.getBeginColumn());
      assertEquals(121, simpleCharStream0.getBeginLine());
      assertEquals(121, simpleCharStream0.getLine());
      assertEquals(61, simpleCharStream0.getColumn());
      assertEquals(121, simpleCharStream0.getEndLine());
      assertEquals(61, simpleCharStream0.getEndColumn());
      assertEquals(",", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(121, token0.endLine);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, token0.endColumn);
      assertEquals(121, token0.beginLine);
      assertEquals(87, token0.kind);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(121, simpleCharStream0.getBeginLine());
      assertEquals(121, simpleCharStream0.getLine());
      assertEquals(62, simpleCharStream0.getColumn());
      assertEquals(121, simpleCharStream0.getEndLine());
      assertEquals(62, simpleCharStream0.getEndColumn());
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals("/", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(121, token1.beginLine);
      assertEquals(121, token1.endLine);
      assertEquals(6, token1.kind);
      assertEquals(62, token1.endColumn);
      assertEquals(62, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".<2.T\"k[bXOb'r");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2319, (-1498));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1498), simpleCharStream0.getColumn());
      assertEquals(2319, simpleCharStream0.getEndLine());
      assertEquals(2319, simpleCharStream0.getLine());
      assertEquals(2319, simpleCharStream0.getBeginLine());
      assertEquals((-1498), simpleCharStream0.getBeginColumn());
      assertEquals((-1498), simpleCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1498), token0.beginColumn);
      assertEquals(2319, token0.endLine);
      assertEquals((-1498), token0.endColumn);
      assertEquals(2319, token0.beginLine);
      assertEquals(82, token0.kind);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8:mhBn0@ihvz/3gs");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1432, 365, 365);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1432, simpleCharStream0.getEndLine());
      assertEquals(365, simpleCharStream0.getColumn());
      assertEquals(1432, simpleCharStream0.getLine());
      assertEquals(365, simpleCharStream0.getBeginColumn());
      assertEquals(365, simpleCharStream0.getEndColumn());
      assertEquals(1432, simpleCharStream0.getBeginLine());
      assertEquals("8", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1432, token0.endLine);
      assertEquals(365, token0.beginColumn);
      assertEquals(365, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1432, token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(366, simpleCharStream0.getColumn());
      assertEquals(1432, simpleCharStream0.getEndLine());
      assertEquals(1432, simpleCharStream0.getLine());
      assertEquals(366, simpleCharStream0.getBeginColumn());
      assertEquals(366, simpleCharStream0.getEndColumn());
      assertEquals(1432, simpleCharStream0.getBeginLine());
      assertEquals(":", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1432, token1.beginLine);
      assertEquals(1432, token1.endLine);
      assertEquals(366, token1.endColumn);
      assertEquals(79, token1.kind);
      assertEquals(366, token1.beginColumn);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(371, simpleCharStream0.getEndColumn());
      assertEquals(1432, simpleCharStream0.getEndLine());
      assertEquals(1432, simpleCharStream0.getLine());
      assertEquals(367, simpleCharStream0.getBeginColumn());
      assertEquals(1432, simpleCharStream0.getBeginLine());
      assertEquals(371, simpleCharStream0.getColumn());
      assertEquals("mhBn0", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token2.kind);
      assertEquals(371, token2.endColumn);
      assertEquals(367, token2.beginColumn);
      assertEquals(1432, token2.beginLine);
      assertEquals(1432, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" (");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2621, (-1164), 2621);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2621, simpleCharStream0.getBeginLine());
      assertEquals(2621, simpleCharStream0.getLine());
      assertEquals(2621, simpleCharStream0.getEndLine());
      assertEquals((-1163), simpleCharStream0.getEndColumn());
      assertEquals((-1163), simpleCharStream0.getBeginColumn());
      assertEquals((-1163), simpleCharStream0.getColumn());
      assertEquals("(", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2621, token0.endLine);
      assertEquals((-1163), token0.endColumn);
      assertEquals(2621, token0.beginLine);
      assertEquals((-1163), token0.beginColumn);
      assertEquals(80, token0.kind);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-1163));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1163. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 11, 11);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = new char[5];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'p', 'r', 'e', 'c', 'e'}, charArray0);
      assertEquals(5, int0);
      assertEquals(5, charArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getBeginLine());
      assertEquals(11, simpleCharStream0.getLine());
      assertEquals("ding", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(14, token0.endColumn);
      assertEquals(11, token0.beginColumn);
      assertEquals(11, token0.beginLine);
      assertEquals(11, token0.endLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6-+>@m(RCZ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("6", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("and");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("and", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(28, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      assertNotNull(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.setDebugStream((PrintStream) null);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }
}
